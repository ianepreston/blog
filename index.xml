<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Ian&#39;s blog</title>
<link>https://blog.ianpreston.ca/</link>
<atom:link href="https://blog.ianpreston.ca/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.553</generator>
<lastBuildDate>Thu, 18 Jan 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Unifi Controller setup in docker (across VLANs)</title>
  <link>https://blog.ianpreston.ca/posts/2024-01-18-unifi.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This post is about how I set up a Unifi network controller for my wireless access points in docker, dealing with VLANs along the way.</p>
</section>
<section id="background" class="level1">
<h1>Background</h1>
<p>I have a couple of Unifi Wireless Access points for Wifi in my house. Configuration of all Unifi network devices is done through a web portal. I think if you have one of their routers it’s hosted on the router itself, but I use pfsense for my router. You can also buy a standalone “cloud key” but they’re like $200 and that seems silly. You can also host the controller service in a docker container. I’ve been doing that for quite a while without issue, but some recent changes in my setup led to me modifying how I do that, and also this post.</p>
<p>Previously, my docker host machine was on the same subnet as my access points and I happily ran the <code>unifi-controller</code> container from <a href="https://www.linuxserver.io/">linuxserver</a> with a bunch of ports exposed and everything worked fine. As part of the <a href="../posts/2023-11-12-xcp-ng.html">virtualization</a> and <a href="../posts/2023-04-09-network-rework.html">network segmentation</a> adventure I’ve been on I’ve been rebuilding my container host in a VM, and I’ve moved that VM to a different VLAN than my Access points. This has surfaced some issues.</p>
</section>
<section id="first-issue---outdated-containers" class="level1">
<h1>First issue - outdated containers</h1>
<p>As part of my migration I took a look to see if there were any updates to my controller container. This turns out to have been timely, as it had been <a href="https://info.linuxserver.io/issues/2023-09-06-unifi-controller/">deprecated</a> not too long before I took this project up. The good news is there’s a new <a href="https://github.com/linuxserver/docker-unifi-network-application">unifi-network-application</a> container. The bad news is it’s a real pain to set up, at least for me.</p>
<p>As per the docs I performed a backup from my old <code>unifi-controller</code> and shut it down. That part went fine. When it came to standing up the new container I had a nightmare of a time getting the mongodb container it needs (which is also pinned to a very outdated version thanks to Unifi) to start up with a proper database and credentials. There are a bunch of open and closed <a href="https://github.com/linuxserver/docker-unifi-network-application/issues">issues</a> with people having varying degrees of success getting things working. For the life of me I couldn’t get it stood up in a fully automated way. I attached the correct init scripts to the container, validated they were visible in it etc, but nothing worked. Eventually I stood up the mongo container, remoted into it and just ran <code>mongo unifi /docker-entrypoint-initdb.d/init-mongo.js</code>, which worked. Why it didn’t correctly pick that up and run it at instantiation like it was supposed to is beyond me. Whatever.</p>
<p>After that I got the network application container up and running easily and restored my config. I even remembered to update the <code>inform host</code> setting to my new IP since otherwise it just gives the docker container’s IP, which is not visible to the rest of the network. But at this point I hit my second issue.</p>
</section>
<section id="second-issue---device-discovery-across-networks" class="level1">
<h1>Second issue - device discovery across networks</h1>
<p>Now for the next issue. My APs are on my infra network, but this VM is on my services network. Apparently device discovery does not work across subnets. I looked this up and there are some ways to address this while keeping things on different networks. I could have ssh’d into each of my APs and hard coded the controller IP. That probably would have worked, and I only have a couple APs so it would have been scalable, but I wanted to find a better way.</p>
<p>My first attempt was to create an <a href="https://docs.docker.com/network/drivers/ipvlan/">IPvlan</a> docker network and attach the container to that. Everything ran, but I couldn’t connect to the container at the address I assigned. I’m pretty sure that’s because the network interface I created for the VM running the container in XCP-NG was set with a VLAN tag so it’s automatically stripping all other VLAN tags and adding in the assigned one.</p>
<p>To address that I modified the machine’s config in terraform to add another network interface that was associated with my infra network. After that I was able to create an IPvlan network (without specifying the VLAN tag at the docker level) associated with that interface and give the container an IP. With that working my APs were adopted and I was good to go, happy ending!</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I had a bit of a hassle getting my Unifi access points to talk to my reinstalled Unifi controller. I wanted to document what I went through here as either a reference to myself in the future, or to help others.</p>


</section>

 ]]></description>
  <category>linux</category>
  <category>networking</category>
  <category>docker</category>
  <guid>https://blog.ianpreston.ca/posts/2024-01-18-unifi.html</guid>
  <pubDate>Thu, 18 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Setting up internal name resolution in Windows and WSL (probably Linux too)</title>
  <link>https://blog.ianpreston.ca/posts/2023-12-26-dns.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Previously whenever I wanted to connect to a machine on my network I would create an entry in <code>~/.ssh/config</code> that looked something like this</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Host</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">HostName</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>.mydomain.ca</span></code></pre></div>
<p>I might include key or default user information as well, but a lot of the time all I really needed was that. There were two reasons for doing that:</p>
<ul>
<li>VS code looks in that file for remote development environments</li>
<li>It saves me typing <code>ssh &lt;host&gt;.mydomain.ca</code> and lets me just type <code>ssh &lt;host&gt;</code></li>
</ul>
<p>The first one this post doesn’t do anything about, but there’s a limited number of machines I need that for. The second doesn’t really seem like a big deal, but I’m lazy. In fact, I’m so lazy that I got annoyed with having to add a record in that file for every host I wanted to connect to, so I looked up how to configure DNS on my workstation to default to my domain if I didn’t put in a FQDN. That’s what this post is about. Read on to find out how.</p>
</section>
<section id="on-windows" class="level1">
<h1>On Windows</h1>
<p>This is basically cribbed straight from chatGPT:</p>
<p>To configure your Windows machine so that it can automatically resolve hostnames with a specific domain (like appending <code>mydomain.com</code> to <code>machine1</code> to form <code>machine1.mydomain.com</code>), you need to set up DNS suffix appending. Here’s how to do it:</p>
<ul>
<li>Open Network Connections Settings:
<ul>
<li>Right-click the network icon in the system tray and select “Open Network &amp; Internet settings”.</li>
<li>In the settings window, click on “Change adapter options”.</li>
</ul></li>
<li>Modify Properties of Your Network Adapter:
<ul>
<li>Right-click on the network adapter you are using (it could be Ethernet or Wi-Fi) and select “Properties”. If prompted, provide administrator credentials or confirmation.</li>
</ul></li>
<li>Edit TCP/IP Settings:
<ul>
<li>In the list of items used by the connection, select “Internet Protocol Version 4 (TCP/IPv4)” or “Internet Protocol Version 6 (TCP/IPv6)” depending on your network configuration.</li>
<li>Then click “Properties”.</li>
<li>In the next window, click on the “Advanced” button.</li>
</ul></li>
<li>Set the DNS Suffix:
<ul>
<li>In the Advanced TCP/IP settings window, go to the “DNS” tab.</li>
<li>Check the option “Append these DNS suffixes (in order):”.</li>
<li>Click “Add” and enter your domain name (e.g., mydomain.com).</li>
<li>Click “Add” after typing each domain. You can add multiple domains if necessary.</li>
</ul></li>
<li>Save Your Changes:
<ul>
<li>Click “OK” on all open windows to save your changes.</li>
</ul></li>
<li>Test the Configuration:
<ul>
<li>Open Command Prompt or PowerShell.</li>
<li>Try to ping or connect to a device using only its hostname (e.g., ping machine1).</li>
<li>If everything is configured correctly, Windows will automatically append the DNS suffix and resolve <code>machine1</code> to <code>machine1.mydomain.com</code>.</li>
</ul></li>
<li>Note for Dynamic DNS Environments:
<ul>
<li>If you’re in a dynamic DNS environment, like a corporate network using Active Directory, these settings might be managed by your network administrator via DHCP or Group Policy.</li>
</ul></li>
</ul>
<p>Remember, these settings apply to the network adapter you configure. If you switch between different networks (e.g., from Wi-Fi to Ethernet), you may need to configure each adapter separately.</p>
</section>
<section id="wsl" class="level1">
<h1>WSL</h1>
<p>In theory this part should just work if Windows is configured correctly, but after some reboots and fiddling I couldn’t get it to go. So I did a manual override. There’s two parts to this</p>
<ul>
<li><p>Set <code>/etc/wsl.conf</code> to not auto-generate <code>/etc/resolv.conf</code></p>
<ul>
<li>Put an entry in your <code>/etc/wsl.conf</code> that looks like the following:</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[network]</span></span>
<span id="cb2-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">generateResolvConf</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>false</span></code></pre></div>
<ul>
<li>Restart wsl (or just your whole computer) with <code>wsl --restart</code> from powershell</li>
</ul></li>
<li><p>Update <code>/etc/resolv.conf</code> to look something like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nameserver</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>your DNS IP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">search</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>your.domain<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div></li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This is a small little quality of life hack. It doesn’t save a ton of time, but it also doesn’t take a ton of time to do, and at least for me while I’ve been experimenting with spinning up and tearing down a bunch of VMs it’s been worth the few minutes it took to figure out and set up.</p>


</section>

 ]]></description>
  <category>linux</category>
  <category>WSL</category>
  <category>DNS</category>
  <guid>https://blog.ianpreston.ca/posts/2023-12-26-dns.html</guid>
  <pubDate>Tue, 26 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Deploying and configuring machines in Xen-Orchestra</title>
  <link>https://blog.ianpreston.ca/posts/2023-12-19-xcp-deployment.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Having successfully <a href="../posts/2023-12-11-xcp-templates.html">built some template images</a> it’s time to provision and configure some machines using terraform and ansible. Honestly using terraform is way overkill for the number of machines I’m actually planning to deploy, but it’s a nice way to document what I’m doing, and I’m expecting it to be relatively straightforward to get going.</p>
</section>
<section id="set-up-terraform" class="level1">
<h1>Set up terraform</h1>
<p>Locally I configure the code to run in my IaC devcontainer, which has terraform, ansible etc. preinstalled. For state management in terraform I’m going to try terraform cloud. I’ve only used local and ADLS storage backends before, but for personal use the cloud backend is free. I’ll be doing local execution of course since terraform cloud runners don’t have access to my homelab.</p>
<p>I set up a new <code>homelab</code> project in my account and then go to create a workspace. I go with CLI-Driven workflow since I won’t be doing any automated triggers of this provisioning. I’m just going to name the workspace <code>homelab</code> as well. Even though I will have dev and prod images they’re not going to match closely enough to have actual separate workspaces make sense (I don’t think, again, just using terraform for the handful of VMs I’m making seems excessive). After updating my organization default the workspace is set for local execution, which is what I want.</p>
<p>Next I create a <code>backend.tf</code> file to store the workspace information. The workspace shows a sample block for terraform when I create it so I just add that. In the same block I add the required providers info for the <a href="https://registry.terraform.io/providers/terra-farm/xenorchestra/latest">XO provider</a>.</p>
<p>After that I login with <code>terraform login</code>, I’m not sure if my devcontainer is going to persist the token I added so I may have to mess with this later, but let’s leave it for now.</p>
<p>Next I run <code>terraform init</code>, which creates a local statefile, but it only points to my cloud backend, at least for now, so maybe that’s fine. It’s in <code>.terraform</code> and I’ve got that in <code>.gitignore</code> anyway. (Update, it only ever contained backend info)</p>
<p>After that I need to set up the provider to connect to my specific XO instance. From the provider docs I can set environment variables for the host, username, and password. I’ll use my usual pattern to retrieve those from bitwarden and put them in a script that I can <code>eval $(cat &lt;secrets&gt;)</code> in other scripts. This keeps them out of my repo but means I don’t have to retrieve them every time. I then make a very sparse <code>provider.tf</code> file since I only have one provider and basically everything is set in environment variables. The only thing I have to specify is to not use SSL. At some point I will get around to generating proper certs for all this stuff, but that is not today. The exact way I got the environment vars set was from following <a href="https://xen-orchestra.com/blog/virtops1-xen-orchestra-terraform-provider/">this blog</a>. The way I was doing it before wasn’t making the variables show up for terraform even though I could see them in my shell. I really don’t get environment variable scoping in bash.</p>
<p>As a first step let’s just try getting some data resources. I’ll need those anyway to create VMs, and it’s a nice way to make sure my setup is working. I create a <code>dev-data.tf</code> file and add info for my pools. After that running terraform plan shows no changes, which means that it’s at least connected and read the resources. Great!</p>
</section>
<section id="deploy-a-vm" class="level1">
<h1>Deploy a VM</h1>
<p>There’s a couple things I might eventually add to this, like configuring virtual networks, but let’s not get ahead of ourselves and try just deploying a VM.</p>
<p>Setting up the data blocks felt a little repetitive. I have to create SRs and Network objects for each pool, but that’s on me for managing each host as its own pool. In the end with a little hacking it wasn’t that hard to do. I’ll show the examples of the components I created and describe them a bit below:</p>
<pre class="hcl"><code>data "xenorchestra_pool" "dhpp3" {
  name_label = "d-hpp-3"
}</code></pre>
<p>This is the pool I’m deploying to, it’s a 1:1 mapping between pools and hosts for me, but the VM cares about the pool it’s being deployed to so this is what I need to bring in.</p>
<pre class="hcl"><code>data "xenorchestra_sr" "dhpp3" {
  name_label = "Local storage"
  pool_id    = data.xenorchestra_pool.dhpp3.id
}

data "xenorchestra_network" "dhpp3" {
  name_label = "Pool-wide network associated with eth0"
  pool_id    = data.xenorchestra_pool.dhpp3.id
}

data "xenorchestra_template" "arch-dhpp3" {
  name_label = "archbase_template"
  pool_id    = data.xenorchestra_pool.dhpp3.id
}</code></pre>
<p>Each host has local storage, which is where I want VMs deployed. Terraform needs the local storage for each host to be uniquely identified (it can’t infer it from which pool I’m deploying to) so I need to pass in the pool id and create one for each pool. The same goes for my network and template configs.</p>
<pre class="hcl"><code>resource "xenorchestra_cloud_config" "d-mars" {
  name = "d-mars-cloudconfig"
  # Template the cloudinit if needed
  template = templatefile("arch-cloud.tftpl", {
    hostname = "d-mars"
  })
}</code></pre>
<p>I can’t use the XO templating in my terraform cloud configs, so I have to create a new one for each VM if I want to dynamically assign the hostname. The template file I reference looks basically like the cloud config I created for manual template deployment, just with terraform variable substitution instead:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#cloud-config</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hostname</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${hostname}</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runcmd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sudo /bin/bash /etc/ssh/sign_host.sh"</span></span></code></pre></div>
<pre class="hcl"><code>resource "xenorchestra_vm" "d-mars" {
  memory_max       = 4294967296
  cpus             = 2
  cloud_config     = xenorchestra_cloud_config.d-mars.template
  name_label       = "d-mars"
  name_description = "Dev VM for Docker host machine"
  template         = data.xenorchestra_template.arch-dhpp3.id
  exp_nested_hvm   = false
  auto_poweron     = true
  wait_for_ip      = true


  # Prefer to run the VM on the primary pool instance
  affinity_host = data.xenorchestra_pool.dhpp3.master
  network {
    network_id = data.xenorchestra_network.dhpp3.id
  }

  disk {
    sr_id      = data.xenorchestra_sr.dhpp3.id
    name_label = "d-mars"
    size       = 21474836480
  }

  tags = [
    "dev",
    "arch",
  ]
}</code></pre>
<p>Finally I can create the actual VM. Most of the hard work is done in the data blocks above. Specifying disk and RAM in bytes is a bit of apain, but otherwise it’s quite straightforward. The deploy was actually pretty quick. I definitely remember this step hanging forever when I was messing around with it in proxmox, but this machine got up and running about as fast as if I’d manually provisioned it, so that was great.</p>
</section>
<section id="set-up-ansible" class="level1">
<h1>Set up ansible</h1>
<p>Now that I’ve deployed a VM I need to configure it.</p>
<section id="dynamic-inventory" class="level2">
<h2 class="anchored" data-anchor-id="dynamic-inventory">Dynamic inventory</h2>
<p>I could just hard code in inventory entries for the VMs I create, but where’s the fun in that? There’s a <a href="https://docs.ansible.com/ansible/latest/collections/community/general/xen_orchestra_inventory.html">xen-orchestra-inventory</a> plugin that looks like what I want.</p>
<section id="run-into-issues" class="level3">
<h3 class="anchored" data-anchor-id="run-into-issues">Run into issues</h3>
<p>I create a dynamic inventory file similar to what’s shown in the docs and <a href="https://xen-orchestra.com/blog/virtops3-ansible-with-xen-orchestra/">this blog</a> from xen-orchestra. I get an error about failing to parse it though when I run <code>ansible-inventory -i inventory.xen_orchestra.yml --list</code>. Running again with the <code>-vvv</code> flag for max verbosity I get a slightly more descriptive error about <code>declined parsing /workspaces/homelab/ansible/inventory.xen_orchestra.yml as it did not pass its verify_file() method</code></p>
<p>Reading a little more carefully the issue is actually this part:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[WARNING]:</span>  <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> Failed to parse /workspaces/homelab/ansible/inventory.xen_orchestra.yml with auto plugin: This plugin requires websocket-client 1.0.0 or higher:</span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">https://github.com/websocket-client/websocket-client.</span></span></code></pre></div>
<p>I think maybe this is why the ansible docs recommend installing it with pip. Maybe I’ll rework my devcontainer later. For now I’ll try the following:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt update</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install python3-pip</span>
<span id="cb7-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip3</span> install websocket-client</span></code></pre></div>
<p>Ok, that fixed it. I’ll clean up my devcontainer later to address this.</p>
</section>
<section id="hide-sensitive-info" class="level3">
<h3 class="anchored" data-anchor-id="hide-sensitive-info">Hide sensitive info</h3>
<p>During initial testing while I was figuring out the inventory plugin I just hard coded my username and password into the inventory spec. That clearly won’t cut it long term. I tried creating an ansible-vault encrypted variable with my username and password, setting the plugin variables to pull from there, and then running the inventory command with <code>--extra-vars variables/secrets.yml</code>, but it didn’t like that. Fortunately the plugin will accept environment variables, so I did the same basic approach as I did with terraform to pull the info from Bitwarden, put it in a gitignored shell file, and then export those variables before calling ansible.</p>
</section>
</section>
<section id="ping-hosts" class="level2">
<h2 class="anchored" data-anchor-id="ping-hosts">Ping hosts</h2>
<p>The dynamic inventory also picks up my actual xcp-ng hosts, which I don’t really want to interact with via ansible. I’d like to figure out how to just connect with the VMs I actually care about, so let’s try a few things with a basic playbook that just uses the <code>ping</code> module to establish connectivity. I can add some groups to my inventory selecting based on tags. I can’t figure out how to do it based on hostname for specific stuff though, so I’m going back to terraform to update and just add an actual hostname tag to the machine I provisioned. This also happens to be a nice way to make sure I can modify a VM non-destructively with terraform.</p>
<p>With that set up I make a basic playbook with one ping task for the group that I identified (which only has one member) above. It works!</p>
</section>
<section id="summarize-the-ansible-setup" class="level2">
<h2 class="anchored" data-anchor-id="summarize-the-ansible-setup">Summarize the ansible setup</h2>
<p>Doing actual configuration stuff is out of scope for what I want to cover in this post, so let’s wrap up with the pieces I put together to get this working</p>
<p>I make sure the collection that contains the XO inventory plugin I need is installed by making a file in <code>./collections/requirements.yml</code>:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collections</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> community.general</span></span></code></pre></div>
<p>I can update that later with additional plugins for specific provisioning tasks.</p>
<p>I call it at the top of deployment scripts to be safe with <code>ansible-galaxy collection install -r ./collections/requirements.yml</code> although that should only have to be done once.</p>
<p>The credentials to XO is the same as I documented in terraform so I’ll leave that out.</p>
<p>I have a few pieces in <code>ansible.cfg</code> to set up the environment:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[defaults]</span></span>
<span id="cb9-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">remote_user </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ipreston</span></span>
<span id="cb9-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">interpreter_python </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> /usr/bin/python3</span></span></code></pre></div>
<p>The last line isn’t strictly necessary but it silences a warning I get otherwise.</p>
<p>The dynamic inventory file looks like this:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plugin</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"community.general.xen_orchestra"</span></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_certs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_ssl</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">groups</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'arch' in tags"</span></span>
<span id="cb10-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'dev' in tags"</span></span>
<span id="cb10-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dmars</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'d-mars' in tags"</span></span></code></pre></div>
<p>Again, gotta set up ssl eventually, but not today.</p>
<p>The actual playbook looks like this:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Playbook for my dev mars box</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Example from an Ansible Playbook</span></span>
<span id="cb11-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hosts</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dmars</span></span>
<span id="cb11-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tasks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb11-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Just ping it</span></span>
<span id="cb11-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.ping</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span></code></pre></div>
<p>Finally, the bash script that ties it all together and is what I actually run to configure the deployed machine is this</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/env bash</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> _requirements.sh</span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> _get_creds.sh</span>
<span id="cb12-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> creds.sh<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ansible-playbook</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> inventory.xen_orchestra.yml d-mars.yml</span></code></pre></div>
</section>
</section>
<section id="look-into-hooking-terraform-and-ansible-together" class="level1">
<h1>Look into hooking terraform and ansible together</h1>
<p>This is definitely overkill but it seems fun to look into, what if I want to have ansible run a playbook on a resource as soon as it’s provisioned by terraform?</p>
<p>There is an <a href="https://registry.terraform.io/providers/ansible/ansible/latest/docs">ansible provider for terraform</a> and a <a href="https://github.com/ansible-collections/cloud.terraform">terraform provider for ansible</a></p>
<p>The ideas seem interesting, but the terraform provider for ansible seems to want to create its inventory from terraform, which conflicts with the XO inventory I just set up, and I don’t really understand how the terraform provider works. I think this is well into overkill territory for now so I’m going to leave it alone.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this post I went over the basics of deploying machines on xen-orchestra using terraform and then configuring those deployed machines with ansible, although not in a 100% end to end integrated fashion.</p>


</section>

 ]]></description>
  <category>linux</category>
  <category>virtualization</category>
  <category>xcp-ng</category>
  <category>terraform</category>
  <category>ansible</category>
  <guid>https://blog.ianpreston.ca/posts/2023-12-19-xcp-deployment.html</guid>
  <pubDate>Tue, 19 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Working Templates in Xen-Orchestra</title>
  <link>https://blog.ianpreston.ca/posts/2023-12-11-xcp-templates.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In my <a href="../posts/2023-11-27-packer.html">last post</a> I spent entirely too long trying to figure out a fancy automated way of building image templates on xcp-ng/xen-orchestra. While I definitely learned a lot, I also spent more time trying to figure out an automation to build templates than I’ll reasonably spend doing it manually for the next few years.</p>
<p>This post is a quick summary of my approach for (manually) building templates for the distros I want to have available in my homelab.</p>
<p>General pro tip: Use the snapshot feature liberally while you’re building your reference images in case you mess up.</p>
</section>
<section id="arch" class="level1">
<h1>Arch</h1>
<p>I’m a big fan of Arch. My main bare metal server runs it, and it’s what I like to run for a personal OS as well, so having a good template for it would definitely be handy.</p>
<p>I basically did this in the last post, but the notes are pretty scattered so this will be a cleaned up version.</p>
<ul>
<li>Create the VM. Base it on the Ubuntu Jammy template, give it 4 cores, 4GB RAM and 10GB disk</li>
<li>Boot into the live environment and set the root password with <code>passwd</code>, check your IP with <code>ip address</code>
<ul>
<li>This is so you can do the rest of the install <a href="https://wiki.archlinux.org/title/Install_Arch_Linux_via_SSH">over ssh</a></li>
</ul></li>
<li>ssh in with <code>ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@ip.address.of.target</code></li>
<li>run <code>archinstall</code>
<ul>
<li>Pick <code>Canada</code>, <code>United States</code> and <code>Worldwide</code> for mirror selection</li>
<li>Leave locales at <code>en_US</code>, we’ll add Canada later and lots of packages seem to need that locale</li>
<li>Use a best effort default partition layout with <code>ext4</code> format</li>
<li>Pick <code>Limine</code> for the bootloader, why not?</li>
<li>Keep the hostname as <code>archlinux</code></li>
<li>Leave root password blank to disable root</li>
<li>Add a user, might as well make it my actual username, one less thing to change and I’m the only one using this template
<ul>
<li>Give them a password and sudo access</li>
</ul></li>
<li>Pick <code>minimal</code> for profile</li>
<li>Don’t add an audio server</li>
<li>Just the <code>linux</code> kernel, no hardened, zen, lts</li>
<li>Install the following additional packages: <code>vim openssh reflector git base-devel nfs-utils</code></li>
<li>Set network configuration “Use NetworkManager”</li>
<li>Update the time zone</li>
<li>Leave NTP on</li>
<li>Install</li>
<li>Don’t <code>chroot</code> in, just reboot</li>
</ul></li>
<li><code>sudo systemctl start sshd.service &amp;&amp; sudo systemctl enable sshd.service</code></li>
<li>ssh back in so you don’t have to use the XO portal anymore.</li>
<li><code>sudo reflector --latest 200 --protocol http,https --sort rate --save /etc/pacman.d/mirrorlist</code> (<a href="https://wiki.archlinux.org/title/Reflector">docs</a>)</li>
<li><code>sudo pacman -R reflector</code> maybe I’ll set it up on a timer but if I do it’ll be with ansible or something</li>
<li>Install yay: <code>git clone https://aur.archlinux.org/yay.git &amp;&amp; cd yay &amp;&amp; makepkg -si</code></li>
<li>Clean up <code>cd .. &amp;&amp; rm -rf yay</code></li>
<li>Install guest agent: <code>yay -S xe-guest-utilities-xcp-ng</code></li>
<li>Enable it <code>sudo systemctl enable xe-linux-distribution.service</code></li>
<li>Setup passwordless sudo <code>sudo EDITOR=vim visudo /etc/sudoers.d/00_ipreston</code>
<ul>
<li>Change the line to <code>ipreston ALL=(ALL:ALL) NOPASSWD: ALL</code></li>
</ul></li>
<li>Install cloud init: <code>yay -S cloud-init cloud-guest-utils</code></li>
<li>Set default user in cloud config, just change the default user line in <code>/etc/cloud/cloud.cfg</code></li>
<li>Add the post install host signing script to <code>/etc/ssh/sign_host.sh</code>. This won’t help anyone else but it’s useful for me</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/env bash</span></span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> /tmp/hostkeys</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mount</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> nfs laconia.ipreston.net:/volume1/keys /tmp/hostkeys</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /tmp/hostkeys/user_ca.pub /etc/ssh/user_ca.pub</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> root /etc/ssh/user_ca.pub</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /etc/ssh/user_ca.pub</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /tmp/hostkeys/host_ca /etc/ssh/host_ca</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> root /etc/ssh/host_ca</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /etc/ssh/host_ca</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /tmp/hostkeys/setup_host.sh /etc/ssh/setup_host.sh</span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">umount</span> /tmp/hostkeys</span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> /etc/ssh/setup_host.sh</span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> /etc/ssh/host_ca</span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> /etc/ssh/setup_host.sh</span></code></pre></div>
<ul>
<li><code>sudo chmod +x /etc/ssh/sign_host.sh</code></li>
<li>Get ready for cloud init:
<ul>
<li><code>sudo systemctl enable cloud-init.service</code></li>
<li><code>sudo systemctl enable cloud-final.service</code></li>
<li><code>sudo cloud-init clean</code></li>
<li><code>sudo poweroff</code></li>
</ul></li>
<li>Make a clone so you can go back to this one after you make the template</li>
<li>Rename the clone to be a template name</li>
<li>Turn it into a template</li>
<li>Make a cloud config:</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#cloud-config</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hostname</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runcmd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sudo /bin/bash /etc/ssh/sign_host.sh</span></span></code></pre></div>
<p>That’s it! Template should work.</p>
</section>
<section id="debian" class="level1">
<h1>Debian</h1>
<ul>
<li>Graphical install</li>
<li>Pick English</li>
<li>Update location</li>
<li>Default keyboard map</li>
<li>Keep hostname <code>debian</code></li>
<li>Set the domain name</li>
<li>Don’t set a root password</li>
<li>Create user name</li>
<li>Set password</li>
<li>Set time zone</li>
<li>Manual, make the whole disk one partition</li>
<li>Tell it not to worry about swap</li>
<li>Don’t scan extra installation media</li>
<li>Pick Canada for a mirror</li>
<li>Pick deb.debian.org</li>
<li>No proxy</li>
<li>participate in package usage or don’t, whatever</li>
<li>Uncheck desktop and GNOME, check SSH server and standard system utilities</li>
<li>Install GRUB</li>
<li>Reboot</li>
<li>Mount the guest utilities ISO</li>
<li><code>mkdir /tmp/xentools</code></li>
<li><code>sudo mount /dev/cdrom /tmp/xentools</code></li>
<li>Run <code>install.sh</code> under the <code>Linux folder</code> as root</li>
<li>Reboot</li>
<li><code>sudo apt install nfs-common</code></li>
<li><code>sudo apt install vim</code></li>
<li><code>sudo EDITOR=vim visudo /etc/sudoers</code>
<ul>
<li>change the <code>%sudo</code> line to have <code>NOPASSWD:ALL</code> at the end instead of just <code>ALL</code></li>
<li>logout and back in to apply</li>
</ul></li>
<li><code>sudo apt install cloud-init cloud-utils</code></li>
<li>Set default user in cloud config, just change the default user line in <code>/etc/cloud/cloud.cfg</code></li>
<li>Add the post install host signing script to <code>/etc/ssh/sign_host.sh</code>. This won’t help anyone else but it’s useful for me</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/env bash</span></span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> /tmp/hostkeys</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mount</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> nfs laconia.ipreston.net:/volume1/keys /tmp/hostkeys</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /tmp/hostkeys/user_ca.pub /etc/ssh/user_ca.pub</span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> root /etc/ssh/user_ca.pub</span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /etc/ssh/user_ca.pub</span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /tmp/hostkeys/host_ca /etc/ssh/host_ca</span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> root /etc/ssh/host_ca</span>
<span id="cb3-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /etc/ssh/host_ca</span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /tmp/hostkeys/setup_host.sh /etc/ssh/setup_host.sh</span>
<span id="cb3-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">umount</span> /tmp/hostkeys</span>
<span id="cb3-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> /etc/ssh/setup_host.sh</span>
<span id="cb3-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> /etc/ssh/host_ca</span>
<span id="cb3-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> /etc/ssh/setup_host.sh</span></code></pre></div>
<ul>
<li><code>sudo chmod +x /etc/ssh/sign_host.sh</code></li>
<li>Get ready for cloud init:
<ul>
<li><code>sudo systemctl enable cloud-init.service</code></li>
<li><code>sudo systemctl enable cloud-final.service</code></li>
<li><code>sudo cloud-init clean</code></li>
<li><code>sudo poweroff</code></li>
</ul></li>
<li>Make a clone so you can go back to this one after you make the template</li>
<li>Rename the clone to be a template name</li>
<li>Turn it into a template</li>
<li>Make a cloud config:</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#cloud-config</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hostname</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fqdn</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.ipreston.net</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">manage_etc_hosts</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runcmd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sudo /bin/bash /etc/ssh/sign_host.sh</span></span></code></pre></div>
<p>Note the extra lines about fqdn and etc_hosts from the arch one.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>That was a lot simpler than doing things with packer. Some of it was helped by what I learned from trying to get packer going, but still. I might update this post later with other templates as I need them, but for now I want to move on to actually provisioning and configuring some VMs.</p>


</section>

 ]]></description>
  <category>linux</category>
  <category>virtualization</category>
  <category>xcp-ng</category>
  <guid>https://blog.ianpreston.ca/posts/2023-12-11-xcp-templates.html</guid>
  <pubDate>Mon, 11 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>(Failing to build) Templates in Xen-Orchestra</title>
  <link>https://blog.ianpreston.ca/posts/2023-11-27-packer.html</link>
  <description><![CDATA[ 





<section id="up-front-warning" class="level1">
<h1>Up front warning</h1>
<p>After an absurd amount of hacking I did not find a good way to automate template creation. You can read this to follow my descent into madness and/or to see if I already tried and failed at the approach you were considering trying. Let this be a warning. I’ll make a subsequent post about how I ended up doing this.</p>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When I was <a href="../posts/2023-01-21-proxmox3.html">learning proxmox</a> earlier this year I considered using <a href="https://www.packer.io/">packer</a>. At the time it seemed like a lot of work, and I found some relatively simple scripts I could run to build templates for the operating systems I was interested in. Now I’m testing out <a href="../posts/2023-11-12-xcp-ng.html">xcp-ng</a> and I need to create template images again. In the future if I find myself wanting to deploy any of those images to another environment and I’ve figured out some xcp-ng specific way of doing things I’ll have to relearn again. At this point it’s starting to make more sense to bite the bullet and figure out packer. Plus, I’ve been writing a fair bit of terraform at work so the hashicorp language makes more sense to me. That should help with the learning curve. This post will document my learn by doing attempts to figure out packer. It’s definitely not a how-to guide, more a reference for myself in the future. That said, it might be helpful to others who are considering learning packer to see what they’re in for.</p>
</section>
<section id="installing-packer" class="level1">
<h1>Installing packer</h1>
<p>My initial instinct is to add packer to my IaC devcontainer. However, as a simple learning exercise I’ll probably be building some docker containers, and I don’t feel like troubleshooting whether the errors I’m getting are from packer or something specific to docker-in-docker. So for now I’ll just install it right into my WSL install of Ubuntu on my workstation.</p>
<p>The docs have a pretty easy install guide so that goes fine, except for the part where it was silently prompting me for my <code>sudo</code> password and I thought it froze.</p>
<p>Beyond that I can run <code>packer -v</code> to make sure it’s loaded and determine that I’m running version <code>1.9.4</code>. Cool, let’s build something</p>
</section>
<section id="getting-sidetracked-by-xoa" class="level1">
<h1>Getting sidetracked by XOA</h1>
<p>I kept reading about how Xen had pre-packaged templates and even a full blown kubernetes deployment available in Xen, but I couldn’t see it in my UI. After some <a href="https://xcp-ng.org/forum/topic/7957/question-about-using-hub-as-a-xo-built-from-sources">reading</a> I realized it wasn’t included in the source built version I was running. I can deploy XOA free edition and get the templates, but I’ll still want the source built version to handle my backups and other stuff that’s not included in free tier. A little hacky, but fair enough since I’m not giving them any money. After signing up for an account I got this cool web based deploy link where I pointed it at a host, put in my password (after accepting self-signed certs) and it auto deployed XOA onto the host.</p>
<p>Taking a look at the templates, my options were fairly limited, and the kubernetes auto deploy seemed interesting, but I don’t think I’m ready for that yet. It’s cool that it exists, and I think if I built a cluster again I’d bootstrap something like this instead of going the docker route I did (unless xcp-lite actually works in which case I won’t need either).</p>
<p>I did want to test restoring my metadata backups, but unfortunately that feature is pro tier so I couldn’t do it. I was able to manually export my config and load it into XOA and have all my hosts show up, so that was nice. For now I’ll shut this VM down and go back to doing things with packer.</p>
</section>
<section id="make-a-template-sr" class="level1">
<h1>Make a template SR</h1>
<p>One of the things I found annoying about proxmox was that even if my machines were clustered I had to create the same template on each machine. I think I can get around this with xcp, let’s find out. In my NFS share for XCP stuff I make a new folder called <code>templates</code>.</p>
<p>I then add that as a NFS SR for images on each node. It’s a little annoying that I have to replicate it, but I still think that’s better than worrying about pools at this point. I’ve been trying to use Chat-GPT to help with this sort of work and I asked if I could export SR configs across pools. It hallucinated that there was an export option, which sure would have been nice. Anyway, it’s only a few hosts and my browser remembers all the configs in the boxes so it only took a few minutes to set up all hosts.</p>
</section>
<section id="ubuntu-template" class="level1">
<h1>Ubuntu template</h1>
<p>The <a href="https://github.com/ddelnano/packer-plugin-xenserver">xenserver packer plugin repo</a> has an example section that builds Ubuntu 20.04. That’s a bit old for my taste at this point, but let’s try and get it working and then adapt to it and other OS installs later.</p>
<p>I initially wrote a script that exported my variables for username and passwords in the form <code>PKR_ENV_&lt;variable&gt;</code> but for whatever reason it didn’t seem to like that and claimed that I hadn’t set those variables. I modified the script to export to json instead and that seemed to work. Sort of, I got a new error after that:</p>
<p><code>The iso_checksum_type must be specified.</code></p>
<p>The ISO checksum seems like it should be coming from a data source that pulls it from a page maintained by Ubuntu with hashes for their ISOs. Everything looks ok, and if I hard code in the release version to the URL I can get to a page that shows hashes.</p>
<p>I’m not sure at this point if something is going wrong with my variable interpolation or I missed some other step. Adding <code>PACKER_LOG=1</code> in front of my build command got me a lot more verbose output, but nothing useful.</p>
<p>Running <code>packer inspect</code> instead of <code>packer build</code> showed me some outputs (ChatGPT hallucinated some other terrible ideas about how to get this stuff, I still have mixed feelings about working with it).</p>
<pre><code>local.ubuntu_sha256: "[\n  \"b8f31413336b9393ad5d8ef0282717b2ab19f007df2e9ed5196c13d8f9153c8b\",\n]"</code></pre>
<p>That output appears basically correct since the variable I’m applying it to looks like this <code>iso_checksum      = "sha256:${local.ubuntu_sha256.0}"</code>.</p>
<p>Ugggh, it’s an error in the examples. There’s now an <code>iso_checksum</code> and an <code>iso_checksum_type</code>. I should have looked more closely at the error message. Ok, modifying the spec to break those two parts up and we’re back in business. On to the next error:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">xenserver-iso.ubuntu-2004:</span> output will be in this color.</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Build</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xenserver-iso.ubuntu-2004'</span> errored after 5 milliseconds 434 microseconds: Post <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://xo.&lt;sensitive&gt;.net"</span>: dial tcp 192.168.10.10:443: connect: connection refused</span></code></pre></div>
<p>Oh, I’m not supposed to point this at my xen-orchestra, it’s supposed to go against an xcp-ng host. This is going to be confusing for a while, I’m pretty sure terraform goes against xo. I guess I’ll find out.</p>
<p>This time we get building, but it hangs on <code>Step: Wait for VM's IP to become known to us.</code> Bringing up the console on the machine in XO it’s hung on a prompt for autoinstall that’s expecting user input.</p>
<p>I tried running it again so I could see the console output and this time (after at least half an hour) it seemed to work.</p>
<p>Upon closer inspection it only shows up in one of my pools (we’ll try booting later) and I have a bunch of stuff in the root of my xcp-ng storage location on my NAS, whereas the templates were all supposed to be in a subfolder. Did I mess up my storage location? Hmmm, looks like I did, or it didn’t like my subfolder. Let’s delete this template and try again. Ahhh, yeah after you put in the subfolder when defining a SR path you have to hit the little search icon beside it or it doesn’t actually add the path. Probably there as a validation step but it sure tripped me up. I’ll make it on the local and one other host, I would still like them to share. Ahhh, ok. Each pool is making a UID subfolder, so they won’t be sharing templates unless I pool them. I can probably at least create them in one pool and then replicate them to my others. For how often I will want to create or update templates I probably don’t need to overengineer this. I could even use one host to build all my initial images and then migrate them, but that seems like a pain.</p>
<section id="get-stuck-on-templates" class="level2">
<h2 class="anchored" data-anchor-id="get-stuck-on-templates">Get stuck on templates</h2>
<p>There were a bunch of empty templates along with the provisioned machine I created that I didn’t think I needed, so I deleted them. Now when I try and install Ubuntu with packer it fails. Which is weird, I didn’t realize I was using them. So I either have to figure out how to get them back, or how to have packer build without them. I can always restore a backup of my config, I’ve been meaning to do that anyway, but let’s see if I can restore them some other way first. Allegedly there’s a way to export/import them, but I can’t see anything.</p>
</section>
<section id="get-stuck-on-metadata-restore-while-getting-stuck-on-templates" class="level2">
<h2 class="anchored" data-anchor-id="get-stuck-on-metadata-restore-while-getting-stuck-on-templates">Get stuck on metadata restore while getting stuck on templates</h2>
<p>Trying a restore…. I can’t seem to restore. This is why you test these things I guess. What’s going on here? Maybe it’s something about the pool metadata? I think I should have broken those into two tasks, since it’s asking me to do a pool restore at the same time. Nope that’s not it. Looking at the error it’s trying to find the backup in the wrong path. If I follow the mount point on my XO server I can see the backup file, but it’s trying to load it from a weird subdirectory.</p>
<p>The error is</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ENOENT:</span> no such file or directory, open <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/run/xo-server/mounts/3f885501-70f9-4219-8707-2a6515b0814e/opt/xo/xo-builds/xen-orchestra-202312021218/packages/xo-server/xo-config-backups/9a515773-8912-4677-9e37-9e187341ecb9/20231129T070000Z/data.json</span></span></code></pre></div>
<p>And the actual path is</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/run/xo-server/mounts/3f885501-70f9-4219-8707-2a6515b0814e/xo-config-backups/9a515773-8912-4677-9e37-9e187341ecb9/20231129T070000Z/data.json</span></span></code></pre></div>
<p>I’m not sure why it added all that other stuff in.</p>
<p>Just for kicks let’s head over to my XOA install. Backups are a premium feature so I turn on my trial version. The restore runs fine from there, so it is some issue with the source build. Now what do I want to do with this information? I mean, VM backup and restore worked. It’s not great that this doesn’t, but is it the end of the world? I did that manual backup restore to XOA and it worked ok. I wonder if I can reverse that to get this back in shape? If that works I’ll just have to remind myself to do manual xen-orchestra backups before I start messing with things. Or rely on actual VM backups instead.</p>
</section>
<section id="back-to-templates" class="level2">
<h2 class="anchored" data-anchor-id="back-to-templates">Back to templates</h2>
<p>Having fired up xen in the XOA appliance and the original docker container I was using I can no longer see templates on my hosts when I create a new VM anywhere. So that’s clearly not a xen-orchestra thing, but an xcp-ng thing. Still figuring all that out. That at least helps me figure out where to go for docs and possible solutions.</p>
<p>From reading it seems like I might just have to reinstall. I do want to test a reinstall eventually, but not right now.</p>
</section>
</section>
<section id="maybe-just-do-cloud-images" class="level1">
<h1>Maybe just do cloud images</h1>
<p>I’m starting to feel like packer is just not the tool for me. On proxmox I just used cloud images as a template and then applied some settings in the cloud-init config. XCP-ng has good support for cloud init (allegedly) and it looks like I can save template configs for it at the XO level, so that would be reproducible across hosts. Let’s give it a try. <a href="https://sysmansquad.com/2021/07/07/creating-an-ubuntu-20-04-cloud-template-cloud-init-configuration-in-xen-orchestra/">This blog</a> seems like a fairly straightforward example of what I want to do. Let’s give it a try.</p>
<p>Ok that worked great. I modified the cloud-init slightly and it installed the guest management utilities and everything. I think by just making a couple custom cloud-init configs I can have an easily built template system.</p>
</section>
<section id="try-doing-a-shared-sr-for-templates" class="level1">
<h1>Try doing a shared SR for templates</h1>
<p>When messing around with recreating SRs for the templates it kind of looked like I had the option to attach newly created SRs on hosts to the same path as existing ones I’d created. <a href="https://xcp-ng.org/forum/topic/5336/copy-template-between-hosts">This forum post</a> also makes it sound like I should be able to do that. Let’s give it a try.</p>
<p>To start I delete the old template SRs I created (after deleting the template I made) and clear them out from my NAS.</p>
<p>Next I create one on a single pool using the same config as before. Then I do the same on a second host. When I hit the search button on that folder the “storage usage” section fills in with an ID for the last one I created. I click the “Reattach SR” button, and get an error that it exists. So it doesn’t look like they can share. That’s ok. I can still create templates once and then copy them to any machines I want to provision them to. Not perfect but not terrible either.</p>
</section>
<section id="arch-template-failed-attempt" class="level1">
<h1>Arch template (failed attempt)</h1>
<p>The Ubuntu template was easy enough, and it’s handy to have an Ubuntu template available, but I generally prefer running Arch these days, so let’s build for that to start.</p>
<p>It doesn’t look like there is an OVA cloud image for Arch. There is a way to <a href="https://xcp-ng.org/docs/migratetoxcpng.html#from-kvm-libvirt">convert KVM</a> but it feels like it might be more work than just making my own template.</p>
<p>As I’m doing this I’m realizing something is messed up about my ISO SRs. They should all be pointing to my NAS, which has a debian and an Ubuntu image on it. But on two hosts I see only ubuntu and some packer stuff, on another there’s an Arch ISO. None of which match up with what’s actually happening on my NAS. Ahhh, again, I didn’t actually add the path properly so there’s some overlap going on. That’s sorted now and I can actually see just the ISOs I was expecting. Apparently sharing ISOs across SRs is ok.</p>
<p>I can’t seem to create a VM though, probably because I borked my templates. I can’t seem to add a network or a disk when I go to create a VM. Something in the template setting must handle that in a way I can’t see. I think it’s reinstall time.</p>
</section>
<section id="reinstall" class="level1">
<h1>Reinstall</h1>
<p>Let’s start with a host that’s not running XO. Not that I couldn’t get that back, but I’d rather not have to. The reinstall process is pretty straightforward. I didn’t have to re-enter any of my config, and the host came back up in its same pool, with all its SRs attached. I did need to apply patches again, but that’s to be expected. Once it came back up I could see all the default templates that came with the VM, and creating a new VM seemed to work better, I could see the network options and pick storage.</p>
<section id="migrate-templates" class="level2">
<h2 class="anchored" data-anchor-id="migrate-templates">Migrate templates</h2>
<p>Before I go further, let’s see if I can now migrate all these templates to my other hosts rather than reinstall. That didn’t seem to work, every copy got a <code>no opaque ref found</code> error. I think there must be something fancy about those.</p>
</section>
<section id="keep-reinstalling" class="level2">
<h2 class="anchored" data-anchor-id="keep-reinstalling">Keep reinstalling</h2>
<p>I was going to want to test this anyway, let’s do it now. I’ll bring down another node, this one with my XOA VM on it and to a reinstall there. Install went fine, the VM was still there and booted ok when it came back up. Nice! Ok, in theory I can bring down my last node running XO, reinstall, and power it back on without any migration. let’s test.</p>
<p>Came back up fine. That’s pretty nice.</p>
</section>
</section>
<section id="back-to-arch-installing" class="level1">
<h1>Back to arch installing</h1>
<p>Ok, now that templates are working again and I have my ISO SR sorted, let’s build an arch template. <a href="https://www.driftinginrecursion.com/post/arch_linux_guests_in_xcp-ng/">This blog</a> suggests it won’t be that hard, do a basic Arch install, install yay and xen guest utils. I’ll probably add cloud-init stuff too.</p>
<p>The basic install went ok, but package downloading was super slow. I’m not sure if that’s a driver issue or something with my mirrors. I’ll have to do some more testing before I make a template of it.</p>
<p>As a start let’s try installing and running <a href="https://wiki.archlinux.org/title/Reflector">reflector</a>. It’s probably a good practice to have that anyway. While I’m at it I’ll install <code>ssh</code> and <code>iperf3</code>. Being able to ssh in is definitely handy since it lets me paste commands. I still can’t seem to paste into the command console from xen-orchestra. Maybe I’ll look into that while reflector is running.</p>
</section>
<section id="get-distracted-trying-to-figure-out-how-to-paste-into-xen-orchestra-console" class="level1">
<h1>Get distracted trying to figure out how to paste into xen-orchestra console</h1>
<p><a href="https://xcp-ng.org/forum/topic/7848/copy-paste-not-working-from-xen-orchestra-community-edition-or-xcp-ng-center">Well this is discouraging</a></p>
<p>I did notice that there’s a little box above the console for copying, but it’s barely responsive when I type and doesn’t seem to let me paste. I guess the real solution is to set up SSH or a proper remote desktop ASAP.</p>
</section>
<section id="back-to-arch-installing-1" class="level1">
<h1>Back to arch installing</h1>
<section id="fix-slow-package-downloads" class="level2">
<h2 class="anchored" data-anchor-id="fix-slow-package-downloads">Fix slow package downloads</h2>
<p>So prior to running reflector I decided to try <code>iperf3</code>. Fortunately I’m pulling a solid gigabit between two machines on my network, so it’s not a weird driver thing, I probably just picked terrible mirrors in the installer. Let’s do reflector. Ok, after running reflector my package downloads are way faster. Might as well start and enable the systemd timer for it as well, I’d like that to happen somewhat regularly on all my installs.</p>
</section>
<section id="install-yay" class="level2">
<h2 class="anchored" data-anchor-id="install-yay">Install yay</h2>
<p><code>xen-guest-utilities</code> aren’t in the base package manager, but they are in the AUR. So to get them I’ll need an AUR helper. I’ve generally been happy with <a href="https://github.com/Jguer/yay">yay</a> and it’s still actively developed so why switch? I grabbed the pre-built binary from the releases section so I didn’t have to install a bunch of build tools onto my base template.</p>
</section>
<section id="install-guest-utilities" class="level2">
<h2 class="anchored" data-anchor-id="install-guest-utilities">Install guest utilities</h2>
<p>Looks like the package I want is called <code>xe-guest-utilities-xcp-ng</code>. Sounds right. I chose to remove the make dependencies after installation, since I’m trying to keep this install light. The install completed ok but XO didn’t detect it as having a management agent. When in doubt reboot. Nope. Ahh, here we go, in the notes from the AUR package someone is talking about an issue that’s preventing the <code>xe-linux-distribution.service</code> from starting. Once I start that service the management agent is detected and my IP shows up. Enable the service so it persists across reboots (realized I forgot to do that with ssh when I couldn’t get back in after a reboot.)</p>
</section>
<section id="install-cloud-init" class="level2">
<h2 class="anchored" data-anchor-id="install-cloud-init">Install cloud-init</h2>
<p>I think this is the last thing I want to install on this template. There are a few other things I basically always use, but to start at least I want this template to have just the absolute minimum of a VM so that I can customize it later. I’m even removing <code>iperf3</code>. I guess reflector is a bit of a cheat in that regard, but given how awful the mirrors I picked were maybe that’s ok. I install <code>cloud-init</code> and <code>cloud-guest-utils</code>. According to the <a href="https://wiki.archlinux.org/title/Cloud-init">wiki</a> I need the latter if I want my disk to resize, which I certainly do. Ok, both are installed. I think we’re ready to turn this into a template.</p>
</section>
<section id="make-a-template" class="level2">
<h2 class="anchored" data-anchor-id="make-a-template">Make a template</h2>
<p>Based on <a href="https://sysmansquad.com/2021/07/07/creating-an-ubuntu-20-04-cloud-template-cloud-init-configuration-in-xen-orchestra/">this post</a> I think all I have to do is run <code>cloud-init clean</code> and shutdown the VM before I turn it into a template. I wasn’t sure if I had to do that command as root or not, it didn’t fail on either so I ran both to be safe and then shut down. Back in XO I head over to the advanced tab for my VM and click “convert to template”. That appears to be done.</p>
</section>
<section id="try-building-from-the-template" class="level2">
<h2 class="anchored" data-anchor-id="try-building-from-the-template">Try building from the template</h2>
<p>If/when this works I’ll have to mess around with saving cloud init configs, but for now let’s just hack one together quickly. I go to create a new VM on the host that has my template (I’ll copy it to the others later if I’m happy with it). I pick the template from the list, give the VM the very creative name <code>archtest1</code>.</p>
<p>Here’s the dump of the user cloud config I tried. I left the network one alone:</p>
<pre><code>#cloud-config
hostname: {name}%
ssh_authorized_keys:
  - &lt;My public key spec&gt;
packages:
  - vim
users:
   - default
system_info:
   default_user:
     name: ipreston
     lock_passwd: true
     gecos: arch Cloud User
     groups: [wheel, adm]
     sudo: ["ALL=(ALL) NOPASSWD:ALL"]
     shell: /bin/bash</code></pre>
<p>I had to be careful to create the SR on the local disk for the host instead of my templates SR, which runs on my NAS, I’m sure that wouldn’t have been amazing for performance. I gave it a 20G disk so I could see if the expansion worked properly out of the box.</p>
<p>With that it was time to hit create and see how things went.</p>
<p>Well it started, so that’s great. But my password still worked, which it shouldn’t, and it pulled the exact same IP as the template, which suggests the MAC address hadn’t changed. That will be problematic in the future. Taking a closer look, my ssh key hasn’t been added, vim hasn’t been installed, and my partition hasn’t been expanded. I can see 20G of available space, but I’ve only still got the 10 allocated. No bueno.</p>
</section>
<section id="figure-out-why-the-template-didnt-really-template" class="level2">
<h2 class="anchored" data-anchor-id="figure-out-why-the-template-didnt-really-template">Figure out why the template didn’t really template</h2>
<p>At this point I’m getting dangerously close to going back to packer. Ok, re-reading the <a href="https://wiki.archlinux.org/title/Cloud-init">Arch wiki</a> maybe I was supposed to enable some of those services before shutting down? I can’t find any examples specific to Arch online but <a href="https://xen-orchestra.com/blog/centos-cloud-template-for-xenserver/">this blog</a> doesn’t show anything like that for CentOS. From a bit more careful reading of the Arch wiki it does look like I want <code>cloud-init.service</code> and <code>cloud-final.service</code> enabled. Let’s give that a shot.</p>
<p>I create a new VM from my “template” so I at least don’t have to redo all that work. I enable those services above, run <code>cloud-init clean</code> as my user and root again to be safe and poweroff. Back to the advanced tab on the management interface to create a template.</p>
<p>Ok, new VM based off this updated template. The create button spins for a while after I hit it. That’s either good because cloud-init is doing things upon creation like installing vim, or bad because something is screwed up and stuck in a boot loop. Let’s wait and find out.</p>
<p>Ok, it pulled the same IP address, but I also can’t login with my password, so maybe something happened? Let’s try to ssh in with my key. Oooh, I get a big warning that the remote host key has changed, that’s actually good! It might mean that other stuff is different. Let’s remove that old key and try again. Well I definitely can’t connect via password, but it’s also rejecting my key, so maybe something went wrong with my cloud config? Kind of hard to test if I can’t actually get into the host though. Weirdly this feels like progress. I’ll stop and remove this machine and try creating another one with the easier way of passing just my key in, maybe it was just something dumb about how I did the cloud config file. I’ll have to sort that out eventually, but one thing at a time.</p>
<p>While I’m messing around, let’s make a note of what MAC this machine is given for future attempts to compare against: <code>a6:81:06:16:c3:b5</code>.</p>
<p>Ok, still can’t get in with the key I added, so something else is wrong here.</p>
<p>Let’s create a new VM from the first template, I can’t make anything from the one I just tried since I can’t boot back into it. For reference it gets a MAC of <code>06:31:62:32:8b:59</code></p>
<p>From here I want to take a look at <code>/etc/cloud/cloud.cfg</code> to see if there’s stuff I should be adding to make it pick up my data sources or whatever else I want it to do.</p>
<p>Ok, looking in this file there’s no <a href="https://wiki.archlinux.org/title/Cloud-init#Configuring_data_sources">datasource_list</a> entry. Per the <a href="https://xen-orchestra.com/docs/advanced.html#requirements">XO docs</a> I need the <code>opencloud</code> type to send in my config. Let’s try adding an etry with that.</p>
<pre><code>datasource_list: [ NoCloud, ConfigDrive, OpenNebula, Azure, AltCloud, OVF, MAAS, GCE, OpenStack, CloudSigma, Ec2, CloudStack, None ]</code></pre>
<p>Ok, with that added I think I can enable those two services, run clean and shut down again. Back in the menu convert it to a template, and try to spin up a machine from it. Again I just give it my key for now and set the disk to 20G so we can make sure that works (assuming I can actually get in this time).</p>
<p>First good sign, this one has a new MAC (<code>5a:62:06:7d:c2:e3</code>) and the guest tools seem to be working. I think because I didn’t set a default name here the user should be <code>arch</code>, let’s try and ssh in with that. I’m in! My disk is the full 20G too, so that worked as well! Awesome!</p>
</section>
</section>
<section id="more-fun-with-templates" class="level1">
<h1>More fun with templates</h1>
<p>At this point I am tempted to skip ahead to doing terraform deploys and triggering ansible upon deployment and other fun stuff like that. Before I get too crazy though, let’s clean up and do a bit more testing of what I’ve done. After that I think it might be worth going back to packer and trying again. What I did for arch was pretty manual, and even though I should really only have to have done it that one time, I’d like to have it in code just to be safe, and to possibly extend it.</p>
<section id="cleanup" class="level2">
<h2 class="anchored" data-anchor-id="cleanup">Cleanup</h2>
<p>It’s important to tidy up after yourself before moving on to the next thing:</p>
<ul>
<li>Stop and delete the test VM created from the template.</li>
<li>Delete the broken Arch templates (the one that didn’t have cloud-init enabled and the one it was broken on)</li>
<li>Rename <code>archtemplate2</code> to something more appropriate.</li>
</ul>
</section>
<section id="try-on-different-hosts" class="level2">
<h2 class="anchored" data-anchor-id="try-on-different-hosts">Try on different hosts</h2>
<p>I could just create all my VMs on one host and then migrate them to their destination, but why? Let’s copy that template to another host and try provisioning there. The copy isn’t super fast, but it’s almost certainly faster than re-building the template a second time, even if I had automation around that.</p>
<p>While I’m at this, let’s try creating it with the cloud config I wrote up above this time. If I’ve got that right I should ssh as my usual username instead of <code>arch</code>, and I updated it slightly to install iperf3, since I added <code>vim</code> to the base image to edit the cloud config. There’s basically no machine I wouldn’t want vim on so I’m ok with that.</p>
<p>Ok, that didn’t work. Let’s try again with just the ssh key and I’ll figure out my cloud config later.</p>
<p>Doing it with just my basic ssh key passthrough worked fine. So there’s something weird about what I’m doing with my cloud config.</p>
</section>
<section id="figure-out-actual-cloud-init-config" class="level2">
<h2 class="anchored" data-anchor-id="figure-out-actual-cloud-init-config">Figure out actual cloud-init config</h2>
<p>To be honest I’m not sure how much I’m going to end up caring about this. I don’t really care about the default username, it would be slightly convenient to have it be <code>ipreston</code> instead of <code>arch</code> or whatever. If I really cared I could make a new template and set that as the default in <code>/etc/cloud/cloud.cfg</code> as well. I guess I might want to specify static IPs, although generally I prefer static assignment of DHCP leases. Maybe if I’m making some hosts that need a management network that they just talk on that I’m handling outside of my router. For package installation and other post install stuff, I think I’d generally rather go with ansible. Maybe there’s some one off things like signing my host keys with my CA that would fit there. Generally I think I just want to know how this works because it’s there and I don’t like not being able to understand it.</p>
<p>Rather than starting from the XO template, let’s try creating one based on what’s in the <a href="https://wiki.archlinux.org/title/Cloud-init#Archiso">Arch wiki</a>. From what I’ve read even though the cloud-init spec is supposed to be universal there’s a fair bit of bespoke stuff. I don’t know how valid that is, but this seems like a place to start from.</p>
<p>Ok, with that format I can set the default username and have it authorize my ssh key. If I’ve got that set up off the hop then I can do the rest with ansible. It might still be nicer to do some things with cloud-init, but I’ve got a template saved that I can use for at least arch that will get me a bare bones machine. That’s good enough for now.</p>
</section>
</section>
<section id="try-packer-again" class="level1">
<h1>Try packer again</h1>
<p>Now that I know I can create templates, and I’ve fixed having those default templates available to me, let’s see if I can build that Ubuntu template yet.</p>
<p>Way back near the beginning of this post I have was having flaky issues with completing the template build, that I then exacerbated by not specifying my SRs correctly and deleting the base templates that were required.</p>
<p>I’ve lost track of what exactly I was stuck on before, I think it was just that I broke a bunch of unrelated things after that last flaky attempt. Let’s just try running the packer install again and see what happens:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">xenserver-iso.ubuntu-2004:</span> Unable to get SR: Found more than one SR with the name <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'templates'</span>. The name must be unique</span></code></pre></div>
<p>I guess since they’re not actually shared I might as well name them accordingly.</p>
<p>After fixing that and waiting 22 minutes my build finished! It didn’t delete the VM it built, but I had that as a setting, and it does seem to have created a new template.</p>
<p>Let’s clean up and try creating a VM from that template. I remove the built VM, then start a new VM from the packer template. I’ll use the custom cloud config that worked on Arch, and give it a 15G disk to see if resizing worked. I think there’s going to be other stuff I need to do to get this working the way I want, but we can test at least the basics here. Well, good start, it booted. And the management agent was detected. It didn’t update the hostname as I’d have expected from my cloud config so that’s not a great sign. I can log in with the <code>testuser</code> username and <code>ubuntu</code> password that was hard coded into packer and should have been overwritten. So I guess the cloud-init part didn’t work at all. That’s kind of the whole point of having templates so that’s obviously disappointing.</p>
<p>Interestingly, the cloud-init service appears to be enabled, and the default cloud config should have made an ubuntu user with a disabled password. I wonder if that one works with my key? Or maybe my default user will. If it’s just a matter of disabling this test user that’s one thing. Nope, no luck with any of those. Just for kicks I check <code>/etc/passwd</code> and confirm that’s the only user that exists (besides the system ones).</p>
<p>Taking a closer look at <code>/etc/cloud/cloud.cfg</code> it doesn’t look like I have that <code>datasources_list</code> array that I needed in Arch to make things work. So presumably I need some way to add that line to the file as part of template creation.</p>
<p>From the VM I created from the template I run <code>cloud-id</code> as per <a href="https://cloudinit.readthedocs.io/en/latest/howto/identify_datasource.html">the docs</a> to confirm (or at least support the theory) that the issue is it’s not seeing my no-cloud config format. It just returns <code>none</code>.</p>
<p>From reading up a bit on <a href="https://developer.hashicorp.com/packer/docs/templates/hcl_templates/blocks/build/provisioner">provisioners</a> it looks like I should be able to add some steps to my build block to do the things I want.</p>
<p>There might be better ways than just calling shell commands though, let’s do a bit of reading and look into that first in the <a href="https://developer.hashicorp.com/packer/docs/provisioners">provisioners</a> docs.</p>
<p>From a quick read there’s basically file and shell provisioners. I think if I want to do fancier things the idea is to write a shell script and copy it into the build with the file provisioner and then run it with the shell provisioner. That seems reasonable to me.</p>
<p>Let’s just try a little provisioner block and see what happens:</p>
<pre class="hcl"><code>  provisioner "shell" {
    inline = [
      "echo provisioning all the things",
      "echo 'datasource_list: [ NoCloud, ConfigDrive, OpenNebula, Azure, AltCloud, OVF, MAAS, GCE, OpenStack, CloudSigma, Ec2, CloudStack, None ]' &gt;&gt; /etc/cloud/cloud.cfg",
    ]
  }</code></pre>
<p>It just dumps it to the end of the file, we’re not being fancy here, but let’s see if it even works.</p>
<pre><code>==&gt; xenserver-iso.ubuntu-2004: Provisioning with shell script: /tmp/packer-shell475973010
==&gt; xenserver-iso.ubuntu-2004: /tmp/script_510.sh: 3: cannot create /etc/cloud/cloud.cfg: Permission denied
    xenserver-iso.ubuntu-2004: provisioning all the things</code></pre>
<p>Maybe it’s as simple as needing to put <code>sudo</code> on it. Let’s give that a shot before trying anything super fancy. The feedback loop on this is real slow though so if that doesn’t work I’m going to have to figure out a smarter way to do things.</p>
<p>I’m back to having issues being prompted by the autoinstaller. I’ve put in the change in <a href="https://github.com/ddelnano/packer-plugin-xenserver/issues/47">this issue</a>, but that hasn’t sorted it. There’s also <a href="https://github.com/ddelnano/packer-plugin-xenserver/issues/26">this issue</a> let’s see if I can figure out what to do from it. Ok, it’s still failing arbitrarily. Also my <code>sudo</code> on the cloud config didn’t fix it. Probably because that user isn’t added to the sudo group. Back in my <code>user-data</code> file let’s add some late commands to add that user to sudo, and also just do the cloud config line addition there.</p>
<p>Ok, you can’t add the user to sudo with late commands because it doesn’t exist yet. Let’s at least see if my cloud config update worked. The template built at least. Let’s see if I can create a VM with my cloud config.</p>
<p>It creates but it doesn’t apply my cloud config.</p>
<p>That’s not great. I think I’ll probably create Ubuntu images from cloud templates anyway, so I’m not sure how much time I want to invest in this particular issue. I also noticed that the latest release of the packer plugin allows building templates off other templates, so I could extend cloud images if I had to if that worked.</p>
</section>
<section id="try-arch-with-packer" class="level1">
<h1>Try Arch with packer</h1>
<p>So I know how to build an Ubuntu image with packer (but it doesn’t have the settings I want) and I know how to build a template of Arch (but manually and without packer). Let’s see if I can combine that knowledge to build an Arch template with Packer. If I get that I’ll have pretty quick and repeatable ways of building templates for the main OSs I want templates of. I should be able to extend one or the other pattern to Debian as well. Let’s see how I can do with Arch. There’s not a ton of content for building Arch images with packer, but I did find <a href="https://github.com/elasticdog/packer-arch">this repo</a>. I’m not sure how closely I’m going to follow it since it’s a bunch of bash strung together. I think I’d like to try automating <a href="https://wiki.archlinux.org/title/Archinstall">archinstall</a> since that comes packaged with the installer now. If I can get my json together in the format it wants and copied onto the template machine it should be easy to do.</p>
<p>As a start I take the Ubuntu template and update it to point to Arch ISOs. I pick a random mirror in Canada for download. Normally I’d do torrents as they’re much faster, but I don’t feel like telling packer how to do torrents.</p>
<p>That’s going to take a while, so while it’s going let’s try and get a json template ready.</p>
<p>Ughh, my template installed version has no network connectivity. How am I even going to get the json out of it?</p>
</section>
<section id="give-it-a-shot-with-cloud-images" class="level1">
<h1>Give it a shot with cloud images</h1>
<p>While I was messing around with this, the <a href="https://github.com/ddelnano/packer-plugin-xenserver/releases/tag/v0.6.0">packer plugin</a> I’m using got a new release that claims to fix the XVA template builder. At least for Ubuntu this might mean that I can automate the building of cloud images to include guest-utils etc. For Arch I might still be hosed though, depends on if I can properly convert images to a raw format.</p>
<section id="xo-cli-problems" class="level2">
<h2 class="anchored" data-anchor-id="xo-cli-problems">XO-CLI problems</h2>
<p>To fully automate this there’s a few steps I have to do in advance outside of packer anyway, and honestly if I get them working I might be close enough that I just call it there. At this point I need node and some packages to <code>npm</code> install so we’re going to take a detour on a detour (on a…) and set up a devcontainer for this. Eventually if I get this going the way I like I’ll add it into my IaC devcontainer, but for now we’ll just do the basics. Packer install into the devcontainer goes ok. Figuring out the right way to get <code>npm</code> installed is always a bit of a pain, I just don’t use it enough to remember how I did it last time. Finally got <code>xo-cli</code> installed, but for the life of me I can’t figure out <code>xo-ova-upload</code>, which was going to be how I did the Ubuntu images. I guess we’ll try and be consistent on <code>qcow2</code> format images for everything.</p>
<p>After a lot of messing around with my dockerfile I have a devcontainer with <code>xo-cli</code>, <code>packer</code>, and <code>qemu-utils</code> installed.</p>
<p>First I download the qcow2 version of Ubuntu 20.04LTS, and then use <code>qemu-img</code> to convert it to <code>vhd</code> format.</p>
<p>I log into my XO vm with <code>xo-cli</code>, now I have to figure out how to import this VHD, attach it to a VM, and make it a template. Easy, right? Upon closer inspection the <code>xo-cli</code> does not have an option to import a disk.</p>
</section>
</section>
<section id="start-fresh" class="level1">
<h1>Start fresh</h1>
<p>Ok, we’re just going to solve this piece by piece, systematically. No more jumping around, we’re going to solve things one at a time (he said with great hubris before almost certainly heading down another rabbit hole). I’m going to focus on Ubuntu since I almost had that working before.</p>
<p>Do a re-run, it takes half an hour but finishes. Let’s make a machine.</p>
<p>We’re going to start with just the ssh key option for cloud config. As usual give it 20GB to make sure it’s resizing disks. Ok, it created but it’s still got the <code>testuser</code> user, the disk didn’t resize, and basically nothing about cloud init worked. Let’s see if I can upload the xva and do some post install stuff to fix that.</p>
<section id="first-hurdle-no-cloud-init" class="level2">
<h2 class="anchored" data-anchor-id="first-hurdle-no-cloud-init">First hurdle, no cloud-init</h2>
<p>Packer keeps an XVA of the image locally, so I upload that to XO. Ok, that becomes a template by default so I’m not sure if that’s what I want. Let’s make a new VM from it and try messing around there. Make a new VM, don’t bother adding cloud configs or resizing disk since we know it won’t work.</p>
<p>From within the booted machine I run <code>cloud-id</code> to figure out what cloud it thinks it’s in. I get back <code>none</code> where I want <code>NoCloud</code>. Taking a look at the <a href="https://canonical-cloud-init.readthedocs-hosted.com/en/latest/howto/identify_datasource.html">cloud-init docs</a> I run <code>sudo DEBUG_LEVEL=2 DI_LOG=stderr /usr/lib/cloud-init/ds-identify --force</code> to see what all I can see. There’s a data source list in there that includes <code>NoCloud</code> so I guess my idea from earlier that I had to force that into it somehow was a dead end anyway. The fact that it’s not detecting a cloud source at this stage might just be because I’m booting it as a regular VM though.</p>
</section>
<section id="try-manual" class="level2">
<h2 class="anchored" data-anchor-id="try-manual">Try manual</h2>
<p>At this point I am building a template, but it’s just not accepting cloud init configs, at least it doesn’t seem to be. Let’s try manually building an image and see if I can get it set up with cloud init, maybe that will give me some clues about doing it properly with packer.</p>
<p>I’ve already got the ISO uploaded to my storage repository thanks to packer, so I create a new VM with that ISO attached.</p>
<ul>
<li><p>select my language</p></li>
<li><p>have it update the installer</p></li>
<li><p>standard keyboard layout</p></li>
<li><p>pick just Ubuntu server without third party drivers</p></li>
<li><p>standard dhcp</p></li>
<li><p>no proxy</p></li>
<li><p>default mirror</p></li>
<li><p>custom storage layout, have to make sure the main partition is at the end so it can grow</p></li>
<li><p>just make one flat ext4 partition on the image</p></li>
<li><p>Make a user <code>testuser</code> and give them the password <code>ubuntu</code> (will have to make sure this gets wiped)</p></li>
<li><p>skip Ubuntu pro</p></li>
<li><p>Install ssh server, don’t import keys, allow password auth</p></li>
<li><p>No featured server snaps</p></li>
<li><p>Hit reboot</p></li>
<li><p>have trouble unmounting the CD so unmount it from XO and then reboot</p></li>
<li><p>reboot - cloud init ran, although there was no config</p></li>
<li><p><code>sudo apt update &amp;&amp; sudo apt upgrade -y</code></p></li>
<li><p><code>sudo apt install xe-guest-utilities -y</code> guest agent is detected on host and I can see network</p></li>
<li><p><code>sudo apt install cloud-initramfs-growroot -y</code> we’ll see if this works after template creation</p></li>
<li><p><code>systemctl status cloud-init</code> it’s running</p></li>
<li><p><code>sudo cloud-init clean</code> remove the cache, running without <code>sudo</code> fails</p></li>
<li><p><code>sudo poweroff</code></p></li>
<li><p>Back in XO convert to template</p></li>
<li><p>Create a new VM from the template, use my cloudconfig that I had working with Arch</p></li>
<li><p>Give it 15G of disk to see if it will grow</p></li>
</ul>
<p>It partially worked. It got a new hostname, and the disk grew, but the <code>testuser</code> user was still there. I could ssh in as the new user I made though with my ssh key. So that’s pretty good. Maybe there’s something I can add to the cloud config to remove the test user.</p>
<p>According to my friend ChatGPT, I can add this line to my cloud-init to clean it out:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runcmd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">userdel</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> -r</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> olduser</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>Feels like there should be a better way to do this, but let’s at least try it first. It works! Ok, that’s pretty neat. From a little more reading around it seems like the trick is to either delete that user or set their shell to <code>nologin</code> or something. I think deleting is fine for my purposes, as long as I’m consistent with that cloud config.</p>
</section>
<section id="run-packer-again" class="level2">
<h2 class="anchored" data-anchor-id="run-packer-again">Run packer again</h2>
<p>There’s really not a lot I’ve done differently (that I can tell) between my packer auto install and the manual one. Maybe running <code>cloud-init clean</code> was required? I could see packer not automagically doing that and it causing a problem. To do that properly I needed <code>sudo</code> so I have to try and modify my autoinstall block to give <code>testuser</code> passwordless sudo, and then put a shell block at the end of the provisionder to run <code>sudo cloud-init clean</code>. It’s worth a shot.</p>
<p>Got most of the way through but it didn’t like my <code>sudo</code> command. After some looking around I found another packer script that had <code>sudo -S -E bash</code> in it and that seemed to work so let’s give it another run with that. Nope, failed on the password prompt</p>
<p>Ok, I found <a href="https://github.com/shantanoo-desai/packer-ubuntu-server-uefi">this post</a> that has a slightly different setup. Let’s give it a shot. This is definitely getting ridiculous. I got the manual prompt during build this time for the first time in a while. I just typed it in from the console to continue, not sure if it’s something I changed or just a coincidence. It’s showed up and disappeared without any code changes before.</p>
<p>Well, something I did this time made it so that I couldn’t ssh in, which made the installer hang.</p>
</section>
</section>
<section id="give-up" class="level1">
<h1>Give up</h1>
<p>I’ve sunk so much time into this it’s ridiculous. I can just build a few templates, document what I did and be done with it. I guess I learned a bit about cloud-init so that’s good? Wow.</p>


</section>

 ]]></description>
  <category>linux</category>
  <category>virtualization</category>
  <category>packer</category>
  <category>xcp-ng</category>
  <guid>https://blog.ianpreston.ca/posts/2023-11-27-packer.html</guid>
  <pubDate>Mon, 27 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Databricks workspace config in terraform</title>
  <link>https://blog.ianpreston.ca/posts/2023-11-19-terraform-workspaceconf.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The <a href="https://www.databricks.com/blog/2022/11/02/announcing-security-analysis-tool-sat.html">Databricks Security Analysis Tool (SAT)</a> is a pretty handy tool developed by databricks to scan your workspaces and produce alerts where your configuration deviates from best practices. To remediate some of these issues you need to modify your workspace configuration. Some things can be done from the UI, others I believe require calling the API. In either case, it would be preferable to automate these configurations as part of workspace provisioning. The <a href="https://registry.terraform.io/providers/databricks/databricks/latest/docs/resources/workspace_conf">databricks_workspace_conf</a> resource in terraform can be used to accomplish this. Unfortunately, similar to the issue I documented trying to <a href="../posts/2023-11-18-terraform-cluster.html">configure cluster policies</a>, the docs are pretty limited and it’s difficult to figure out what the actual config changes should be. After some poking around and following a trail of forum posts to a random <a href="https://www.powershellgallery.com/packages/DatabricksPS/1.11.0.8/Content/Public%5CWorkspaceConfig.ps1">powershell script</a> that happened to document the settings I wanted, I was able to create a config that worked. I’ve reproduced it below as a reference to both myself and anyone else interested in remediating SAT issues with terraform.</p>
</section>
<section id="the-code" class="level1">
<h1>The code</h1>
<pre class="hcl"><code>resource "databricks_workspace_conf" "this" {
  custom_config = {
    "maxTokenLifetimeDays" : "180"
    "enableTokensConfig" : true
    "enableDeprecatedClusterNamedInitScripts" : false
    "enableDeprecatedGlobalInitScripts" : false
    "enforceUserIsolation" : true
    # set at account level, can't be done at workspace level
    # DO NOT UNCOMMENT OR OTHERWISE ADD THIS, IT WILL BREAK YOUR STATE
    # "enableWebTerminal" : true
    "enableNotebookTableClipboard" : false
    "enableResultsDownloading" : false
  }
}</code></pre>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>That’s it, I just spent a lot of time figuring out how to make that little block of code so I wanted to share it. Put something like the above in your workspace provisioning script and you’ll address the SAT issues that are related to your workspace config.</p>


</section>

 ]]></description>
  <category>databricks</category>
  <category>terraform</category>
  <guid>https://blog.ianpreston.ca/posts/2023-11-19-terraform-workspaceconf.html</guid>
  <pubDate>Sun, 19 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Databricks cluster policies in terraform</title>
  <link>https://blog.ianpreston.ca/posts/2023-11-18-terraform-cluster.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Recently I had to define some <a href="https://learn.microsoft.com/en-ca/azure/databricks/administration-guide/clusters/policies">databricks cluster policies</a> at work using <a href="https://registry.terraform.io/providers/databrickslabs/databricks/latest/docs/resources/cluster_policy">terraform</a>. I didn’t have super sophisticated requirements (at least I didn’t think so), but I still struggled to find sample code online that covered my requirements. This post is a brief write up on what I implemented and why, as well as some notes on potential improvements I might make later as my requirements get more detailed.</p>
</section>
<section id="creating-the-policies" class="level1">
<h1>Creating the policies</h1>
<p>All cluster policies are encoded in JSON, which we create from passing a collection of <code>map</code>s that we <code>merge</code> in terraform into the <code>jsonencode</code> method.</p>
<section id="runtimes" class="level2">
<h2 class="anchored" data-anchor-id="runtimes">Runtimes</h2>
<p>One of the first things we want our cluster policy to enforce is using a recent version of the Databricks Runtime (DBR). Depending on the environment we might further restrict this to LTS releases only. Using a series of <code>data</code> blocks I find all the relevant releases. Note that this will change as new releases come out, so we’ll want to schedule running this to ensure we’re always enforcing the latest runtimes. As an example, this block finds the latest LTS release that supports the ML runtime and has GPU drivers installed:</p>
<pre class="hcl"><code>data "databricks_spark_version" "latest_ml_gpu_lts" {
  latest            = true
  long_term_support = true
  ml                = true
  gpu               = true
}</code></pre>
<p>Another bonus on enforcing runtime policies is it provides an easier way to restrict GPU compute without having to find a list of instance types with GPUs. Since you can’t provision a runtime onto a VM with a GPU unless it includes GPU drivers we can limit access to GPU easily with this.</p>
<p>In terms of which runtimes are enabled I made the assumption that we would want consistency across policies in terms of enabled runtimes. That is, the code does not allow for you to enable GPUs on single node compute policies but disable them on multi node.</p>
<p>You’ll see a bit further down that offering multiple runtime limitations across policies within a workspace would be fairly straightforward but introduce a lot of boilerplate code, at least the way I’ve implemented it. Again, I don’t really see this being a requirement. Specific runtimes are enabled or disabled with the module booleans <code>lts_dbr</code>, <code>ml_dbr</code>, and <code>gpu_dbr</code>. So if <code>lts_dbr</code> is true then only LTS runtimes are enabled, if it’s false users are allowed to choose LTS or the most recent runtime. It’s similar for <code>ml_dbr</code> for ML runtimes and <code>gpu_dbr</code> for ML runtimes with GPU enabled (there is no non-ML GPU enabled runtime)</p>
<p>Setting the actual array of allowed runtimes feels kind of hacky, terraform doesn’t seem to support if else blocks, or other cleaner ways I could think of to do this:</p>
<pre class="hcl"><code>  no_lts_no_ml_no_gpu_arr = (!var.lts_dbr &amp;&amp; !var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_lts.id, data.databricks_spark_version.latest.id] : null
  lts_no_ml_no_gpu_arr    = (var.lts_dbr &amp;&amp; !var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_lts.id] : null
  lts_ml_no_gpu_arr       = (var.lts_dbr &amp;&amp; var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_ml_lts.id, data.databricks_spark_version.latest_lts.id] : null
  lts_ml_gpu_arr          = (var.lts_dbr &amp;&amp; var.ml_dbr &amp;&amp; var.gpu_dbr) ? [data.databricks_spark_version.latest_ml_lts.id, data.databricks_spark_version.latest_lts.id, data.databricks_spark_version.latest_ml_gpu_lts.id] : null
  no_lts_ml_no_gpu_arr    = (!var.lts_dbr &amp;&amp; var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_ml_lts.id, data.databricks_spark_version.latest_ml.id, data.databricks_spark_version.latest_lts.id, data.databricks_spark_version.latest.id, ] : null
  no_lts_ml_gpu_arr       = (!var.lts_dbr &amp;&amp; var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_ml_lts.id, data.databricks_spark_version.latest_ml.id, data.databricks_spark_version.latest_lts.id, data.databricks_spark_version.latest.id, data.databricks_spark_version.latest_ml_gpu_lts.id, data.databricks_spark_version.latest_ml_gpu.id] : null
  fallback_spark_vers_arr = [data.databricks_spark_version.latest_lts.id]
  runtime_version = {
    "spark_version" : {
      "type" : "allowlist",
      "values" : coalesce(local.no_lts_no_ml_no_gpu_arr, local.lts_no_ml_no_gpu_arr, local.lts_ml_no_gpu_arr, local.no_lts_ml_no_gpu_arr, local.no_lts_ml_gpu_arr, local.fallback_spark_vers_arr),
      "defaultValue" : data.databricks_spark_version.latest_lts.id
    }
  }</code></pre>
<p>basically, whichever of those conditionals is true for the combination of runtime booleans that’s the list of runtimes that will be available to users of that policy. I put just the latest LTS runtime as a fallback just to handle errors, it shouldn’t really come up.</p>
<p>This is honestly more limiting than I’d strictly prefer for the non-LTS releases. As an example, if DBR 14.0 is the latest LTS runtime, and 14.2 is the latest overall runtime, I’d prefer users be able to provision 14.1 as well. To handle that though I think I’d have to do some array sorting and regex inference to find the position of the LTS release in the non-LTS array and return everything up to and including that index, and frankly I didn’t feel like writing that. Maybe I’ll be more motivated in the future.</p>
</section>
<section id="cost-management" class="level2">
<h2 class="anchored" data-anchor-id="cost-management">Cost management</h2>
<p>The next big thing we want to enforce is cost management. One approach would be setting careful limitations on combinations of instance types and number of workers, but databricks also offers a <code>max_dbu</code> parameter which just limits the compute cost. This doesn’t exactly translate to overall cost, as underlying VM costs are not factored in, but they tend to be very closely related to the DBU cost of the instance type, so the simplicity seemed like a worthwhile trade off. Again, I’m assuming that we don’t want to have too many different DBU limits within a given workspace, although I have allowed for interactive and job/DLT compute to have different thresholds. We probably generally want to limit the threshold for exploratory work below what we use to run scheduled jobs. Note that this does introduce a somewhat perverse incentive at the margins to run a larger instance with photon disabled, as enabling photon doubles your DBU cost for any given size of underlying compute.</p>
<p>This is accomplished by passing a line into the compute policy definition that looks something like this:</p>
<pre class="hcl"><code>    { "dbus_per_hour" : { "type" : "range", "maxValue" : var.max_dbu_job } },</code></pre>
</section>
<section id="single-of-multi-node" class="level2">
<h2 class="anchored" data-anchor-id="single-of-multi-node">Single of multi node</h2>
<p>For interactive clusters I’ve created both single node and multi node cluster policies. In theory we shouldn’t really care which a user selects, as long as they’re below their cost threshold, but for less sophisticated users it might reduce complexity to only allow single node clusters.</p>
<pre class="hcl"><code>  single_node = {
    "spark_conf.spark.databricks.cluster.profile" : {
      "type" : "fixed",
      "value" : "singleNode",
      "hidden" : true
    },
    "num_workers" : {
      "type" : "fixed",
      "value" : 0,
      "hidden" : true
    }
  }</code></pre>
<p>This can either be added to or left out of a policy definition to enforce single node</p>
</section>
<section id="auto-termination" class="level2">
<h2 class="anchored" data-anchor-id="auto-termination">Auto termination</h2>
<p>For all interactive policies (it’s not relevant to jobs or DLT) I enforce an auto termination of 10 minutes to minimize cluster idling. We could make that a variable if a need comes up, but I’d personally like to keep it low and consistent for now:</p>
<pre class="hcl"><code>  autotermination = {
    "autotermination_minutes" : {
      "type" : "fixed",
      "value" : 10
      # "hidden" : true
  } }</code></pre>
<p>I took off the <code>hidden</code> flag for now so users can see that it’s been auto set for them. We can remove that later to reduce the complexity of the cluster creation interface.</p>
<p>I have heard some feedback from ML users that it’s not reasonable to expect them to be sitting around ready to pounce on long running tasks when they’re prototyping so I’m going to end up modifying this to a range with a higher maximum value that we can configure for ML workspaces.</p>
</section>
<section id="tags" class="level2">
<h2 class="anchored" data-anchor-id="tags">Tags</h2>
<p>Finally, I added some tags, which right now don’t really do much since I don’t know what additional tags we want to add. A lot gets auto applied that might be sufficient, but I wanted to demonstrate the capability:</p>
<pre class="hcl"><code>  default_tags = {
    "custom_tags.lob" : {
      "type" : "fixed",
      "value" : "${var.lob_name}",
      "hidden" : true
    },
    "custom_tags.TEST" : {
      "type" : "fixed",
      "value" : "testfromterraform"
    }
  }</code></pre>
</section>
<section id="actual-cluster-policies" class="level2">
<h2 class="anchored" data-anchor-id="actual-cluster-policies">Actual cluster policies</h2>
<p>Putting it all together we can define cluster policies like so:</p>
<pre class="hcl"><code>resource "databricks_cluster_policy" "multi-node-personal" {
  count = var.create_multi_node_personal_policy ? 1 : 0
  name  = "Multi Node Personal Compute"
  definition = jsonencode(merge(
    { "dbus_per_hour" : { "type" : "range", "maxValue" : var.max_dbu_interactive } },
    local.runtime_version,
    local.autotermination,
    local.default_tags,
    local.photon
  ))
}</code></pre>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this post I demonstrated how to create a set of databricks cluster policies using a terraform module that can be applied to your workspaces. Nothing particularly earth shattering, and I’m not sure whether to be pleased or horrified with that giant block I wrote to produce the acceptable runtime list, but it works and it at least adds some more example code that others can build off.</p>


</section>

 ]]></description>
  <category>databricks</category>
  <category>terraform</category>
  <guid>https://blog.ianpreston.ca/posts/2023-11-18-terraform-cluster.html</guid>
  <pubDate>Sat, 18 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Checking out XCP-NG</title>
  <link>https://blog.ianpreston.ca/posts/2023-11-12-xcp-ng.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I have enjoyed learning proxmox, and haven’t run into any deal breakers with it, but I also like to see if the grass is greener. After watching some videos from <a href="https://www.youtube.com/watch?v=xB22GKGJkHY">Tom at Lawrence Systems</a> I decided xcp-ng might be more to my liking. This post will document what I did to get it set up and my thoughts on using it.</p>
</section>
<section id="initial-installation-experience" class="level1">
<h1>Initial installation experience</h1>
<p>I did not get off to the best start, as shortly after booting the most recent stable release (8.2 at the time of this writing) I found myself looking at a blank screen and unable to proceed. After a bit of searching I found <a href="https://forums.lawrencesystems.com/t/xcp-ng-installer-fails-to-run/15197">this post</a> which led me to try the 8.3 beta release, which fixed my issue. I can see how that sort of thing would scare someone off, but I decided to press on. With the 8.3 installer I was able to get through the install process, which was quite straightforward. One thing I liked off the hop vs Proxmox was the option to use DHCP rather than static IPs. I prefer to handle IP assignment in pfsense with static leases, as that makes it easier to associate hosts with a DNS entry, persists IPs across reinstalls, and makes all my address information centrally accessible.</p>
</section>
<section id="first-experience" class="level1">
<h1>First experience</h1>
<p>Once the machine booted up I was in a pretty basic looking <a href="https://en.wikipedia.org/wiki/Text-based_user_interface">TUI</a>. In some ways that’s nicer than proxmox, which just drops you into a root prompt with a note to go to the web UI. It did allow some basic admin and provided system info. I didn’t really try to do any of the admin from the terminal, since I know that’s not the approach I really want to take. I know ultimately I’m going to want <a href="https://xen-orchestra.com/#!/xo-home">Xen Orchestra</a> but just for kicks I decided to open up the IP of my machine in a browser. This brought me to a <a href="https://xen-orchestra.com/blog/xen-orchestra-lite/">XO-lite</a> page. It looked sharp, but after a bit of digging around almost all of the functionality just took me to an “Under Construction” page. I assume this is something to do with me running a beta version of XCP-NG. Now I find myself in a bit of a chicken and egg situation. To really configure XCP-NG I want to host a Xen Orchestra server somewhere. The optimal place for it is a VM on XCP-NG, but I can’t figure out how to install VMs without Xen-Orchestra.</p>
<p>It looks like I can launch a docker container of XO, so let’s try that until I can bootstrap a proper server. Obviously not a reliable long term solution, but I grabbed the compose spec from <a href="https://hub.docker.com/r/ronivay/xen-orchestra">here</a> and spun it up on my workstation. That loaded pretty easily and from there I was able to log in with the default credentials the container creates and add a host. Initially there was an issue adding the host but after I allowed it to use a self-signed cert the connection went smoothly.</p>
</section>
<section id="adding-a-vm" class="level1">
<h1>Adding a VM</h1>
<p>Getting meta again, let’s try loading a debian VM that I can load XO onto. Eventually if I decide to stick with this I’ll rebuild it with templates and other fun stuff but for now we’re mostly just testing out the system. The first thing I have to do is get a Debian ISO (most of the guides seem to do XO on Debian and I’m comfortable with that distro so why not?) onto the system. Per <a href="https://xcp-ng.org/docs/storage.html#storage-types">the docs</a> I first need to create an ISO SR (Storage Repository). Eventually I’ll want this to be an NFS share on my NAS, but while I’m just messing around let’s do a local one. I have to create a path on the local storage to contain the ISOs, and as near as I can tell there’s no way to do that from the XO UI. So I ssh into the host and <code>mkdir /isos</code>. Not the most creative name, but whatever. Back at the XO UI I hit “New” on the sidebar, then storage and fill in a local ISO storage setup for the directory I just made (it won’t auto create the directory if it doesn’t exist, I checked). Having created this SR now I have to get an ISO into it. It’s not super intuitive how to do that, but following <a href="https://xcp-ng.org/blog/2022/05/05/how-to-create-a-local-iso-repository-in-xcp-ng/">this post</a> I got it figured out. It does let me load ISOs directly from a URL which saves me downloading to my workstation only to immediately upload to XO, so that’s nice.</p>
<p>With that I think I’m ready to add a VM. On the sidebar I click “New” and then “VM”. I choose Debian 12 as my template (this isn’t a full VM template, it just auto populates some settings). I give it 4 cores, the max this machine has, and 4GB of RAM, which is the minimum advised to run XO. I pick the ISO from the SR I just created for the boot medium. For network interfaces I put it on the pool wide network, at some point in the future I’ll mess around with different network interfaces too, but this is fine for now.</p>
<p>Ahh, oops, I’ve hit another snag. I haven’t created a SR for disks. I think I could just make another folder like I did for the ISO, but this is seeming like an increasingly bad idea. From the terminal in the host I can see it’s made a root partition on my internal NVME drive of 18GB for XCP-NG itself, plus another few small ones like a 4GB logs partition. This leaves me with a 435GB unmounted partition on my NVME drive, plus my SSD. What’s the appropriate way to use the rest of this NVME storage for VMs? From looking at the docs it seems like I can just specify a partition and it will set it up for me. From running <code>lsblk</code> on the host when I was figuring out my storage availability I know the partition name. Let’s try it. Ok, I got an error.</p>
<section id="figuring-out-how-to-add-vm-storage" class="level2">
<h2 class="anchored" data-anchor-id="figuring-out-how-to-add-vm-storage">Figuring out how to add VM storage</h2>
<p>The error that I see in the log is <code>SR_BACKEND_FAILURE_77(, Logical Volume group creation failed, )</code> The first result takes me to a <a href="https://www.reddit.com/r/XenServer/comments/d1nd4c/xcpng_sr_backend_failure_77/">reddit thread</a> that suggests this is an issue because I’d previously used this drive for zfs, which I had when it was running proxmox. Again from the terminal and following <a href="https://linuxconfig.org/wipefs-linux-command-tutorial-with-examples">this guide</a> <code>wipefs /dev/nvme0n1*</code> does return some <code>zfs_member</code> tags.</p>
<p>After a little messing around I did a couple runs of <code>wipefs -o &lt;offset of ZFS tag&gt; /dev/&lt;device or partition of device&gt; -f</code> to get rid of the tags, I ran the command with the <code>-n</code> flag first to make sure it was removing the right tag.</p>
<p>After doing that I got the same error. There’s either more tags I need to remove (the original post just dropped everything, I tried to be more surgical), or I need a reboot. Let’s try the reboot first. Reboot didn’t fix it. Let’s try the full wipe on both the device and its partitions. If that breaks something I’ll do a reinstall anyway, not like I’ve put much on this box at this point. That worked! <code>wipefs -a -f /dev/nvme0n1</code> and <code>wipefs -a -f /dev/nvme01p3</code> allowed me to create a SR for VM images. Well on my way now. <strong>DON’T ACTUALLY JUST DO THIS, SEE BELOW</strong></p>
</section>
<section id="back-to-adding-a-vm" class="level2">
<h2 class="anchored" data-anchor-id="back-to-adding-a-vm">Back to adding a VM</h2>
<p>The rest of the setup is pretty straightforward. I’m able to give the VM a disk in the storage location. There’s a bunch of advanced features that I’m skipping for now, but will definitely have to come back to at some point for future builds.</p>
<p>After that the machine auto started and I was able to walk through the graphical installer from the “Console” tab on the VM. I saw some things in the docs about setting up VNC for a better full screen experience, but that’s definitely a step for a later date as well.</p>
<p>The installation completed and at the end I had a running Debian install.</p>
</section>
<section id="have-to-reinstall" class="level2">
<h2 class="anchored" data-anchor-id="have-to-reinstall">Have to reinstall</h2>
<p>After I got the Debian VM set up I figured this was a good time to update the XCP-NG host to a static lease and give it a reboot. Unfortunately in doing that I discovered that my <code>wipefs</code> exploits had removed the boot flags from my drive as well. I’m sure there would be some clever way to carefully stitch those labels back on but I really don’t feel like it. Reinstall XCP-NG, add it back to the XO that’s still running in a container on my workstation. Interestingly my local VM storage repository showed up on a fresh install, albeit without any disks. Maybe that’s how it’s supposed to work by default if you don’t have any flags on your extra partition that blocks it. I recreate the ISO SR but just put it in <code>/media/</code> this time since that’s what the docs suggest and I don’t have to create a new folder. Still have to make some shared folders on my NAS to support this better eventually. I really don’t like how you add ISOs. I want to be able to add it from the SR page but instead I have to go to “Import” on the sidebar. I’m sure I’ll figure that out eventually but right now I find it quite unintuitive. After getting that going it’s relatively quick to get the VM reinstalled. Let’s try this again.</p>
</section>
<section id="management-tools" class="level2">
<h2 class="anchored" data-anchor-id="management-tools">Management tools</h2>
<p>Maybe not the obvious place to start, but I really like it when VM info is integrated into my UI. Looking at this machine I see “Management agent not detected”. For Ubuntu according to <a href="https://xcp-ng.org/docs/guests.html#linux">the docs</a> I’d install <code>xe-guest-utilities</code>, but I can’t find that in debian. Looking a little further down the docs I see how to mount and install from the guest utilities ISO that comes with my setup. That seems to work fine. After a reboot I can see all my information.</p>
</section>
<section id="paste-to-console" class="level2">
<h2 class="anchored" data-anchor-id="paste-to-console">Paste to console</h2>
<p>As little as I’m planning to use the virtual console in the web ui, I really do want to figure out how to paste into it. <code>ctrl+c</code>, <code>ctrl+shift+ins</code> etc do not seem to be working, nor is just right clicking for paste. From <a href="https://xcp-ng.org/forum/topic/5538/please-add-a-paste-option-into-the-console-in-xoa">this post</a> it’s not likely to be fixed in this version. From a look at the roadmap it’s in development (XO 6 that is) but I don’t see a release date and there’s nothing available for preview. I’ll stick with it for now. I think that was also the case for dark mode.</p>
</section>
</section>
<section id="xen-orchestra-in-an-actual-vm" class="level1">
<h1>Xen Orchestra in an actual VM</h1>
<p>From the guides I’ve seen, the best way to do this is run the script in <a href="https://github.com/ronivay/XenOrchestraInstallerUpdater">this repo</a>. As discussed in the previous section, I can’t paste that URL into the web console. By default I can only ssh into this VM as my user account (root is disabled) and sudo isn’t installed, which is a bummer. From <a href="https://wiki.debian.org/sudo">the debian wiki</a> it looks like their preferred pattern is to run <code>su --login</code> to become root. I guess that’s fine too. At least I can paste into my terminal now that I’m not just in the web console.</p>
<p>Following the instructions: I clone the repository, copy the <code>sample.xo-install.cfg</code> to <code>xo-install.cfg</code>, realize I don’t have <code>vim</code> installed, install <code>vim</code> and then edit my newly copied config. Reading through it I don’t see anything I want to change. There’s some stuff for certificate generation that I might want to deal with at some point, but not right now. By default it seems to install all possible plugins, I don’t see why I’d want to limit myself right now. Let’s give this a go. The script ran for a bit, but failed somewhere around the build/install step. The output points me to a log file so let’s see if I can figure out what went wrong.</p>
<section id="check-the-log-file-for-issues" class="level2">
<h2 class="anchored" data-anchor-id="check-the-log-file-for-issues">Check the log file for issues</h2>
<p>Checking the logs it looks like a URL issue:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">An</span> unexpected error occurred: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://registry.yarnpkg.com/css-parse/-/css-parse-2.0.0.tgz: Request failed </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">502 Bad Gateway</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span></code></pre></div>
<p>I seem to be able to download that fine from my workstation, I wonder if it was just an intermittent failure? Let’s give it one more run before we get too heavy into troubleshooting:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">WARNING:</span> free disk space in /opt seems to be less than 1GB. Install/update will most likely fail</span></code></pre></div>
<p>Did I just not make a big enough virtual disk for this? Let’s take a look. Oh yeah, root is almost entirely full. I didn’t really look at the default partition sizing but it gave almost all the disk to <code>/home</code> and left basically nothing. Do I want to resize or just reinstall? From a bit of reading I can’t resize active volumes, so I guess we’re doing a reinstall. What a fun learning experience! This is why I like having OS templates and automation for everything.</p>
</section>
<section id="have-to-reinstall-1" class="level2">
<h2 class="anchored" data-anchor-id="have-to-reinstall-1">Have to reinstall</h2>
<p>At least I have the presence of mind to manually give this new VM the same MAC as my old one so the static lease for it will persist. I’m only going to give it 10GB this time, but I’m going to be a lot more sensible about my allocation of storage, basically just one giant partition. After the reinstall I mount the guest utils ISO, reinstall guest utils and reboot. Reinstall <code>git</code> and <code>vim</code>. Clone the repo, copy over the template file, don’t bother editing it since I didn’t have to last time. Run the installer. This time it worked, must have just been a disk space problem last time.</p>
</section>
<section id="test-it-out" class="level2">
<h2 class="anchored" data-anchor-id="test-it-out">Test it out</h2>
<p>After a reboot I head to the address of my VM and there it is! I have to re-add my host but that works easily enough and now I can see my VM that’s running the orchestration server I’m looking at it through. How meta.</p>
</section>
</section>
<section id="figure-out-how-to-move-this-machine-back-to-my-rack" class="level1">
<h1>Figure out how to move this machine back to my rack</h1>
<p>I’ve had this node sitting on my desk while I set it up, but now I want it back in my rack. I don’t think I can tell XO to shut down the host until the VMs running it are off, but one of the VMs running on it is XO. Good thing I still have that container version up I guess. From the container XO I shut down the VM XO and then the host. After moving it down to my rack I’m able to wake it with WOL from my router (I could have just hit the button but wanted to make sure I still had that working). From the container XO I see the host come back up, but the VM doesn’t. Looking at the settings I didn’t have it set to auto start. Update the settings to auto power on, but it looks like that maybe only applies when the host itself restarts, manually start it for now. Ok, I’m back up and running XO from my VM on my XCP-NG box!</p>
</section>
<section id="add-a-couple-more-hosts" class="level1">
<h1>Add a couple more hosts</h1>
<p>One hypervisor is cool, but a lot of what I’m going to want to test is going to require at least one more host. Given that I have 3 machines set aside for dev, and I just broke the proxmox cluster that was running on the other two by installing XCP-NG on this host without removing it from the cluster I might as well set up 3 nodes.</p>
<p>There wasn’t much to this runthrough. I was smart and updated my static leases first, and I also hopped into a live boot environment and wiped the partition table on my drives before installing xcp-ng.</p>
</section>
<section id="test-things-with-a-vm" class="level1">
<h1>Test things with a VM</h1>
<p>There are lots of features of this hypervisor I’d like to try out, but there are very few of them I can realistically do without at least one VM to experiment on. I could do it with the XO VM I just created, but that seems excessively risky.</p>
<p>One minor thing I’m going to test out first before I create this VM is setting up a remote storage repository (SR). I’ve created an NFS share on my NAS called xcp, and created an ISO subfolder under that. For each host I want to load ISOs I’m going to have to add that as a SR. For now I’ll only do one. After adding an NFS ISO type SR to my host pointing to the <code>iso</code> folder in that share that had a couple images uploaded to it, I was able to start up an Arch live boot environment and install Arch in a VM. Easy!</p>
<section id="host-migration" class="level2">
<h2 class="anchored" data-anchor-id="host-migration">Host migration</h2>
<p>I don’t want to set up any of my hosts into a pool. I technically could with quite a few of my machines as they’re all the same gen of HP Prodesk. But I’ve got one newer gen Intel and will be adding an AMD machine in a bit. Anything I test I want to at least theoretically work across these hosts, so doing it without pools is more representative.</p>
<p>Once my VM was booted up I made a “hello world” test text file in the home directory and hit the migrate button. I was able to choose the storage and network on the remote host, even though it was on another pool. Over on the tasks tab I could see the migration happening. It took a few minutes since it had to move the whole disk plus RAM over and I only have a gigabit connection at home, but after that time I could see the same VM running exactly as it had been on the new host, so that’s pretty slick!</p>
</section>
<section id="backups-and-snapshots" class="level2">
<h2 class="anchored" data-anchor-id="backups-and-snapshots">Backups and snapshots</h2>
<p>Arguably even more important than migration is a good backup and restore experience. To test this I need to create a “remote” in XO, which is fortunately not associated with a particular pool, so I only have to create it once. On the same shared NFS folder as I put the ISOs I make another for backups. On the XO sidebar I head to settings then Remotes. From there I just need to put in the server and path info and I’ve got a remote created. It even does a little speed test that shows I can write at about 100 MiB/s and read at 1.59 GiB/s. The write seems plausible since it’s a spinning disk setup, the read seems high though. At least I’m connected.</p>
<p>Initially my first thought was to make a backup of my VM, but when I got there I noticed I could set up backups for XO config and my pool metadata. Since I’m actually doing stuff there too I decided to schedule a daily backup of that first.</p>
<p>After that it’s back to doing some backups of the VM itself. I decided to give it a tag <code>test</code> so that I could use <a href="https://xen-orchestra.com/docs/backups.html#smart-backup">smart backup</a> for my configs. It’s overkill when I’m only doing one VM but I want to get in the habit.</p>
<p>As a start I’ll test a snapshot creation. This isn’t a backup since it does it to the same storage that the VM is running on, but it’s still nice to have for rollbacks, so I’d like to learn how it works. I create a snapshot for just the test VM I’m working on and run it. I can see the successful run in the list of backups. Heading over to local storage for the host that’s running my VM I can see the snapshot as well. Next up I need to make a change on my VM and then try rolling back to the snapshot. Heading over to the VM console I create a <code>postsnapshot.txt</code> file and put in some text. Still on the VM page but over at the snapshot tab I hit revert. It prompts me to create a snapshot before I do the revert, which is handy so I accept that. It looks like I can also manually create snapshots from this tab, which is nice. I’m not sure I actually need scheduled snapshots, or if it’s more something I’ll take before I do a tricky operation on a host. Back at the console I’m at the login prompt, since I didn’t do a snapshot with RAM. That’s fine. Logging in I can see my <code>postsnapshot.txt</code> file isn’t there. Let’s revert to the previous one. Again I’m at the login prompt, and when I log back in <code>postsnapshot.txt</code> is there as expected. It’s worth noting that each of these snapshots appear to be full copies, not just deltas of other snapshots. That makes sense, but it something to be aware of, as I could pretty quickly fill up a disk with snapshots if I’m not careful. Let’s delete these two and the associated backup job and try actual backups. One nice little note here is that from the VM page I can connect to the associated backup, that’s a nice little UX feature.</p>
<p>Now let’s try the more traditional backup. I’m going to do <a href="https://xen-orchestra.com/docs/incremental_backups.html">delta backups</a> so that I don’t have to store full snapshots for every backup I want. We still won’t do any scheduling yet, but it looks straightforward to do. I pick my remote as the location for the backup and hit save. Saving seems to take a while so I assume this is triggering a full backup immediately. I’ll just wait a bit to see what happens. Upon completion I’m back at the backup screen. I actually tried to just edit the existing “backup” I’d made of the snapshot job and when I look at the “modes” on the created backup it looks like it’s doing both now. That’s not what I want, let’s see how I can remove the snapshot feature. Ahhh, from the UI it’s hard to tell but clicking on each type of backup enables it and brings up its settings. Snapshots don’t really have settings so it’s not obvious from the window that you’ve enabled them. Let’s save again with snapshots disabled. This again takes a little while, which is a bit surprising, since I’d expect the backup to have been completed already. Looking at the backup page the backup shows as successful, but maybe that’s of the old snapshot type. When I do this for real I’m going to have to be more careful about making new backup jobs and separating them appropriately. Now that I’ve run a backup with the new setting it says by the status that it transferred 2.43GB. That seems realistic for the compressed size of my VM. Let’s make a change and run another backup. Following the pattern from the snapshot I add a <code>postdelta1.txt</code> and save the file. Heading over to the backups page I can see a new job running. After completion it says it transferred 2.43GB as well, which doesn’t seem right. Looking at the job run of the second backup there’s a warning about an “unused VHD”. Heading to that path on my NAS I can see a similarly named vhd file with an incrementally higher file name. The job mentions <code>20231119T190652Z.vhd</code> and the file name in the NAS is <code>20231119T190951Z.vhd</code>. Let’s try running one more backup and seeing if we get a delta this time, I’ll add one more file to be safe. This one is successful and transfers only 16MB. That’s a lot more than the size of the text file I created, but still very small in the scheme of things. Looking in the NAS folder I still only have one <code>.vhd</code> file, but it’s been modified at the time of the most recent backup. I guess I didn’t set a retention? I think to do retention I have to set some schedules. I suppose that makes sense. Let’s try and restore this backup. For the easiest option, that might not work since I still have the machine running I just head to “restore” under the backup sidebar in XO. When it comes to restore I can restore to any storage I have available, so presumably I could restore to a different host, but just to start let’s try restoring to the same host as the original machine. According to the run the restore was successful. Back in my VM list I still only see one copy of the test VM, so presumably it was overwritten. Let’s bring up the console and have a look. It appears to still be running and I see both the <code>postdelta</code> files I created. That’s odd. Ahh, I had my VM filter set to running (which it does by default). If I clear that filter I have my running VM as well as a halted VM named <code>archtest (20231119T191644Z)</code> which must be my restored copy. Let’s destroy the running one and start this one up. I stop and remove the old VM, I note that in addition to the fun name the new one also gets a “restored from backup” tag, which is interesting. This restored copy also has my second post delta text file, but I think that’s because I forgot to create a new one after running that extra delta backup, so that’s probably to be expected. Let’s stop and remove this machine and try restoring to a different host. Ok, with no running VMs I head back to the restore page, pick the same restore point to do, but point it to a different local storage on a different host than where I was originally running the VM. This time I tell it to start the VM on restore since I don’t have any alternative VMs for it to contend with. I’m up and running just fine on the new host now. In this case these hosts have the same CPU type and everything, so I don’t know if a cross environment restore would be more difficult, but the basic restore works just fine. Nice! There’s obviously a lot more to do in backups, but this is good for now.</p>
</section>
</section>
<section id="alerting" class="level1">
<h1>Alerting</h1>
<p>It’s all well and good to have your backups running, but if they fail for whatever reason I want to know about it. On the backup config page there was a status reporting option, for either all or failure notifications, but I need to configure where to send those reports.</p>
<p>We’ll go basic for now with email alerting. In the plugin settings there’s a <code>transport-email</code> plugin that’s installed but disabled by default. Enabling it gives me a “plugin not configured” error, so I guess I have to configure it first then enable it, which is a little counterintuitive, but whatever. In the config I plug in my settings for the GMX email I use for stuff like this (getting proper auth for my gmail is way too big a hassle). and send a test email.</p>
<p>After spinning for a while the test icon comes back, but I don’t see an email. After double checking my spam folder I guess I have to do some troubleshooting. Logging into my GMX account I see a notification that my SMTP settings have been disabled due to inactivity. I suppose I should find a more reliable email provider at some point, but for now maybe I’ll just send myself emails on successful backups to keep things active.</p>
<p>After enabling the setting in my account I get a plugin success message, although I don’t see an email in my inbox. Slightly suspicious. Ok, this time it was marked as spam. That’s fair. GMX emails are sketchy and I’m changing my outbound name to “XO admin”. I’ve marked the email as not spam, let’s send another test. That one worked.</p>
<p>Let’s try running a backup with an email alert set and make sure that all goes ok. In the backup settings I see that <code>backup-reports</code> must be enabled as well as <code>transport-email</code>. The settings under <code>backup-reports</code> are a little weird. Under the config there’s a <code>mails</code> section and a little checkbox by something called “Fill information (optional)”. Once I check that I can add entries for emails to send alerts to, so that’s reasonable, just not the greatest naming. I can also specify report recipients in the backup setting, so maybe I didn’t have to add them in the plugin setting. Odd. The other thing that’s happened is my backup task is no longer pointing at anything, since I recreated my VM from a backup. Another good reason to use smart mode and tags. Having fixed that, added my email, and telling the job to report “Always” I run another backup. And I get an email! Neat.</p>
</section>
<section id="cleanup" class="level1">
<h1>Cleanup</h1>
<p>Let’s make sure I can get rid of this experimental stuff before moving on. Removing the backup job is easy, but I assume that doesn’t automatically delete the backups I’ve created with it. Right, over in the “Restore” tab of the backups section I can see my backups and delete them. For each backup I can select all the iterations to delete, so I just choose all of them. Looking in my NAS I have some empty directories, which is fine, but also one file that’s still there. Maybe that’s the snapshot I still have? I thought that was local to the host, but let’s delete it and see what happens. Hmmm, nope, that file is still there. Well that’s good that my understanding of snapshots is correct, bad that I’ve got this orphan snapshot file sitting on my NAS. I’m just going to manually delete it and assume it was something weird with backing up a backed up image or something.</p>
</section>
<section id="next-steps" class="level1">
<h1>Next steps</h1>
<p>This covered the basics of working with XCP-NG and Xen Orchestra. To do everything I want I still need to look into</p>
<ul>
<li>VM Template creation. Probably going to bite the bullet and learn <a href="https://developer.hashicorp.com/packer">packer</a>
<ul>
<li>Cloud init templates and applying them to VM templates. Looks straightforward, I just don’t have templates yet.</li>
</ul></li>
<li><a href="https://docs.xcp-ng.org/compute/">Hardware passthrough</a> for GPUs and SSDs</li>
<li>Automation of shutdowns when on UPS power <a href="https://voice1.me/automated-shutdown-xenserver-7-x-with-network-ups-tool/">something like this</a></li>
<li><a href="https://xcp-ng.org/docs/guests.html#all-vms">VNC</a> not that I plan to use it much, but it would be cool to have</li>
<li>Actually run some workloads</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This post covered my first look at installing and using <a href="https://xcp-ng.org/">XCP-ng</a> and <a href="https://xen-orchestra.com/#!/">Xen Orchestra</a> to manage VMs across a few hosts.</p>
<p>The configuration and initial setup was definitely more complex than my experience with <a href="https://www.proxmox.com/en/">proxmox</a>, but separating the management interface from the hypervisor, and the much more robust backup experience make me feel like this is a better solution for the work that I want to do. In future posts I’ll work through the next steps I described to really get this setup running the way I want.</p>


</section>

 ]]></description>
  <category>linux</category>
  <category>virtualization</category>
  <category>xcp-ng</category>
  <guid>https://blog.ianpreston.ca/posts/2023-11-12-xcp-ng.html</guid>
  <pubDate>Sun, 12 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Automating my network</title>
  <link>https://blog.ianpreston.ca/posts/2023-07-06-network-automation.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In a <a href="../posts/2023-04-08-managed-switch.html">previous post</a> I set up a managed switch in my network, but I did it all manually through the menus. Realistically that’s fine, I don’t have a super big or complicated network and I don’t move things around enough to justify the investment in learning how to automate it in terms of time savings. But I like automating things, so let’s see what I can figure out.</p>
</section>
<section id="what-id-have-liked-to-do" class="level1">
<h1>What I’d have liked to do</h1>
<p>Ideally I would handle this through Ansible, since that’s what I use to do most of the rest of my home automation. Unfortunately, my switch is not one of the supported devices in Ansible’s networking stack as near as I can tell. The next best thing would have been to use <a href="https://napalm.readthedocs.io/en/latest/">NAPALM</a> for python based automation, but that’s also not supported. So I have to go one level down the stack and use <a href="https://pypi.org/project/netmiko/">netmiko</a>. Let’s see how that goes.</p>
</section>
<section id="connecting-to-the-switch" class="level1">
<h1>Connecting to the switch</h1>
<p>In the previous post I connected using the serial console and then telnet. For netmiko to work I will need SSH. This does not appear to be enabled by default. After checking the manual it looks like enabling this is a command line only operation. From the initial login I’m in the manager level interface and my prompt looks like this: <code>ProCurve Switch 2810-48G#</code> I need to get from there to the Global configuration level by running <code>config</code> so it looks like this <code>ProCurve Switch 2810-48G(config)#</code> and then run <code>crypto key generate ssh</code> to create a host key on the switch, <code>ip ssh</code> to enable ssh, and then <code>show ip ssh</code> to confirm that it worked.</p>
<p>After this I’ll try and connect to the switch and find that it’s got too old a key exchange method to work by default:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Unable</span> to negotiate with 192.168.10.2 port 22: no matching key exchange method found. Their offer: diffie-hellman-group1</span></code></pre></div>
<p>After finding a bunch of other out of date security protocols that my ssh client didn’t support by default (probably a good reason to not have this switch in the enterprise anymore) I was able to get it working with the following ssh config:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Host</span> switch</span>
<span id="cb2-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">User</span> admin</span>
<span id="cb2-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">HostName</span> 192.168.10.2</span>
<span id="cb2-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">KexAlgorithms</span> +diffie-hellman-group1-sha1</span>
<span id="cb2-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PubkeyAcceptedAlgorithms</span> +ssh-rsa</span>
<span id="cb2-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">HostkeyAlgorithms</span> +ssh-rsa</span>
<span id="cb2-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Ciphers</span> +3des-cbc</span></code></pre></div>
<p>With that set I can now ssh into my switch. Let’s try and actually do something with netmiko.</p>
<p>The baby connection test script that I used looks like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> netmiko</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> getpass <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> getpass</span>
<span id="cb3-3"></span>
<span id="cb3-4">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.10.2"</span>,</span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"device_type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hp_procurve"</span>,</span>
<span id="cb3-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"admin"</span>,</span>
<span id="cb3-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password"</span>: getpass(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter password for the switch:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb3-9">}</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> netmiko.ConnectHandler(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>device) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> connection:</span>
<span id="cb3-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(connection)</span></code></pre></div>
<p>which does print out a signature for a connection object. I don’t have any actual info on the switch itself, but it appears to be working as I was getting a connection error before I configured ssh properly.</p>
<p>We can do something a little more interesting that also validates the connection by modifying the last two lines to:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> netmiko.ConnectHandler(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>device) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> conn:</span>
<span id="cb4-2">    sys_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_command(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show system-information"</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sys_info)</span></code></pre></div>
<p>This indeed prints out the system info, so the connection is working.</p>
</section>
<section id="figuring-out-the-commands-i-need" class="level1">
<h1>Figuring out the commands I need</h1>
<p>Last time I worked on this I just did everything with the menu because I was lazy. If I’m going to automate things I will need to use the CLI, so let’s identify the commands I need and what their outputs look like.</p>
<ul>
<li><code>show vlan</code> will list all my VLANs</li>
<li><code>show vlan &lt;vlan#&gt;</code> will list a specific VLAN as well as any ports that do tagged or untagged traffic for that VLAN</li>
<li><code>show mac-address [&lt;port&gt;]</code> show mac addresses seen by the switch, optionally specify for a particular port. Returns them in format <code>######-######</code></li>
</ul>
</section>
<section id="see-if-i-can-do-some-parsing-on-those-before-i-do-actual-change-based-operations" class="level1">
<h1>See if I can do some parsing on those before I do actual change based operations</h1>
<p>So far I haven’t identified the commands necessary to actually modify my setup, but let’s see if I can do some easy parsing on these to begin with.</p>
<p>I’ll try <code>show vlan</code> to start. With a little bit of string parsing I can get a nice looking output:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_vlans(conn) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]]:</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get VLAN info.</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns a list of dictionaries with keys for</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    vlan_num, vlan_name and vlan_status, all as strings.</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-7">    base_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_command(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show vlan"</span>)</span>
<span id="cb5-8">    output_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> base_output.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> line.strip()]</span>
<span id="cb5-9">    vlan_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.split() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> output_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> re.match(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\d+\ "</span>, line)]</span>
<span id="cb5-10">    vlan_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-11">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vlan_num"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vlan_name"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vlan_status"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]}</span>
<span id="cb5-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlan_list</span>
<span id="cb5-13">    ]</span>
<span id="cb5-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> vlan_dict</span></code></pre></div>
<p>Which returns something like:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">[</span>
<span id="cb6-2">  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_num'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEFAULT_VLAN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_status'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Port-based'</span>},</span>
<span id="cb6-3">  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_num'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'15'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TRUST'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_status'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Port-based'</span>},</span>
<span id="cb6-4">  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_num'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'30'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Guest'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_status'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Port-based'</span>},</span>
<span id="cb6-5">  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_num'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'40'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LAB'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_status'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Port-based'</span>}</span>
<span id="cb6-6">]</span></code></pre></div>
<p>I can probably do something for showing a particular VLAN:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_vlan_ports(conn, vlan_num):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get the ports associated with a vlan and their tagged or default status."""</span></span>
<span id="cb7-3">    base_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_command(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"show vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-4">    output_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> base_output.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> line.strip()]</span>
<span id="cb7-5">    vlan_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.split() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> output_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> re.match(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\d+\ "</span>, line)]</span>
<span id="cb7-6">    vlan_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"port"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlan_list]</span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> vlan_dict</span></code></pre></div>
<p>Which gets me something like:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'port'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tagged'</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'port'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'7'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tagged'</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'port'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'15'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Untagged'</span>}]</span></code></pre></div>
<p>For the MAC address I’m going to make a little helper function to do some string formatting first, as the formatting for MAC addresses from the switch is different than what I see in most other places. I want to be able to just copy paste from anywhere and have them comparable. This is a one liner: <code>re.sub("[^0-9]", "", mac)</code> in a function that takes <code>mac</code> as an argument. After that we have a similar pattern except in this case I’m going to return a dictionary where each key is a MAC address and each value is its associated port:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_mac_ports(conn):</span>
<span id="cb9-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get MAC addresses seen by the switch and their ports."""</span></span>
<span id="cb9-3">    base_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_command(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show mac-address"</span>)</span>
<span id="cb9-4">    output_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> base_output.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> line.strip()]</span>
<span id="cb9-5">    mac_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-6">        line.split() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> output_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> re.match(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"[\da-fA-F]</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{6}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, line)</span>
<span id="cb9-7">    ]</span>
<span id="cb9-8">    mac_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {mac_parser(line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]): line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mac_list}</span>
<span id="cb9-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mac_dict</span></code></pre></div>
<p>With this if I have a dictionary with keys being the MAC addresses of my devices and values being the names of those devices, I can find what devices are on what ports in an automated way (if they’re on, the switch only shows current connections).</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> map_devices_to_ports(conn):</span>
<span id="cb10-2">    mac_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_mac_ports(conn)</span>
<span id="cb10-3">    home_ports <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {v: mac_dict.get(k) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> home_macs.items()}</span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> home_ports</span></code></pre></div>
<p>So one last thing in terms of info gathering. I’d like to know the state in terms of VLAN settings for all of my ports, plus the device associated with them if I have that:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> vlan_status(conn):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get the VLAN assignment of each port, along with a name if you can."""</span></span>
<span id="cb11-3">    vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_vlans(conn)</span>
<span id="cb11-4">    vlan_nums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vlan_num"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlans]</span>
<span id="cb11-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vlan_desc = {x["vlan_num"]: f'{x["vlan_num"]}_{x["vlan_name"]}' for x in vlans}</span></span>
<span id="cb11-6">    all_ports <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb11-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(port): {k: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> vlan_nums} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> port <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span>)</span>
<span id="cb11-8">    }</span>
<span id="cb11-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign names to ports I know</span></span>
<span id="cb11-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> map_devices_to_ports(conn).items():</span>
<span id="cb11-11">        all_ports[v][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k</span>
<span id="cb11-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Associate VLAN tags</span></span>
<span id="cb11-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlan_nums:</span>
<span id="cb11-14">        port_dicts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_vlan_ports(conn, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(vlan))</span>
<span id="cb11-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> port_dict <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> port_dicts:</span>
<span id="cb11-16">            port <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> port_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"port"</span>]</span>
<span id="cb11-17">            state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> port_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state"</span>]</span>
<span id="cb11-18">            all_ports[port][vlan] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state</span>
<span id="cb11-19"></span>
<span id="cb11-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> all_ports</span></code></pre></div>
<p>I had to do a few hacky things because I haven’t thought through my data structures very well, but I’m ok with this, it does the trick. Now for every port I get a name if I know the device as well as the status of ever VLAN in terms of “tagged”, “untagged” or an empty string for not applied. I start at port 3 because I have the first two trunked to my router and I don’t expect to have to change them and because they’re trunk ports I can’t just show ports 1 and 2.</p>
</section>
<section id="do-actual-modifications-to-the-switch-config" class="level1">
<h1>Do actual modifications to the switch config</h1>
<p>Let’s experiment with configuring an actual port the way I want it. The way the commands work in the HP console is operations are performed on VLANs based on ports, so something like <code>vlan 30 tagged 1-5</code> would allow traffic tagged with VLAN 30 on ports 1-5. I think of things more in terms of how I want ports to behave, so my preferred syntax would be something like <code>port 5 v30 tagged v15 untagged</code> to set port 5 to accept tagged traffic on VLAN 30 and mark untagged traffic as being on VLAN 15. There’s probably clever ways to bundle together my current state and desired state and only execute the commands necessary to reconcile them, but let’s do some building block stuff and figure out how to just change a particular VLAN assignment on a particular port to start.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_port_vlan_state(conn, port: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, vlan: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, state: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb12-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Set VLAN state on a port."""</span></span>
<span id="cb12-3">    command <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb12-4">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_config_set(command)</span>
<span id="cb12-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
<p>This “works” but doesn’t account for a lot of edge cases. For one thing, I can only enable VLANs as either tagged or untagged with this. If I want to disable them I need to add a flag that will add a “no” to the command. However, if I do that, I also need to ensure I’m not ending up in an invalid state, as I have to have at least one VLAN enabled either tagged or untagged on any given port. I think based on this it might make more sense to try and do a comprehensive remapping rather than individual steps.</p>
<p>To start I’ll make a constant at the top of the script called <code>DESIRED_STATE</code> in the same format as the output of <code>vlan_status</code>. This should make it easier to reconcile and also lets me copy paste the output of <code>vlan_status</code> to do the initial population.</p>
<p>Let’s write a little helper function to do basic validation on this <code>DESIRED_STATE</code>. I won’t be able to catch everything that could be wrong here, especially not just misconfiguration, but I can get the basics:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> validate_desired_state():</span>
<span id="cb13-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Make sure my desired state will actually work."""</span></span>
<span id="cb13-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We'll catch VLANs actually existing later, just make sure we're consistent</span></span>
<span id="cb13-4">    reference_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(DESIRED_LAYOUT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span>].keys())</span>
<span id="cb13-5">    correct_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Untagged"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tagged"</span>}</span>
<span id="cb13-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> DESIRED_LAYOUT.items():</span>
<span id="cb13-7">        states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(pv <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> pk, pv <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> v.items() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>)</span>
<span id="cb13-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> correct_states:</span>
<span id="cb13-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(</span>
<span id="cb13-10">                <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unknown VLAN status on port </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> correct_states<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb13-11">            )</span>
<span id="cb13-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(v.keys()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> reference_keys:</span>
<span id="cb13-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Keys for port </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> don't match port 3"</span>)</span>
<span id="cb13-14">        untagged_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> v.values() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Untagged"</span>])</span>
<span id="cb13-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> untagged_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb13-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Port </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> has more than one VLAN set to untagged"</span>)</span>
<span id="cb13-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> untagged_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb13-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Port </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> has no VLAN specified for untagged"</span>)</span></code></pre></div>
<p>Now we can do something to compare the current state and the desired state, and return any ports that don’t reconcile:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_vlan_status(current_state: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb14-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Is the current state the same as the desired state?"""</span></span>
<span id="cb14-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check names first</span></span>
<span id="cb14-4">    mismatch_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb14-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> current_state.keys():</span>
<span id="cb14-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (</span>
<span id="cb14-7">            current_state[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> DESIRED_LAYOUT[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>]</span>
<span id="cb14-8">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Allow for devices to just be turned off</span></span>
<span id="cb14-9">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> current_state[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb14-10">        ):</span>
<span id="cb14-11">            mismatch_names[</span>
<span id="cb14-12">                k</span>
<span id="cb14-13">            ] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Current Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>current_state[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Desired Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DESIRED_LAYOUT[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb14-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mismatch_names:</span>
<span id="cb14-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Names don't match on some ports"</span>)</span>
<span id="cb14-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mismatch_names.items():</span>
<span id="cb14-17">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Port: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Port name mismatch"</span>)</span>
<span id="cb14-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure we're working with the same VLANs</span></span>
<span id="cb14-20">    desired_vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-21">        key</span>
<span id="cb14-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> vlans <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> DESIRED_LAYOUT.values()</span>
<span id="cb14-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlans.keys()</span>
<span id="cb14-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span></span>
<span id="cb14-25">    }</span>
<span id="cb14-26">    current_vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-27">        key <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> vlans <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> current_state.values() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlans.keys() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span></span>
<span id="cb14-28">    }</span>
<span id="cb14-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> desired_vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> current_vlans:</span>
<span id="cb14-30">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb14-31">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"VLANs don't match. Current state: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>current_vlans<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Desired: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>desired_vlans<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb14-32">        )</span>
<span id="cb14-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VLAN selection mismatch"</span>)</span>
<span id="cb14-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If names are all good check ports</span></span>
<span id="cb14-35">    mismatched_ports <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb14-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> DESIRED_LAYOUT.items():</span>
<span id="cb14-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> current_vlans:</span>
<span id="cb14-38">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> DESIRED_LAYOUT[k][vlan] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> current_state[k][vlan]:</span>
<span id="cb14-39">                mismatched_ports[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DESIRED_LAYOUT[k]</span>
<span id="cb14-40">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb14-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mismatched_ports</span></code></pre></div>
<p>We do a little more runtime checking to make sure that devices I think are in a particular port aren’t showing up elsewhere. Note that I want to be able to run this with some devices powered down, as I may want to only bring them up after reconfiguring their ports, so I allow for the name identified in the current state to be an empty string. Then we make sure I have the right VLANs in my desired state, so I haven’t created or deleted any from my current state that I think I should have. If all that goes well I go through each port and if I find a mismatch in VLAN config I add the desired state to a <code>mismatched_ports</code> dictionary that I can pass into some reconcilliation function later.</p>
<p>While doing some testing for this I got my switch into a weird state where I got intermitent errors running the script, even on functions that had worked fine before. I gave the switch a reboot to see if I could clear things up and that seemed to work, but it does add to how sketchy this whole setup feels. This is probably going to get filed under “learning activity” rather than “thing I use to manage my environment”. We’ll see though.</p>
<p>I did get a function that would update the configuration of a port to match what I want from a desired state dictionary:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_port_vlan_state(conn, port: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, state: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb15-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Set VLAN state on a port."""</span></span>
<span id="cb15-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get rid of the name key</span></span>
<span id="cb15-4">    state.pop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb15-5">    vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(state.keys())</span>
<span id="cb15-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Should only be one untagged VLAN and we validate that elsewhere.</span></span>
<span id="cb15-7">    untagged_vlan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [k <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> state.items() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Untagged"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb15-8">    tagged_vlan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [k <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> state.items() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tagged"</span>]</span>
<span id="cb15-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the untagged VLAN first so we definitely don't end up orphaned.</span></span>
<span id="cb15-10">    commands <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb15-11">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>untagged_vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> untagged </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb15-12">    ]</span>
<span id="cb15-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn off untagged explicitly for all other VLANs</span></span>
<span id="cb15-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> {untagged_vlan}:</span>
<span id="cb15-15">        commands.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"no vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> untagged </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set tagged vlans</span></span>
<span id="cb15-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tagged_vlan:</span>
<span id="cb15-18">        commands.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> tagged </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn off tags on other VLANs</span></span>
<span id="cb15-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(t <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tagged_vlan):</span>
<span id="cb15-21">        commands.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"no vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> tagged </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now save the desired config</span></span>
<span id="cb15-23">    commands.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"write memory"</span>)</span>
<span id="cb15-24">    conn.send_config_set(commands)</span></code></pre></div>
<p>I still run into hanging the connection to the switch from time to time with it, but maybe that’s not as big a deal given how infrequently I’ll actually be doing this outside of developing the script. The last thing I have to do is put that together with the list of unreconciled ports that I created into one big function:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reconcile(conn):</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Bring the current state of the switch in line with the desired state."""</span></span>
<span id="cb16-3">    validate_desired_state()</span>
<span id="cb16-4">    current_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vlan_status(conn)</span>
<span id="cb16-5">    mismatches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> check_vlan_status(current_state)</span>
<span id="cb16-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mismatches:</span>
<span id="cb16-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> port, state <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mismatches.items():</span>
<span id="cb16-8">            set_port_vlan_state(conn, port, state)</span></code></pre></div>
<p>And that appears to work!</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I’m pretty sure this is not what most people are talking about when they say “software defined networking”, and there were many hacky parts to the setup. On the other hand, it’s slightly easier for me to modify my switch setup in the future, I learned a bit more about managing my switch, and I got to practice my python. Overall I’d call that a win.</p>


</section>

 ]]></description>
  <category>networking</category>
  <guid>https://blog.ianpreston.ca/posts/2023-07-06-network-automation.html</guid>
  <pubDate>Thu, 06 Jul 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Finding all AD group users with ansible</title>
  <link>https://blog.ianpreston.ca/posts/2023-06-04-ansible-ad-users.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is a write up summarizing the process I went through to retrieve information about members of Active Directory groups from a Linux VM using ansible. My specific intent was to use it as part of a playbook to configure <a href="https://docs.docker.com/engine/security/rootless/">rootless docker</a>, but it would be applicable in any other situation where you need to get the members of a number of AD groups. The hardest part of it by far is getting the output of earlier tasks into a format that’s suitable for later steps. I’ve got a reasonable clean approach documented below, after trying some extremely ugly alternate approaches earlier. I’m sure there’s some even fancier way to do this that will make my approach look silly, and if you know it I’d love for you to fill me in.</p>
</section>
<section id="pre-requisites" class="level1">
<h1>Pre-requisites</h1>
<p>In order to do this I need the user ansible is running as to be authenticated against Active Directory. I don’t have elevated privileges on the AD I tested this on, so I think any normal user account should be sufficient. For this example I have my username and password stored as variables <code>ad_user</code> and <code>ad_password</code>.</p>
<p>I’ve also got a host variable configured for each host I’m doing this on that maps to a list of AD groups I want members of for that host, called <code>domain_groups</code> in this playbook.</p>
<p>Having set this up I need to make sure the host machine has a pre-requisite module available, and that the user I’m running as has a kerberos ticket issued for my user:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install ldap pre-requisites</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> python3-ldap</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Issue a kerberos ticket to authenticate to AD</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-9">    echo "{{ ad_password }}" | kinit -l 1h {{ ad_user }}@example.com</span>
<span id="cb1-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span></code></pre></div>
<p>I’ve changed the actual domain to <code>example.com</code> and you’ll need to modify that to your domain of course.</p>
</section>
<section id="get-the-users" class="level1">
<h1>Get the users</h1>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Return all users in the groups associated with the machine using LDAP search</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">community.general.ldap_search</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dn</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cn={{ item }},cn=Users,dc=EXAMPLE,dc=COM"</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sasl_class</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gssapi"</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">server_uri</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ldap://example.com"</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attrs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> member</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> intermediate_calc_group_members</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ domain_groups }}"</span></span></code></pre></div>
<p>This first part does the actual data retrieval, everything that follows is just cleanup. For reference, the JSON I get out of this looks something like:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"ansible_loop_var"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-3">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"changed"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-4">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"failed"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-5">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"invocation"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-6">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"module_args"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-7">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"attrs"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-8">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"member"</span></span>
<span id="cb3-9">                    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-10">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bind_dn"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-11">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bind_pw"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-12">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dn"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cn=group1,cn=Users,dc=EXAMPLE,dc=COM"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-13">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"filter"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(objectClass=*)"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-14">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"referrals_chasing"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"anonymous"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-15">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"sasl_class"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gssapi"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-16">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"schema"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-17">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scope"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-18">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"server_uri"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ldap://example.com"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-19">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"start_tls"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-20">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"validate_certs"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-21">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-22">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb3-23">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"item"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group1"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-24">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"results"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-25">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-26">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dn"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cn=group1,cn=Users,dc=EXAMPLE,dc=COM"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-27">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"member"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-28">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-29">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-30">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-31">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-32">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-33">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-34">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-35">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span></span>
<span id="cb3-36">                    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-37">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-38">            <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-39">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-40">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-41">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"ansible_loop_var"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-42">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"changed"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-43">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"failed"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-44">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"invocation"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-45">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"module_args"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-46">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"attrs"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-47">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"member"</span></span>
<span id="cb3-48">                    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-49">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bind_dn"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-50">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bind_pw"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-51">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dn"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cn=group2,cn=Users,dc=EXAMPLE,dc=COM"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-52">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"filter"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(objectClass=*)"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-53">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"referrals_chasing"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"anonymous"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-54">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"sasl_class"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gssapi"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-55">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"schema"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-56">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scope"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-57">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"server_uri"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ldap://example.com"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-58">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"start_tls"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-59">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"validate_certs"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-60">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-61">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb3-62">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"item"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group2"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-63">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"results"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-64">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-65">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dn"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cn=group2,cn=Users,dc=EXAMPLE,dc=COM"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-66">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"member"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-67">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example Clients,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-68">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example Clients,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-69">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example Clients,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-70">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example Clients,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-71">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example Clients,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-72">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,CN=Users,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-73">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example Clients,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-74">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example Clients,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span></span>
<span id="cb3-75">                    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-76">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-77">            <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-78">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>In the example above I’ve replaced all the actual user names with <code>example_user</code> but you can see that the information I want to assemble (the usernames and which group each of them is in) is surrounded by a lot of extraneous data and text.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Get group and member list</span></span>
<span id="cb4-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_fact</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    intermediate_calc_users</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;-</span></span>
<span id="cb4-4">      {%- set result = [] -%}</span>
<span id="cb4-5">      {%- for play_dict in intermediate_calc_group_members.results -%}</span>
<span id="cb4-6">        {%- for user in play_dict['results'][0]['member'] -%}</span>
<span id="cb4-7">          {%- set clean_user = user | regex_search('^CN=(\\w\\d+),.+', '\\1') | first | lower -%}</span>
<span id="cb4-8">          {{</span>
<span id="cb4-9">            result.append({'group': play_dict['item'], 'id': clean_user, 'user': clean_user + "@EXAMPLE.COM"})</span>
<span id="cb4-10">          }}</span>
<span id="cb4-11">        {%- endfor -%}</span>
<span id="cb4-12">      {%- endfor -%}</span>
<span id="cb4-13">      {{ result | to_json | from_json }}</span></code></pre></div>
<p>Some parts of this are witchcraft to me. I don’t really know why I have to pipe my result to json and then back from json. It’s doing something to clean up my variables in such a way that subsequent steps can understand it, but as for why I’m not really sure. I got a lot of the structure of this variable construction from <a href="https://stackoverflow.com/questions/58727924/convert-nested-list-of-dicts-to-dict-in-ansible">this post</a>.</p>
<p>The regex I’m using in this particular case is based on the fact that all the user IDs I’m working with are in the format of one letter followed by several numbers. If your user IDs are more heterogeneous you’ll have to mess with the regext to get just the username out of that part of the output that looks something like:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb5-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Clients,OU=Example</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Corporate,dc=EXAMPLE,dc=COM"</span></span></code></pre></div>
<p>At the end of this step I have a list of dictionaries with one entry per user with keys for their AD group, just their username, and their username with the domain appended.</p>
<p>Note that this step will fail if you pull an AD group that only has one member, because the <code>member</code> item in the dictionary will go from being a list to a string. I didn’t specifically have to deal with that in my use case, but it would be more robust to do something like putting <code>play_dict['results'][0]['member']</code> in a list and then flattening that list so you always got a list back.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Register getent results so I can retrieve UIDs</span></span>
<span id="cb6-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.getent</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">database</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> passwd</span></span>
<span id="cb6-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item.user }}"</span></span>
<span id="cb6-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ intermediate_calc_users }}"</span></span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> intermediate_calc_getent</span></span></code></pre></div>
<p>For my particular use case in addition to the usernames I also needed the UIDs of each user, so in this step I use ansible’s built in <code>getent</code> module and the dictionary I created above in the last step to return the entry in <code>/etc/passwd</code> for each user, which will include their UID.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Cleanup getent results</span></span>
<span id="cb7-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_fact</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    intermediate_calc_getent_clean</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;-</span></span>
<span id="cb7-4">      {%- set result = [] -%}</span>
<span id="cb7-5">      {%- for play_dict in intermediate_calc_getent.results -%}</span>
<span id="cb7-6">        {%- set getent_passwd = play_dict['ansible_facts']['getent_passwd'] -%}</span>
<span id="cb7-7">        {%- set key = getent_passwd.keys() | first -%}</span>
<span id="cb7-8">        {{ result.append({'key': key,'value': getent_passwd[key][1]}) }}</span>
<span id="cb7-9">      {%- endfor -%}</span>
<span id="cb7-10">      {{ result | items2dict | to_json | from_json }}</span></code></pre></div>
<p>Again, this step is a bit of black magic, just messing around with the output of the last step (ansible’s debug is your friend for this) and fiddling with it until I have a list of dictionaries with one item where the key is the username and the value is their UID.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create final list of dicts for all users</span></span>
<span id="cb8-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_fact</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    users_dict</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;-</span></span>
<span id="cb8-4">      {%- set result = [] -%}</span>
<span id="cb8-5">      {%- for user in intermediate_calc_users -%}</span>
<span id="cb8-6">        {{ result.append({'group': user['group'], 'user': user['user'], 'user': user['user'], 'uid': intermediate_calc_getent_clean[user['user']]})}}</span>
<span id="cb8-7">      {%- endfor -%}</span>
<span id="cb8-8">      {{ result | to_json | from_json }}</span></code></pre></div>
<p>Now all I have to do is combine those two dictionaries together into one. This part is pretty self explanatory except for that <code>to_json | from_json</code> bit at the bottom.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>If you work with Linux systems where users are managed by AD (or probably other LDAP providers, but I’m using AD in this example) then this is a handy trick to get a fact in your playbook with basic information about those users.</p>


</section>

 ]]></description>
  <category>ansible</category>
  <category>Linux</category>
  <guid>https://blog.ianpreston.ca/posts/2023-06-04-ansible-ad-users.html</guid>
  <pubDate>Sun, 04 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Configuring autofs for CIFS mounts with ansible</title>
  <link>https://blog.ianpreston.ca/posts/2023-06-04-ansible-autofs.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This guide shows how to set up user isolated mounts of CIFS (samba) network shares on a shared linux VM. Each user will get folders under <code>/mnt/&lt;user&gt;</code> that they authenticate to using kerberos. In this document I’m assuming that users are members of a group and that each group all should have access to the same shares. We’ll further assume you’ve got a fact set in your playbook that maps each user to their corresponding group. If you need guidance on that you can see <a href="../posts/2023-06-04-ansible-ad-users.html">this post</a>.</p>
<p>This is a nice way of attaching file shares because it ensures users don’t need elevated privileges to access file shares (although an administrator has to configure it for them) and that creating a share for one user doesn’t inadvertently expose it to others. For a fully user level way of attaching file shares you can use <a href="https://man.archlinux.org/man/gio.1">gio</a> but I found it extremely flaky and annoying to use, so if you can handle having an administrator configure the share mount points for users I would recommend this approach.</p>
</section>
<section id="variable-format" class="level1">
<h1>Variable format</h1>
<p>Somewhere in your playbook (in my case I set it in the variables folder of the role I was using, but putting in as a host variable or somewhere else may be more appropriate for your use case) we need a variable for each group that contains a list of associated shares. Something like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">example_group1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local_share_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> share1</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">full_share_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//fileshare.example.com/share1"</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local_share_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> share2</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">full_share_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//fileshare.example.com/share2"</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">example_group2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local_share_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> share3</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">full_share_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//fileshare.example.com/share3"</span></span></code></pre></div>
</section>
<section id="basic-setup" class="level1">
<h1>Basic setup</h1>
<p>In this stage we will ensure pre-requisite software is installed on the host (assuming Ubuntu here, you will have to modify for other distros), and that the mount point folder for each user has been created:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install autofs</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> autofs</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cifs-utils</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> keyutils</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create base file share mount point</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/mnt/{{ item.user }}"</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> directory</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item.user }}"</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"domain users@example.com"</span></span>
<span id="cb2-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0700"</span></span>
<span id="cb2-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Start and enable the autofs service</span></span>
<span id="cb2-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.systemd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> autofs</span></span>
<span id="cb2-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> started</span></span>
<span id="cb2-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<p>Where <code>users_dict</code> looks like what I created in <a href="../posts/2023-06-04-ansible-ad-users.html">this post</a>. You will also have to modify the <code>group</code> variable to be appropriate for your environment.</p>
<p>I actually have the autofs service start task at the bottom of this play in my case, but thematically it makes more sense here.</p>
</section>
<section id="populate-auto.master" class="level1">
<h1>Populate auto.master</h1>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> populate auto.master with entries for each users' configs</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">src</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> auto.master.j2</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/auto.master</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0644'</span></span></code></pre></div>
<p>Each user needs an entry in <code>/etc/auto.master</code> that points to a config file (which we’ll set in the next phase) with all their specific mount points. Using the template task and the template below we can accomplish this:</p>
<pre class="jinja"><code># {{ ansible_managed }}
{% for user in users_dict %}
/mnt/{{ user.user }} /etc/auto.sambashares-{{ user.user }} --timeout=30 --ghost
{% endfor %}</code></pre>
<p>Each user gets a point below the <code>/mnt/&lt;user&gt;</code> folder we created in the basic setup, we point to a config file for them, set a timeout so the fileshare will not stay connected if users aren’t using it and then we add the <code>--ghost</code> flag so that all mount points get a directory created, even if they’re not currently attached. See <a href="https://learn.redhat.com/t5/Platform-Linux/Halloween-tip-of-the-day-Using-autofs-with-the-ghost-option/td-p/2326">here</a> for further docs.</p>
</section>
<section id="populate-user-level-share-specs" class="level1">
<h1>Populate user level share specs</h1>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Populate user specific share mounts</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">src</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> auto.sambashares.j2</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/auto.sambashares-{{ item.user }}"</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb5-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb5-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0644'</span></span>
<span id="cb5-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span></code></pre></div>
<p>Again we’re populating a template, but this time we’re doing one for each user. As with above, most of the magic happens in the template itself:</p>
<pre class="jinja"><code># {{ ansible_managed }}
{% set shares = lookup('vars', item.group | replace('-', '_')) %}
{% for share in shares %}
{{ share.local_share_name }} -fstype=cifs,rw,sec=krb5,uid=${UID},cruid=${UID} :{{ share.full_share_path }}
{% endfor %}</code></pre>
<p>The <code>replace</code> step is because a lot of the groups I was using had a <code>-</code> in their name, which you can’t have in an ansible variable so I map the <code>-</code> to an <code>_</code>. We can then use that to refer to the variable described at the top of this post for whichever group the particular user happens to be in. Then we just iterate through all the shares defined and create a folder under <code>/mnt/&lt;user&gt;/&lt;local_share_name&gt;</code> that maps to <code>full_share_path</code> and will be authorized with kerberos.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Autofs and ansible are a pretty nice way to set up a bunch of users with consistent file shares securely on a shared host or multiple hosts.</p>


</section>

 ]]></description>
  <category>ansible</category>
  <category>Linux</category>
  <guid>https://blog.ianpreston.ca/posts/2023-06-04-ansible-autofs.html</guid>
  <pubDate>Sun, 04 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A couple notes on working with Nvidia cards</title>
  <link>https://blog.ianpreston.ca/posts/2023-06-04-nvidia-notes.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>While helping the infrastructure team at work get Nvidia drivers working on a VM virtualized on top of esxi and then getting that GPU to be available within rootless docker containers I learned a couple things that I want to note down here.</p>
</section>
<section id="installing-nvidia-drivers" class="level1">
<h1>Installing nvidia drivers</h1>
<p>So after I went and wrote a nice playbook to do this, I realized that nvidia maintains their own <a href="https://github.com/NVIDIA/ansible-role-nvidia-driver">here</a>, so in the future I would definitely just use this. I’m sure it would work better. One note that I will add. In my experience, installing the CUDA version of the drivers is not worth it. I was able to do GPU accelerated ML workloads without it, and installing them caused me nothing but pain and suffering. Maybe it would go smoother with the official Nvidia role, but I would suggest trying without unless you really know for sure you need them.</p>
<p>For posterity, here’s how I installed Nvidia drivers:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://fabianlee.org/2021/05/19/ansible-installing-linux-headers-matching-kernel-for-ubuntu/</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install dependencies</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> linux-headers-generic</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> curl</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Get distribution name in the weird format nvidia wants it</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-10">    . /etc/os-release;echo $ID$VERSION_ID</span>
<span id="cb1-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> os_release</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Add nvidia gpg key</span></span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-15">    curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /etc/apt/keyrings/nvidia-container-toolkit-keyring.gpg</span>
<span id="cb1-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/apt/keyrings/nvidia-container-toolkit-keyring.gpg"</span></span>
<span id="cb1-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Add nvidia container toolkit repository to apt</span></span>
<span id="cb1-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-21">    curl -s -L https://nvidia.github.io/libnvidia-container/{{os_release.stdout}}/libnvidia-container.list | \</span>
<span id="cb1-22">    sed 's#deb https://#deb [signed-by=/etc/apt/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \</span>
<span id="cb1-23">    tee /etc/apt/sources.list.d/nvidia-container-toolkit.list</span>
<span id="cb1-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/apt/sources.list.d/nvidia-container-toolkit.list"</span></span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> update packages</span></span>
<span id="cb1-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb1-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">upgrade</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span></span>
<span id="cb1-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update_cache</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">yes</span></span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Headless 530 is the latest available as of 2023/5/16</span></span>
<span id="cb1-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> install nvidia driver and container runtime docker</span></span>
<span id="cb1-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb1-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nvidia-driver-525-server</span></span>
<span id="cb1-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nvidia-utils-525-server</span></span>
<span id="cb1-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nvidia-container-toolkit-base</span></span>
<span id="cb1-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nvidia-docker2</span></span>
<span id="cb1-42"></span>
<span id="cb1-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Blacklist nouveau drivers</span></span>
<span id="cb1-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb1-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.copy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">src</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nouveau-blacklist.conf</span></span>
<span id="cb1-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/modprobe.d/nouveau-blacklist.conf</span></span>
<span id="cb1-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb1-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb1-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0644'</span></span>
<span id="cb1-51"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">notify</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-52"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Restart machine</span></span></code></pre></div>
<p>Of particular note is the step to blacklist the nouveau drivers. I’m not 100% sure since I didn’t do either the bare metal or virtualized install on the systems I was testing this on, but it appears that nouveau drivers get automatically installed on virtualized systems on top of esxi. Because of that, you have to blacklist them or else you get all sorts of esoteric errors that do a terrible job of telling you where the issue actually is.</p>
</section>
<section id="extra-stuff-to-make-it-work-with-rootless-docker" class="level1">
<h1>Extra stuff to make it work with rootless docker</h1>
<p>A couple pieces of this got covered in the above section, specifically installing <code>nvidia-container-toolkit-base</code> and <code>nvidia-docker2</code>. I’m not actually sure <code>nvidia-container-toolkit-base</code> is required, I couldn’t get anything working when I had just it installed, <code>nvidia-docker2</code> did the trick though, along with the extra steps below.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Add CDI support</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb2-4">    nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml</span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/cdi/nvidia.yaml"</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Disable cgroups</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.lineinfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/nvidia-container-runtime/config.toml</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regexp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^no-cgroups '</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">insertafter</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^#no-cgroups '</span></span>
<span id="cb2-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">line</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no-cgroups = true'</span></span></code></pre></div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>If you want to install nvidia drivers on hosts using ansible, don’t trust some hacked together code from some guy on the internet, use the official Nvidia role. But if that role doesn’t handle rootless docker integration, or you run into weird issues getting it working on VMs virtualized on top of esxi, take a look at this stuff and see if it helps you out.</p>


</section>

 ]]></description>
  <category>docker</category>
  <category>Linux</category>
  <category>nvidia</category>
  <guid>https://blog.ianpreston.ca/posts/2023-06-04-nvidia-notes.html</guid>
  <pubDate>Sun, 04 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Install Microsoft ODBC drivers with ansible</title>
  <link>https://blog.ianpreston.ca/posts/2023-06-04-odbc-drivers-ansible.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is a quick note on how to set up Microsoft ODBC drivers using ansible. Most of it is quite trivial, but you can run into issues with the Microsoft repository version of dotnet conflicting with the one from the base Ubuntu repository, and this playbook addresses that.</p>
</section>
<section id="how-to-do-it" class="level1">
<h1>How to do it</h1>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install odbc pre-requisites</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> lsb-release</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Add microsoft gpg key</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-8">    install -m 0755 -d /etc/apt/keyrings &amp;&amp; \</span>
<span id="cb1-9">    curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /etc/apt/keyrings/microsoft.gpg &amp;&amp; \</span>
<span id="cb1-10">    chmod a+r /etc/apt/keyrings/microsoft.gpg</span>
<span id="cb1-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/apt/keyrings/microsoft.gpg"</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> add Microsoft repository to apt</span></span>
<span id="cb1-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apt_repository</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deb [arch=amd64,armhf,arm64 signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/ubuntu/{{ansible_distribution_version}}/prod {{ansible_distribution_release}} main"</span></span>
<span id="cb1-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> present</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Prioritize Microsoft repo so you don't end up with dotnet conflicts if you need it later</span></span>
<span id="cb1-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.copy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">src</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"99-microsoft-dotnet.pref"</span></span>
<span id="cb1-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/apt/preferences.d/99-microsoft-dotnet.pref"</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install odbc drivers</span></span>
<span id="cb1-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> msodbcsql18</span></span>
<span id="cb1-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ACCEPT_EULA</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span></span></code></pre></div>
<p>The <code>99-microsoft-dotnet.pref</code> file is simple and looks like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode conf code-with-copy"><code class="sourceCode toml"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Package</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Pin</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">origin</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"packages.microsoft.com"</span></span>
<span id="cb2-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Pin-Priority</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">1001</span></span></code></pre></div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I’m not going to do a bunch of exposition on this. If you’re in the very specific circumstance of needing to install Microsoft ODBC drivers with ansible I hope this helps.</p>


</section>

 ]]></description>
  <category>Linux</category>
  <category>ansible</category>
  <guid>https://blog.ianpreston.ca/posts/2023-06-04-odbc-drivers-ansible.html</guid>
  <pubDate>Sun, 04 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Configuring Rootless docker with ansible</title>
  <link>https://blog.ianpreston.ca/posts/2023-06-04-rootless-docker.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is a write up summarizing the process I went through at work to configure Linux hosts with <a href="https://docs.docker.com/engine/security/rootless/">rootless docker</a>. After figuring out the manual way to do things I further automated it with an ansible playbook, as there’s a lot of per-user stuff you have to do that quickly becomes untenable to do manually, even if you’re only doing it on one host, and really out of hand if you have multiple hosts.</p>
<p>This document will outline the key steps for configuring rootless docker for users and the associated ansible tasks required for it. I’m not going to show every aspect of setting up ansible like creating the inventory of hosts, just the components that are specific to rootless docker.</p>
<p>I previously documented the manual approach I took while figuring all this out in <a href="../posts/2022-12-30-rootless-docker.html">this post</a>.</p>
<section id="why-rootless-docker" class="level2">
<h2 class="anchored" data-anchor-id="why-rootless-docker">Why rootless docker?</h2>
<p>Briefly, let me describe what motivated this approach. At work we have a number of teams that want to use docker, either for a development environment in <a href="https://code.visualstudio.com/docs/devcontainers/containers">devcontainers</a>, building containers for deployment, or both. All of our laptops run Windows, so the immediate obvious solution would be to install <a href="https://www.docker.com/products/docker-desktop/">docker desktop</a>. Unfortunately, that installation required turning on some services that we had disabled for security reasons, so we were not able to proceed with that approach. The next option would be docker on a remote Linux host. The traditional way of installing docker means that anyone who has access to work with docker effectively has root access to the system they’re running it on. This obviously presents a security issue on a shared machine, and the cost and complexity of giving every user their own VM was not practical, particularly for users that required GPUs for some of their workloads. Given these constraints, I set out to configure rootless docker so that multiple users could securely share a remote Linux instance and work in docker without security concerns. This has the added benefit of allowing users to do things like stop all their running containers with <code>docker container stop $(docker container ls -aq)</code> without stopping everyone else’s.</p>
</section>
</section>
<section id="install-the-docker-engine" class="level1">
<h1>Install the docker engine</h1>
<p>This part of the playbook is the same whether or not you’re going to do rootless, but I’ll include it for completeness. We’re basically following the <a href="https://docs.docker.com/engine/install/">docker install instructions</a> in ansible format. This particular playbook assumes the host OS is Ubuntu, and will need slight modification for other distributions:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install docker pre-requisites</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ca-certificates</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> curl</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gnupg</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> lsb-release</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      # Necessary for rootless installer</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> uidmap</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Add docker gpg key</span></span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-13">    install -m 0755 -d /etc/apt/keyrings &amp;&amp; \</span>
<span id="cb1-14">    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg &amp;&amp; \</span>
<span id="cb1-15">    chmod a+r /etc/apt/keyrings/docker.gpg</span>
<span id="cb1-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/apt/keyrings/docker.gpg"</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> add docker repository to apt</span></span>
<span id="cb1-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apt_repository</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"</span></span>
<span id="cb1-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> present</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install docker</span></span>
<span id="cb1-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker-ce</span></span>
<span id="cb1-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker-ce-cli</span></span>
<span id="cb1-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> containerd.io</span></span>
<span id="cb1-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker-compose-plugin</span></span></code></pre></div>
<p>Figuring out how to correctly create the GPG key and the associated apt repository was a bit tricky. Originally I wanted to use <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_key_module.html">apt_key</a> but it’s been deprecated due to security concerns. For whatever reason using the alternate examples provided in the docs with <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/get_url_module.html">get_url</a> didn’t seem to work. I’m not totally clear on what the <code>gpg --dearmor</code> is doing in the above playbook, but it’s definitely necessary. Fortunately it’s easy to make that script idempotent with the <code>creates</code> argument for the task.</p>
</section>
<section id="perform-rootless-docker-setup" class="level1">
<h1>Perform rootless docker setup</h1>
<p>This is where the meat of the install goes. This assumes you’ve got a list somewhere of all the users you want to configure for rootless docker and their UIDs. If your users are all members of AD groups then you can do something like what I document in <a href="../posts/2023-06-04-ansible-ad-users.html">this post</a> to get that fact set in your playbook.</p>
<section id="create-etcsubuid-and-etcsubgid" class="level2">
<h2 class="anchored" data-anchor-id="create-etcsubuid-and-etcsubgid">Create /etc/subuid and /etc/subgid</h2>
<p>The next thing we do is configure which UID and GID ranges on the host machine should be uniquely mapped for each user into their docker daemon. We want to reserve a range of IDs for each user so that permissions for a user within a container do not provide privilege escalation outside the container. Just as an aside, in a rootless runtime, UID 0 or root inside the container maps to the user that is running docker and their UID outside the container, so be sure to run your containers as root if you have any volumes bind mounted and don’t want to have to deal with weird permission issues.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> apply subuid and subgid settings for mapping</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">src</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> subid.j2</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/{{ item }}</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0644'</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subuid"</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subgid"</span></span></code></pre></div>
<p>The task itself is quite straightforward, where the magic happens is in the template:</p>
<pre class="jinja"><code># {{ ansible_managed }}
{% for user in users_dict %}
{{ user.user }}:{{100000 + (loop.index0 * 65536)}}:65536
{% endfor %}</code></pre>
<p>As mentioned, for each user we want a non-overlapping range of UIDs. In the docker docs they give each user a range of 65536 UIDs to use and start at 100000, which we reproduce here. The format of each entry is <code>username:start UID range:size of range</code>. We ensure this is non overlapping by multiplying the index of the loop we’re on by the size of the UID range. <code>/etc/subuid</code> and <code>/etc/subgid</code> have the exact same format so in the playbook we just apply the same template to both files.</p>
</section>
<section id="stop-the-root-level-docker-service" class="level2">
<h2 class="anchored" data-anchor-id="stop-the-root-level-docker-service">Stop the root level docker service</h2>
<p>This will conflict with the user level docker service, so we have to ensure it’s stopped:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Make sure the root level docker service is stopped and disabled</span></span>
<span id="cb4-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.systemd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item }}"</span></span>
<span id="cb4-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> stopped</span></span>
<span id="cb4-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb4-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"docker.service"</span></span>
<span id="cb4-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"docker.socket"</span></span></code></pre></div>
</section>
<section id="create-home-directories-for-each-user" class="level2">
<h2 class="anchored" data-anchor-id="create-home-directories-for-each-user">Create home directories for each user</h2>
<p>This is potentially being run on a newly created machine with users from Active Directory. Because of this, the users may not have a home directory created for them before they log in, so we have to ensure it’s created in order to copy later user level config files into it. We also create an ansible temp directory at this stage to suppress a warning.</p>
<p>I’m not totally sure the home directory creation needs to be done as a separate task, since the temp directory will create all parent folders necessary, but I wrote the first task before I realized I needed the second, and it’s nice to separate out the reasons for each step.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Make sure home directory exists</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/{{ item.user }}"</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item.user }}"</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"domain users@example.com"</span></span>
<span id="cb5-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> directory</span></span>
<span id="cb5-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0755'</span></span>
<span id="cb5-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Make sure the ansible temp dir exists for each user</span></span>
<span id="cb5-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/{{ item.user }}/.ansible/tmp"</span></span>
<span id="cb5-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item.user }}"</span></span>
<span id="cb5-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"domain users@example.com"</span></span>
<span id="cb5-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> directory</span></span>
<span id="cb5-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0700'</span></span>
<span id="cb5-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span></code></pre></div>
<p>Your value for <code>group</code> will likely be different, but you get the idea.</p>
</section>
<section id="create-an-entry-in-etcpasswd" class="level2">
<h2 class="anchored" data-anchor-id="create-an-entry-in-etcpasswd">Create an entry in /etc/passwd</h2>
<p>This is another feature of using domain users. Domain users don’t appear to automatically get an entry in <code>/etc/passwd</code> that lists things like their default shell. Even though users may have their default shell set to <code>bash</code> by <code>PAM</code> or whatever else, VS code doesn’t seem to recognize this without an <code>/etc/passwd</code> record, which causes it to try and run devcontainers through <code>/bin/sh</code>, which means your <code>~/.bashrc</code> doesn’t get loaded, which causes problems you’ll see in future steps. The TLDR is we want to manually create a record for each user in <code>/etc/passwd</code>. If you’re not dealing with users managed by AD then you can probably skip all this.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Get lines for /etc/passwd</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb6-3">    getent passwd {{ item.user }}</span>
<span id="cb6-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> getentstask</span></span>
<span id="cb6-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Filter results to just stdout</span></span>
<span id="cb6-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_fact</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb6-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getents</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{getentstask.results | map(attribute='stdout')}}"</span></span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Make sure there's a line in /etc/passwd</span></span>
<span id="cb6-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.lineinfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/passwd</span></span>
<span id="cb6-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">line</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item }}"</span></span>
<span id="cb6-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ getents }}"</span></span></code></pre></div>
<p>This feels a bit weird. In theory running <code>getent passwd &lt;user&gt;</code> should just be returning exactly what’s in <code>/etc/passwd</code> for that user to <code>stdout</code> so taking that result from <code>stdout</code> and putting it in <code>/etc/passwd</code> feels a bit circular, but it’s necessary for AD users.</p>
</section>
<section id="turn-on-linger-for-users" class="level2">
<h2 class="anchored" data-anchor-id="turn-on-linger-for-users">Turn on linger for users</h2>
<p>Turning this on allows user level services like rootless docker to persist when the user is not logged in. If we want users to be able to host small apps with docker from their user account for testing without being logged in all the time this is handy</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Turn on linger for all users</span></span>
<span id="cb7-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb7-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loginctl enable-linger {{ item.user }}"</span></span>
<span id="cb7-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/var/lib/systemd/linger/{{ item.user }}"</span></span>
<span id="cb7-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span></code></pre></div>
<p>Don’t ask me why I used <code>command</code> here and <code>shell</code> in the previous one. I should really just use <code>shell</code> all the time.</p>
</section>
<section id="run-the-installer" class="level2">
<h2 class="anchored" data-anchor-id="run-the-installer">Run the installer</h2>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Run the rootless docker installer</span></span>
<span id="cb8-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become_user</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item.user }}"</span></span>
<span id="cb8-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb8-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dockerd-rootless-setuptool.sh install</span></span>
<span id="cb8-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/{{ item.user }}/.docker/config.json"</span></span>
<span id="cb8-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">XDG_RUNTIME_DIR</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/run/user/{{ item.uid }}"</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span></code></pre></div>
<p>Note the call to <code>become_user</code>, that’s important. You can’t run the install script as root and tell it to do it for a specific user, at least I couldn’t figure out how, so we need to actually run this as the user we want. Also note that setting <code>XDG_RUNTIME_DIR</code> is necessary for successful completion of the install and requires you to know the UID of the user you’re configuring. Failing to set this variable will result in the script still running but the daemon and user service not actually being installed.</p>
</section>
<section id="set-bashrc-to-export-the-docker-socket" class="level2">
<h2 class="anchored" data-anchor-id="set-bashrc-to-export-the-docker-socket">Set bashrc to export the docker socket</h2>
<p>At this point users have docker installed and should be able to run <code>docker run hello-world</code> or some other similar test. We do have to take an extra step to get it to work with VS code though, and that’s setting an environment variable that points to the docker socket. This is the part I mentioned above that won’t work if you don’t have your default shell set to bash in <code>/etc/passwd</code>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Make sure bashrc exports the docker socket</span></span>
<span id="cb9-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb9-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become_user</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item.user }}"</span></span>
<span id="cb9-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.lineinfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/{{ item.user }}/.bashrc"</span></span>
<span id="cb9-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">line</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"export DOCKER_HOST=unix:///run/user/$(id -u)/docker.sock"</span></span>
<span id="cb9-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb9-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span></code></pre></div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Setting up rootless docker for an individual user isn’t a ton of work, but trying to scale that to multiple users on multiple machines begs for automation or else you’re pretty much guaranteed to waste time and make errors. The steps above should help you set up rootless docker for users with ansible.</p>


</section>

 ]]></description>
  <category>docker</category>
  <category>Linux</category>
  <guid>https://blog.ianpreston.ca/posts/2023-06-04-rootless-docker.html</guid>
  <pubDate>Sun, 04 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Redesigning my network</title>
  <link>https://blog.ianpreston.ca/posts/2023-04-09-network-rework.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Now that <a href="../posts/2023-04-08-managed-switch.html">I have basic connectivity</a> for my managed switch I need to figure out what I actually want my network to look like, and how I want to make it look that way.</p>
</section>
<section id="basic-goals" class="level1">
<h1>Basic goals</h1>
<p>Right now my network is completely flat and open, which means that the wifi leak sensor I’ve got that’s running who knows what firmware can reach the management interface on my router, or any of the internal servers I’m running. The same is true for guests on my wifi, or the couple friends I’ve created VPN credentials for so they can access some of the services I run. Just typing that actually stresses me out a bit.</p>
<p>The main goal is enhanced security and reliability through network segmentation. Guests connected to my WiFi shouldn’t be able to connect to management interfaces in my house for example.</p>
<p>A bonus goal is increased performance. My NAS has 4 rj45 ports that support <a href="https://en.wikipedia.org/wiki/Link_aggregation">link aggregation</a>, and so does the box that’s running my pfsense router. While link aggregation can’t boost the speed of a single connection, and I don’t do a ton of concurrent work on my network, having this would still be nice. Credit to <a href="https://forum.netgate.com/topic/165219/same-vlan-on-multiple-interfaces/6">this post</a> for making me realize I should be using link aggregation with the router rather than trying to split VLANs between multiple separately managed interfaces. <em>Addendum</em> I realize later down in this that I want to use the multiple NAS ports to connect directly into different networks, rather than do a big aggregation on one but still have everything have to go through my router.</p>
</section>
<section id="hardware-im-working-with" class="level1">
<h1>Hardware I’m working with</h1>
<p>My network starts with my router, a QOTOM Q330G4 with 4 1Gb Intel rj45 ports running pfsense. Next is my recently acquired HP procurve 2810 with layer 3 management and 48 1Gb ports. Finally for the network stack I have 2 Unifi AP AC-Lite WAPs that support multiple SSIDs with VLAN tagging. I think that will cover my requirements but there’s only one way to find out for sure.</p>
</section>
<section id="what-networks-i-need" class="level1">
<h1>What networks I need</h1>
<section id="list-all-the-types-of-devices-i-have-and-their-usage-considerations" class="level2">
<h2 class="anchored" data-anchor-id="list-all-the-types-of-devices-i-have-and-their-usage-considerations">List all the types of devices I have and their usage considerations</h2>
<p>To think about what networks I need I have to consider what sorts of things I have on my network and how I’d like to organize them.</p>
<p>To start, I have the management interfaces for my networking devices. The router at least won’t be on its own network, I’ll just have to lock that down with firewall rules. I’m not entirely clear how locking down the management interface on the switch works, I could probably put that on its own VLAN, but maybe that’s overkill. Right now my unifi controller is running on the same server that’s running all my other services, so I can’t isolate it with VLANs, that will also be firewall rules I guess.</p>
<p>Next there’s my servers and homelab. Currently there’s my three node proxmox cluster as well as a standalone box that’s running my services until I get things figured out on the proxmox cluster, but eventually that will be consolidated physically into one big cluster. Eventually within those physical servers there might be VMs representing different environments (dev/prod) that I might want to isolate. I’m pretty sure I can apply VLAN tags to VM interfaces, will have to test that to be sure.</p>
<p>I’ve got my work laptop, which should really be isolated from everything else. It’s got a wired connection so at least I won’t have to make an SSID just for it.</p>
<p>I’ve got IoT devices, although that’s a bit of a hand wavy category. The wifi leak sensor I previously mentioned doesn’t have to talk to anything else in my house so I can safely isolate it. My phone might be considered an IoT device, but I want it to at least be able to talk to my NAS so it can do photo backups. My Kobo probably counts as an IoT device, but there’s an ebook service that I run that I’d want it to connect to. This will require some thought and maybe some firewall rules on top of just network segmentation I think.</p>
<p>I’ve got trusted devices for admin like my workstation and my laptop. Those can probably just go on the same network as my lab and servers.</p>
<p>I’ve got my partner’s trusted devices like her laptop. At this point I’m not sure if she needs elevated privileges compared to house guests, but it also feels a bit weird putting her on a guest network in her own house.</p>
<p>Speaking of which, we’ve got the phones and laptops of any guests that visit us. Generally I think they just need internet access and can be isolated from IoT and server stuff.</p>
<p>I’ve mentioned it in a few other places, but I also have my NAS. I’d like to block most networks from accessing its management interface, but several of them will have to access its file share, and it also has my photo service running on it.</p>
<p>The last piece is the virtual networks for VPNs. I have OpenVPN running to connect to an off site Synology NAS that’s my off site backup. For everything else I use wireguard, although right now there’s just one tunnel both for myself for administration and trusted friends that I want to access my services. I’ll have to split those out.</p>
</section>
<section id="initial-network-idea" class="level2">
<h2 class="anchored" data-anchor-id="initial-network-idea">Initial network idea</h2>
<p>I’ll probably end up changing this, and I’ll definitely start with a subset of them while I’m testing, but let’s get the idea down.</p>
<section id="infra-lan" class="level3">
<h3 class="anchored" data-anchor-id="infra-lan">Infra LAN</h3>
<p>This will have the management interface for my switch, my proxmox nodes, my NAS, and any VMs or physical servers running production services. I think I’ll also put my workstation on this LAN to make administering things easier. I’ll either have an SSID that’s attached to this network or have a wireguard tunnel that can connect to it. If I can make the wireguard tunnel work internally and externally I’ll go with that.</p>
</section>
<section id="sandbox-vlan" class="level3">
<h3 class="anchored" data-anchor-id="sandbox-vlan">Sandbox VLAN</h3>
<p>This will only be used by VMs in my proxmox cluster. This is less for security than for testing out services in an isolated environment that might conflict with production services. It might also be a good place to test out firewall rules or other capabilities without impacting services.</p>
</section>
<section id="trusted-devices-vlan" class="level3">
<h3 class="anchored" data-anchor-id="trusted-devices-vlan">Trusted devices VLAN</h3>
<p>This will be for devices my partner or I own that we want to be able to access internal services. Laptops, phones, streaming boxes etc. If I want to limit the services some devices can access I’ll do it with firewall rules.</p>
</section>
<section id="guest-devices-vlan" class="level3">
<h3 class="anchored" data-anchor-id="guest-devices-vlan">Guest devices VLAN</h3>
<p>This will be for IoT stuff in the house and guests. It should just be able to access the internet and I could even experiment with rules that don’t let devices on this network talk to each other, just for added security. I think for now at least I’ll put my work machine on this network as well, especially if I can get device isolation within this VLAN.</p>
</section>
<section id="infra-wireguard-tunnel" class="level3">
<h3 class="anchored" data-anchor-id="infra-wireguard-tunnel">Infra wireguard tunnel</h3>
<p>A wireguard tunnel for me to use to administer my network.</p>
</section>
<section id="trusted-guests-wireguard-tunnel" class="level3">
<h3 class="anchored" data-anchor-id="trusted-guests-wireguard-tunnel">Trusted guests wireguard tunnel</h3>
<p>A wireguard tunnel for guests I’ve granted access to specific services. Exact services can be set with firewall rules and similar to guest devices VLAN I can restrict within network communication (I think). <em>Addendum</em>: I ended up not going with this and just using firewall rules.</p>
</section>
<section id="offsite-openvpn" class="level3">
<h3 class="anchored" data-anchor-id="offsite-openvpn">Offsite OpenVPN</h3>
<p>OpenVPN connection to my offsite backup. Should only be able to communicate with my NAS in the infra VLAN.</p>
</section>
<section id="trusted-devices-ssid" class="level3">
<h3 class="anchored" data-anchor-id="trusted-devices-ssid">Trusted devices SSID</h3>
<p>WiFi connection for the trusted devices VLAN</p>
</section>
<section id="guest-devices-ssid" class="level3">
<h3 class="anchored" data-anchor-id="guest-devices-ssid">Guest devices SSID</h3>
<p>WiFi connection for the guest devices VLAN.</p>
</section>
<section id="summary" class="level3">
<h3 class="anchored" data-anchor-id="summary">Summary</h3>
<p>So that’s four VLANs, two of which require SSIDs for WiFi, plus two wireguard tunnels and an OpenVPN tunnel. Compared to my current network of one LAN with one associated SSID, one wireguard tunnel, and one OpenVPN tunnel. Definitely more complex, but at least right at this moment this doesn’t feel like complete hubris.</p>
</section>
</section>
</section>
<section id="clean-up-pfsense" class="level1">
<h1>Clean up pfsense</h1>
<p>Before I start moving things around there are a couple of small tweaks I want to make to my pfsense setup after reviewing <a href="https://www.youtube.com/watch?v=fsdm5uc_LsU">this guide from Lawrence Systems</a> in preparation for this move. I’ll document them here, but they’re not really directly relevant to what I’m doing, I just want to have them done before I create a bunch of new networks, as some of them will interact with that.</p>
<p>The first tip I’m going to follow is just to add a third column to my dashboard. This obviously doesn’t relate to the network setup, but it was a great tip and now I can see more of what’s going on at a glance in my pfsense dashboard on my nice wide monitor.</p>
<p>The next one is the thing that made me want to take care of this stuff prior to messing with my network, and that’s to change the default port for the management portal on pfsense. The guide makes the very good point that if you want your gateway to handle reverse proxy tasks (which I eventually will for things like load balancing entrypoints to my kubernetes or proxmox cluster) then having your management interface on the default https port 443 will lead to conflicts. There’s a minor security through obscurity advantage to moving it too, but for me it’s about removing conflicts with reverse proxies. Since I’m going to put firewall rules in place that allow or block access to this management interface on various networks it will be nice to have the port updated and defined in advance. In the system, advanced, admin access section I’ll set the webConfigurator to use HTTPS on port <code>10443</code>. The redirect works although I’m getting errors about self-signed certs. I’ve got a plan for that but it’s happening after I get this other stuff sorted.</p>
<p>The one other thing I’m going to do at this point before I get started doesn’t come from the guide, but I’m going to rename a couple of my interfaces. Specifically I’m going to rename my old LAN interface from <code>LAN</code> to <code>LegacyLAN</code> and <code>LabLAN</code> to just <code>LAN</code>. I might eventually get rid of the LAN interface altogether and add it as another aggregation line for my new LAN, but for the foreseeable future it’s just going to kick around as a fallback network in case things go bad and I want to go back to a flat network while I figure them out.</p>
</section>
<section id="look-up-switch-commands" class="level1">
<h1>Look up switch commands</h1>
<p>At this point I’m almost ready to actually start setting up the network. The last thing I want to do is make sure I’m familiar with the commands or processes of configuring this stuff on pfsense and my switch. For pfsense I’m as comfortable as I can be without having actually implemented anything. I’ve watched some guides and read the docs on link aggregation and VLANs. The switch (as my <a href="../posts/2023-04-08-managed-switch.html">last post</a> demonstrated) is a lot more of a black box for me at this point. For what I’m trying to do I could probably use either the menu or cli interface. I know hardcore network folks would be all about the CLI, but I think I’ve established that’s not who I am, and for this level of complexity the menu is probably easier. I’d like to know what the commands are as well though just to have some options. I’ll be doing all of this config from a connection on the serial port of the switch to reduce the odds of locking myself out while I test something.</p>
<section id="figure-out-the-menu" class="level2">
<h2 class="anchored" data-anchor-id="figure-out-the-menu">Figure out the menu</h2>
<p>Getting into the menu interface is easy from the cli, just enter <code>menu</code> from the command prompt. From the menu interface option 5 takes me back to the CLI. Let’s take a look around at the things I’ll want to use.</p>
<section id="status-and-counters" class="level3">
<h3 class="anchored" data-anchor-id="status-and-counters">Status and Counters</h3>
<p>Under <code>Status and Counters</code> and then <code>General System information</code> I get some traffic info, the MAC address, and the firmware version of the switch (which looks like it’s at the latest version). Under <code>Switch Management Address Information</code> I see the management IP and gateway info I set. I also notice that the time server address isn’t set. I should probably change that since right now the switch thinks it’s January 1990. Add that to the todo list. Under <code>Port Status</code> I can see that only the port I’ve connected to pfsense is up. All the ports look basically the same except they’re a mixture of <code>MDI</code> and <code>MDIX</code> for <code>MDI Mode</code>. I have no idea what that means. Based on <a href="https://community.fs.com/blog/mdi-vs-mdix-and-auto-mdimdix-basis.html">this post</a> it’s related to the type of cable wiring you’re using. There’s also apparently an option to have it automatically configured. I’ll keep this in mind but for now let’s assume my switch defaults to auto configure that and it’ll just work, but keep this in mind for troubleshooting later. <code>VLAN Address table</code> is empty but has columns for <code>MAC address</code> and <code>Located on Port</code> so that might be handy to come back to later. <code>Port Address Table</code> lets me pick a port and then pulls up a table listing <code>MAC address</code>, but it’s empty. Leave that for now.</p>
</section>
<section id="set-time-server" class="level3">
<h3 class="anchored" data-anchor-id="set-time-server">Set time server</h3>
<p>Hopping over to switch setup I set the Time Sync method to <code>TIMEP</code>, the mode to <code>Manual</code> and set the server address as my gateway to use the pfsense time server. Setting that didn’t change the time in the menu. I think maybe I need <code>SNTP</code>, which <a href="https://forum.netgate.com/topic/143151/does-pfsense-support-sntp/5">according to this</a> is interoperable with the <code>NTP</code> protocol pfsense uses (I don’t have an option for <code>NTP</code> on the switch). Setting that up still doesn’t seem to be updating the time. Maybe I have to wait for a refresh? You’d think it would trigger one automatically when you change the config. How can I test this? Searching around doesn’t find anything. Let’s not get too sidetracked. I’ll set a timer for 12 minutes (default polling interval is 720 seconds) and check back on this later.</p>
<p>Coming back after 12 minutes the time is showing up correctly on the switch. Glad I didn’t spend a bunch of time troubleshooting that, although it’s silly it doesn’t try and sync after a config change automatically.</p>
</section>
<section id="switch-configuration" class="level3">
<h3 class="anchored" data-anchor-id="switch-configuration">Switch configuration</h3>
<p>This is the menu where most of the action will be for me. The first entry <code>System Information</code> is just what you get when you run the <code>setup</code> command so I’ve already been there. It’s where I configure the switch IP, default gateway and time settings (or try to at least).</p>
<p>Under <code>Port/Trunk Settings</code> I see that all my ports are set to enabled and <code>Mode</code> is set to <code>auto</code>, so that probably means I don’t have to worry about that whole <code>MDI/MDX</code> thing. I can also group ports into trunks here, which is probably where I’ll need to be to enable <code>LACP</code>. The interface is annoying, I have to hit space to toggle through 24 trunk groups before I can get back to the default of being empty. I can see why I’d want to use the CLI if I was going to do this a lot.</p>
<p><code>Network Monitoring Port</code> is disabled and that’s probably fine for now. <code>IP Configuration</code> has similar settings to what I did under <code>System Information</code> so I don’t need to mess with it.</p>
<p><code>SNMP Community Names</code> is a new thing for me. <a href="https://www.netadmintools.com/snmp-community-string">Based on this</a> post I’m just going to leave it alone for now.</p>
<section id="vlan-menu" class="level4">
<h4 class="anchored" data-anchor-id="vlan-menu">VLAN Menu</h4>
<p><code>VLAN Menu</code> seems like it will be of interest to me, let’s see what I can do here.</p>
<p>Under <code>VLAN Support</code> I can set the maximum number of VLANs to support. The default of 8 is more than the 3 I currently think I need so let’s leave that. Primary VLAN is set to <code>DEFAULT_VLAN</code> which from my preliminary reading should be <code>VLAN1</code>. I think that’s all fine, just note it for now. The last piece under here is whether GVRP is enabled, and by default it isn’t. From reading <a href="https://www.techtarget.com/searchnetworking/definition/GVRP">this</a> that seems to be what I want so let’s move on.</p>
<p>Under <code>VLAN Names</code> I’ve currently only got ID <code>1</code> associated with <code>DEFAULT_VLAN</code> so that confirms my suspicion there. I’ll come back to this and add <code>trust</code>, <code>guest</code>, and <code>lab</code> VLANs later. Under <code>VLAN Port Assignment</code> I can tag various ports with the VLAN tags I’ve created. Again, that will come in handy eventually.</p>
</section>
</section>
</section>
<section id="figure-out-the-cli" class="level2">
<h2 class="anchored" data-anchor-id="figure-out-the-cli">Figure out the CLI</h2>
<p>While it seems like I could do everything I need to do from the menu, let’s give me another option with the CLI.</p>
<ul>
<li>Port status: <code>show interfaces brief</code> nicely pages through the port status I saw in the menu. I think checking that from the menu is nicer since I can scroll up and down easily but it’s nice that it’s there. I can also check specific ports by adding a number, a comma separated list of numbers, or a dashed number range to just see a few ports. That might be handier.</li>
<li>Port/Trunk settings: I can use the <code>show trunks</code> command to show configured trunks, with the option to add a port range for just certain ports. I can also run <code>show lacp</code> just to see <code>LACP</code> configured ports. I should also be able to use <code>trunk &lt;port-list&gt; &lt; trk1 ... trk24 &gt; &lt; trunk | lacp &gt;</code> to configure a trunk. A nice word of caution at this point, the docs <strong>strongly</strong> recommend not having these ports connected when you’re configuring this. So I’ll have to do this over serial with the uplink ports disconnected until both pfsense and the switch are configured.</li>
<li>VLAN stuff: VLAN stuff is apparently not included in my docs. Weird. After grabbing the “Advanced traffic management guide” for the switch I’m ready to go. <code>show vlans</code> lists all the VLANs I have configured, currently just the default one. <code>show vlan &lt;vlan-id&gt;</code> does what you’d expect. For instance if I do <code>show vlan 1</code> all my ports show as <code>untagged</code> which means untagged packets that they receive will be treated as part of vlan1. <code>vlan &lt;vlan-id&gt; [name &lt;name-str&gt;]</code> will either create a vlan with the specified ID and name, or enter me into the context of that vlan if it already exists. I think that’s all I actually need to do at this point.</li>
</ul>
</section>
</section>
<section id="set-up-lacp-for-uplink" class="level1">
<h1>Set up LACP for uplink</h1>
<p>Time for the first stage of implementation. I want to get link aggregation set up to pfsense before anything else because I have to create the aggregation interfaces in pfsense from scratch, I can’t use an existing interface. Plus I’ll have to do this part with a serial connection. Down in the utility room I hook my laptop up to the serial port and then bring up the pfsense interface. Might as well do that part first. A lot of this information is referenced from another guide from <a href="https://www.youtube.com/watch?v=VULKulpXBYU">Lawrence Systems</a>.</p>
<p>The first thing I have to do is delete the interface I’ve been using for LAN on the switch, as I can’t have any devices that are assigned to an interface as part of my link aggregation. In pfsense I go to Interfaces and then assignments and delete my interface on <code>igb2</code>, noting that I also have <code>igb3</code> available, with <code>igb0</code> being my WAN and <code>igb1</code> being my legacy LAN, which I’m keeping around for the time being. Still on interfaces I switch over to the <code>LAGG</code> tab and add an interface. I select <code>igb2</code> and <code>igb3</code> as parent interfaces, set the LAGG protocol to LACP. I’ll leave LACP Timeout mode on the default of <code>Slow</code> and set the interface description to <code>igb2_3</code> because why not. After saving that I have a new interface labelled <code>LAGG0</code>. Back to the interface assignment tab I add an interface on <code>LAGG0</code> and then click on its default name of <code>OPT1</code> to configure it. In the config screen I check the box to enable it, give it a description of <code>LAN</code> (might change this to Infra later since that’s its intended purpose), set IPv4 Configuration type to static, give it an IP address of <code>192.168.10.1/24</code> and hit save.</p>
<p>Next up I have to set some firewall rules so traffic can actually happen on this interface. Head over to Firewall, Rules, and the LAN interface tab. I can’t seem to set the auto anti lockout rule for an interface other than the one I’m connected on, so I’ll make a poor man’s version with a rule that allows traffic to <code>This firewall</code> on the https port I set for management above. Then for now I’m just going to add an allow all style rule because I want to deal with firewall rules separately later.</p>
<p>Last bit of config within pfsense I’ll enable DHCP for this interface. This isn’t technically necessary, but it sure will make testing easier from my laptop. Under Services, DHCP server, and then the tab for LAN I’ll enable the DHCP server for this interface and give it a range for dynamic assignments from <code>192.168.10.200</code> to <code>192.168.10.250</code>. That should be more than enough since most of the devices on this network should be infra and therefore have static IPs.</p>
<p>That should cover it for pfsense, so let’s move over to the switch. I’m going to try doing this from the menu so I head to <code>Switch Configuration</code> then <code>Port/Trunk</code> settings. I set ports 1 and 2 to the group <code>Trk1</code> with type <code>LACP</code>, and hit save. At this point I think I’m ok so let’s plug in the cables and see what happens.</p>
<p>The first thing I check is if I can ping out from the switch. From the cli <code>ping 192.168.10.1</code> works, so that’s a good start. I can also ping the switch IP from my laptop which is still connected to <code>LegacyLAN</code>. This seems to be fine, but let’s see if I actually have redundancy. To do that I’ll start pinging the switch from my laptop (still on <code>LegacyLAN</code>) and then alternate unplugging cables from the switch. It works! I miss a few sequences while it fails over, but still pretty good!</p>
<p>Last thing to check is that the other ports are now working regularly on the default <code>LAN</code> network on the switch. Plugging into a random port I pull <code>192.168.10.200</code> and can ping out to the internet and <code>LegacyLAN</code>. Looks like we’re all good there, as would be expected.</p>
</section>
<section id="figure-out-actual-address-space-for-each-network-described" class="level1">
<h1>Figure out actual address space for each network described</h1>
<p>Before I go and create a ton of VLANs let’s write out the planned networks I want and their subnets.</p>
<ul>
<li>Infrastructure: This is called <code>LAN</code> right now and corresponds to the default VLAN on my switch. It’s in the <code>192.168.10.0/24</code> range and unless I have to add my laptop into it because I can’t get Wireguard to work the way I want then it doesn’t need a VLAN tag because everything on it will be wired. Devices on this networks should be able to talk to devices on any other network as this is the main administrative network.</li>
<li>Trust: For devices I know that I want to be able to access services. I’ll open up access to servers within Infrastructure to this group, but not to the management interfaces for things like my firewall or switch. This will be on the <code>192.168.15.0/24</code> range, will use VLAN tag <code>15</code> I’m going to make them match to the third octet of the IP to make it easier to reason about. There will be wireless devices on this network so I’ll have to create an additional <code>-trust</code> SSID beyond my regular one with the appropriate VLAN tag.</li>
<li>Guest: For devices that just need internet access. My work machine, IoT devices, and whatever devices friends and family connect with will go on here by default. I’ll keep this with the old SSID I was using to reduce the migration headache. This network will not be able to connect to anything but WAN, although I think I’ll have to enable avahi for things like Chromecasts to work. This will be on the <code>192.168.30.0/24</code> range and VLAN tag <code>30</code>.</li>
<li>Infrastructure Wireguard tunnel: For me to be able to administer the network from my laptop. Hopefully this will work both on site and remotely. That’s the design plan for now at least. It will use the <code>192.168.20.0/24</code> range through a wireguard tunnel interface. <em>Addendum</em>: Didn’t end up using this.</li>
<li>Trust Wireguard tunnel: Similar to the trust internal network, but for remote access, either for myself or trusted friends and family. It will use the <code>192.168.25.0/24</code> range.</li>
<li>OpenVPN tunnel: For connection to my offsite Synology. Synology only natively supports OpenVPN and I don’t want to add complexity by either hacking in Wireguard or adding a device over there for routing. This will stay on the <code>192.168.90.0/24</code> range but I’ll have to modify the firewall rules so it can talk to my NAS when I move it over to the Infrastructure network.</li>
<li>LAB: This will be for VMs or other devices that I want to experiment with and don’t want potentially impacting the rest of my network. I don’t want to just put them on guest because I’m hoping to block traffic within that network as well, plus the IP address space will just be crowded. This will pretty much only be used by VMs in my proxmox cluster. It will be in the range <code>192.168.40.0/24</code> with the VLAN tag <code>40</code>. If for some weird reason I find the need to segment this further I’ll use <code>41</code>, <code>42</code>, etc.</li>
</ul>
<p>In addition to these intended networks I’ll have a couple legacy networks around at least for now. Legacy LAN is where everything will live until I migrate it over, and I’ll probably keep it around for quite a while (or maybe forever) just to be safe even after nothing is connected to it. It’s in the <code>192.168.85.0/24</code> range. I’ve also got my legacy wireguard tunnel at <code>192.168.105.0/24</code>. I’ll see if I can just turn that into the Trust Wireguard tunnel since that’s what everyone who’s not me is using it for. I’ll have to change the address range and update the firewall rules but that should be ok.</p>
</section>
<section id="setup-vlans" class="level1">
<h1>Setup VLANs</h1>
<p>Next up we have to see if I can get VLANs working. To start I’ll just create one to make sure it works before I go wild.</p>
<p>I’ll start in pfsense under Interfaces, Assignments and then the VLAN tab. Let’s do the guest VLAN first since it has a simple firewall rule I can test easily. I set the parent interface to <code>lagg0</code>, the VLAN tag to 30, leave the priority at 0, and set the description to “Guest VLAN”. Back on the Interface Assignments tab I select VLAN 30 from the available network ports dropdown and click add. Then I click on the <code>Opt2</code> link to configure the new network. I enable the interface, give it the description “Guest VLAN”, and set it to static IPv4 with an IP address of <code>192.168.30.1/24</code>. Save and apply and then it’s over to services to configure its DHCP server. On the GUESTVLAN tab I enable DHCP and set the address pool to <code>192.168.30.100</code>-<code>192.168.30.250</code>. Even though most stuff on here will just grab a random IP, I’ll still use static maps for a lot of devices, so I want to keep space free for that. Last up on the pfsense side I have to create some firewall rules. First I add rules to block access to “this firewall” on the ssh and admin https ports. For the next part there are going to be a bunch of networks that I want to block this from access to, so I’ll create an alias first. Under firewall, aliases, I add an alias that includes the private networks I currently have configured, I’ll extend it later. I give it the name <code>private_networks</code> and then add entries for my Legacy LAN, LAN, and OpenVPN network and hit save. Back in rules under GUESTVLAN I add a rule to block traffic of any protocol to the alias <code>private_networks</code>, which should mean I can’t connect to anything outside my guest VLAN. At the bottom of the list I add an allow all rule so that anything that isn’t blocked by my rules above is allowed through.</p>
<p>Now over to the switch. I’m going to do this one through the menu at least, so I head to Switch Configuration, VLAN Menu, VLAN Names. I create a new VLAN with ID 30 and name Guest. Back one level to VLAN port assignments. First I set <code>Trk1</code>, my uplink aggregation port to “Untagged” for the default VLAN and “Tagged” for the Guest VLAN. I mapped out how I want to assign my ports and I know I’d like my work computer to go on port 14 so I’ll set it to “No” for the default VLAN and “tagged” for the guest. After saving it’s time to test.</p>
<section id="get-sidetracked-on-issue-with-wsl" class="level2">
<h2 class="anchored" data-anchor-id="get-sidetracked-on-issue-with-wsl">Get sidetracked on issue with WSL</h2>
<p>On my laptop plugged into a port other than 14 I pull a LAN IP address. I’m able to acces the admin console of pfsense, and I can ssh in.</p>
<p>Unplugging from that port and moving over to 14 I initially seem to have my old IP. After unplugging and plugging back in one more time now I’m pulling <code>169.254.49.68</code>, so something appears to be broken. I bet I should have set port 14 to “Untagged” for Guest VLAN. My laptop obviously isn’t applying VLAN tags, that will make more sense for ports connected to proxmox where I will be adding tags on VMs. Back to port 14. I pull <code>192.168.30.100</code>! Great start. Ok but I can’t connect to the internet or even ping my default gateway at <code>192.168.30.1</code>. That’s less good. Let’s check my firewall rules. Back over to a regular port so I can actually do that. Looking at the rules it looks like all the traffic is blocked by my private networks rule. I don’t see offhand why that would be the case, but let’s disable it and confirm that’s the issue. Disabling it didn’t fix things. Now I’m noticing that my allow all rule was actually set to just allow TCP, so maybe that’s the problem? Ok, with that fixed I can access the internet. That’s a good start. I can’t connect to the admin interface for pfsense, which is also intended behavior. I can’t seem to get online from within WSL though. I wonder if that’s something about the connection not being established with that VLAN tag originally? It shouldn’t be a firewall rule right now since I haven’t turned the private networks rule back on. I do a reboot just to be safe. Nope, that wasn’t it. I can’t even ping <code>192.168.30.1</code> from WSL. That’s super strange.</p>
<p>This requires a better setup for testing. Something very weird is going on and I don’t want to try and solve it standing in my utility room. Fortunately I have a spare port in my office upstairs, so I patch that one to the <code>.30</code> VLAN port and my workstation to a port on the switch that doesn’t have VLANs assigned. Back in the office I confirm that I still have the same behaviour from my laptop on the <code>.30</code> and my workstation works correctly on <code>.10</code>.</p>
<p>Back on the laptop, just for kicks mostly I try and connect to the network with docker (which is running on top of WSL2) and it works?! Now my mind is really blown.</p>
<p>Let’s try another experiment then. I’ll swap my workstation over to the VLAN port and see if its WSL can connect. Is it just something weird I didn’t realize I did on my laptop? Nope, exact same behaviour. Windows works fine, docker works fine, Ubuntu WSL does not.</p>
<p>Time for some searching. There’s <a href="https://github.com/microsoft/WSL/issues/6001">this GitHub issue</a> which describes similar behavior but it’s a couple years old with no resolution. They do have a request to collect and provide logs, depending on what I find I might come back and contribute to this. There’s <a href="https://github.com/microsoft/WSL/issues/6410">this GitHub issue</a> but in this case they’re trying to add VLAN tags on the network adapter for the Windows machine. The root cause might be similar, but the scenario isn’t quite the same, and there’s no resolution listed anyway. There’s <a href="https://github.com/MicrosoftDocs/WSL/issues/507">this GitHub issue</a> about applying a VLAN ID to the WSL network interface. That might work and might be worthwhile for testing but I’d like to see if there’s a cleaner fix. There’s <a href="https://github.com/microsoft/WSL/issues/6698">this GitHub issue</a> that says the 8021q module isn’t available in WSL. That appears to be true for me, but shouldn’t be relevant since I’m not trying to add my own VLAN tags, I’m just having the switch assign them.</p>
<p>Well I’m running real low on ideas at this point so back at the first issue I run their recommended log gathering script and put it up on the issue in a gist. I also add the note about docker working ok in case that’s a relevant clue to anyone who knows more about WSL and networking than me. In the meantime let’s take a look through the testing output and see if anything jumps out.</p>
<p>I notice that I can’t even ping the internal gateway of the WSL virtual network. I check that on my workstation and I can’t do it there either though, but it’s able to get online and talk to other devices in my network. I also can’t ping the Windows host IP, but I can’t seem to do that from anywhere, including pfsense itself so I’m not sure what to make of that.</p>
<p>Running <code>traceroute</code> on WSL without the VLAN I can see it hit the internal WSL gateway, then my <code>192.168.10.1</code> gateway, then the internet. Running it again on the WSL that’s on the VLAN it makes it to the WSL gateway (even though I can’t ping it) and then times out, it can’t make it any further. Let’s try that within docker on the machine with a VLAN to see if that shows anything. After loading the container with <code>docker pull ubuntu &amp;&amp; docker run -it ubuntu /bin/bash</code> and installing the tools I need with <code>apt update &amp;&amp; apt upgrade &amp;&amp; apt install inetutils-traceroute inetutils-ping</code> I run traceroute on the machine behind a VLAN. It doesn’t work? I reach the default docker network gateway of <code>172.17.0.1</code> ok, head on to a gateway of <code>192.168.65.5</code> which is super weird because I don’t have that subnet configured anywhere and then time out. But I can still ping out to the same internet site I was trying. Same thing for an internal server. I can ping it and resolve the correct internal IP, but traceroute gets hung up at <code>192.168.65.5</code>, which from some searching is the docker DNS server. Let’s try the same thing on the machine that’s not behind a VLAN. Same behavior. What. Let’s try traceroute from the WSL of the machine that’s not behind a VLAN. Works totally fine. What is happening with these networks?</p>
<p>At this point I have to step back from this issue. There are no resolutions on GitHub, and I’ve added my logs and comments to the issues in case anything comes up. I’ve posted on Reddit and <a href="https://serverfault.com/">serverfault</a> with no helpful response.</p>
<p>Fortunately, as long as docker works the impact of this on me is actually fairly minimal. I’ll keep my workstation in the Infra LAN without a tag so it will be fine. My laptop won’t be able to connect with WSL but I do almost everything Linux related on it from devcontainers anyway. I might have to make an Infra SSID when I get to the wireless step, just to have somewhere to connect from my laptop, but I don’t expect to need it often. As inconvenient as this is I don’t think it’s a showstopper so I’m going to move on. Maybe I’ll learn some more in the meantime that will be helpful.</p>
<p><em>Note</em>: Below I find that this behaviour doesn’t reproduce over WiFi. I’m so confused.</p>
</section>
<section id="carry-on-with-vlan-setup" class="level2">
<h2 class="anchored" data-anchor-id="carry-on-with-vlan-setup">Carry on with VLAN setup</h2>
<p>At this point I think it’s worth setting up the basics of what I need in terms of VLANs. I’ll save the firewall rules for later, but I’ll at least create the tags and interfaces. In the switch interface I’ve already got my Infra VLAN (1, default) and Guest (30) VLAN names created so I just have to add Trust (15) and Lab (40). Then it’s down to VLAN port assignment. I’ve got to update my trunk port to allow the new VLANs I’ve created, I’ll do that first since it’s at the bottom of the list and otherwise I might forget it. The next two ports I’ll use for my wireless access points. I want the APs themselves to be on my infra network so I’ll set the default VLAN to untagged. They’re also going to be creating guest and trust networks when I get to that point so I turn tags 15 and 30 on. I don’t see anything in my lab/dev environment being wireless so I’ll leave that off for now. The next four ports I’ll eventually use for my NAS. It’s got four connections on it so I can have one for each network. I originally thought about just putting them all into infra with link aggregation, but after watching some more Lawrence Systems videos I realized that it makes more sense to have them on each network directly so I’m not putting load on my router whenever I’m using the NAS, as I would be if the NAS was on Infra and most of the devices accessing it were on trust or guest. With that in mind for the next four ports I’ll set each one to untagged for a single VLAN (default/infra, trust, guest, lab in order) and <code>No</code> for the other VLANs. Next up we’ve got my three proxmox nodes. Those should be on infra by default, but I want to be able to add lab VMs, so I’ll turn VLAN 40 on. I don’t think anything in there makes sense for trust or guest, so I’ll leave that off. Just a handy reminder for myself here, the options <code>auto</code> and <code>forbid</code> are for if GVRP is enabled on my switch, which as discussed above, it is not. The next two ports are for my current standalone server and my workstation, both of which I’m putting on infra, so the default VLAN gets left as <code>untagged</code> and the other VLANs are set to <code>No</code>. The last two devices are my work computer and a Hue bridge for my lights, both of which belong on guest, so I set that VLAN to <code>untagged</code> and <code>No</code> for the other VLANs.</p>
<p>Now over on pfsense I have to create the VLANs, add DHCP for them, and (for now) give them a nice open “allow all” type firewall rule. The process is the same as what I described in the guest VLAN above so I won’t write it out again.</p>
</section>
</section>
<section id="migrate-services" class="level1">
<h1>Migrate Services</h1>
<section id="proxmox" class="level2">
<h2 class="anchored" data-anchor-id="proxmox">Proxmox</h2>
<p>Changing proxmox might be tricky since it uses static IPs. Presumably if I go in and change my network config I will lose connectivity until I move the host over to the new network. This will probably also do fun things to my cluster and ceph setup. That’s ok though, I’m not running anything production on there yet, that’s part of why I wanted to do this network rework now.</p>
<p>The first thing I do is remove the static leases I was using in pfsense to ensure name resolution of the proxmox hosts. This means I have to connect in from their IPs, but that’s ok. I’ll add in name resolution again later. Now on the proxmox hosts, I’ll do this one at a time. On the first one under system I go to DNS and update the DNS server to the new gateway. I add the old one in as a secondary one for now. Next I modify the hosts section to identify the new IP I’m going to give this host (192.168.10.11, I’ll leave 2-10 for more foundational infrastructure and start in the tens to match the PVE node number). Finally, and here’s where things will break until I switch ports, I go to the network section and update the <code>vmbr0</code> interface to the new address range. I get prompted to either apply changes or reboot. A reboot seems safer so I go for that and while that’s happening I head downstairs and move it over to the correct port on the switch. Backupstairs I can access it again from the new IP! It can no longer see the other two nodes, so maybe there’s something about not clustering across broadcast ranges. That’s fine, I’ll update the other two and then work on getting ceph set back up. After connecting the second node back it gets the correct IP and can join, but it can’t see the first node. Going up to the datacenter page in proxmox it looks like all the nodenames are still pointing to the old IP addresses, maybe name resolution isn’t working in pfsense?</p>
<p>I know I could do host overrides in the DNS server settings in pfsense, but I like assigning static leases to devices so I can see all the IP addresses I’m using from the DHCP page. There might be other things I can do with DNS to auto identify hostnames but I’m going to save that for later (either later in this post or another post). In pfsense I apply static leases for the two nodes I’ve moved over (glad I copied that when I deleted their leases on the old network). Doing this allows me to ping and correctly resolve the name for the other node but I still don’t see them in the cluster. In the <a href="https://pve.proxmox.com/wiki/Cluster_Manager#_cluster_network">proxmox docs</a> it looks like I have to edit <code>/etc/pve/corosync.conf</code>. There are also some handy docs on <a href="https://pve.proxmox.com/wiki/Cluster_Manager#pvecm_edit_corosync_conf">editing corosync</a>, which include incrementing the version. I can’t follow them though because even as root the file is read only. <a href="https://forum.proxmox.com/threads/cmd-access-is-good-gui-access-is-bad.106482/">This post</a> is from someone having the exact same issue as me, it’s because my nodes don’t have quorum because I took them down so cluster settings get locked. That’s totally sensible, probably should have thought of that before I tried migrating. Reading <a href="https://pve.proxmox.com/pve-docs/chapter-pvecm.html#_remove_a_cluster_node">these docs</a> it looks like I can remove nodes from the cluster, but then I’m going to have a bad time and have to reinstall them to get them back in. Let’s back up and try doing this a bit more gracefully. I’ll reset the first two nodes to their old address and put them back on the old switch just to make sure I can get back to a known good state and then more slowly move them over. Back in pfsense I remove the static mappings for the two nodes on the infra network and add then back in the legacy network. I change the host config and IP settings on the nodes and reboot them. Down to the utility room to plug them back into the old switch. Ok, we’re back up with quorum. Now to figure out the smart way to do this migration. <a href="https://pve.proxmox.com/pve-docs/chapter-pvecm.html#_adding_redundant_links_to_an_existing_cluster">Adding redundant links</a> feels like it should work, but the different links can’t talk to each other, so I’m not sure if I’ll get in a weird in between state partway through. I guess it should recover once all three nodes are on the new network. Let’s give it a shot. Given that this is already risky let’s follow the recommendations in the docs for editing corosync. On my first proxmox node I copy the current corosync config into a <code>.new</code> and <code>.bak</code> copy:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /etc/pve/corosync.conf /etc/pve/corosync.conf.new</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /etc/pve/corosync.conf /etc/pve/corosync.conf.bak</span></code></pre></div>
<p>Then I edit the new file. For each node I add an entry for <code>ring1_addr:</code> with the IP I’m migrating to. In the totem I increment the <code>config_version:</code> field. Finally I duplicate the interface section with link number 1. Let’s just check it on another node to make sure things are syncing properly. Yup, it’s over on my other node. Move the <code>.new</code> file to overwrite the original config and I should be good to go. Let’s try migrating again.</p>
<p>I move the static leases over from legacy LAN to Infra. This time I’m going to change all three nodes over at once and power them off, move the network cables over, and then bring them all back up. Let’s see if it works.</p>
<p>They came back up, and I can ping all of them at their new address. I can even ssh into them, but the web interface isn’t loading. So that’s fun. Ok, even weirder. I actually just can’t access the web interface for the first node. All three show as joined to my datacenter though and I can access the first node from the web interfaces of the other two. That’s pretty close to functional, just have to figure out this first web interface. Maybe it just needs a reboot? Worth a shot at least. Ok, that did it. Not really sure why that did it, but who ever knows why rebooting fixes things?</p>
<p>Last up, let’s get rid of the old addresses from the corosync config. I make another <code>.new</code> copy, edit it to remove the old <code>ring0</code> address and change the updated <code>ring1</code> address to be <code>ring0</code>, increment the <code>config_version</code> and get rid of the second interface. Checking the cluster info from the datacenter page I see all three nodes using the correct IP on the first interface. Success!</p>
<section id="ceph" class="level3">
<h3 class="anchored" data-anchor-id="ceph">CEPH</h3>
<p>I’m sure all these address changes have done interesting things to my CEPH cluster. Let’s try and get that back on track now. On one of my nodes I head over to the CEPH tab and check the configuration page. I can’t seem to update anything from the web portal so let’s try making changes in the terminal to <code>/etc/pve/ceph.conf</code>. I update <code>cluster_network</code>, <code>mon_host</code>, <code>public_network</code> and the <code>mon</code> settings for each node.</p>
<p>Still getting timeouts from CEPH, probably because it has to reload something? Let’s just reboot all the nodes again to be safe and see what happens. Still nothing. The config seems to have been applied but I don’t see anything. Running <code>pveceph status</code> or <code>ceph -s</code> just times out. Looking back on my <a href="../posts/2023-02-05-proxmox-ceph.html">previous effort</a> let’s see if I can find some good troubleshooting steps. The first thing I did was initialize ceph if <code>pveceph status</code> showed “not initialized” so I’m going to skip that. <code>pgrep ceph-mon</code> shows no monitors running but <code>pgrep ceph-mgr</code> and <code>pgrep ceph-osd</code> both show processes. Interestingly in the web interface I can see all three monitors, just with status “unknown”, but I can’t see any managers or OSDs.</p>
<p>Just as an aside here. I recognize I’m almost certainly going to spend more time troubleshooting this than I would just rebuilding the cluster. Especially since I went to all that effor to configure things with ansible. I’m treating this as a learning opportunity, not a productivity hack.</p>
<p>Reviewing the docs I find <a href="https://docs.ceph.com/en/latest/rados/operations/add-or-rm-mons/#changing-a-monitor-s-ip-address">this handy warning</a> that existing monitors are not supposed to change their IP address. From reading <a href="https://docs.ceph.com/en/latest/rados/operations/add-or-rm-mons/#changing-a-monitor-s-ip-address-the-right-way">this</a> I’m basically hooped unless I move all three nodes back to the old IP address range and even then I’m not sure I could painstakingly migrate one node at a time without losing quorum on either my ceph cluster or my proxmox cluster. In summary, don’t expect to be able to migrate a proxmox cluster over to a new address range, it’s going to be a rebuild.</p>
<p>I still want to try a bit more here before I give up on rebuilding ceph. Mostly because I’m stubborn, partially because it will help me understand how ceph works.</p>
<p>Checking what I still have running for ceph related processes I find the following:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:~#</span> ps ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> ceph</span>
<span id="cb2-2">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1621</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span>        Ss     0:00 /usr/bin/python3.9 /usr/bin/ceph-crash</span>
<span id="cb2-3">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2478</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span>        Ssl    0:01 /usr/bin/ceph-osd <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cluster</span> ceph <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--id</span> 0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--setuser</span> ceph <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--setgroup</span> ceph</span>
<span id="cb2-4">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6658</span> pts/0    S+     0:00 grep ceph</span></code></pre></div>
<p>The result is the same on all three of my nodes. Taking a look at <a href="https://forum.proxmox.com/threads/unexpected-ceph-behaviour-from-unused-ceph-installation.95229/">this forum</a> gives me a tip to check the status of <code>ceph-crash</code> which in turn gives me this error:</p>
<p><code>Apr 15 13:17:33 pve1 ceph-crash[1421]: ERROR:ceph-crash:directory /var/lib/ceph/crash/posted does not exist; please create</code></p>
<p>After creating that directory I don’t see any records getting created.</p>
<p>Looks like I can stop the running <code>ceph-osd</code> with <code>systemctl stop ceph-osd.target</code> I still have the <code>ceph-crash</code> service running and even if I kill it the process comes back, so it’s being triggered by some service. Running <code>systemctl --type=service --state=running</code> I can see there’s the <code>ceph-crash</code> service so I stop that on each node. After running that it doesn’t seem like I have any more CEPH services running. Let’s try a purge again.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:~#</span> pveceph purge <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--crash</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--logs</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error</span> gathering ceph info, already purged<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span> Message: got timeout</span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Foreign</span> MON address in ceph.conf. Keeping config <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">keyrings</span></span></code></pre></div>
<p>So no luck there. Let’s try <a href="https://forum.proxmox.com/threads/not-able-to-use-pveceph-purge-to-completely-remove-ceph.59606/">this post</a> and run the following on each node:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> /etc/systemd/system/ceph<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">killall</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-9</span> ceph-mon ceph-mgr ceph-mds</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> /var/lib/ceph/mon/  /var/lib/ceph/mgr/  /var/lib/ceph/mds/</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> /etc/pve/ceph.conf</span></code></pre></div>
<p>Now I need to wipe my disks to get ready to start again. Initially when I try and wipe it from the menu I get a warning about the device having a holder. From <a href="https://forum.proxmox.com/threads/sda-has-a-holder.97771/">this forum</a> post I learn to run <code>lsblk | grep ceph</code> to find the id and then <code>dmsetup remove &lt;the id I found&gt;</code>. After this I can wipe the disks.</p>
<p>Let’s see if I can rebuild the cluster using my ansible playbook from last time. After modifying it with the new network addresses of course. I can initialize the ceph cluster but creating monitors fails because I don’t have <code>/var/lib/ceph/mon</code> to create monitors in. Fine, I create that folder on each node and then try adding monitors. Same thing fore creating managers, have to create <code>/var/lib/ceph/mgr</code>, might as well recreate <code>/var/lib/ceph/mds</code> while I’m at it. This whole experience is really making me rethink integrating distributed storage with my hypervisor. Let’s try creating an OSD. Here’s where things fall apart again: <code>auth: unable to find a keyring on /etc/pve/priv/ceph.client.bootstrap-osd.keyring: (2) No such file or directory</code></p>
<p>Ok. That’s enough of this. This is way off topic for figuring out my network and it’s pretty clear that I’m going to have to come back and figure out my distributed storage solution again.</p>
</section>
</section>
<section id="nfs" class="level2">
<h2 class="anchored" data-anchor-id="nfs">NFS</h2>
<p>After all that I realized my NFS share wasn’t loading anymore. After thinking for a second I realized that made sense since my NFS rules only allowed connections from the <code>192.168.85.0/24</code> range. Adding a new rule for the infra range fixed that up. <em>Addendum</em>: I did this for my proxmox shared folder but not for the rest of them here, this bites me later in the NAS migration section.</p>
</section>
<section id="vms-with-vlan-tags" class="level2">
<h2 class="anchored" data-anchor-id="vms-with-vlan-tags">VMs with VLAN Tags</h2>
<p>For now let’s make sure creating VMs with VLAN tags works the way I think it should and move on. I’ll have to come back to refiguring my storage in a future post. First I create a VM with no VLAN tag assigned to the network interface and DHCP settings. It comes up and gives me an IP in the correct range. I could just create a new one, but let’s see what happens if I just shut this down and change the VLAN tag on the interface? On the hardware tab I go to the network interface and give it a VLAN tag of 40. It pulls the new IP when it comes back up and works perfectly. Finally something goes well!</p>
</section>
<section id="migrate-synology-and-prod-server" class="level2">
<h2 class="anchored" data-anchor-id="migrate-synology-and-prod-server">Migrate Synology and prod server</h2>
<p>Now that I have my VLANs setup, it’s time to migrate my NAS over. To start I’m going to shutdown my production server so it doesn’t get any weird behavior while things are shifting over. Once I’ve got the Synology back up I’ll migrate it to the new Infra LAN as well. I can head into the “Info Center” and then Network section of the Synology control panel to get MAC addresses for each interface. This will allow me to create static routes in pfsense to give correct IP addresses. On the infra LAN the next free IP address after the gateway and switch is <code>192.168.10.3</code> so I’ll assign that to the NAS. I’ll keep the same pattern of making it <code>192.168.x.3</code> on each network for consistency. For hostnames I’ll just use the name I’ve assigned the nas on infra, and all other networks I’ll prepend the network name to distinguish. After adding in all the static mappings and confirming the order I set the ports on the VLAN it’s time to head down to the utility room and move some cables around. When I come back upstairs I’m delighted to see that I can ping all the interfaces at the IP I expected. I have to flush my DNS cache before I can ping the original hostname on the infra IP, but otherwise this part is smooth sailing. Let’s bring up my prod server and see if all my services still work. It came back up ok and it picked up the new IP, but only some of my docker containers are coming back. Again, that’s out of scope for this so I’ll just re-run my ansible playbook for setting up this machine and see if that resolves it. Ok, the problem was that I had volumes specified with reference to the old IP address. Even though the associated containers weren’t running, they still had a claim on those volumes and so ansible couldn’t remove and re-add them. After stopping all containers and removing them I re-ran the playbook and realized I had to update the NFS share permissions on my other shares to allow access from the Infra network. This was actually one of the reasons I wanted to migrate over. NFS is not secure (at least without some fancy user auth tied in that I’ve never bothered to setup) so having it only available on my infra network and using SMB everywhere else will enhance my security. While I was at this I moved my media box over to my guest network and after a bit of fiddling with kodi settings to point to the new share that’s on the guest network things all came back up.</p>
</section>
<section id="migrate-the-last-couple-wired-devices" class="level2">
<h2 class="anchored" data-anchor-id="migrate-the-last-couple-wired-devices">Migrate the last couple wired devices</h2>
<p>Beyond what I’ve moved over so far the only wired devices I have left are my work computer, a Hue bridge for lights, and my access points. I’ll deal with the access points when it’s time to migrate the SSIDs in the coming section. The last two devices went smoothly and joined the guest network as I’d expect them to. I still haven’t set any firewall rules so the guest network isn’t actually any more/less secure right now, but at least they’re joining the correct network and nothing is immediately breaking.</p>
</section>
</section>
<section id="set-up-ssids-with-vlan-tags" class="level1">
<h1>Set up SSIDs with VLAN tags</h1>
<p>This part is a little scary because almost all of my devices in this house are on WiFi so if I break this I’m going to have a bad time. I think I’m just going to prove out the actual VLAN activity working and that nothing breaks just by being on a different network before I set up firewall rules. Right now my APs are still on my unmanaged switch. I think I first want to create new SSIDs with VLAN tags, confirm that doesn’t break anything on the unmanaged side, and then move them over to the managed switch and see what happens.</p>
<p>Over in my unifi controller portal the first thing I have to do is create networks for each of the VLANs I’m using. On the networks panel I add two networks named [Trust/Guest]VLAN and give them the appropriate VLAN tags. Over on WiFi I’m going to keep my existing SSID and just make it the guest network. This seems like the easiest way to handle migration and it will reduce confusion for guests. I’ll change the network for that one from <code>default</code> to <code>GuestVLAN</code>. I’m not going to make it a guest network at this point, I’m not even sure what that will do if my router isn’t Unifi. I’ll handle firewall rules in pfsense later. I make a second network for the trust VLAN and I should be basically good to go. At this point my controller can’t actually see my APs. I can ping them from the server that’s running it, but I think since they’re on different networks some broadcast that they’re using for discovery isn’t working. I’m guessing/hoping that all I’ll have to do to address this is move them over to the other network. Down in the utility room again I change over the APs to their designated ports on the switch. They both come back up and pick up the static leases I assigned for them. Checking the Unifi console both of them show up with the status “Adopting”, which is better than not visible at all. While the adoption is happening I take a look at my phone. I am online, but I’ve pulled an IP in the <code>Infra</code> range, so the VLAN tags aren’t being applied yet. That makes sense given the APs are still adopting so they wouldn’t have been able to incorporate any configs. The Unifi web interface now has them cycling between “Adopting” and “Offline” although I can still consistently ping them. I think something about moving my controller has broken the APs connections. I perform a factory reset on the APs and try again. Something about the credentials don’t seem to be working. Let’s try forgetting the AP and re-adopting it. It feels like it should work, I even get a notification that the AP has been adopted, but it still hangs on adotping. Still not working. Let’s try a firmware update on the AP through ssh.</p>
<p>Ok, firmware is updated, devices have been rebooted. I’ve also set the existing entries for both devices to “Forget” in the web UI. Both of them show back up as adoptable. I click adopt on one of them and eventually it just shows up as offline in the web portal even though I can still ssh into it. Let’s try another factory reset now that I’ve done the firmware update. After running that command I can’t ssh back into it. Power cycle the AP to see if that comes back up. Hmm, it comes back up but the firmware version is back. Looking at the AP it seems to start off with the default inform address, but when I set it to the correct one it goes back to the old IP of my controller server. After a bit of searching I realize that this is because I had to hard code the inform IP setting in the controller so it didn’t use the docker IP of the container it was in, and that was set to my old IP. Let’s try adopting again. Ok! One of them at least has switched over to “Getting Ready”. That’s farther than I’ve made it before. After a bit more waiting they both come back online. What a relief. Checking my phone I am now pulling an IP in the <code>192.168.30.0/24</code> range so it looks like VLAN tags worked too!</p>
<p>I’m super curious at this point to see how my laptop will respond to getting VLAN tags from the WiFi. Will I still not be able to connect with WSL? I can?!? I’m so extra strength confused right now. Connecting to either SSID pulls the correct IP and WSL works just fine. Running traceroute confirms that it is routing traffic through the correct gateway address for whichever VLAN I’m on. Just to make sure I’m not totally losing it I plug back into the cable for my work machine that’s on the guest VLAN and confirm I can reproduce the failure on WSL. I can. I have absolutely no idea what to make of this.</p>
</section>
<section id="create-wireguard-tunnels" class="level1">
<h1>Create Wireguard Tunnels</h1>
<p>Now I need to deal with wireguard. Right now my tunnel allows communication to my legacy LAN. It also uses <code>.105</code> for the third octet which was closer to my old IP addressing scheme. To match my IP scheme a bit closer I’m going to move my Wireguard tunnel over to <code>192.168.25.0/24</code> to it’s close to the trust network range of <code>192.168.15.0/24</code>, that doesn’t actually do anything inherently, it just makes it easier for me to keep straight in my head. On the wireguard peers I have to adjust their allowed IP ranges to cover that new range as well. Further, on the client for the peers I have to adjust the allowed IPs to cover the Infra LAN (I’ll handle specific access to infra with firewall rules, but some services on that network have to be routable).</p>
<p>I was originally going to make two wireguard tunnels and handle firewall rules at that level, but upon further consideration I think it will be easier to just set rules for specific devices than bother with all that.</p>
<p>At this point I think Wireguard itself is basically correctly configured.</p>
</section>
<section id="set-up-static-leases" class="level1">
<h1>Set up static leases</h1>
<p>This part isn’t strictly necessary, but I like using static leases for all devices on my network so it’s easy to spot new additions and also to allow for hostname resolution. In pfsense I’ll keep one window on the leases under my legacy LAN since that will help me figure out the identity of devices I’ve previously given static leases, and also allow me to clear off their old leases. In the other Window I’ll check each of my newly created networks and ensure that they have the devices I’d expect. Checking my existing leases everything that doesn’t currently have a static lease is on my guest network, which is perfect since everything I added on other networks I gave a static lease so I shouldn’t be seeing anything there. After spending a little while confused about why I couldn’t see my iPhone to give it a static lease I noticed it had a setting turned on for “Pivate WiFi access”. Somehow this not only hides my MAC address but the IP it gets doesn’t even show up in my list of DHCP leases. That’s pretty neat, but also sneaky. For my home network I’m turning that setting off on the phone so I can give it a private address. Doing this is also a good opportunity to make sure I actually can identify all the devices on my network. For instance I got real confused by something labelled android but eventually realized it was the tablet panel for my security system.</p>
</section>
<section id="make-sure-everything-works-before-adding-firewall-rules" class="level1">
<h1>Make sure everything works before adding firewall rules</h1>
<p>At this point I’ve got a bunch of stuff on different networks, but no actual security since everything is still allowed to route to everything. In theory this should mean that I won’t have any issues at this stage but as I’ve seen at several other points in this adventure that’s not always actually true. Before I add more complexity with firewall rules I’m going to step through all my devices and make sure they still work as I’d expect.</p>
<p>It does! What a nice surprise after all the weird twists I’ve encountered going through this.</p>
</section>
<section id="create-firewall-rules" class="level1">
<h1>Create firewall rules</h1>
<p>Now we’re at the part where I actually add some security to all this network segmentation I’ve been doing.</p>
<p>First I’m going to create some aliases to make things a bit easier on myself. The first one I’ll make I’ll label <code>pfsense_admin</code> and include the ports for https and ssh access to the router, since I don’t want anything touching that. I can also use it to create my own anti-lockout rules for my infra LAN, since the default one from pfsense is tied to my legacy LAN. I’ll also create an alias for my devices on wireguard, as I’ll want them to have elevated access relative others I grant VPN access to. Next I’ll create a “web” port alias for 80 and 443. Right now my services are on http but I’d like to move them to https in the future.</p>
<section id="wireguard-rules" class="level2">
<h2 class="anchored" data-anchor-id="wireguard-rules">Wireguard rules</h2>
<p>I’m not going through these in any particular order beyond the order they happen to be in for my firewall rules tabs. I currently just have an allow all type rule on this interface so I need to restrict things a bit. The first rule I’ll add is to allow my laptops to access anything. I’ll make that the top rule and then I can add other rules below. Anyone else using this service is accessing either my file share over samba or one of the production services I’m running on my standalone machine. I add allow rules for samba by opening port 445 to my NAS IP, and the “web” alias port to my server. I also better allow access to this firewall since it’s providing DNS if nothing else, but I’ll block the admin ports first and then create an allow rule for the firewall generally. Rules are evaluated top to bottom so the block on admin ports will apply and then the allow on all other ports will follow. There might be a way to combine those rules but I’m going to try this for now. I don’t want anything else to happen through VPN so I can finally disable the allow all rule I had to start (I could just delete it but whatever).</p>
<p>Testing the rules from my phone on LTE work the way I’d expect. I can access my web portals but I can’t get into the firewall web interface. I tried testing my laptop tethered to my phone in hotspot mode but couldn’t get it working. I couldn’t even get regular web traffic happening while the VPN was on. Wireguard is set for split tunneling so I wonder if that’s something about the hotspot having protections in place rather than an actual restriction. I’m going to leave testing the rest of this for now. Next time I’m out with my laptop I’ll try some other tests. Coming back to this after some reboots this is working as expected so I’m going to leave it alone.</p>
</section>
<section id="guest-lan-rules" class="level2">
<h2 class="anchored" data-anchor-id="guest-lan-rules">Guest LAN rules</h2>
<p>First rule I need is blocking admin access to the firewall, using the alias I already created. Next I’ll create an alias for all my private networks, which is everything except this one and the WAN and block access to that. After that I just need an allow all rule. This one’s actually pretty straightforward rules wise. One more thing I have to open is access from my Kodi box to the port on my prod server where I’m hosting its mariadb database. I also have to add a rule so my kobo can talk to my calibre server.</p>
<p>Testing these rules I’m delighted to find that everything still works. My robot vacuum needed a reboot when I loaded it on the app, but maybe that was a coincidence?</p>
</section>
<section id="trust-lan-rules" class="level2">
<h2 class="anchored" data-anchor-id="trust-lan-rules">Trust LAN rules</h2>
<p>This one should be easy as well. I block access to the admin portal on the router, create an alias for my switch and access points and block that as well.</p>
<p>This works as expected. As a bonus, on my laptop if I connect through my wireguard tunnel I can access the router admin page, but I can’t without the tunnel, so the extra permissions on Wireguard seem to work even if I’m still on my local network as well.</p>
</section>
</section>
<section id="scream-test" class="level1">
<h1>Scream test</h1>
<p>I’m not really calling this done at this point. I’ve done all the testing I can think of and things appear to be performing the way I’d expect them to. But as I’ve seen above, networking impacts basically everything so I’m going to leave this for at least a week before I fully relax. I’m not going to wait to publish this that long though, if anything comes up I’ll come back here and edit this.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Networking is hard. Not so much because of VLANs or Firewall rules themselves. Those are actually fairly straightforward (except with WSL for whatever reason). The challenge is in thinking about all the services you have and how they all talk to each other. So many little hard coded configs that I didn’t think about, or access rules that I hadn’t considered. I’m still glad I did this because I learned a lot and my network will be in better shape for the future, but man, what an effort.</p>


</section>

 ]]></description>
  <category>networking</category>
  <category>Linux</category>
  <guid>https://blog.ianpreston.ca/posts/2023-04-09-network-rework.html</guid>
  <pubDate>Sun, 09 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Setting up my first managed switch</title>
  <link>https://blog.ianpreston.ca/posts/2023-04-08-managed-switch.html</link>
  <description><![CDATA[ 





<section id="edit" class="level1">
<h1>Edit</h1>
<p>I bought another switch, I guess I’m a glutton for punishment. This one has some different connectivity and configuration requirements so I’ll document them at the bottom of the post.</p>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>After some <a href="../posts/2023-02-24-k8s-the-hard-way.html">recent challenges</a> where experiments in my lab took down DNS for my entire network, I decided it was time to stop putting off cleaning up my network from the giant flat architecture it’s currently using.</p>
<p>To accomplish this goal I first needed to acquire a managed switch. Following a great deal of searching and talking myself into and out of getting some super fancy 10gb switch with PoE I found <a href="https://www.hpe.com/psnow/doc/c04140686?jumpid=in_lit-psnow-red">an hp 2810-48g</a> for $15 from a local reseller and decided it made more sense to pick that up and learn before committing to anything super fancy and expensive. As with most of my recent posts, this is going to be a log of the things I tried and issues I encountered, as opposed to a polished how-to guide for others to follow. Although, if you’re in a similar position to me at the start of this post, then maybe reading through will save you some pain on your own journey.</p>
</section>
<section id="connecting-to-the-switch" class="level1">
<h1>Connecting to the switch</h1>
<p>If I’m going to manage this switch, I need some way to connect with it. Right now it’s not even assigned an IP, and from my reading these types of switches don’t just pick one up by default. Instead I have to connect in over the management interface, which is a port that looks like ethernet on the switch, but is actually a serial console. I ordered in a RJ-45 to USB cable to handle this connection and hooked it up to one of the boxes I had down by the switch. I also ran a regular ethernet cable from the first port on the switch to one of the unused interface ports on my pfsense router. I’ll set up a separate network on that and slowly migrate devices onto this switch as I get it working.</p>
<p>Anyway, with the connection established physically, I have to figure out how to connect in from the machine. I ssh into the box the switch is connected to and run <code>lsusb</code>. <code>Bus 003 Device 002: ID 0403:6001 Future Technology Devices International, Ltd FT232 Serial (UART) I</code> looks like the right device. How do I connect to it? Well first I reboot because I realize I haven’t rebooted since I upgraded the kernel on this machine and I think that’s giving me problems accessing kernel modules <a href="https://bbs.archlinux.org/viewtopic.php?id=211536">as seen here</a>. The reboot also leads to <code>/dev/ttyUSB0</code> showing up, which was what I was looking for when I started poking around with <code>lsusb</code> and <code>dmesg</code>. Following the console connection <a href="https://docs.netgate.com/pfsense/en/latest/hardware/connect-to-console.html">docs from pfsense</a> I run <code>sudo screen /dev/ttyUSB0 115200</code> and just get a blank screen. After waiting a fair while and almost giving up I’m greeted with the procurve screen!</p>
<pre><code>ProCurve J9022A Switch 2810-48G
Software revision N.10.02

Copyright (C) 1991-2006 Hewlett-Packard Co.  All Rights Reserved.

                           RESTRICTED RIGHTS LEGEND

 Use, duplication, or disclosure by the Government is subject to restrictions
 as set forth in subdivision (b) (3) (ii) of the Rights in Technical Data and
 Computer Software clause at 52.227-7013.

         HEWLETT-PACKARD COMPANY, 3000 Hanover St., Palo Alto, CA 94303

We'd like to keep you up to date about:
  * Software feature updates
  * New product announcements
  * Special events

Please register your products now at:  www.ProCurve.com




Press any key to continue</code></pre>
</section>
<section id="connect-in-and-bring-up-setup" class="level1">
<h1>Connect in and bring up setup</h1>
<p>Now I’ve got a nice prompt saying <code>ProCurve Switch 2810-48G#</code>. So now what? According to the manual I can just type <code>setup</code>, that’s handy, let’s give that a shot.</p>
<pre><code>ProCurve Switch 2810-48G                                    7-Jan-1990  18:21:16
==========================- CONSOLE - MANAGER MODE -============================
                                  Switch Setup

  System Name : ProCurve Switch 2810-48G
  System Contact :
  Manager Password :                    Confirm Password :
  Logon Default : CLI                   Time Zone [0] : 0
  Community Name : public               Spanning Tree Enabled [No] : No

  Default Gateway :
  Time Sync Method [None] : TIMEP
  TimeP Mode [Disabled] : Disabled

  IP Config [DHCP/Bootp] : DHCP/Bootp
  IP Address  :
  Subnet Mask :


 Actions-&gt;   Cancel     Edit     Save     Help</code></pre>
<p>That’s pretty neat. At this point I guess I better set up the router to actually operate on that port. Over in pfsense I go to <code>Interfaces -&gt; Interface Assignments</code>. I’ve got <code>igb0</code> set as my WAN, <code>igb1</code> as my (currently only) LAN, and nothing on <code>igb2</code>, which I assume is the port my switch is plugged into since I plugged it in beside the other two. Let’s create an interface there and call it <code>LABLan</code> for now. After adding the interface I head into the options, mark it enabled, rename it from the default <code>Opt1</code> and give it an IP address of <code>192.168.10.1/24</code>. Eventually I’m going to have to refigure my addressing scheme, but for now that space isn’t in use so let’s go with it.</p>
</section>
<section id="test-basic-connectivity" class="level1">
<h1>Test basic connectivity</h1>
<p>I think at this point I can give my switch an IP address and connect into it that way. Let’s try. I change the IP Config to manual and then enter an IP address of <code>192.168.85.2</code> and a subnet mask of <code>255.255.255.0</code>. Let’s test this. To avoid potential routing or firewall problems as an issue I’ll first start by just trying to ping it from a shell on pfsense. I get a response! Good start. Let’s see if I can ping it from my LAN on another machine, probably not. Yeah, I can’t. Eventually I’m going to lock these different networks down, but for now while I’m testing let’s see if I can open things up. Again, I’ll clean this up later, but for now I’m just adding a rule that passes any traffic from <code>LAN</code> net to <code>LABLan</code> net. But ping still doesn’t work. Why would that be? Probably because I didn’t add a rule that allowed outbound traffic from <code>LABLan</code>. Getting closer, at least now my switch can ping the default gateway where it couldn’t before. But I still can’t seem to ping it from my other network. Let’s take a step back and see if I can ping that gateway from my network. I can, so that suggests the network rules are working. But then why can’t I ping the switch? Running <code>traceroute</code> from another machine shows it reaching the gateway at <code>192.168.10.1</code> but not making it through to the switch.</p>
<p>I’ve simplified my firewall rule for that interface even further with just allowing pass everywhere, but it’s still not working.</p>
<p>I want to try pinging out from the switch, but for whatever reason connecting in again using the same <code>sudo screen /dev/ttyUSB0 115200</code> that was working before is not rendering well anymore. Guess I’ll get sidetracked and work on that.</p>
</section>
<section id="get-sidetracked-on-the-serial-interface" class="level1">
<h1>Get sidetracked on the serial interface</h1>
<section id="try-some-other-consoles-and-commands" class="level2">
<h2 class="anchored" data-anchor-id="try-some-other-consoles-and-commands">Try some other consoles and commands</h2>
<p>For whatever reason upon trying to reconnect I’m getting either nothing from the terminal or some random gibberish characters, or parts of what seem to be the prompt or menu screen, but not rendered correctly to actually read. I assume there’s something wrong with how my serial connection is configured. I tried connecting with <code>minicom</code> instead, and got similar results. I tried connecting at different baud rates, but that also didn’t imporve things. I read that the switch would auto-negotiate based on whatever rate I first connected to it with, so I reset the switch and tried connecting at <code>38400</code> since I’d seen that in some guides, but it was still basically the same. At least I learned the proper way to end a <code>screen</code> session with <code>ctrl+a</code> and then <code>k</code>.</p>
</section>
<section id="realize-i-can-telnet-in" class="level2">
<h2 class="anchored" data-anchor-id="realize-i-can-telnet-in">Realize I can telnet in</h2>
<p>Now that I have an IP address assigned, it looks like I can <code>telnet</code> in from pfsense with <code>telnet 192.168.10.2</code>. I’d still like to get the serial interface figured out as a fallback, but at least this lets me work through the menus while I’m figuring that out.</p>
<p>Just as a quick first test I see if I can ping out from the switch, and I cannot. I can ping my default gateway, but I can’t ping anything on the LAN or internet. That’s weird, but I’m coming back to that later, right now we’re getting the serial console working properly.</p>
<p>From the telnet session I run <code>show console</code> to get my serial config:</p>
<pre><code> Console/Serial Link

  Inbound Telnet Enabled [Yes] : Yes
  Web Agent Enabled [Yes] : Yes
  Terminal Type [VT100] : VT100
  Screen Refresh Interval (sec) [3] : 3
  Displayed Events [All] : All

  Baud Rate [Speed Sense] : speed-sense
  Flow Control [XON/XOFF] : XON/XOFF
  Session Inactivity Time (min) [0] : 0</code></pre>
</section>
<section id="try-with-hard-coded-baud-rates-and-putty-finally-figure-it-out-sort-of" class="level2">
<h2 class="anchored" data-anchor-id="try-with-hard-coded-baud-rates-and-putty-finally-figure-it-out-sort-of">Try with hard coded baud rates and putty, finally figure it out (sort of)</h2>
<p>Let’s try hard coding the baud rate to what I’m using. First I run <code>config</code> to get into config mode, then <code>console baud-rate 115200</code> to set the rate, then <code>write memory</code> to save the setting, and <code>reload</code> to reboot the switch. After giving it a minute to come back up I re-run my screen command. Still doesn’t work. I wonder if this is some weird quirk of trying to do things over ssh. Let’s connect my laptop directly and try it out. That will introduce the added factor of using putty into the mix, but oh well.</p>
<p>Working with putty seemed to work a bit better. I still ended up with blank screens but with a bit of fussing around I was able to get it started up again. I wonder if I just left it in a weird state before and if I can get back in cleanly remotely now.</p>
<p>Ok yeah, that seems to be it. I guess I’ll have to remember to leave the session in a clean state. Let’s see if I can quit out and come back in. I can, ok, must have just been something about the state I left it in. Back to actually setting up this switch.</p>
<p>Actually, one more thing. Let’s set the baud-rate back to auto. Again from the switch I run <code>config</code> to get into config mode, then <code>console baud-rate speed-sense</code> then <code>write memory</code> then <code>reload</code>. After rebooting the switch I reconnect with <code>sudo screen /dev/ttyUSB0</code> without specifying a speed. It auto connects at 9600 baud, which seems to work fine.</p>
</section>
</section>
<section id="set-up-routing" class="level1">
<h1>Set up routing</h1>
<p>Back to actually making this thing work for networking. I have an IP address for the switch, and I can reach that from my router, and I can reach the router from my switch, but I can’t get out to the internet or my other networks from the switch, or into the switch from my other networks. What gives?</p>
<p>As part of the test I decide to see if I can connect my NAS into this network on one of its other ports. I go in, give it a static IP on that port (since I haven’t enabled DHCP on this interface yet) and… get locked out of my NAS on the LAN interface. I’m able to confirm that I can ping the NAS from my switch now, but I’ve taken down my NAS from my main network, which is definitely not good. I’ll go unplug that cable and hope my NAS comes back. Oh good, it did. Still have to figure out what’s up with my routing though.</p>
<p>I guess this is a good point to do a manual backup of my pfsense setup. I should have backups going automatically, but this seems like a time to have a little extra insurance.</p>
<p>Oh wait, I think my LAN firewall rules only allow outgoing traffic from other networks. I probably have to add an allow rule to receive traffic from LabLAN. Nope, still can’t ping.</p>
<p>Just to restate where I’m at, from my LAN connected computer at <code>192.168.85.2</code> I can ping the <code>LabLAN</code> gateway at <code>192.168.10.1</code>, but not the switch at <code>192.168.10.2</code>. From the pfsense router I can ping the switch at <code>192.168.10.2</code> and from the switch I can ping the <code>LabLAN</code> gateway at <code>192.168.10.1</code> but not the <code>LAN</code> gateway at <code>192.168.85.1</code>. For the brief period when I had my NAS connected on that interface I could ping it from the switch, although that also messed up my connectivity on <code>LAN</code> for the NAS, so I turned that off while I’m testing.</p>
<p>After some poking around I decide to check the output of the <code>show ip</code> command on the switch:</p>
<pre><code>ProCurve Switch 2810-48G# show ip

 Internet (IP) Service


  Default Gateway :
  Default TTL     : 64
  Arp Age         : 20

  VLAN         | IP Config  IP Address      Subnet Mask     Proxy ARP
  ------------ + ---------- --------------- --------------- ---------
  DEFAULT_VLAN | Manual     192.168.10.2    255.255.255.0   No</code></pre>
<p>So I don’t have a default gateway set. That would do it. Looking back I didn’t write down anything about setting that. Oops.</p>
<p>I run setup again, I set the default gateway to <code>192.168.10.1</code> and everything works. I can see how I missed that now, the default gateway setting is well above where you set the IP of the switch. Well that was a waste of a fair bit of time.</p>
</section>
<section id="try-the-web-interface" class="level1">
<h1>Try the web interface</h1>
<p>I know all the hardcore network people use the shell, and maybe at some point I’ll do that too, but I’d at least like the option of a network interface. Let’s see if I can get my hands on that.</p>
<p>Opening up a browser and loading the IP of the switch I get:</p>
<p><code>This product requires the Java language, which is either disabled or not available on this browser.</code></p>
<p><code>To use this product you must either upgrade your browser to one that is Java compliant, or enable the Java language on your current browser.</code></p>
<p>From checking out <a href="https://community.spiceworks.com/topic/1146093-hp-procurve-java-application-blocked">this post</a> it seems like I’d have to have a very old browser to use this web interface. Fine, guess it’s menus and CLIs for me.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this post I demonstrated that I don’t really know a lot about networking and that this is going to be quite the learning experience. I also got the basic connectivity working on my managed switch. In the next post I’ll do some actual planning for my network and start configuring things and moving services over.</p>
</section>
<section id="new-switch" class="level1">
<h1>New switch</h1>
<p>I picked up another HP switch recently, a HP JG542A 5500-48G-PoE+. The nice thing about this compared to my earlier switch is the support for PoE+, which should mean I can take the PoE injectors out of my rack that I’m using for my access points, and support more devices later. It’s also got a couple SFP+ ports which might come in handy if I ever get cool enough to do fiber.</p>
<p>Of course new switch means new problems. The first issue was that somehow the bootloader on it had been corrupted. I’m guessing the techs who refurbished it went a little to hardcore doing factory resets. After a bunch of searching I determined that the resolution would be to flash a new firmware. Unfortunately, firmware for this switch is behind an HPE paywall. After a bunch of back and forth I managed to get ahold of HPE support, who advised me to use my corporate email to create an account, even though I very clearly told them this was purely for my home lab and not at all related to my employment. After creating an account with my work email (good thing I have one of those I guess) the support team went above and beyond and actually set up a zoom call with me where they helped me find the firmware and walked me through flashing it on my switch. I think I’d still have preferred that the firmware just be public, but that was a nice consolation.</p>
<p>After getting the switch flashed and confirming that I had connectivity, I had a new problem. The CLI for this switch appears to be different than my previous one. At a minimum I can’t seem to bring up a menu with the <code>menu</code> command. Let’s figure out how to give it an IP and configure it.</p>
<p>As part of the flashing, the HPE folks helped me set up an IP address for the switch, unfortunately I don’t remember what commands I used so for now I can’t change it. I also don’t have any remote configs enabled on that interface, so I can ping it through there but that’s about it.</p>
<p>Connecting over serial still works ok. I did the initial config with putty since it was easier, but now that the switch is down in my rack, I’m back to sshing into a server that has the console on a USB to serial connection and running <code>sudo screen /dev/ttyUSB0 9600</code> I have to connect at the slower rate on this switch, at least for now. Also, pro tip, <code>ctrl+backspace</code> is how you do backspace over serial.</p>
<p>From there at least I’m able to turn on the web interface with <code>system-view</code> followed by <code>ip http enable</code>. According to <a href="https://techexpert.tips/hp-switch/hp-switch-initial-configuration/">this page</a> I should be able to login with username <code>admin</code> and no password by default but that didn’t work. If I run <code>return</code> to get back from <code>system-view</code> and then <code>display web users</code> I get back an empty list. So I assume I have to create or update a user?</p>
<p>Let’s look at <a href="https://techhub.hpe.com/eginfolib/networking/docs/switches/5500hi/5998-5327_fund_cg/content/378579358.htm">the docs</a> according to this I have to:</p>
<ul>
<li>Assign an IP address to a Layer 3 interface.</li>
<li>Create a local user account.</li>
<li>Configure a local user account for Web login</li>
<li>Assign a user privilege level and the Web service to the account.</li>
</ul>
<p>First step is done.</p>
<p>Second step I accomplish with <code>system-view</code>, <code>local-user admin</code>, <code>password simple &lt;password&gt;</code> which I think has created a local user and given it a password.</p>
<p>Ok, having found the Fundamentals Configuration Guide, which is differen than the Fundamentals Command Reference (Why does HP split their docs into so many documents?) I think I have a better handle on how to do this.</p>
<p><code>system-view</code>, <code>local-user admin</code> <code>authorization-attribute level 3</code> (I think this is “manage”), <code>service-type web</code>. Weirdly this is referred to as a telnet service type, <code>quit</code>.</p>
<p>After putting that all in I try the login page and it works! Let’s hit save on the web interface before I do anything else so I don’t lose my progress.</p>
<p>As with the last switch, in theory I could get all fancy and learn the commands and automation for setting this up, but for now let’s just try and do things the GUI way. I’m not really trying to become a network wizard here (at least at this point) I just want a switch to work on my network.</p>
<p>I take a quick run through the wizard. It allows me to set the device name (I’ll stick with HP) as well as IP configuration. Right now it’s just using DHCP, which is fine with me at this point but I’ll have to reconfigure that once I actually swap it out with my main switch to a hard coded value.</p>
<p>Let’s walk through the rest of the menu items and see what I can find:</p>
<p>Under Device -&gt; System time I’m able to configure NTP and have the switch reflect the correct date and time, always handy.</p>
<p>Under port management I’ve got some handy status checks and also a place to add descriptions, which will come in handy later. I can also set default VLAN IDs for ports, but I haven’t created VLANs on this switch yet so that will have to wait.</p>
<p>Under Energy Saving I can disable PoE on ports or shut them down. I’ll want to come back to this later as well.</p>
<p>Under Network I can create VLANs so that’s an important piece for me.</p>
<p>I create my VLANs again and give them names in that section. After that I head to modify VLAN and assign port statuses to match my old switch.</p>
<p>Finally, I head down to PoE to turn on PoE just on the two ports that my access points will be connected to. No sense enabling it on anywhere else at this time.</p>
<p>I think that’s it for now, let’s save and see if I can make this work.</p>
<section id="failure" class="level2">
<h2 class="anchored" data-anchor-id="failure">Failure</h2>
<p>After all that I swapped over all the ports, took out my PoE injectors, fired everything up and couldn’t connect to anything wired or get power to my access points. I suppose I could keep hacking at this but we’ve gone well over the amount of effort I feel justified putting in to avoid having two PoE injectors in my rack so I’m going to give up. Fortunately the switch was fairly cheap.</p>


</section>
</section>

 ]]></description>
  <category>networking</category>
  <category>Linux</category>
  <guid>https://blog.ianpreston.ca/posts/2023-04-08-managed-switch.html</guid>
  <pubDate>Sat, 08 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Notes on Kubernetes the hard way</title>
  <link>https://blog.ianpreston.ca/posts/2023-02-24-k8s-the-hard-way.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this post I’ll be recording notes related to working through <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way">kubernetes the hard way</a> by Kelsey Hightower. I’ve gone through a few kubernetes tutorials before, and messed around with <a href="https://minikube.sigs.k8s.io/docs/">minikube</a> a bit, but that’s it. Before I try and get a “proper” k8s cluster going on my proxmox setup I’m going to try and work through this guide in the hope that it will improve my understanding of the setup.</p>
</section>
<section id="provisioning-compute" class="level1">
<h1>Provisioning compute</h1>
<p>All the terraform code for the provisioning can be found <a href="https://github.com/ianepreston/scratch/tree/main/k8s-the-hard-way/pve-terraform">here</a>.</p>
<p>Almost immediately I’m deviating from the guide because it expects me to deploy things in google cloud, and instead I’m going to do it on my local network. I don’t expect this to cause me a ton of problems, except I won’t have access to an external cloud load balancer, so I’ll have to figure something else out there. I’ll cross that bridge when I get to it.</p>
<p>Additionally, I also can’t provision the VMs the guide recommends using the gcs specific commands, instead I’ll use terraform to provision VMs from the templates I set up in <a href="../posts/2023-01-21-proxmox3.html">an earlier post</a>.</p>
<section id="sidebar-to-load-in-secrets" class="level2">
<h2 class="anchored" data-anchor-id="sidebar-to-load-in-secrets">Sidebar to load in secrets</h2>
<p>Terraform needs credentials to control my proxmox cluster, and I clearly don’t want to have those in git. In my earlier post I mentioned that I’d try using vault or bitwarden to manage secrets at some point. I’m going to save vault for now, but I have added the <a href="https://bitwarden.com/help/cli/">bitwarden cli</a> to my devcontainer, so I should be able to use it to securely retrieve credentials into a project. I created a secure note in bitwarden labeled <code>pve_terraform_cred</code>, now to load that into my workspace.</p>
<p>This actually turned out to be pretty straightforward, which was a nice surprise:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-f</span> pve_creds.env <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb1-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Credentials file doesn't already exist, loading from Bitwarden."</span></span>
<span id="cb1-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Logging into bitwarden"</span></span>
<span id="cb1-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bw</span> login</span>
<span id="cb1-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Getting the terraform creds"</span></span>
<span id="cb1-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bw</span> get notes pve_terraform_cred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> pve_creds.env</span>
<span id="cb1-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span></code></pre></div>
<p>Now when I start working in terraform I just have to run <code>source pve_creds.env</code> in my terminal to have the environment variables for my username and password available. I spent a bit of time trying to get the script itself to set the environment variables, but child processes can’t modify the environment of their parents so I’m stuck there.</p>
</section>
<section id="basic-setup" class="level2">
<h2 class="anchored" data-anchor-id="basic-setup">Basic setup</h2>
<p>I covered this in the templates post, but briefly let’s go over setting up the provider and a connection to my cluster. In my <code>main.tf</code> file I have the following code:</p>
<pre class="tf"><code>terraform {
  required_providers {
    proxmox = {
      source  = "telmate/proxmox"
      version = "2.9.11"
    }
  }
}
provider "proxmox" {
  pm_tls_insecure = true
  pm_api_url      = "https://pve1.local.ipreston.net:8006/api2/json"
}</code></pre>
<p>And that’s it for setting up the connection. I have environment variables set by my script above with the username and password to my cluster so I don’t need to provide anything in the code. A quick <code>terraform init</code> followed by <code>terraform plan</code> shows that I’m all set up.</p>
</section>
<section id="provision-vms" class="level2">
<h2 class="anchored" data-anchor-id="provision-vms">Provision VMs</h2>
<p>To follow the guide I will need to create a total of 6 VMs, 3 each of controllers and workers. The configuration of all of these nodes should be largely identical, with the exception of hostname, IP address, and which proxmox node they’re loaded on. The most straightforward way to do this in terraform would be to just set up one VM, and then copy-paste its config 5 more times with slight modifications. I could do a slightly fancier version with <a href="https://developer.hashicorp.com/terraform/language/meta-arguments/for_each">for each loops</a>, but that will still have a lot of common config mixed in with the parts that are looping and will be tricky to read and update. It’s a bit overkill for something like this, but the point here is learning so I’m going to create a <a href="https://developer.hashicorp.com/terraform/tutorials/modules/module-create">module</a> that hard codes all the common aspects of the VMs I’m going to create and only leaves the parts that will change across nodes and controlllers/workers as variables.</p>
<section id="create-a-module" class="level3">
<h3 class="anchored" data-anchor-id="create-a-module">Create a module</h3>
<p>In the terraform folder I’ll make a <code>modules/ubuntu-vm</code> subdirectory and in that I’ll place two files. First we have <code>variables.tf</code>:</p>
<pre class="tf"><code>variable "node" {
  description = "Proxmox node number to deploy to"
  type        = number
}

variable "type" {
  description = "A controller or worker node"
  type        = string
}

variable "ip" {
  description = "The static IP for the VM"
  type        = string
}</code></pre>
<p>This is just defining the variables that I’ll need to pass into this module to create a resource. As described above, I want everything else about these nodes to be the same, so this is all I need for variables.</p>
<p>Then I have a <code>main.tf</code>:</p>
<pre class="tf"><code>terraform {
  required_providers {
    proxmox = {
      source  = "telmate/proxmox"
      version = "2.9.11"
    }
  }
}

resource "proxmox_vm_qemu" "ubuntu-vm" {
  name        = "ubuntu-${var.type}-${var.node}"
  target_node = "pve${var.node}"
  onboot      = true
  oncreate    = true
  clone       = "ubuntujammytemplate"
  full_clone  = true
  agent       = 1
  os_type     = "cloud-init"
  cores       = 4
  cpu         = "host"
  memory      = 8192
  bootdisk    = "scsi0"
  disk {
    slot     = 0
    size     = "100G"
    type     = "scsi"
    storage  = "local-zfs"
    iothread = 1
  }
  network {
    model  = "virtio"
    bridge = "vmbr0"
  }
  ipconfig0 = "ip=${var.ip}/24,gw=192.168.85.1"
}</code></pre>
<p>Having to put the required provider up here was a little confusing at first, since I had it defined in the base terraform module, but after some errors and troubleshooting I learned that I have to specify the required provider in every module that uses it. Note that I don’t have the <code>provider</code> block that explicitly points to the actual proxmox instance I want to apply this to, that only lives in the base module. The rest of this block is a standard <a href="https://registry.terraform.io/providers/Telmate/proxmox/latest/docs/resources/vm_qemu">terraform proxmox VM</a> resource where I’ve hard coded in all the parameters I want to be consistent across nodes, and plugged in variables for the parts that are going to change.</p>
</section>
<section id="fun-with-loops" class="level3">
<h3 class="anchored" data-anchor-id="fun-with-loops">Fun with loops</h3>
<p>The other tricky part of this is that I would really like to do nested for each loops, which I guess isn’t a native concept in terraform. In python to create the map of values that I want I’d do something like:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">vms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-2">    {</span>
<span id="cb5-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nodetype"</span>: nodetype,</span>
<span id="cb5-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pvenode"</span>: i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vm_ip"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"192.168.85.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> base_octet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-6">    }</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> nodetype, base_octet <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]</span>
<span id="cb5-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb5-9">]</span></code></pre></div>
<p>I can’t nest a for each in terraform, so I have to do some nested for loops in variables to create a map that I can then use for each on. <a href="https://faultbucket.ca/2020/09/terraform-nested-for_each-example/">This blog</a> has basically the same issue so I should be able to follow its logic to produce what I want. After some fiddling around I get the following:</p>
<pre class="tf"><code>locals {
  nodetypes = {
    "controller" = 0
    "worker"     = 3
  }
  vm_attrs_list = flatten([
    for nodetype, baseoctet in local.nodetypes : [
      for i in range(3) : {
        name = "${nodetype}${i}"
        node = "${i + 1}",
        type = "${nodetype}",
        ip   = "192.168.85.${70 + baseoctet + i}"
      }
    ]
  ])
  vm_attrs_map = {
    for obj in local.vm_attrs_list : "${obj.name}" =&gt; obj
  }

}</code></pre>
<p>Which is certainly a lot more verbose than python, but whatever. I can check it out before trying to apply it to a resource by using <code>terraform console</code>:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> terraform console</span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> local.vm_attrs_map</span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller0"</span> = {</span>
<span id="cb7-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.70"</span></span>
<span id="cb7-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller0"</span></span>
<span id="cb7-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node"</span> = 1</span>
<span id="cb7-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller"</span></span>
<span id="cb7-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller1"</span> = {</span>
<span id="cb7-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.71"</span></span>
<span id="cb7-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller1"</span></span>
<span id="cb7-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node"</span> = 2</span>
<span id="cb7-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller"</span></span>
<span id="cb7-15">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-16">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller2"</span> = {</span>
<span id="cb7-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.72"</span></span>
<span id="cb7-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller2"</span></span>
<span id="cb7-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node"</span> = 3</span>
<span id="cb7-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller"</span></span>
<span id="cb7-21">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-22">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker0"</span> = {</span>
<span id="cb7-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.73"</span></span>
<span id="cb7-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker0"</span></span>
<span id="cb7-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node"</span> = 1</span>
<span id="cb7-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker"</span></span>
<span id="cb7-27">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-28">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker1"</span> = {</span>
<span id="cb7-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.74"</span></span>
<span id="cb7-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker1"</span></span>
<span id="cb7-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node"</span> = 2</span>
<span id="cb7-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker"</span></span>
<span id="cb7-33">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-34">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker2"</span> = {</span>
<span id="cb7-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.75"</span></span>
<span id="cb7-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker2"</span></span>
<span id="cb7-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node"</span> = 3</span>
<span id="cb7-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker"</span></span>
<span id="cb7-39">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-40"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
<section id="put-it-all-together" class="level2">
<h2 class="anchored" data-anchor-id="put-it-all-together">Put it all together</h2>
<p>Now that I’ve got my module created and my map to loop over I can finish up in <code>main.tf</code> in the root of this project:</p>
<pre class="tf"><code>module "ubuntu_vm" {
  source   = "./modules/ubuntu-vm"
  for_each = local.vm_attrs_map
  node     = each.value.node
  type     = each.value.type
  ip       = each.value.ip
}</code></pre>
<p>Nice and easy! I run <code>terraform init</code> again so that the module I created is loaded, then <code>terraform plan</code> to make sure I’m actually getting the 6 nodes I expect. Everything looks good so I run <code>terraform apply</code>… and wait an hour and a half for it to not actually deploy any nodes. When I initially tested terraform back when I was doing templates I did notice that it took a lot longer to deploy via terraform than via the menu, but that was minutes, not hours. Time to figure out what’s going on here.</p>
<p>As a fun aside to remember for later, as part of troubleshooting I tried updating the proxmox provider from the <code>2.9.11</code> version I was using to the <code>2.9.13</code> release and it just straight up doesn’t work. Everything installs ok but then I get:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> terraform plan</span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">╷</span></span>
<span id="cb9-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span> Error: Plugin did not respond</span>
<span id="cb9-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span> </span>
<span id="cb9-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   with provider<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"registry.terraform.io/telmate/proxmox"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>,</span>
<span id="cb9-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   on main.tf line 9, in provider <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"proxmox"</span>:</span>
<span id="cb9-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>    9: provider <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"proxmox"</span> {</span>
<span id="cb9-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span> </span>
<span id="cb9-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span> The plugin encountered an error, and failed to respond to the plugin.<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*GRPCProvider</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.ConfigureProvider</span> call. The plugin</span>
<span id="cb9-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span> logs may contain more details.</span>
<span id="cb9-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">╵</span></span></code></pre></div>
<p>When I revert back to the old release I can at least run <code>terraform plan</code>. There are quite a few threads about how the proxmox provider for terraform is kind of buggy and I’m starting to wonder if ansible would be a better way to go. I like the ability of terraform to tear down infrastructure with <code>terraform destroy</code> but I’m not sure it’s worth all this other hassle. I’ll keep messing with it for a bit though.</p>
<p>I found an <a href="https://github.com/Telmate/terraform-provider-proxmox/issues/325">open issue</a> on the proxmox terraform provider about slow provisioning. There’s also <a href="https://github.com/Telmate/terraform-provider-proxmox/issues/705">this one</a> about issues deploying multiple VMs. Both are still open but there were some suggested config changes, along with a recommendation to run in debug. Let’s try that with <code>TF_LOG=DEBUG terraform apply --auto-approve</code>. This dumped a giant stream of output, most of which I will not reproduce. One thing that caught my eye was that it couldn’t find the template VM I wanted to use. Looking back at my code I realized that I had missed the dashes in the template name. That’s definitely on me, although I’m going to put some blame on the provider for just hanging forever instead of returning an error.</p>
<p>After fixing the template the playbook applied and I had 6 VMs up and running, two on each node. It took a couple minutes to apply, but that’s not bad at all. Problem solved?</p>
<p>Almost. The newly deployed VMs are up and running, and I can ssh into them at their IPs, but they don’t have qemu guest agents running so I can’t see their IPs from the proxmox UI, or load up a terminal session from there. This isn’t the end of the world, but I’d like to fix it if I can. I think the problem is that I had <code>agent</code> turned off in the proxmox config as part of troubleshooting the slow deploy. Let’s see if I can fix that. This will also give me a chance to confirm that <code>terraform destroy</code> works. The destroy worked no problem. Setting <code>agent = 1</code> back in the template config worked fine in terms of creating the VM (no slowdown in deploy), but I still couldn’t load them from the proxmox UI. I created a manual clone of the same template to see if I could figure out the issue there. This one did show me the configured IP, but still wouldn’t let me open a console. After some more troubleshooting I realized this was because <a href="https://github.com/ianepreston/recipes/commit/a98994320b20d00e4b702aaf7aa9b3357039a07b#diff-8ea9f6ece084ec63cd3ec7c27a9cc2b4d1638be05824823990187a97dad99767">some changes</a> I’d made to my proxmox ssh host keys were blocking me from bringing up terminal sessions on any hosts other than the one I was connecting to the UI through. Again, that’s totally my bad, although I could have gone for some better error messages.</p>
</section>
</section>
<section id="generating-config" class="level1">
<h1>Generating config</h1>
<p>All the ansible playbooks and configs for the sections below can be found <a href="https://github.com/ianepreston/scratch/tree/main/k8s-the-hard-way/ansible">here</a>.</p>
<section id="provisioning-a-ca-and-generating-tls-certificates" class="level2">
<h2 class="anchored" data-anchor-id="provisioning-a-ca-and-generating-tls-certificates">Provisioning a CA and Generating TLS certificates</h2>
<p><a href="https://github.com/ianepreston/scratch/blob/main/k8s-the-hard-way/ansible/01_ca_certs.yml">Ansible playbook</a></p>
<p>On to <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/04-certificate-authority.md">chapter 4</a> in the guide!</p>
<p>I have to do some minor modification of the scripts outlined in the doc since I’m not using GCP. I think for these future configs I’m going to use ansible, since that’s how I’d like to actually manage hosts in the future.</p>
<p>The first big headache I ran into was getting <code>cfssl</code> installed to generate the certs. It didn’t have a <code>.deb</code> available that I could find so I had to install <code>go</code> and then install the package there, as well as figuring out how to make the path to the binary it installed available to my user (learned a couple things about <code>GOPATH</code> in the process).</p>
<p>Other than that creating all the keys and copying them onto the hosts was pretty straightforward ansible. I’ll have to wait until later to see if anything broke, but for now it seems good.</p>
</section>
<section id="generating-kubernetes-configuration-files-for-authentication" class="level2">
<h2 class="anchored" data-anchor-id="generating-kubernetes-configuration-files-for-authentication">Generating Kubernetes configuration files for authentication</h2>
<p><a href="https://github.com/ianepreston/scratch/blob/main/k8s-the-hard-way/ansible/02_kube_config.yml">Ansible playbook</a></p>
<p>On to the next thing! This section uses <code>kubectl</code>, which I fortunately already have available in my devcontainer, so no config required there. I’ll keep going with my pattern of using ansible to manage the scripting. No issues with any of these steps, at least not at this point. I might have to come back to some of it for troubleshooting.</p>
</section>
<section id="generating-the-data-encryption-config-and-key" class="level2">
<h2 class="anchored" data-anchor-id="generating-the-data-encryption-config-and-key">Generating the data encryption config and key</h2>
<p><a href="https://github.com/ianepreston/scratch/blob/main/k8s-the-hard-way/ansible/03_encryption.yml">Ansible playbook</a></p>
<p>Same as the above. I did a slightly different workflow for the ansible playbook. Since this called for generating a random number as part of the config, rather than doing something fancy like registering the output of a command to generate the random number and then inserting that into a template I just wrapped the whole thing in a shell command.</p>
</section>
</section>
<section id="bootstrap-the-etcd-cluster" class="level1">
<h1>Bootstrap the etcd cluster</h1>
<p><a href="https://github.com/ianepreston/scratch/blob/main/k8s-the-hard-way/ansible/04_bootstrap_etcd.yml">Ansible playbook</a></p>
<p>On to <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/07-bootstrapping-etcd.md">chapter 7</a> Now we’re getting into interesting stuff where I’m actually starting services on the nodes. The instructions for this part are fairly imperative so I’ll actually have to do some modification to make them work properly with ansible, for instance using <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/get_url_module.html">get_url</a> instead of invoking <code>wget</code> to grab the <code>etcd</code> binary. Actually upon further reading I can just use the <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/unarchive_module.html">unarchive</a> module to download and extract the archive, neat!</p>
<p>This all seemed to be going well until I actually had to start the etcd service and hit an error:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> systemctl status etcd.service</span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">●</span> etcd.service <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> etcd</span>
<span id="cb10-3">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded:</span> loaded <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/etc/systemd/system/etcd.service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vendor</span> preset: enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-4">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Active:</span> activating <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">auto-restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Result:</span> exit-code<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">since</span> Sat 2023-03-04 23:55:47 UTC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3s</span> ago</span>
<span id="cb10-5">       <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Docs:</span> https://github.com/coreos</span>
<span id="cb10-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Process:</span> 13038 ExecStart=/usr/local/bin/etcd <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\ </span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>203/EXEC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-7">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Main</span> PID: 13038 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>203/EXEC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-8">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CPU:</span> 1ms</span></code></pre></div>
<p>Ok, looks like when I copied the <code>etcd</code> binaries into <code>/usr/local/bin</code> they lost their execute permission. Adding <code>mode: '0700'</code> to the copy task in ansible seems to fix that, but now I have a new failure:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> systemctl status etcd.service</span>
<span id="cb11-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">●</span> etcd.service <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> etcd</span>
<span id="cb11-3">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded:</span> loaded <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/etc/systemd/system/etcd.service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vendor</span> preset: enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-4">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Active:</span> activating <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">auto-restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Result:</span> exit-code<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">since</span> Sun 2023-03-05 00:00:09 UTC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3s</span> ago</span>
<span id="cb11-5">       <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Docs:</span> https://github.com/coreos</span>
<span id="cb11-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Process:</span> 13571 ExecStart=/usr/local/bin/etcd <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\ </span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1/FAILURE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-7">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Main</span> PID: 13571 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1/FAILURE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-8">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CPU:</span> 13ms</span></code></pre></div>
<p>Running <code>journalctl -xeu etcd.service</code> I think the pertinent line is:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:02:26 ubuntu-controller-1 etcd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">13841</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: error verifying flags, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'\'</span> is not a valid flag. See <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'etcd --help'</span>.</span></code></pre></div>
<p>I’m able to run the <code>etcd</code> binary manually, so my best guess is something in my service definition is wrong.</p>
<p>Two problems came up after looking at the output of the template. First I had to change my variable to get the host IP address from <code>{ ansible_default_ipv4 }</code> to <code>{ ansible_default_ipv4.address }</code> to just get the IP address instead of a big dictionary of everything about the network connection. Next I think the code I copied from the guide had <code>\\</code> after every line break to escape the <code>\</code> character because it was being piped through <code>tee</code> in the example. Since I’m not doing that I swapped to just a <code>\</code>.</p>
<p>This seems to have cleaned up the service definition, but I’m still having a failure.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> systemctl status etcd.service</span>
<span id="cb13-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">●</span> etcd.service <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> etcd</span>
<span id="cb13-3">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded:</span> loaded <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/etc/systemd/system/etcd.service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vendor</span> preset: enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-4">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Active:</span> activating <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">auto-restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Result:</span> exit-code<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">since</span> Sun 2023-03-05 00:14:59 UTC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1s</span> ago</span>
<span id="cb13-5">       <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Docs:</span> https://github.com/coreos</span>
<span id="cb13-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Process:</span> 15563 ExecStart=/usr/local/bin/etcd <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> ubuntu-controller-1 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cert-file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/etc/etcd/kuber<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb13-7">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Main</span> PID: 15563 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1/FAILURE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-8">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CPU:</span> 15ms</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:14:59 ubuntu-controller-1 systemd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: etcd.service: Failed with result <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exit-code'</span>.</span>
<span id="cb13-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:14:59 ubuntu-controller-1 systemd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: Failed to start etcd.</span></code></pre></div>
<p>Looking at journalctl again it looks like my error is <code>Mar 05 00:15:09 ubuntu-controller-1 etcd[15585]: couldn't find local name "ubuntu-controller-1" in the initial cluster configuration</code>. Right, that’s because I didn’t update that part of the template from the hostnames used in the guide to the hostnames I gave my controllers. One more try.</p>
<p>Alright, now the service is started. Running the confirmation command from the guide I get an output that looks good:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> sudo ETCDCTL_API=3 etcdctl member list <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb14-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--endpoints</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://127.0.0.1:2379 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\c</span>d-v3.4.15-linux-amd64$</span>
<span id="cb14-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--cacert=/etc/etcd/ca.pem</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\~</span>/etcd/etcd-v3.4.15-linux-amd64$</span>
<span id="cb14-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--cert=/etc/etcd/kubernetes.pem</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb14-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--key</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/etc/etcd/kubernetes-key.pem</span>
<span id="cb14-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">7dceec040adbf023,</span> started, ubuntu-controller-2, https://192.168.85.71:2380, , false</span>
<span id="cb14-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ab94230b177e1d5c,</span> started, ubuntu-controller-1, https://192.168.85.70:2380, https://192.168.85.70:2379, false</span>
<span id="cb14-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">e88d02db26fab5bc,</span> started, ubuntu-controller-3, https://192.168.85.72:2380, https://192.168.85.72:2379, false</span></code></pre></div>
<p>I’m getting some concerning errors in the service status though:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> systemctl status etcd.service</span>
<span id="cb15-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">●</span> etcd.service <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> etcd</span>
<span id="cb15-3">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded:</span> loaded <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/etc/systemd/system/etcd.service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vendor</span> preset: enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-4">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Active:</span> active <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">running</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">since</span> Sun 2023-03-05 00:18:35 UTC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3min</span> 29s ago</span>
<span id="cb15-5">       <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Docs:</span> https://github.com/coreos</span>
<span id="cb15-6">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Main</span> PID: 16361 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">etcd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-7">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Tasks:</span> 14 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">limit:</span> 9492<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-8">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Memory:</span> 37.6M</span>
<span id="cb15-9">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CPU:</span> 33.018s</span>
<span id="cb15-10">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CGroup:</span> /system.slice/etcd.service</span>
<span id="cb15-11">             <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└─16361</span> /usr/local/bin/etcd <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> ubuntu-controller-1 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cert-file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/etc/etcd/kubernetes.pem <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--key-file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/etc/etcd/kubernetes-key.pem <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--peer-cert-file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/etc/etcd/kubernetes.pem <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--peer-key-file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/etc/etcd/kubernetes-key.pem <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--trusted-ca-file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:22:04 ubuntu-controller-1 etcd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">16361</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: rejected connection from <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.71:37770"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">error</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tls: </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">192.168.85.71</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not match any of DNSNames [</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc.cl&gt;</span></span>
<span id="cb15-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Mar 05 00:22:04 ubuntu-controller-1 etcd[16361]: rejected connection from "</span>192.168.85.71:37780<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" (error "</span>tls: <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>192.168.85.71<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> does not match any of DNSNames [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc.cl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:22:05 ubuntu-controller-1 etcd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">16361</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: rejected connection from <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.71:37790"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">error</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tls: </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">192.168.85.71</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not match any of DNSNames [</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc.cl&gt;</span></span>
<span id="cb15-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Mar 05 00:22:05 ubuntu-controller-1 etcd[16361]: rejected connection from "</span>192.168.85.71:37796<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" (error "</span>tls: <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>192.168.85.71<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> does not match any of DNSNames [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc.cl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:22:05 ubuntu-controller-1 etcd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">16361</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: health check for peer 7dceec040adbf023 could not connect: x509: certificate is valid for 192.168.85.70, 192.168.86.71, 192.168.85.72, 127.0.0.1, not 192.168.85.71</span>
<span id="cb15-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:22:05 ubuntu-controller-1 etcd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">16361</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: health check for peer 7dceec040adbf023 could not connect: x509: certificate is valid for 192.168.85.70, 192.168.86.71, 192.168.85.72, 127.0.0.1, not 192.168.85.71</span>
<span id="cb15-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:22:05 ubuntu-controller-1 etcd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">16361</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: rejected connection from <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.71:37806"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">error</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tls: </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">192.168.85.71</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not match any of DNSNames [</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc.cl&gt;</span></span>
<span id="cb15-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Mar 05 00:22:05 ubuntu-controller-1 etcd[16361]: rejected connection from "</span>192.168.85.71:37818<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" (error "</span>tls: <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>192.168.85.71<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> does not match any of DNSNames [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc.cl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:22:05 ubuntu-controller-1 etcd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">16361</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: rejected connection from <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.71:37828"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">error</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tls: </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">192.168.85.71</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not match any of DNSNames [</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc.cl&gt;</span></span>
<span id="cb15-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Mar 05 00:22:05 ubuntu-controller-1 etcd[16361]: rejected connection from "</span>192.168.85.71:37832<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" (error "</span>tls: <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>192.168.85.71<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> does not match any of DNSNames [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc.cl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Right, right, that’s because I had a typo in the cert generation where I put <code>192.168.86.71</code> instead of <code>192.168.85.71</code>. Ok, fine. Fix that and try again.</p>
<p>Looks like it works! The service is up and running, the status is not beset with errors about not being able to talk. I think I’m good!</p>
</section>
<section id="bootstrap-the-kubernetes-control-plane" class="level1">
<h1>Bootstrap the kubernetes control plane</h1>
<p><a href="https://github.com/ianepreston/scratch/blob/main/k8s-the-hard-way/ansible/05_bootstrap_control_plane.yml">Ansible playbook</a></p>
<p>A lot of the activity in this section is similar to bootstrapping the etcd cluster from an ansible perspective. Download some files, copy some others over into various locations, start up some systemd units and off you go. I had very few issues getting this initially set up, except that I realized I’d missed copying over one config file in the CA certs section so I had to go back and update that playbook to fix that issue.</p>
<p>When it came time to verify the cluster status though I ran into an issue:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> sudo kubectl cluster-info <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--kubeconfig</span> admin.kubeconfig</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">To</span> further debug and diagnose cluster problems, use <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kubectl cluster-info dump'</span>.</span>
<span id="cb16-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">The</span> connection to the server 127.0.0.1:6443 was refused <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> did you specify the right host or port<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span></code></pre></div>
<p>So now we’re in troubleshooting mode. First up, let’s check the status of the services I just started:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> systemctl status kube-apiserver</span>
<span id="cb17-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">●</span> kube-apiserver.service <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> Kubernetes API Server</span>
<span id="cb17-3">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded:</span> loaded <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/etc/systemd/system/kube-apiserver.service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vendor</span> preset: enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-4">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Active:</span> activating <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">auto-restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Result:</span> exit-code<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">since</span> Sun 2023-03-12 22:17:56 UTC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2s</span> ago</span>
<span id="cb17-5">       <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Docs:</span> https://github.com/kubernetes/kubernetes</span>
<span id="cb17-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Process:</span> 19077 ExecStart=/usr/local/bin/kube-apiserver <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\ </span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1/FAILURE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-7">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Main</span> PID: 19077 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1/FAILURE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-8">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CPU:</span> 83ms</span></code></pre></div>
<p>ok, not off to a great start.</p>
<p>Back to my old friend <code>journalctl -xeu kube-apiserver</code>:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 12 22:19:04 ubuntu-controller-1 kube-apiserver<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">19370</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: Error: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kube-apiserver"</span> does not take any arguments, got <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>Oh right, this is that problem with templates again compared to how the GitHub page wants me to <code>cat</code> this stuff in.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> sudo kubectl cluster-info <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--kubeconfig</span> admin.kubeconfig</span>
<span id="cb19-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Kubernetes</span> control plane is running at https://127.0.0.1:6443</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">To</span> further debug and diagnose cluster problems, use <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kubectl cluster-info dump'</span>.</span></code></pre></div>
<p>Alright! At least that was an easy fix. Should have remembered it from last time, but oh well.</p>
<p>This section has some instructions for setting up a proxy to handle health checks from the load balancer, but I don’t have a load balancer at this point, so I’m going to skip it. I’ll have to figure out how to set all that up when I’m doing a proper cluster, but this is just for learning so I’ll skip it.</p>
<section id="rbac-for-the-kubelet-authorization" class="level2">
<h2 class="anchored" data-anchor-id="rbac-for-the-kubelet-authorization">RBAC for the kubelet authorization</h2>
<p>These commands I only have to run on one node, and I’m not sure how to easily make them idempotent with ansible. They’re making changes on my cluster, not creating files (at least that I know of), so I don’t know how to tell ansible not to re-run the commands. In theory running them multiple times shouldn’t really matter, so I’ll just do it manually anyway.</p>
</section>
<section id="front-end-load-balancer" class="level2">
<h2 class="anchored" data-anchor-id="front-end-load-balancer">Front end load balancer</h2>
<p>Again, I don’t actually have a load balancer (maybe that will be what I do in my next post). So I’ll skip this part.</p>
</section>
</section>
<section id="bootstrapping-the-kubernetes-worker-nodes" class="level1">
<h1>Bootstrapping the kubernetes worker nodes</h1>
<p><a href="https://github.com/ianepreston/scratch/blob/main/k8s-the-hard-way/ansible/06_bootstrap_workers.yml">Ansible playbook</a></p>
<p>This is the last major step in having a working cluster as far as I can tell. The first step is installing some system dependencies, which is no problem. The next step is making sure swap is off. I started looking into idempotent ways to ensure this wasn’t turned on, then decided to just check if it was in my VMs to begin with. Turns out I didn’t set them up with swap to begin with so I can just skip that part.</p>
<p>Next I’ve got a bunch of binaries to install. Some of them are gzipped tar files and some are straight binaries. In both cases I can refer back to what I did for setting up the controllers and etcd to build the playbook. All of this actually went quite smoothly. At the end of running the playbook it looks like I have three worker nodes in my cluster!</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> sudo kubectl get nodes <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--kubeconfig</span> admin.kubeconfig</span>
<span id="cb20-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NAME</span>              STATUS   ROLES    AGE     VERSION</span>
<span id="cb20-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ubuntu-worker-1</span>   Ready    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>none<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>   2m35s   v1.21.0</span>
<span id="cb20-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ubuntu-worker-2</span>   Ready    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>none<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>   2m35s   v1.21.0</span>
<span id="cb20-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ubuntu-worker-3</span>   Ready    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>none<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>   2m35s   v1.21.0</span></code></pre></div>
</section>
<section id="configuring-kubectl-for-remote-access" class="level1">
<h1>Configuring kubectl for remote access</h1>
<p>Let’s try this on my devcontainer. Again, I should be pointing at a load balancer, but I don’t have one, so I’m not. From the <code>workspace_ansible</code> folder within my devcontainer that has all my credentials saved I run the commands in <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/10-configuring-kubectl.md">the guide</a></p>
<p>After setting the context I run <code>kubectl version</code> and get:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl version <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--output</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>json</span>
<span id="cb21-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clientVersion"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb21-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>,</span>
<span id="cb21-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"26"</span>,</span>
<span id="cb21-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gitVersion"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v1.26.1"</span>,</span>
<span id="cb21-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gitCommit"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"8f94681cd294aa8cfd3407b8191f6c70214973a4"</span>,</span>
<span id="cb21-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gitTreeState"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clean"</span>,</span>
<span id="cb21-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"buildDate"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-18T15:58:16Z"</span>,</span>
<span id="cb21-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"goVersion"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"go1.19.5"</span>,</span>
<span id="cb21-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"compiler"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gc"</span>,</span>
<span id="cb21-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"platform"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linux/amd64"</span></span>
<span id="cb21-13">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb21-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kustomizeVersion"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v4.5.7"</span>,</span>
<span id="cb21-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"serverVersion"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb21-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>,</span>
<span id="cb21-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"21"</span>,</span>
<span id="cb21-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gitVersion"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v1.21.0"</span>,</span>
<span id="cb21-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gitCommit"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cb303e613a121a29364f75cc67d3d580833a7479"</span>,</span>
<span id="cb21-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gitTreeState"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clean"</span>,</span>
<span id="cb21-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"buildDate"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2021-04-08T16:25:06Z"</span>,</span>
<span id="cb21-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"goVersion"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"go1.16.1"</span>,</span>
<span id="cb21-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"compiler"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gc"</span>,</span>
<span id="cb21-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"platform"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linux/amd64"</span></span>
<span id="cb21-25">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-26"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">WARNING:</span> version difference between client <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1.26</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">and</span> server <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1.21</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">exceeds</span> the supported minor version skew of +/-1</span></code></pre></div>
<p>Most of this looks fine, the version skew is because I’m using old kubernetes based on the static guide on my server.</p>
<p><code>kubectl get nodes</code> returns my three worker nodes, so I’m set!</p>
</section>
<section id="provisioning-pod-network-routes" class="level1">
<h1>Provisioning pod network routes</h1>
<p>This appears to only matter if I’m in the cloud. I’m going to skip it.</p>
</section>
<section id="deploying-the-dns-cluster-add-on" class="level1">
<h1>Deploying the DNS cluster add-on</h1>
<p>I’m sure there are more DevOpsy ways to do these kubectl commands, with or without ansible, but I don’t feel like learning them as part of this exercise, so I’m just going to run these commands from my devcontainer and see how it goes:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> https://storage.googleapis.com/kubernetes-the-hard-way/coredns-1.8.yaml</span>
<span id="cb22-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">serviceaccount/coredns</span> created</span>
<span id="cb22-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clusterrole.rbac.authorization.k8s.io/system:coredns</span> created</span>
<span id="cb22-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clusterrolebinding.rbac.authorization.k8s.io/system:coredns</span> created</span>
<span id="cb22-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configmap/coredns</span> created</span>
<span id="cb22-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">deployment.apps/coredns</span> created</span>
<span id="cb22-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">The</span> Service <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kube-dns"</span> is invalid: spec.clusterIPs: Invalid value: []string{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10.32.0.10"</span>}: failed to allocated ip:10.32.0.10 with error:provided IP is not in the valid range. The range of valid IPs is 192.168.85.0/24</span></code></pre></div>
<p>Right out the gate I get an error. Nice. I guess I’ll download and then modify this file. After downloading and modifying the IP to point to my cluster it seems to work:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> coredns-1.8.yaml </span>
<span id="cb23-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">serviceaccount/coredns</span> unchanged</span>
<span id="cb23-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clusterrole.rbac.authorization.k8s.io/system:coredns</span> unchanged</span>
<span id="cb23-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clusterrolebinding.rbac.authorization.k8s.io/system:coredns</span> unchanged</span>
<span id="cb23-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configmap/coredns</span> unchanged</span>
<span id="cb23-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">deployment.apps/coredns</span> unchanged</span>
<span id="cb23-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">service/kube-dns</span> created</span></code></pre></div>
<p>Except maybe it didn’t?</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get pods <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> k8s-app=kube-dns <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> kube-system</span>
<span id="cb24-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">No</span> resources found in kube-system namespace.</span></code></pre></div>
<p>Jumping ahead let’s try and deploy the <code>busybox</code> pod just to see if I can get anything running:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl run busybox <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--image</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>busybox:1.28 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--command</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--</span> sleep 3600</span>
<span id="cb25-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error</span> from server <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Forbidden</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> pods <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"busybox"</span> is forbidden: error looking up service account default/default: serviceaccount <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default"</span> not found</span></code></pre></div>
<p>Ok, do I have any service accounts?</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb26-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get serviceAccounts</span>
<span id="cb26-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">No</span> resources found in default namespace</span></code></pre></div>
<p>Guess not. What step did I miss? From <a href="https://stackoverflow.com/questions/33528398/why-dont-i-have-a-default-serviceaccount-on-kubernetes">this post</a> I should get this from the <code>kube-controller-manager</code> binary. Looking back I can see that I did at least attemp to install that program and set up a service for it. Let’s see check its status on one of my controller nodes:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> systemctl status kube-controller-manager</span>
<span id="cb27-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">●</span> kube-controller-manager.service <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> Kubernetes Controller Manager</span>
<span id="cb27-3">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded:</span> loaded <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/etc/systemd/system/kube-controller-manager.service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vendor</span> preset: enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb27-4">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Active:</span> activating <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">auto-restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Result:</span> exit-code<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">since</span> Fri 2023-03-17 17:20:35 UTC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">127ms</span> ago</span>
<span id="cb27-5">       <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Docs:</span> https://github.com/kubernetes/kubernetes</span>
<span id="cb27-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Process:</span> 589315 ExecStart=/usr/local/bin/kube-controller-manager <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--bind-address</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>0.0.0.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cluster-cidr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>192.168.85.0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb27-7">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Main</span> PID: 589315 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1/FAILURE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb27-8">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CPU:</span> 651ms</span></code></pre></div>
<p>Cool, that would explain it. Looking through <code>journalctl -xeu kube-controller-manager</code> I see <code>/var/lib/kubernetes/kube-controller-manager.kubeconfig: no such file or directory</code>. Let’s see where I was supposed to generate that and figure out what went wrong. Going back into my code I see I generated the file but didn’t copy it into <code>/var/lib/kubernetes</code> in my control plane playbook when I copied the rest of the configs in. Let’s try again.</p>
<p>Ok, after re-running the playbook with that file added the service is up and running.</p>
<p>Let’s try that command again.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get serviceAccounts</span>
<span id="cb28-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NAME</span>      SECRETS   AGE</span>
<span id="cb28-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">default</span>   1         43s</span></code></pre></div>
<p>Nice! Ok, back to the DNS and busybox stuff.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb29-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get pods <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> k8s-app=kube-dns <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> kube-system</span>
<span id="cb29-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NAME</span>                       READY   STATUS              RESTARTS   AGE</span>
<span id="cb29-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-2bz8x</span>   0/1     ContainerCreating   0          88s</span>
<span id="cb29-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-pxw6f</span>   0/1     ContainerCreating   0          88s</span></code></pre></div>
<p>Without re-running anything it looks like the controller manager has picked up what I ran before. Now I just have to wait a bit for it to create the container, I hope…</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get pods <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> k8s-app=kube-dns <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> kube-system</span>
<span id="cb30-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NAME</span>                       READY   STATUS              RESTARTS   AGE</span>
<span id="cb30-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-2bz8x</span>   0/1     ContainerCreating   0          60m</span>
<span id="cb30-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-pxw6f</span>   0/1     ContainerCreating   0          60m</span></code></pre></div>
<p>I took the dog for a walk and came back to this. There’s no way these containers should take an hour to create, so something else is broken. Time for more learning!</p>
<p>Running <code>kubectl describe pods -l k8s-app=kube-dns -n kube-system</code> I get so much information about what’s not working, neat! I think the relevant part is:</p>
<p><code>Warning  FailedCreatePodSandBox  58s (x369 over 86m)  kubelet  Failed to create pod sandbox: rpc error: code = Unknown desc = failed to create containerd task: cgroups: cgroup mountpoint does not exist: unknown</code></p>
<p>searching isn’t giving me a silver bullet solution to this, but it suggests there’s something wrong with my container runtime, so let’s take a look at my worker node.</p>
<p>First thing to do is check the status of the services I was supposed to start. <code>containerd</code>, <code>kubelet</code> and <code>kube-proxy</code> services all appear to be up and running. I can see the same error about cgroup mountpoint not existing in <code>journalctl -xeu containerd</code> so the problem is in there, but I’m still not sure what’s actually broken.</p>
<p>Ok, with a little more context that I should be searching for that error in association with containerd I find <a href="https://github.com/kubernetes/minikube/issues/11310">this issue</a>.</p>
<p>Now I have to figure out how to apply that to this guide. First let’s check if there are open issues in the repository to resolve it. There’s a <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way/pull/728/commits/2adb5c0f5cae7e9d3129a4d8ab9f2ff8daf8ffaf#diff-387650bdd066d5645818d0579c5d3d562ceac2c9c94bd176a9e3162bc9917e94">PR</a> to upgrade to a newer kubernetes, that includes a different way of generating the containerd config file. I’m not sure how exactly to apply that in my example though.</p>
<p>I found a nice <a href="https://github.com/kubernetes/minikube/pull/11325/commits/813138734d347b3d84c527ed135fb37e509983f0">PR</a> in the minikube project that showed how to do the upgrade. After running it I got a little better, but was still having some resolution errors and backoffs. I’d noticed some other weird behaviour with my worker nodes so I decided to give them a reboot to see how that worked.</p>
<p>After a reboot here’s where I am:</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb31-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get pods <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> k8s-app=kube-dns <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> kube-system</span>
<span id="cb31-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NAME</span>                       READY   STATUS             RESTARTS   AGE</span>
<span id="cb31-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-2bz8x</span>   0/1     ImagePullBackOff   0          3h30m</span>
<span id="cb31-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-pxw6f</span>   0/1     ImagePullBackOff   0          3h30m</span></code></pre></div>
<p>I ssh into a worker node and find that DNS no longer works on it. Controller nodes still resolve hosts fine, and if I put in the IP of a local or external site I can ping it. So something about how I configured that DNS service has broken things for my workers. Hmmmm. Even more fun, after a bit of this, DNS on my entire home network broke. I shut down all the nodes, rebooted my router and got DNS back.</p>
<p>After being afraid to touch this for a while I decided to start the nodes back up and see what happened. Right now DNS is ok on my host machine at least. Connecting into my worker nodes I can see that DNS doesn’t work on two of them, and a whole bunch of extra network interfaces have been created. That would definitely explain why I can’t pull images. I wonder if my earlier attempt to apply that manifest left something in a failed state that they can’t recover from. I give <code>kubectl delete -f coredns-1.8.yaml</code> a run to reverse the playbook. I can’t immediately resolve names on those nodes after running that, but let’s give them a reboot and see what happens. Ok, after a reboot DNS is back up. Let’s try applying that playbook again and see what happens:</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb32-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get pods <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> k8s-app=kube-dns <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> kube-system</span>
<span id="cb32-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NAME</span>                       READY   STATUS         RESTARTS   AGE</span>
<span id="cb32-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-jn25z</span>   0/1     ErrImagePull   0          3s</span>
<span id="cb32-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-lhhg5</span>   0/1     ErrImagePull   0          3s</span></code></pre></div>
<p>So we’re back to not working. At least the rest of my network is still ok for now. Looking at the workers that are coming back up, I think I see something confusing. The nodes that are running the coredns pods have a new network interface with an IP that matches my router: <code>cnio0:</code>. I can still ping my router by its IP, and I can still ping external sites if I know their IP, so routing isn’t completely broken, but name resolution seems to be. At this point I decided to confirm whether the weird network wide DNS failure I had previously was indeed a result of this configuration. I rebooted my phone and when it came back up DNS no longer worked. I deleted the manifest, rebooted my router, and all was right with the world again. I don’t even have my head around how this could happen, let alone what it means. I guess that <code>cnio0</code> device is broadcasting that it has my router’s IP or something?</p>
<p>Reading through <a href="https://github.com/ehlesp/smallab-k8s-pve-guide/blob/main/G017%20-%20Virtual%20Networking%20~%20Network%20configuration.md#g017-virtual-networking-network-configuration">this guide</a> a bit, which is more focused on a homelab k8s deployment I can see that they had two virtual network interfaces for the cluster, one for external facing connectivity, and one for internal facing cluster communication. I think probably trying to do everything on one network is part of what’s causing me problems.</p>
</section>
<section id="call-it-quits" class="level1">
<h1>Call it quits</h1>
<p>At this point I feel like I’m hitting pretty serious diminishing returns in terms of how much I’m learning vs how weird the edge cases I’m encountering are. I’m definitely not done learning kubernetes, and I might even come back to this later, but I think there are clearly some other aspects of my setup and kubernetes that I have to learn about more before working through this will provide additional value.</p>


</section>

 ]]></description>
  <category>kubernetes</category>
  <category>proxmox</category>
  <category>Linux</category>
  <guid>https://blog.ianpreston.ca/posts/2023-02-24-k8s-the-hard-way.html</guid>
  <pubDate>Fri, 24 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Home Cluster Part 4 - Setup CEPH</title>
  <link>https://blog.ianpreston.ca/posts/2023-02-05-proxmox-ceph.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is the fourth post ( <a href="../posts/2022-11-21-proxmox.html">part 1</a>, <a href="../posts/2022-12-31-proxmox2.html">part 2</a>, <a href="../posts/2023-01-21-proxmox3.html">part 3</a> ) in my home cluster with proxmox series. In this post we’re going to add distributed storage to the cluster using <a href="https://ceph.com/en/">ceph</a>. As with the other posts in this series, this is not a how-to guide from an established practitioner, but a journal I’m writing as I try and do something new.</p>
<p>Ceph in many ways is overkill for what I’m doing here. It’s designed to support absolutely massive distributed storage at huge scale and throughput while maintaining data integrity. To accomplish that it’s very complicated and their <a href="https://docs.ceph.com/en/octopus/start/hardware-recommendations/">hardware recommendations</a> reflect that. On the other hand, it’s integrated with proxmox and I’ve seen it run <a href="https://www.youtube.com/watch?v=Vd8GG9twjRU">on even lower spec gear</a> than I’m using. In this post my goal is to get a ceph cluster working that uses the 3 1TB SSDs I have in my nodes for file sharing. I’m not going to do any performance testing or tuning, and other than deploying an image to one just to confirm it works I probably won’t even use it in this section. The thing I actually want this storage for is to be my persistent storage in kubernetes, backed by <a href="https://rook.io/">rook</a>, but that will come later once I actually have kubernetes set up.</p>
<p>As with most things with computers I won’t be starting from scratch. I’ve found a <a href="https://github.com/peacedata0/proxmox-ansible-1">repository</a> of ansible roles for setting up a proxmox cluster that includes ceph configuration and is very similar to my overall setup. I’ll work through <a href="https://medium.com/plain-and-simple/dependency-vendoring-dd765be75655">vendoring</a> this code into my <a href="https://github.com/ianepreston/recipes">recipes</a> repository through this post.</p>
<section id="note" class="level2">
<h2 class="anchored" data-anchor-id="note">Note</h2>
<p>I ran into <em>lots</em> of problems getting this working. This post is definitely less of a guide and more a diary of the struggles I had getting ceph working. There may be some value to another reader if they find themselves having a similar challenge to me, but mostly this was just my scratchpad as I worked through getting things set up.</p>
</section>
</section>
<section id="initial-attempt-using-ansible" class="level1">
<h1>Initial attempt using Ansible</h1>
<p>I was hoping that similar to my experience with postfix I’d be able to grab some ansible roles that had been previously developed, tweak their settings a bit, and be good to go.</p>
<p>As you’ll see, this was not the case, but here are my notes of working through the ansible files and figuring out what they do.</p>
<section id="setting-up-the-inventory" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-inventory">Setting up the inventory</h2>
<p>The first section of the repo that I’ll incorporate is the <code>inventory</code> folder. This contains descriptions of the hosts, as well as what groups they belong to for roles. The inventory folder in this repo also contains <code>group_vars</code> and <code>host_vars</code>, which I keep in their own folders in my repo.</p>
<p>Looking at the actual inventory there are a bunch of groups created for various ceph roles like <code>mds</code>, <code>mgr</code>, and <code>osd</code>. However, in the example case and in my case all nodes will fulfill all roles, so this is only necessary for expansion or comprehensibility of what tasks are doing what when a role is run. There is one differentiator for <code>ceph_master</code>, which only targets the first node to handle tasks that are managed at the proxmox cluster level. In my previous setup I’ve just had a <code>pve</code> group for the cluster and manually set <code>pve1</code> as the host for things that take place at the cluster level. If I end up growing my cluster a lot and want to split things out I’ll have to refactor, but for now for simplicity I’m going to stick with just using the <code>pve</code> group. Based on this I don’t need any actual changes to my inventory. Looking at <code>host_vars</code> there are host specific variables identifying the separate NIC and IP address the nodes are using for the ceph network. Having a separate network for ceph is a recommendation that I am not following at this point so I don’t need to worry about that. They also have a host var specifying which storage drive should be attached to the ceph cluster. For me that’s <code>/dev/sda</code> on all of my nodes. I’ll have to refactor that out if I add another node that deviates from that, but for now I’m going to minimize the complexity in terms of number of files I have to reference and leave that alone. Looking at the group vars under ceph there’s an entry for the pool name, and for the list of nodes. Again, both of those I can just set as defaults for now and refactor later if I have to expand. So based on initial reading I’m going to leave this folder alone.</p>
</section>
<section id="checking-the-library-folder" class="level2">
<h2 class="anchored" data-anchor-id="checking-the-library-folder">Checking the library folder</h2>
<p>The library folder contains a script for managing proxmox VMs with the <code>qm</code> command. That’s interesting, but not relevant to what I’m trying to do with ceph so I won’t worry about it here.</p>
</section>
<section id="roles" class="level2">
<h2 class="anchored" data-anchor-id="roles">Roles</h2>
<p>Here is going to be the bread and butter of this process. There are a number of roles in this folder helpfully prepended with <code>ceph_</code> that I’ll want to take a look at.</p>
<p>In terms of order of reviewing these files I’m going to look at the <code>site.yml</code> file that’s at the base of the repository to understand what order they’re called in. That should make the most sense.</p>
<section id="ceph_node" class="level3">
<h3 class="anchored" data-anchor-id="ceph_node">ceph_node</h3>
<p>The first role is <code>ceph_node</code> which runs on all the nodes. There are two steps here, the first with the name “Install ceph packages”, and the second “Configure ceph network”, which I’ll ignore. There’s also a <a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_handlers.html#handlers">handler</a> in this role, but it’s only to restart the network after configuring the second network, so I don’t need that. The first task looks like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install ceph packages</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> yes | pveceph install</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/apt/sources.list.d/ceph.list</span></span></code></pre></div>
<p>There are a few things I have not seen before here that I’d like to understand before I blindly copy paste. The first is the <code>yes</code> command. <a href="https://www.howtogeek.com/415535/how-to-use-the-yes-command-on-linux/">This post</a> explains what it is and why I’d use it. It’s basically for entering <code>y</code> into the user input of everything the command it’s piped to installs. The other thing I haven’t seen before is <code>args</code>. While args appears to be a generic <a href="https://docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html#task">keyword</a> its use in this case is pretty well documented in the <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html">docs for shell</a>. In this case it’s being used to say that running this command will create that file, so if it exists the file doesn’t need to be run, ensuring idempotency. Pretty handy!</p>
<p>While I’m sure this would just work, I do want to know a bit about what I’m hitting <code>y</code> to by running this playbook, so let’s ssh into one of my nodes and manually run the command and save the output.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> ls /etc/apt/sources.list.d <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> ceph</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">download_proxmox_com_debian_ceph_quincy.list</span></span></code></pre></div>
<p>Prior to running the command I can confirm I do not have that file present.</p>
<p>Running <code>pveceph install</code> prompts an <code>apt install</code> command, the <code>y</code> is to confirm that I want to install a ton of ceph related packages. There are no other prompts so this seems safe to run.</p>
</section>
<section id="ceph_master" class="level3">
<h3 class="anchored" data-anchor-id="ceph_master">ceph_master</h3>
<p>The next role is described as creating the ceph cluster and only needs to be run on one node. This is also a small task and it looks like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check ceph status</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph status 2&gt;&amp;1 | grep -v "not initialized"</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph_status</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create ceph network</span></span>
<span id="cb3-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph init --network 10.10.10.0/24</span></span>
<span id="cb3-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph_status.rc == 1</span></span></code></pre></div>
<p>I’ll have to modify the network part to match my own setup, but otherwise this looks straightforward. Just for curiosity, let’s see what the first command looks like. As a reminder to myself, the <code>2&gt;&amp;1</code> redirects <code>stderr</code> to <code>stdout</code>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph status <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pveceph</span> configuration not initialized</span></code></pre></div>
<p>Looking at the <a href="https://pve.proxmox.com/pve-docs/pveceph.1.html">pveceph docs</a> it looks like I can just drop the <code>--network</code> argument if I’m not specifying a separate one, so this will be a very small task. <em>Note from me in the future: you need the network flag.</em></p>
</section>
<section id="ceph_mon" class="level3">
<h3 class="anchored" data-anchor-id="ceph_mon">ceph_mon</h3>
<p>Next up we create <a href="https://docs.ceph.com/en/latest/rados/operations/add-or-rm-mons/">monitors</a>. This is also a simple looking role:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check for ceph-mon</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pgrep ceph-mon</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_mon_status</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create ceph-mon</span></span>
<span id="cb5-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph createmon</span></span>
<span id="cb5-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_mon_status.rc == 1</span></span></code></pre></div>
<p><code>pgrep</code> looks for running processes, so that’s how we check if the monitor is already up and running. If it’s not, we create a monitor. The only arguements for this command are to assign an address or ID, neither of which I want to explicitly do, so I can leave this as is.</p>
</section>
<section id="ceph_mgr" class="level3">
<h3 class="anchored" data-anchor-id="ceph_mgr">ceph_mgr</h3>
<p>After the monitor we create a <a href="https://docs.ceph.com/en/quincy/mgr/index.html">manager</a>. The setup is basically the same as the monitor and the command it runs has even fewer arguments than the monitor so I won’t spell it out here.</p>
</section>
<section id="ceph_osd" class="level3">
<h3 class="anchored" data-anchor-id="ceph_osd">ceph_osd</h3>
<p>Now we have to create an <a href="https://docs.ceph.com/en/latest/man/8/ceph-osd/">osd</a> which is the first place we’ll have to touch an actual disk. Having this step not be idempotent would be <em>really</em> bad as it could lead to wiping disks. The task looks like this:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check for existing ceph_osd</span></span>
<span id="cb6-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pgrep ceph-osd</span></span>
<span id="cb6-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_osd_pid</span></span>
<span id="cb6-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb6-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Read first 5KB of ceph device to determine state</span></span>
<span id="cb6-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dd if={{ ceph_device }} bs=5K count=1 | sha256sum</span></span>
<span id="cb6-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ceph_osd_pid.rc != 0"</span></span>
<span id="cb6-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_device_first_5KB_sha256</span></span>
<span id="cb6-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Determine if should initialize ceph_osd</span></span>
<span id="cb6-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ceph_osd_pid.rc != 0 and ceph_device_first_5KB_sha256.stdout == 'a11937f356a9b0ba592c82f5290bac8016cb33a3f9bc68d3490147c158ebb10d  -'"</span></span>
<span id="cb6-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_fact</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceph_device_initialize</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb6-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span></span>
<span id="cb6-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Initialize ceph_osd device</span></span>
<span id="cb6-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_device_initialize == True</span></span>
<span id="cb6-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph createosd {{ ceph_device }}</span></span></code></pre></div>
<p>There’s also a default variable for <code>ceph_device_initialize</code> that’s set to <code>False</code>. It only gets updated to true if that third step’s condition is met. I’m a little confused and worried about this role to be honest. The first step is fine, we’re just checking if the <code>osd</code> process is running. The next one is apparently making some assumption about what the hash of the first 5KB of my disk should look like if it doesn’t already have an osd installed. I don’t know how this would work and searching didn’t turn anything up. Let’s test though and check what it returns on my drives:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> dd if=/dev/sda bs=5K count=1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sha256sum</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1+0</span> records in</span>
<span id="cb7-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1+0</span> records out</span>
<span id="cb7-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5120</span> bytes <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5.1</span> kB, 5.0 KiB<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">copied,</span> 0.00509153 s, 1.0 MB/s</span>
<span id="cb7-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">a11937f356a9b0ba592c82f5290bac8016cb33a3f9bc68d3490147c158ebb10d</span>  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span></span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve2:~#</span> dd if=/dev/sda bs=5K count=1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sha256sum</span></span>
<span id="cb7-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1+0</span> records in</span>
<span id="cb7-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1+0</span> records out</span>
<span id="cb7-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5120</span> bytes <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5.1</span> kB, 5.0 KiB<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">copied,</span> 0.00511535 s, 1.0 MB/s</span>
<span id="cb7-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">a11937f356a9b0ba592c82f5290bac8016cb33a3f9bc68d3490147c158ebb10d</span>  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span></span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:~#</span> dd if=/dev/sda bs=5K count=1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sha256sum</span></span>
<span id="cb7-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1+0</span> records in</span>
<span id="cb7-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1+0</span> records out</span>
<span id="cb7-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5120</span> bytes <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5.1</span> kB, 5.0 KiB<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">copied,</span> 0.00503435 s, 1.0 MB/s</span>
<span id="cb7-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">a11937f356a9b0ba592c82f5290bac8016cb33a3f9bc68d3490147c158ebb10d</span>  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span></span></code></pre></div>
<p>Just to make sure I wasn’t losing it, I tried it on another device that wasn’t blank and got a different hash. This is why I love the internet, there is absolutely no way I would have figured that out on my own. I don’t know how it works and that makes me a little nervous, but at this point I’m convinced that it will work. I’ll add in a default variable for my ceph device of <code>/dev/sda</code> and should be good to go.</p>
</section>
<section id="ceph_pool" class="level3">
<h3 class="anchored" data-anchor-id="ceph_pool">ceph_pool</h3>
<p>Now that I’ve got my OSDs, it’s time to create a <a href="https://docs.ceph.com/en/latest/rados/operations/pools/">pool</a>. This role also has a defaults file, with currently just one variable to specify the minimum number of nodes that must be up for pool creation (set to 3 which works for me). I’ll have to add in another default to mine for the pool name, as the original repo sets that in group vars. Beyond that let’s focus on the task:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check ceph status</span></span>
<span id="cb8-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph status</span></span>
<span id="cb8-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph_status</span></span>
<span id="cb8-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check ceph pools</span></span>
<span id="cb8-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph pool ls | grep -e "^{{ ceph_pool }} "</span></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_pool_status</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create ceph pool</span></span>
<span id="cb8-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_pool_status.rc &gt; 0 and (pveceph_status.stdout | from_json).osdmap.osdmap.num_up_osds &gt;= minimum_num_osds_for_pool</span></span>
<span id="cb8-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph pool create {{ ceph_pool }}</span></span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check ceph-vm storage</span></span>
<span id="cb8-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pvesm list ceph-vm</span></span>
<span id="cb8-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_vm_status</span></span>
<span id="cb8-22"></span>
<span id="cb8-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create ceph VM storage (ceph-vm)</span></span>
<span id="cb8-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_vm_status.rc &gt; 0</span></span>
<span id="cb8-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pvesm add rbd ceph-vm -nodes {{ ceph_nodes }} -pool {{ ceph_pool }} -content images</span></span>
<span id="cb8-26"></span>
<span id="cb8-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check ceph-ct storage</span></span>
<span id="cb8-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pvesm list ceph-ct</span></span>
<span id="cb8-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_ct_status</span></span>
<span id="cb8-32"></span>
<span id="cb8-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create ceph container storage (ceph-ct)</span></span>
<span id="cb8-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_ct_status.rc &gt; 0</span></span>
<span id="cb8-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pvesm add rbd ceph-ct -nodes {{ ceph_nodes }} -pool {{ ceph_pool }} -content rootdir</span></span></code></pre></div>
<p>The first step pulls up a detailed description of the ceph pool status. In the third step we’ll parse it to check that we have the minimum number of OSDs up. The next one is pretty straightforward, make sure the pool we want to create doesn’t already exist. Next, assuming we have at least the minimum number of OSDs and our pool hasn’t been created, create it. This one is using all the defaults of the command since we don’t pass any arguments. Briefly, they are:</p>
<ul>
<li>not to configure VM and CT storage for the pool (that appears to happen later)</li>
<li>set the application as <a href="https://docs.ceph.com/en/quincy/rbd/index.html">rbd</a> (we will configure ceph fs later on).</li>
<li>Some other stuff about scaling and erasure coding that I don’t understand and hopefully won’t need for now. Full docs <a href="https://pve.proxmox.com/pve-docs/pveceph.1.html">here</a>, search for <code>pveceph pool create &lt;name&gt; [OPTIONS]</code></li>
</ul>
<p>The next four parts configure proxmox to use ceph as a storage location for VMs and containers. I actually don’t want to do that, my VMs will live on my nvme drives, but it won’t hurt to have as an option I guess, and at least I can test if I can do stuff on the pool with this enabled so I’ll leave it but not spend much time working out how it works. I will have to add a variable for <code>ceph_nodes</code> to my defaults that maps to a comma separated list of my nodes.</p>
</section>
<section id="ceph_mds" class="level3">
<h3 class="anchored" data-anchor-id="ceph_mds">ceph_mds</h3>
<p>After this we’re doing some necessary pre-configuration for enabling ceph-fs. Specifically the <a href="https://docs.ceph.com/en/latest/glossary/#term-MDS">ceph metadata server</a>. This is another very short task that checks if the service is running and starts it if not with a oneliner, so I won’t reproduce it here.</p>
</section>
<section id="ceph_fs" class="level3">
<h3 class="anchored" data-anchor-id="ceph_fs">ceph_fs</h3>
<p>Last one. Ceph fs, from what little I’ve read of it would be nice to have as it will enable sharing storage across pods (<a href="https://rook.io/docs/rook/v1.10/Storage-Configuration/Shared-Filesystem-CephFS/filesystem-storage/">docs</a>). This task has very similar structure to the earlier ones as well so I won’t write it up in detail here.</p>
</section>
</section>
<section id="adding-them-to-the-playbook" class="level2">
<h2 class="anchored" data-anchor-id="adding-them-to-the-playbook">Adding them to the playbook</h2>
<p>Having created the roles, I now need to make sure they’re done in the correct order in my playbook. As mentioned above I can base that on the order they’re listed in <code>site.yml</code> in the base repository I’ve been working off.</p>
</section>
</section>
<section id="troubleshoot-the-playbook" class="level1">
<h1>Troubleshoot the playbook</h1>
<p>Moment of truth, will it work or will I get errors?</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"changed"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cmd"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pveceph"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"createosd"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/dev/sda"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"delta"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0:00:00.421412"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"end"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-02-05 20:09:49.235881"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"msg"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"non-zero return code"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rc"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"start"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-02-05 20:09:48.814469"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stderr"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"binary not installed: /usr/sbin/ceph-volume"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stderr_lines"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"binary not installed: /usr/sbin/ceph-volume"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stdout"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stdout_lines"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Of course it’s not that easy. I made it to the <code>ceph_osd</code> role but then hit this failure. Let’s compare the steps I’ve put into my playbook with the <a href="https://pve.proxmox.com/pve-docs/chapter-pveceph.html">proxmox docs</a> and see if I missed anything.</p>
<p>It looks like the manual tasks match what I did in the playbook, so that’s not it. Next I’ll search for the error message I got from ansible (probably should have done that first). I found a bug report stating that <code>ceph-volume</code> is only recommended by <code>ceph-osd</code>, so depending on apt settings it may not get installed. Weird, but easy to fix. In the <code>ceph_node</code> role I add the following:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install extra ceph packages</span></span>
<span id="cb10-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph-volume</span></span></code></pre></div>
<p>Ok, that got me a bit farther, but now I have new errors. First off, let’s manually check what state my system is in before I assess anything else. Looking at the ceph dashboard in proxmox I have 1 OSD showing in and up, -1 (?) showing out and up, and 1 showing out and down. That’s interesting. Running <code>pgrep ceph-osd</code> on each node I get a PID for my second node, but not for the other two. Fun. Let’s just try manually zapping the SSD on the other two hosts and see what happens. First I run <code>ceph-volume lvm zap /dev/sda --destroy</code> to wipe the SSD (just to be safe), and then I run <code>pveceph createosd /dev/sda</code>. Let’s find out how that goes.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph createosd /dev/sda</span>
<span id="cb11-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">create</span> OSD on /dev/sda <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bluestore</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">wiping</span> block device /dev/sda</span>
<span id="cb11-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">200+0</span> records in</span>
<span id="cb11-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">200+0</span> records out</span>
<span id="cb11-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">209715200</span> bytes <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">210</span> MB, 200 MiB<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">copied,</span> 0.520585 s, 403 MB/s</span>
<span id="cb11-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Running</span> command: /bin/ceph-authtool <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--gen-print-key</span></span>
<span id="cb11-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Running</span> command: /bin/ceph <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cluster</span> ceph <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> client.bootstrap-osd <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--keyring</span> /var/lib/ceph/bootstrap-osd/ceph.keyring <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> osd new ab6b5e33-e5ca-40b6-a94e-40d3ce61283d</span>
<span id="cb11-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> 2023-02-06T16:01:03.421-0700 7f32c24e1700 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span> auth: unable to find a keyring on /etc/pve/priv/ceph.client.bootstrap-osd.keyring: <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">No</span> such file or directory</span>
<span id="cb11-10"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> 2023-02-06T16:01:03.421-0700 7f32c24e1700 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span> AuthRegistry<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0x7f32bc060800</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> keyring found at /etc/pve/priv/ceph.client.bootstrap-osd.keyring, disabling cephx</span>
<span id="cb11-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> 2023-02-06T16:01:03.425-0700 7f32bb7fe700 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span> monclient<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">hunting</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> handle_auth_bad_method server allowed_methods <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> but i only support <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-12"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> 2023-02-06T16:01:03.425-0700 7f32c0a7e700 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span> monclient<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">hunting</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> handle_auth_bad_method server allowed_methods <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> but i only support <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-13"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> [errno 13] RADOS permission denied <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">error</span> connecting to the cluster<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>  RuntimeError: Unable to create a new OSD id</span>
<span id="cb11-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">command</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ceph-volume lvm create --cluster-fsid 6d4cf20c-f09d-4edf-ae78-0038b57f9709 --data /dev/sda'</span> failed: exit code 1</span></code></pre></div>
<p>Ok so I’m getting an error connecting to the cluster, why would that be? Checking the ceph status from the proxmox interface it appears that the monitor is skipping between running on my first and third nodes, but not my second (which is where I was able to install the OSD). Now I’m really confused and wondering if maybe I should have just done this whole thing manually through the GUI. But what would I learn that way? Ok, one thing I didn’t do was create a separate network for ceph. Maybe I should have done that. Let’s destroy these monitors and initialize the ceph cluster with the network flag. Fun update, I can’t destroy the last monitor in a cluster. Maybe I have to reverse some of the other steps first?</p>
<p>The last thing I did before trying to create OSDs was create managers, so let’s remove those with <code>pveceph destroymgr &lt;hostname&gt;</code> on each of the nodes.</p>
<p>Back to my second node I try <code>pveceph destroymon pve2</code> and get the error <code>can't remove last monitor</code>. Ok, maybe I can add the other two back now that I don’t have managers? Nope.</p>
<p>Ok, ceph has docs on <a href="https://docs.ceph.com/en/latest/rados/operations/add-or-rm-mons/#removing-monitors-from-an-unhealthy-cluster">removing monitors from an unhealthy cluster</a> I’d say that’s what I have. After running these commands I don’t see any running monitors, and I’m also getting a timeout on the ceph page of proxmox and <code>ceph -s</code> is hanging from the terminal. Since I don’t have any monitors now I shouldn’t have any managers either. <code>pveceph mon destroy</code> indicates that it destroys managers as well. I can also run <code>pgrep ceph-mgr</code> to confirm there’s no manager process running.</p>
<p>Alright, let’s try manually creating some monitors this time. Starting with my first node I’ll run <code>pveceph mon create</code> and… get an error:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph mon create</span>
<span id="cb12-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Could</span> not connect to ceph cluster despite configured monitors</span></code></pre></div>
<p>Ok, so there must still be something in my ceph config that’s pointing to the monitors, even though I destroyed them. Maybe I’ll take a step further back and remove that file as well. After deleting the file I now get a popup in the proxmox UI on the ceph page saying “Ceph is not initialized. You need to create an initial config once.” with a button to configure ceph. That seems like I’ve got everything reset back, except maybe those initially installed packages, but that should be fine. Let’s try running the playbook again with a proper ceph network defined. Aaaand we fail to create monitors. Let’s see what’s going on.</p>
<p>Here’s the cleaned up output of the error, it’s the same as from ansible just not in json format:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph mon create</span>
<span id="cb13-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">unable</span> to get monitor info from DNS SRV with service name: ceph-mon</span>
<span id="cb13-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Could</span> not connect to ceph cluster despite configured monitors</span></code></pre></div>
<p>Alright, I clearly haven’t reset my state properly. A little more searching leads me to <code>pveceph purge</code>. That sounds promising, let’s give that a shot. I’ll run it on all nodes to be safe, and with the <code>--crash</code> and <code>--logs</code> flags to purge all the logs. <a href="https://forum.proxmox.com/threads/reinstall-ceph-on-proxmox-6.57691/">This thread</a> has some details about purging ceph config to start clean, although the posters there are having lots of problems, so I hope I don’t have to go that far. After running the purge command I ran my playbook and… failed at creating monitors again. However, this time I could ssh into each host and create a monitor from the command line, same for managers. Checking my ceph dashboard I now see all three nodes with monitors and managers up and running. Let’s leave the playbook alone for now and just try and do the rest of this manually. On node 1 I was able to create an OSD no problem. On node 2 I got told <code>device '/dev/sda' is already in use</code>. Following the guide I run <code>ceph-volume lvm zap /dev/sda --destroy</code>:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve2:~#</span> ceph-volume lvm zap /dev/sda <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--destroy</span></span>
<span id="cb14-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Zapping: /dev/sda</span>
<span id="cb14-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Zapping lvm member /dev/sda. lv_path is /dev/ceph-ff288a69-40e3-4076-a422-52e100d7d302/osd-block-64f34da5-6b0c-4d20-8a60-ddc7227345ed</span>
<span id="cb14-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Unmounting /var/lib/ceph/osd/ceph-0</span>
<span id="cb14-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Running</span> command: /usr/bin/umount <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> /var/lib/ceph/osd/ceph-0</span>
<span id="cb14-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> umount: /var/lib/ceph/osd/ceph-0: target is busy.</span>
<span id="cb14-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>  RuntimeError: command returned non-zero exit status: 32</span></code></pre></div>
<p>Ok, so it looks like this is already set up as an OSD, except I don’t actually see it when I go to the ceph panel. Let’s try the third node and come back to this one. That one added just fine too, what is going on with my second node? First test, when in doubt try turning it off and on again. After a reboot I try the commands again:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve2:~#</span> ceph-volume lvm zap /dev/sda <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--destroy</span></span>
<span id="cb15-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Zapping: /dev/sda</span>
<span id="cb15-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Running</span> command: /usr/bin/dd if=/dev/zero of=/dev/sda bs=1M count=10 conv=fsync</span>
<span id="cb15-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> 10+0 records in</span>
<span id="cb15-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">10+0</span> records out</span>
<span id="cb15-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> 10485760 bytes <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">10</span> MB, 10 MiB<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">copied,</span> 0.0274736 s, 382 MB/s</span>
<span id="cb15-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Zapping successful for: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Raw Device: /dev/sda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve2:~#</span> pveceph createosd /dev/sda</span>
<span id="cb15-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">device</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/dev/sda'</span> is already in use</span></code></pre></div>
<p>Ok, that’s a bit of progress, I can actually run the zap, but then why can’t I create the osd? Why is it saying the device is already in use? From the disks page in the proxmox UI I selected the disk and picked “wipe”. Let’s try again. And it worked. Computers are weird.</p>
<p>My ceph cluster is healthy! Three monitors, three managers, three OSDs, 2.73TB of raw disk. Let’s create a storage pool:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve2:~#</span> pveceph pool create tank <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--add_storages</span></span>
<span id="cb16-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> tank: applying size = 3</span>
<span id="cb16-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> tank: applying application = rbd</span>
<span id="cb16-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> tank: applying min_size = 2</span>
<span id="cb16-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> tank: applying pg_autoscale_mode = warn</span>
<span id="cb16-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> tank: applying pg_num = 128</span></code></pre></div>
<p>Next up I create a metadata service on each nodes so I can run cephfs:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:~#</span> pveceph mds create</span>
<span id="cb17-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">creating</span> MDS directory <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/var/lib/ceph/mds/ceph-pve3'</span></span>
<span id="cb17-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">creating</span> keys for <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mds.pve3'</span></span>
<span id="cb17-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">setting</span> ceph as owner for service directory</span>
<span id="cb17-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabling</span> service <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ceph-mds@pve3.service'</span></span>
<span id="cb17-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Created</span> symlink /etc/systemd/system/ceph-mds.target.wants/ceph-mds@pve3.service <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> /lib/systemd/system/ceph-mds@.service.</span>
<span id="cb17-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">starting</span> service <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ceph-mds@pve3.service'</span></span></code></pre></div>
<p>This looked the same on all three nodes. Finally, some consistency!</p>
<p>The last piece from the playbook was to create a cephfs:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph fs create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--pg_num</span> 128 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--add-storage</span></span>
<span id="cb18-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">creating</span> data pool <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cephfs_data'</span>...</span>
<span id="cb18-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">error</span> with <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'osd pool create'</span>: mon_cmd failed <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span>  pg_num 128 size 3 would mean 771 total pgs, which exceeds max 750 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mon_max_pg_per_osd</span> 250 <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> num_in_osds 3<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> </span></code></pre></div>
<p>So close! That’s what I get for just copy pasting. I guess I have to figure out how many placement groups I should actually have.</p>
<p>After referencing <a href="https://ceph.io/rados/new-in-nautilus-pg-merging-and-autotuning/">this post</a> about auto scaling placement groups I have some idea where to go.</p>
<p>Starting with checking my current and recommended status:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> ceph osd pool autoscale-status</span>
<span id="cb19-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">POOL</span>    SIZE  TARGET SIZE  RATE  RAW CAPACITY   RATIO  TARGET RATIO  EFFECTIVE RATIO  BIAS  PG_NUM  NEW PG_NUM  AUTOSCALE  BULK</span>
<span id="cb19-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.mgr</span>   1152k                3.0         2794G  0.0000                                  1.0       1              on         False</span>
<span id="cb19-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tank</span>      0                 3.0         2794G  0.0000                                  1.0     128          32  warn       False</span></code></pre></div>
<p>My tank pool has 128 placement groups, with a recommended number of 32. What happens if I change autoscale from <code>warn</code> to <code>on</code>?</p>
<p>After running <code>ceph osd pool set tank pg_autoscale_mode on</code> and waiting a little bit, I do indeed now have 32 placement groups in the pool, as expected. If I do this again I’ll add <code>--pg_autoscale_mode on</code> to the arguments for my pool creation to get this right from the beginning.</p>
<p>Ok, back to the file system. The default <code>pg_num 128</code> seems likely to be incorrect here, I wonder if I can just have it auto-scale as well? Looking at the docs it doesn’t seem so. The default in my ansible playbook, which was for a similarly sized cluster used <code>64</code>, so let’s do that.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph fs create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--pg_num</span> 64 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--add-storage</span></span>
<span id="cb20-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">creating</span> data pool <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cephfs_data'</span>...</span>
<span id="cb20-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> cephfs_data: applying application = cephfs</span>
<span id="cb20-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> cephfs_data: applying pg_num = 64</span>
<span id="cb20-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">creating</span> metadata pool <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cephfs_metadata'</span>...</span>
<span id="cb20-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> cephfs_metadata: applying pg_num = 16</span>
<span id="cb20-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configuring</span> new CephFS <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cephfs'</span></span>
<span id="cb20-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Successfully</span> create CephFS <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cephfs'</span></span>
<span id="cb20-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Adding</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cephfs'</span> to storage configuration...</span>
<span id="cb20-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Waiting</span> for an MDS to become active</span>
<span id="cb20-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Waiting</span> for an MDS to become active</span></code></pre></div>
<p>With that everything seems to be up! In the UI I can see my pools, and I have all green across the board.</p>
<p>Let’s try putting an image in there just to make sure it actually works at all. I was able to stand up an image on my <code>tank</code> pool, boot into it, and live migrate it. I’d say we’re good!</p>
</section>
<section id="get-back-to-square-one" class="level1">
<h1>Get back to square one</h1>
<p>I’ve done it once, let’s make sure I can do it again.</p>
<section id="clean-up-the-install" class="level2">
<h2 class="anchored" data-anchor-id="clean-up-the-install">Clean up the install</h2>
<p>As discussed in the last section I’ll run <code>pveceph purge --crash --logs</code> on all three nodes (that might be overkill but let’s be safe).</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph purge <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--crash</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--logs</span></span>
<span id="cb21-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Unable</span> to purge Ceph!</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">To</span> continue:</span>
<span id="cb21-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> remove pools, this will !!DESTROY DATA!!</span>
<span id="cb21-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> remove active OSD on pve1</span>
<span id="cb21-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> remove active MDS on pve1</span>
<span id="cb21-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> remove other MONs, pve1 is not the last MON</span></code></pre></div>
<p>Ok, I can’t purge to start, I’ll have to back my way out.</p>
<section id="remove-cephfs" class="level3">
<h3 class="anchored" data-anchor-id="remove-cephfs">remove cephfs</h3>
<p>The list above only talks about pools, but I’ve got a cephfs on top of that to remove first. The <a href="https://pve.proxmox.com/pve-docs/chapter-pveceph.html#_destroy_cephfs">pveceph docs</a> have a section on destroying a cephfs. Let’s follow that.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">umount</span> /mnt/pve/cephfs</span>
<span id="cb22-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pveceph</span> stop <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--service</span> mds.cephfs <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run this on all nodes</span></span></code></pre></div>
<p>That didn’t seem to actually stop the MDSs, so I went into the UI and destroyed them all. Based on the guide, after that I should be able to remove it with <code>pveceph fs destroy cephfs --remove-storages --remove-pools</code> but I get <code>storage 'cephfs' is not disabled, make sure to disable and unmount the storage first</code>. A little more searching gets me <code>ceph fs rm cephfs --yes-i-really-mean-it</code> which runs ok and upon completion I don’t see any entries for cephfs anymore, so I think that’s good.</p>
</section>
<section id="remove-my-other-pool" class="level3">
<h3 class="anchored" data-anchor-id="remove-my-other-pool">remove my other pool</h3>
<p>I think I’m going to do the rest of this through the UI. It’s not the sort of thing I need to automate, and the UI seem to be cleaner and easier. Ok, my pools are gone, including some related to cephfs that didn’t seem to clear out with the old command. My nodes are still showing the pools as storage locations, but with a <code>?</code> by them. I think that will go away once I purge the config for ceph, so let’s not worry about it for now.</p>
</section>
<section id="remove-osds" class="level3">
<h3 class="anchored" data-anchor-id="remove-osds">remove OSDs</h3>
<p>From the UI, for each OSD in my cluster I first take it out, stop it, then destroy it.</p>
</section>
<section id="remove-mds" class="level3">
<h3 class="anchored" data-anchor-id="remove-mds">remove MDS</h3>
<p>Looks like that was taken care of when I removed cephfs. No action</p>
</section>
<section id="remove-managers-and-monitors" class="level3">
<h3 class="anchored" data-anchor-id="remove-managers-and-monitors">remove managers and monitors</h3>
<p>Again from the UI I <code>destroy</code> each manager, and then destroy all but one monitor.</p>
</section>
<section id="try-purging-again" class="level3">
<h3 class="anchored" data-anchor-id="try-purging-again">try purging again</h3>
<p>Hmmm, I’m still getting told to remove pools and mons. Not sure what’s up with that. Ahh, <code>pveceph pool ls</code> tells me I still have a <code>.mgr</code> pool. I didn’t realize that counted. Ok, that’s cleared out. I’ve still got this monitor listed under one of my nodes but with status unknown and I can’t seem to destroy it from the UI. Going into the <a href="https://docs.ceph.com/en/latest/rados/operations/add-or-rm-mons/">ceph docs</a> I can see there are some docs on removing mons from an unhealthy cluster. The ghost monitor is running on my third node so I ssh into it and I can see the monitor service is indeed running there. I’m able to stop the service on that node with <code>systemctl stop ceph-mon.target</code>. This still doesn’t let me run purge though. If I run it I get told that my monitor isn’t the last one running, but also if I try and remove that monitor I get told it’s the last one. That’s… confusing. Ok, let’s go back to that third node, disable the monitor service and reboot it the node. Still nothing. Running <code>ceph mon dump</code> on any node only shows the monitor I know is running on my first node. Looking at <code>/etc/pve/ceph.conf</code> I only see the one monitor. Ok, bit of googling and I’m back to <a href="https://forum.proxmox.com/threads/ceph-cant-remove-monitor-with-unknown-status.63613/">this thread</a> which reminds me to check <code>/var/lib/ceph/mon</code> on the node with the unknown status monitor. Sure enough, there’s still a folder there and after I delete it I don’t see that entry anymore. Let’s try purging again.</p>
<p>That seems to have worked. If I go to the ceph page in the UI I’m told that it’s not configured. I can still see the storage pools on my nodes though. I wonder if that’s just in <code>/etc/pve/storage.cfg</code> like my NFS share configs are. Yup! Ok, after deleting that I no longer see them as storage in the UI. I think I’m good. One last thing to do is to go into each node through the UI and wipe the SSDs.</p>
</section>
</section>
</section>
<section id="retry-using-ansible" class="level1">
<h1>Retry using ansible</h1>
<p>The manual steps worked, maybe just not having the network configured correctly when I initially ran my playbook got me into an unstable state. After double checking my playbook I’ll try running through it one step at a time. I think the biggest issue was the network config being missing in the initial install, which meant the monitors couldn’t talk to each other on each node and then everything spiraled from there. I’ve gone back and fixed that in the playbook, and also added some syntax to enable pg autoscaling to avoid that other issue I had during manual config.</p>
<p>I’m going to be a little more cautious this time and only run it with one incremental new role uncommented at a time. I got to the monitor creation before hitting an issue. The command completed no problem, but my node 3 monitor can’t see my nodes 1 and 2 (they can see each other). I’m thinking this is either because I didn’t entirely clear out my state, or maybe something about ansible running the monitor creation command in parallel is breaking things. Let’s just try deleting and re-adding the monitor on the third node. Ok, I can’t remove it the normal way because it thinks it’s the last monitor. <code>/etc/pve/ceph.conf</code> lists all three monitors. Running <code>ceph mon dump</code> either shows me two monitors on my first two nodes, or just the third monitor on my last node. This is a little different than what I had before.</p>
<p>Following the ceph docs for removing an unhealthy monitor doesn’t help because my third node’s monitor isn’t in the monmap of my healthy monitors, that’s the problem:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph stop <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--service</span> mon.pve1</span>
<span id="cb23-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> ceph-mon <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> pve1 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--extract-monmap</span> /tmp/monmap</span>
<span id="cb23-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2023-02-20T16:31:41.732-0700</span> 7f41ca2cf700 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span> wrote monmap to /tmp/monmap</span>
<span id="cb23-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> monmaptool /tmp/monmap <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--rm</span> pve3</span>
<span id="cb23-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">monmaptool:</span> monmap file /tmp/monmap</span>
<span id="cb23-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">monmaptool:</span> removing pve3</span>
<span id="cb23-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">monmaptool:</span> map does not contain pve3</span></code></pre></div>
<p>Ok, back in the third node, let’s clear out this monitor:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:~#</span> systemctl stop ceph-mon.target</span>
<span id="cb24-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:~#</span> systemctl disable ceph-mon.target</span>
<span id="cb24-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:~#</span> cd /etc/systemd/system</span>
<span id="cb24-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:/etc/systemd/system#</span> ls <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> ceph</span>
<span id="cb24-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ceph-mgr.target.wants</span></span>
<span id="cb24-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ceph-mon.target.wants</span></span>
<span id="cb24-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ceph.target.wants</span></span>
<span id="cb24-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:/etc/systemd/system#</span> rm <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> ceph-mon.target.wants/</span>
<span id="cb24-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:/etc/systemd/system#</span> systemctl status ceph-mgr.target</span>
<span id="cb24-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">●</span> ceph-mgr.target <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> ceph target allowing to start/stop all ceph-mgr@.service instances at once</span>
<span id="cb24-11">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded:</span> loaded <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/lib/systemd/system/ceph-mgr.target</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vendor</span> preset: enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb24-12">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Active:</span> active since Sun 2023-02-19 15:54:58 MST<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">24h</span> ago</span>
<span id="cb24-13"></span>
<span id="cb24-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Warning:</span> journal has been rotated since unit was started, output may be incomplete.</span>
<span id="cb24-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:/etc/systemd/system#</span> systemctl stop ceph-mgr.target</span>
<span id="cb24-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:/etc/systemd/system#</span> systemctl disable ceph-mgr.target</span>
<span id="cb24-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Removed</span> /etc/systemd/system/multi-user.target.wants/ceph-mgr.target.</span>
<span id="cb24-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Removed</span> /etc/systemd/system/ceph.target.wants/ceph-mgr.target.</span>
<span id="cb24-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:/etc/systemd/system#</span> ls <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> ceph</span>
<span id="cb24-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ceph-mgr.target.wants</span></span>
<span id="cb24-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ceph.target.wants</span></span>
<span id="cb24-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:/etc/systemd/system#</span> rm <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> ceph-mgr.target.wants</span></code></pre></div>
<p>In addition to that I removed the monitor record from <code>/etc/pve/ceph.conf</code>.</p>
<p>After that my ceph status hung for a second, which confused me until I remembered I’d turned off the monitor service on my first node to do that monmap dump. After turning it back on I seem to be ok.</p>
<p>Now my third node is seeing my other two nodes’ monitors. If I try to create a monitor though I get told the monitor address is in use. I double checked that the unit was completely removed and ran <code>systemctl daemon-reload</code> as well as removing everything in <code>/var/lib/ceph/mon</code>. Maybe a reboot? Nope. Ahh! There’s a line up in <code>/etc/pve/ceph.conf</code> for <code>mon_host</code> that still has that IP listed. After deleting it I have three monitors up and running! I think this must be a syncing issue. I don’t have the energy to go back and run this playbook from scratch to test for sure, but I’m going to add a random sleep in front of the command like so <code>sleep $[ ( $RANDOM % 30 ) + 1 ]s &amp;&amp;</code> and hope that will do it if I ever have to run this playbook again.</p>
<p>Back on track I added in the manager role and it worked fine. OSD creation also worked.</p>
<p>Pool creation failed. It looks like the conditional for checking the OSD count was expecting <code>pveceph status</code> to return json that ansible could parse. It doesn’t do that for me so I substituted the command with <code>ceph osd stat | awk '{print $3}'</code> to get the number of up OSDs. I don’t know if that will work in weird failed states, but it at least worked in the happy path I could test. Note that I had to change the playbook slightly to use <code>shell</code> instead of <code>command</code> so that I could <a href="https://stackoverflow.com/questions/47994497/how-to-pipe-commands-using-ansible-e-g-curl-sl-host-com-sudo-bash">include pipes</a> and I had to cast the output of that command to an integer to let it compare to the minimum OSD requirement. I also had to change the command to search for the pool slightly to account for the output format of <code>pveceph pool ls</code> changing from when the playbook was written.</p>
<p>At this point I’m able to fully run through the playbook. Other than that issue with monitors, that I think I’ve resolved, I have a fully functioning playbook for ceph cluster provisioning.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>So, was automating this worth it? For actual usability, I’d have to say no. Given the modifications I had to make to the playbook to handle the output of the status checking commands I don’t have a ton of faith that if way down the road I need to redeploy ceph that this playbook will just work. On the other hand, trying to automate it, failing terribly, learning to clean up that failed state, rebuild it manually, and then actually automating it was a decent way for me to learn some things about ceph. I also picked up a couple ansible tricks along the way. I definitely still have a ton to learn about ceph, but I feel a little more comfortable with it than I would have if I’d just followed the wizard in the UI. I can’t imagine too many people who aren’t me are going to read this post, but maybe some of the errors I’ve included in it will show up in someone’s future search and they’ll be able to see what I did about them, here’s hoping that’s useful. If not, I learned a bunch and keeping this record helped me remember what I was doing as I worked through this over the course of several days.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <category>proxmox</category>
  <category>Linux</category>
  <category>ceph</category>
  <guid>https://blog.ianpreston.ca/posts/2023-02-05-proxmox-ceph.html</guid>
  <pubDate>Sun, 05 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Migrating to quarto</title>
  <link>https://blog.ianpreston.ca/posts/2023-02-03-migration.html</link>
  <description><![CDATA[ 





<section id="update" class="level1">
<h1>Update</h1>
<p>This blog is now rendered with <a href="https://quarto.org/">quarto</a> rather than <a href="https://github.com/fastai/fastpages">fastpages</a>. Honestly fastpages was working fine for me, but they’ve deprecated it and I like being on the new thing. There are some nice navigation and filtering features added in this new tool, and the live preview on my dev machine works quite nicely. Mostly I’m making this post to ensure that my github action was set up correctly.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <guid>https://blog.ianpreston.ca/posts/2023-02-03-migration.html</guid>
  <pubDate>Fri, 03 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Home cluster part 3 - Setup VM templates on proxmox</title>
  <link>https://blog.ianpreston.ca/posts/2023-01-21-proxmox3.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is the third post ( <a href="../posts/2022-11-21-proxmox.html">part 1</a>, <a href="../posts/2022-12-31-proxmox2.html">part 2</a>) documenting my adventures setting up a home cluster. In this one I will try a few different methods of getting VMs installed on proxmox. As with the previous posts, this is not intended to be a how to guide from an expert. I haven’t used proxmox before working on this project, so I’m mostly doing this to document what I do for future reference, or maybe provide others with the perspective of what it’s like to work on proxmox as a relative beginner.</p>
<p>All the code I reference in this post is in my <a href="https://github.com/ianepreston/recipes">recipes</a> repository. Specifically, the ansible role to create templates is <a href="https://github.com/ianepreston/recipes/tree/master/ansible/roles/pve_templates">here</a> and the terraform code is <a href="https://github.com/ianepreston/recipes/tree/master/terraform/pve">here</a></p>
</section>
<section id="basic-menu-driven-install" class="level1">
<h1>Basic menu driven install</h1>
<section id="create-the-vm" class="level2">
<h2 class="anchored" data-anchor-id="create-the-vm">Create the VM</h2>
<p>The most obvious way to install a VM is through the UI. I know I won’t want to take this approach indefinitely as it involves manual work and isn’t reproducible (at least not easily), but it seems like the right place to start, both to ensure I don’t have any unforeseen issues with my setup, and also to provide a baseline for comparison when I try other methods later.</p>
<p>Selecting one of my nodes from the web interface I click “Create VM”. In the first tab I pick the node to install to and give it a name, we’ll do <code>ubuntu-test</code> for this. I could also assign it to a <a href="https://pve.proxmox.com/wiki/User_Management#pveum_resource_pools">resource pool</a> if I had any of those created but I don’t so I won’t. The other thing I can assign is a VM ID, which is the unique numeric identifier proxmox uses internally. At this point I’m fine to let proxmox manage that though so I’ll leave it on the default.</p>
<p>Checking the advanced options I can also configure the VM to start at boot so it will come back up if I reboot my cluster. I can also configure the order it starts/stops. The start at boot setting seems like it would be handy for production services, but I’m just testing so I’ll leave it for now.</p>
<p>On the next tab I can configure the OS. I’ve already configured my NAS (set up in part 2) to hold things like ISO images for installing and uploaded an Ubuntu 22.10 server image, so I’ll select that. The guest OS settings are already correctly set on Linux with a modern kernel so I’m all good there.</p>
<p>Next up is the System tab. The first option is Graphic Card. There’s a ton of options under this one, but at this point I don’t have any intention of installing anything that will care so I’ll leave it at default. Maybe at some point I’ll have a system with a GPU that I want to pass through, or will need a Windows server, but not right now. I also have to pick a machine option. Based on <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings">the docs</a> as long as I don’t want to do PCIe passthrough I can stick with the default, so I will for now. Next I pick a SCSI controller. Again, referring to <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_hard_disk">the docs</a> the <code>VirtIO SCSI Single</code> option that it had selected by default seems perfect for me. There’s also a checkbox for <code>Qemu Agent</code>. Reading <a href="https://pve.proxmox.com/wiki/Qemu-guest-agent">the docs</a> this seems like a handy thing to have, so I’ll turn it on (looks like mostly it’s for cleaner shutdown and pausing during disk backups). The last thing on this tab is whether to enable TPM. Since I’m not making a Windows image I don’t need this, so I’ll leave it unchecked.</p>
<p>Following that we’re on to Disks. I can create multiple disks I’m sure, but for now let’s just set up one. First I make sure that the backing storage is my <code>local-zfs</code> storage, which is the NVME drive on the host, rather than my NAS. I haven’t configured the SSD in these hosts yet, I’m planning to set up <a href="https://docs.ceph.com/en/quincy/">ceph</a> on them but that’s for a future post. The other basic thing to set on this page is disk size. I’m not planning to keep this image around, so I’ll stick with the default 32GB for now. The <code>Bus/Device</code> field defaults to the SCSI interface I set up on the last tab so that seems fine. There’s an option for cache mode as well. Right now I’m not really sure what that does, but from <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_hard_disk">the docs</a> the default of no cache seems like it will work for me, so I’ll leave it. Taking a look at <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_hard_disk_discard">the docs</a> it seems like I want to have the <code>Discard</code> option checked so I’ll do that. From <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings">the docs</a> <code>IO Thread</code> only seems like it really matters if I have multiple disks attached, but I don’t see the harm of turning it on so let’s do that. I’ll check <code>SSD emulation</code> since the underlying disk really is an SSD and the guest OS might as well think so too. I’ll uncheck the <code>backup</code> option on this one, since I’m planning to just destroy this VM shortly after I create it and I don’t need backups hanging around. I want to be able to try replicating this VM to different hosts, and I’d want this disk to be included, so I’ll leave <code>skip replication</code> unchecked. The last thing I have to pick is the <code>Async IO</code> option. From reading <a href="https://kb.blockbridge.com/technote/proxmox-aio-vs-iouring/">this</a> it seems like the default <code>io_uring</code> will work for me, I’m not deep enough on how this sort of thing works to have strong opinions or requirements so I’ll go with the default.</p>
<p>Now we come to CPU. For <code>sockets</code> I’ll leave it at 1, since all my hosts have only 1 physical socket. For cores my hosts have either 4 or 6 cores, so there’s definitely no point going over 6. Since this is just a test machine let’s just give it 2. For CPU type I’m going to leave it on the Default (<code>kvm64</code>). From the docs on CPU type if I set the CPU to <code>host</code> it will exactly match the CPU flags and type of my host system, but I might have migration issues across hosts, since they’re not all the exact same CPU. The default will allow easier migration, but might disable some specific CPU flags that would be beneficial. For now I’ll stick with the easy option. There’s some other stuff for CPU limits and extra CPU flags here that I’m also going to leave alone for now.</p>
<p>Now we’re on to memory. Each of these hosts has <code>32GB</code> of memory, so I don’t really have to be cheap here, at least while I’m testing. Under advanced I can set a memory floor and enable/disable ballooning. From the docs, I want to have <code>ballooning</code> enabled, even if I have the memory floor and ceiling set the same, so that my host can see how much memory the VM is actually using. If I was running a bunch of VMs with dynamic memory requirements I could see overallocating the max across them and setting the floor for each. In this case I’m just going to leave it at the default <code>2GB</code> since I’m not going to actually run anything on this VM.</p>
<p>Almost done, next up is network. I’ve only got one bridge right now so I’ll leave that selected. I’m not currently doing any VLAN stuff in my network so I’ll leave the <code>VLAN tag</code> entry blank. For model I’ll stick with <code>VirtIO</code> as the docs say that’s the one to pick for best performance as long as your host supports it. The <code>firewall</code> option is checked by default. I haven’t looked into the proxmox firewall at all at this point, but let’s leave that on for now. I can also do some rate limiting and other fancy network config here but I’m going to leave those on the default for now.</p>
<p>The only thing to do now is confirm my settings and actually create the VM. I’ll check <code>start after created</code> so it fires up right away.</p>
</section>
<section id="configure-the-vm" class="level2">
<h2 class="anchored" data-anchor-id="configure-the-vm">Configure the VM</h2>
<p>After waiting a little bit I can see my newly created VM listed under the node I set it up on. Clicking into that VM and selecting the <code>Console</code> section I can see that I’m in the Ubuntu server installation wizard. Since this isn’t a post about installing Ubuntu server I’ll work through the menus without writing everything down. Going through the install worked fine until it came time to reboot and it failed to unmount the virtual CD-ROM that had the installation ISO. I went to the hardware tab on the VM in the proxmox interface, removed the CD-ROM and rebooted. After the reboot the VM came up fine, and I was able to ssh into it from my desktop.</p>
</section>
</section>
<section id="create-a-template-image" class="level1">
<h1>Create a template image</h1>
<p>After confirming the manual VM creation process worked, I started looking into automating the process. From what I could see, most automation tools like ansible or terraform require you to have a VM template created that they can use. There are also some tools to automate the creation of templates, but let’s not get ahead of ourselves. There’s tons of docs on getting a template created and I started getting a bit of analysis paralysis going through them all, so let’s try the <a href="https://docs.technotim.live/posts/cloud-init-cloud-image/">Techno Tim</a> guide and see where that leads.</p>
<p>I was able to mostly follow the guide, and other than having to change references from <code>local-lvm</code> to <code>local-zfs</code> for storage of the disk I didn’t encounter any obvious errors. I created a new machine and it started up, but I couldn’t access it over the web interface for the shell, or see info about its IP (no qemu guest agent installed). In the cloud-init config I set the IP to be DHCP, just to see what would happen. I wasn’t able to resolve the host by name to try and ssh in using that. After checking my router I found a host just named <code>ubuntu</code> and was able to ssh into its IP with the username and ssh key I specified in the cloud init template. For a further test I created a second clone from the template. One thing I noticed was that I had to create it on the same node as the template. Presumably I can migrate it later. The second VM came up, got a new ID in proxmox, and pulled a different IP showing a different MAC address in my router. I was able to ssh into it the same way. After confirming that I shut it down and migrated it to another node, just to see how that would go. The migration went fine, the VM came back up, got the same IP, and I was able to ssh back into it.</p>
<section id="thoughts-on-manual-templates" class="level2">
<h2 class="anchored" data-anchor-id="thoughts-on-manual-templates">Thoughts on manual templates</h2>
<p>This wasn’t too bad. There are a few tweaks I’d want to apply, like adding the guest agent into the machine, but overall template creation is pretty easy. I could see wanting to update my templates semi regularly when new versions of base OSs come out though, and I’d like to understand more of the theory behind how this actually works, since a lot of what I did was pretty much copy paste. To do that, I’ll clear these out and look into some other template creation options.</p>
</section>
<section id="cleaning-up" class="level2">
<h2 class="anchored" data-anchor-id="cleaning-up">Cleaning up</h2>
<p>I don’t want lingering stuff from this experiment hanging out on my nodes, so let’s go in and see what I have to get rid of. First is the created VMs - I can stop and remove them from the UI easily enough. Same deal for the template VM. I checked the local storage through the UI as well and it looks like any virtual disks I created were removed when I got rid of the VM. The only other thing to remove was that initially downloaded cloud image, so I went into the shell for the node and just ran <code>rm</code> to get rid of that.</p>
</section>
</section>
<section id="automate-creating-a-template" class="level1">
<h1>Automate creating a template</h1>
<p>Creating templates doesn’t immediately feel like the sort of thing I’ll have to do super often and will therefore want to automate. In researching how I would do it though I found a few use cases, namely to schedule the creation of updated templates to avoid a long running <code>apt update &amp;&amp; apt upgrade</code> cycle on each newly created image. I found a nice looking <a href="https://gtgb.io/2022/07/23/proxmox-vm-templating/">post</a> that had a fairly reasonable looking workflow using a few shell scripts. Further research suggested that the “production” way to do this would be with <a href="https://developer.hashicorp.com/packer">packer</a>. That seems more complicated, but it would help me learn a more broadly applicable skill that I might be able to transfer to other projects. I honestly can’t tell if that’s a good use of my time or just <a href="https://en.wiktionary.org/wiki/yak_shaving">yak shaving</a> so I’ll try and get by without for now.</p>
<p>Following the post linked above, there’s only one pre-requisite on the proxmox nodes to run the scripts, and that’s <code>libguestfs-tools</code> in order to modify the cloud image bases we’ll be building templates from. That’s easy enough to add to the ansible playbook I’ve been using throughout this series to configure my proxmox nodes. After that there’s just four scripts I have to tweak slightly for my own requirements and then get onto at least one node. I can also set these up in ansible with some templates, which should make them easier to modify and otherwise maintain. Plus then I have them stored somewhere if I have to rebuild these nodes in the future. The repository associated with the above post is <a href="https://github.com/geektx/Proxmox-VM-Template">here</a>.</p>
<p>As a starting point I copied in the scripts as templates into an ansible role. I swapped out all the variables that were hard coded in the scripts for ansible variables, and then set what I wanted to initially test on as ansible variables in the defaults for the role. The idea is that this way if I want to build multiple templates I can just call this role with a variables file that overrides the specific things I want to change (image id, cloud image). After a little bit of fiddling I got the files copied over and ran the script, which did create a template for me. So far one advantage over the manual template from before is that this image has <code>qemu-guest-agent</code> installed, so I can see the hosts IP in the summary tab. There’s still some more stuff I’d like to sort out though.</p>
<p>By changing the storage location of the template from local storage of the node to my NAS I was able to clone the template to another node in my cluster. That image then came up in a bootloop though. Even more fun, I couldn’t stop it from the web interface, which meant I couldn’t delete it. I had to ssh into the node it was running on, run <code>ps aux | grep "/usr/bin/kvm -id &lt;VM ID&gt;"</code> and then <code>kill -9</code> that PID. Crazy. I tried creating it on the same node as the template with a target of local storage but got the same issue.</p>
<p>After looking at the docs it seems like if I want to automate building images from templates I’ll be using the template name, rather than a VM ID anyway. So I think I’ll try modifying the script to create a template with the same name but different ID on each of my nodes, which should let me provision VMs to any node. First let’s clean up the template some more though. As a future project maybe I’ll come back and figure out why building the template on my NAS causes it to boot loop, but that’s a problem for future me.</p>
<p>One thing I definitely want to be able to do is scale VMs I create off these templates up or down. 2 cores, 2GB of RAM and 2GB of disk will not always do it. To test this I create a VM from the template without modification and ssh into it. <code>df -h</code> confirms that I have 2GB of disk assigned to the VM by default. <code>lscpu</code> shows 2 cores. <code>free -h</code> confirms I have 2GB of RAM. Let’s turn the VM off and adjust those. From the Hardware tab of the VM from the proxmox UI I adjust the CPU up to 3 cores and RAM up to 4GB. Disk resizing cannot be done from the UI, so from the terminal based on <a href="https://pve.proxmox.com/wiki/Resize_disks#1._Resizing_guest_disk">the docs</a> I run <code>qm resize 100 scsi0 +5G</code> to add 5GB to the disk. Let’s fire the machine back up and see what happened. <code>lscpu</code> indeed now shows 3 cores, that’s cool. <code>free -h</code> shows the updated amount of RAM. Even <code>df -h</code> shows the correct amount of disk. That last one is frankly surprising to me because the docs indicate that only the disks should have been resized, not the logical volumes or anything else, which would have meant some commands being run within the VM to make the space available. That has also been my experience with VMs at work. Maybe it’s something fancy in the Ubuntu image I’m using? Either way, pretty sweet for now.</p>
<p>Another thing to change is how the VM authenticates over SSH. The default way I’ve been doing it is to just put my laptop’s public key in <code>~/.ssh/authorized_keys</code> using cloud-init. This works ok, but it’s not how I manage ssh in the rest of my network. See <a href="https://blog.ianpreston.ca/ssh/linux/bash/2020/05/03/ssh.html">my earlier post</a> for details, but the tldr is I want to us a certificate authority to allow any signed key to authenticate as a user, and all my host keys to authenticate themselves with a CA. The former is a bit of a convenience as I could just add a couple keys for my other devices to my <code>keyfiles</code> file and keep them up to date if I rotated keys. The Host key thing will be super handy though, since otherwise I’ll have to manually verify that I trust the host key of each new VM I start up, and if I ever tear down and replace a VM I’ll get errors on host validation. So let’s fix that. The first step is to copy the host CA key and the user CA public key into a folder on my NAS that’s accessible from proxmox so I can inject those keys into the templates. I could have ansible copy them over and encrypt them in the playbook, but I think having them on the NAS is slightly more convenient and secure, even if I’d have encrypted the keys with <code>ansible-vault</code>. Next I need to modify the template creation script to copy those files in, and modify <code>sshd_config</code> to use them. While I’m at it I can turn off password authentication over SSH for a little more security. This actually went surprisingly smoothly. I updated the <code>build_image</code> script to copy in the public key for the user CA as well as the private host CA key. Then I set it to run a very slightly modified version of the host setup script I created in my earlier post. After re-running the template build script and creating a VM from the new template I was able to ssh in from my laptop without having passed in a key file to the cloud-init template, or being prompted to validate the host key. Magic!</p>
<p>A note on name resolution. I think I remember seeing/reading this somewhere but it didn’t come back to me until I started troubleshooting. When I first create a machine from a template, if I tell it to use DHCP for IP address acquisition it gets a lease from my router with the hostname <code>ubuntu</code>. So if I want to ping/ssh the machine by name I have to use <code>ubuntu.local.ipreston.net</code> instead of <code>&lt;vm-name&gt;.local.ipreston.net</code>. I typically like to use DHCP on my servers and then just do static mappings in my router to pin them to an IP, rather than hard coding the IP itself, mostly so that I can get easy name resolution without having to put manual entries into my DNS. Even my proxmox nodes themselves which do use static IPs, I created a static mapping in my DHCP server to their MAC addresses so that all my IPs would be available in one place. Anyway, after you reboot the VM once it gets a lease with its actual hostname so just reboot it once, or manually alter the hostname when you do your static mapping.</p>
<section id="automate-creating-another-template" class="level2">
<h2 class="anchored" data-anchor-id="automate-creating-another-template">Automate creating another template</h2>
<p>Having a working Ubuntu template is pretty handy, but what if I want to branch out? Can I apply this approach to other distros? I’m pretty sure this approach will work fine with another debian based distro, and probably even another fairly standard Linux like CentOS will be fine (although I should test). But what about weird ones? Specifically I want to see if I can get this working on <a href="https://www.flatcar.org/">flatcar Linux</a> since I want to try using it for my kubernetes nodes. Let’s walk before we try running though and extend to another version of Ubuntu.</p>
<p>The first thing I want to do is tweak how I’m numbering my templates. Right now each template gets a variable set for its whole VM ID. I’d like to break that out into chunks. The first digit should just always be 8 (at least for now) to indicate a template and keep it out of the range of actual VMs I’m deploying. The next one I’m thinking should be the node the template is created on, and then the last two digits can be an identifier for the specific template. This actually wasn’t bad at all. The one variable definition gets a little long, but basically I just go from one line in defaults of <code>build_vm_id: "8000"</code> to <a href="https://github.com/ianepreston/recipes/blob/master/ansible/roles/pve_templates/defaults/main.yml#L2-L5">this</a>.</p>
<p>This relies on all my proxmox nodes having hostnames of the format <code>pve&lt;Num&gt;</code> but I can work with that. The number of digits in my IDs will change if I get more than 9 nodes or 99 templates too, but I’m not really expecting that to happen, and I don’t even think that would necessarily break anything if it did, so I won’t worry about it for now.</p>
<p>With that slight modification to the role complete I set my playbook to call the role twice, modifying the variables from the defaults for just the template name, the template number, and the URL of the cloud image to build from for Ubuntu Jammy and Kinetic.</p>
<p>Around this time I realized it was going to be a little tedious running the template build script each time I added a template, so I added a <a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_handlers.html">handler</a> to the role to execute the template build script whenever it made a change. It took a little bit of tweaking to figure out that I needed the full path of the script I wanted to run, as well as set it as the working directory so I could call the subscript that defines all the build variables. After those changes the handler triggered properly and built my templates whenever the script changed, or I added a new template to build.</p>
<p>At this point the general template creation process is working quite nicely for Ubuntu versions, but what about other distros? Let’s give debian a shot. I grabbed the <code>cloudgeneric</code> version of debian bullseye from their official cloud images page and plugged it into my playbook. No problem at all. The template built, I was able to build an image from it just the same as the Ubuntu ones.</p>
<p>Let’s get a bit braver and branch out to an even more different distro Rocky Linux. This one might come in handy if I want to try out anything enterprisey or just want to see what the Red Hat experience is like. I found their generic cloud images <a href="https://rockylinux.org/alternative-images/">here</a> and plugged the link into my playbook. The template built ok, but trying to run the VM I ran into problems where it got stuck on a line that said <code>Probing EDD (edd=off to disable)... ok</code> and just hung out there. Similar to the weird boot loop I got deploying from my NAS I wasn’t able to shut down the VM from the Web UI and had to go into the terminal on the node and <code>ps aux | grep "/usr/bin/kvm -id &lt;VM ID&gt;"</code> to find its PID and <code>kill -9</code> it before I could remove the VM. I guess I have to do some troubleshooting. A little searching finds that this error is pretty common, although it doesn’t actually relate to the message, but something that’s happening after. There are a few potential kernel configs I might be able to change, but as I’m poking around in the machine I notice something interesting, it’s got way more disk to start than my Ubuntu templates did. I wonder if I’m somehow filling the disk, so I use that command from the previous section and resize the disk on a newly cloned template before starting it up. Disappointingly this did not solve the problem. Another weird thing I noticed during the start up is that CPU usage on the VM is pinned at right around 50%. Since I gave it 2 cores that suggests that one core is working flat out on something. Several of the posts indicated that after about 10 minutes the system would come up. That’s obviously a terrible startup time, but I’d like to give it a while to see if I at least have the same problem. So I go do some reading and let this VM run for a while… and discover that tragically the usually perfect strategy of ignoring a problem and hoping it goes away doesn’t work in this case.</p>
</section>
<section id="examine-the-template-creation-script-and-modify-it" class="level2">
<h2 class="anchored" data-anchor-id="examine-the-template-creation-script-and-modify-it">Examine the template creation script and modify it</h2>
<p>Something about how I have my VM configured is not playing nice with Rocky Linux. It could just be a very specific thing that I only want to modify for that distro, but I also just copy-pasted most of the other template creation parameters from some guy on the internet. So before I assume that my basic parameters are the best and it’s only Rocky that needs to be modified, let’s examine those options that I’m using and see if I want to modify any of them. Maybe while I’m at it I’ll fix my Rocky issue (or introduce new ones to working distros), but at a minimum I’ll have a better understanding of what’s going on.</p>
<p>The first little bit of the script downloads a cloud image, and then uses virt-customize to update packages, install a list of packages (just qemu-guest-agent and cloud-init by default), copy in a build-info file with some metadata about the template build, copy in some ssh related files and have a script to set them up on first boot (note to self, maybe that’s the part that’s breaking in Rocky, I’ve only tested that script in debian and Arch based distros so far). That stuff (except maybe the ssh part) is all straightforward and I understand what it’s trying to do, so let’s skip to the next line:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> destroy <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span></span></code></pre></div>
<p>Remove the old template before you build a new one, makes sense.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> create <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--memory</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${vm_mem}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cores</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${vm_cores}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--net0</span> virtio,bridge=vmbr0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${template_name}</span></span></code></pre></div>
<p>Create a new VM (that we’ll turn into a template later) with an ID of <code>build_vm_id</code>, memory and cores set to our variables, and a <code>virtio</code> network adapter, which is what I did in the manual template creation. Finally we give it a name based on the <code>template_name</code> variable. So far so good, but I had a lot more options available when I built a VM manually earlier in this post, anything else I should set? Reading back through my manual config I set basically everything else to defaults so I think I’m good here. Let’s see what’s next.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> importdisk <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${image_name}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${storage_location}</span></span></code></pre></div>
<p>Ok, this is fine, I’m importing the disk image I downloaded and modified to the VM I created and putting it in the storage location I specify. All seems fine. Maybe I’ll need to revisit this if I take another crack at storing these templates on my NAS, but fine for now.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> set <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--scsihw</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${scsihw}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--scsi0</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${storage_location}</span>:vm-<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span>-disk-0</span></code></pre></div>
<p>Ok, here’s where I deviate from what I picked in the manual build. In my defaults (based on the script I copied in) I had <code>scsihw</code> set to <code>virtio-scsi-pci</code>, whereas in my manual build I went with <code>virtio-scsi-single</code>. I’m struggling to find the actual difference between these settings, but let’s change it for kicks for now.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> set <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--ide0</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${storage_location}</span>:cloudinit</span></code></pre></div>
<p>Add the cloud-init drive, seems fine. It’s emulating a CD drive so ide makes sense.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> set <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--nameserver</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${nameserver}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--ostype</span> l26 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--searchdomain</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${searchdomain}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--ciuser</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${cloud_init_user}</span></span></code></pre></div>
<p>Add a couple defaults to the cloud-init template and set the ostype to linux (l26). No worries there.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> set <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--boot</span> c <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--bootdisk</span> scsi0</span></code></pre></div>
<p><code>--boot c</code> tells it to boot from hard disk (as opposed to CD or network) and we set the bootdisk to the image that’s been mounted to the VM. Seems fine.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> set <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--agent</span> enabled=1</span></code></pre></div>
<p>This turns on qemu agent, which we want.</p>
<p>One thing I noticed from going through this is I had some lines that set multiple options, even though they weren’t necessarily related. So I cleaned that up to be one option per line. Easier to parse and modify that way.</p>
<p>I took a quick look back at the manual config section and didn’t see anything else that stood out, so I guess I have to get back to fixing Rocky Linux.</p>
</section>
<section id="get-back-to-making-rocky-linux-work-spoiler-i-do-not-succeed" class="level2">
<h2 class="anchored" data-anchor-id="get-back-to-making-rocky-linux-work-spoiler-i-do-not-succeed">Get back to making Rocky Linux work (spoiler, I do not succeed)</h2>
<p>Ok, that was a fun side quest, but let’s get back to figuring out Rocky. I re-run my template creation playbook, just in case that storage config changed anything. I also found <a href="https://forum.proxmox.com/threads/getting-probing-edd-edd-off-to-disable-ok-when-booted.97414/">a proxmox forum post</a> where someone was having the same problem with a particular RHEL image, but no solution. That post also said it worked fine with RHEL 7 and the issue was with 6. I’m trying Rocky 9 (I believe they use the same version as RHEL for compatibility) so I don’t know if that’s helpful. <a href="https://leo.leung.xyz/wiki/No_Console_Output">This post</a> suggests the output just means my console output is being redirected somewhere else, so I’m not seeing whatever the actual issue is. I guess I should fix that first regardless. One suggested solution there is to change the default tty from serial. An alternative approach there, is to check out the <a href="https://pve.proxmox.com/wiki/Serial_Terminal">proxmox docs</a> and enable serial out on the VM with <code>qm set &lt;VM ID&gt; -serial0 socket</code>. Let’s add that line to my template and see if I get anything. A little bit of progress in that it doesn’t just tell me I don’t have serial on that machine, but I also only see <code>starting serial terminal on interface serial0 (press Ctrl+O to exit)</code>, which isn’t exactly informative. Let’s ditch my ssh script setup on first boot, just to make sure that’s not what’s hanging the template. Removing it from the template script gives me the same issue, so the problem is elsewhere. Just for kicks, let’s try a different Rocky cloud image. I found <a href="https://medium.com/geekculture/create-a-rocky-linux-virtual-machine-vm-with-terraform-and-proxmox-6692a49f7b43">this blog</a> that’s using the <code>GenericCloud</code> image rather than the <code>GenericCloudBase</code> image I was using. I’m not sure why I picked <code>GenericCloudBase</code> to begin with so let’s swap over and see what happens. Still nothing. Ok, the blog also has a bunch more cloud-init modules installed than I do. Maybe one of them will fix things. Let’s add them to the package list for that template. Still no luck. Ok, back to basics. We have a blog post where someone made a template, and apparently it worked. Let’s try manually working through those instructions and see what happens. Well, first problem their link goes to a pinned daily build of Rocky that’s no longer available on the site. Fine, we’ll do the latest one and hope that there’s not just some daily build issue that’s leading to all of this. So I get the same error following the guide. After a little more digging I find a link in the rocky vault to the exact image that the blog was using. Let’s apply my template to that image. Slightly better luck. It still bootloops, but I can actually see things in the console and by being very speedy I was even able to get a screencap of the kernel panic error it’s throwing.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.ianpreston.ca/posts/{{ site.baseurl }}/images/proxmox3/panic.png" title="Rocky Panic" class="img-fluid figure-img"></p>
<figcaption>Nodes</figcaption>
</figure>
</div>
<p>Finding out that this was the issue led me to a <a href="https://forum.proxmox.com/threads/kernel-panic-installing-rocky-or-almalinux.114885/">proxmox forum</a> post where it turns out lots of people are having this issue with Rocky 9 if they set their CPU to the default <code>kvm64</code>. I reset my VM to use <code>host</code> for the CPU. That fixed the boot loop error but led to another error. At this point I decided I didn’t feel like running Rocky Linux very much.</p>
</section>
<section id="try-arch-linux" class="level2">
<h2 class="anchored" data-anchor-id="try-arch-linux">Try Arch Linux</h2>
<p>Rocky was supposed to be an intermediate difficulty distro to test out my template process. I don’t actually have a use case for it, I just figured it would be more different than debian but less different than flatcar when it comes to testing. I’m really hoping that I just got unlucky and that other distros won’t be so hard. Let’s see if that’s correct. I don’t have an immediate use case for Rocky, but I do like running Arch, it’s what my current server has. Let’s try that. Building the template goes fine, and this one actually boots to a login prompt from the proxmox UI, so we’re on a happier path than with Rocky already. At first it seemed like Arch wasn’t updating my default user. I started up the image and tried to ssh in but got a <code>connection refused</code> error. Trying to ssh in as the default <code>arch</code> user that the image uses got a <code>permission denied</code> error instead. After some testing it turns out that cloud-init just takes longer to complete on first boot in Arch, I think because it has to do more package updating. If I just left the VM running for a bit I was able to ssh right in.</p>
</section>
<section id="try-flatcar-linux" class="level2">
<h2 class="anchored" data-anchor-id="try-flatcar-linux">Try flatcar Linux</h2>
<p>I’ve never used flatcar before, but it sounds interesting and <a href="https://eevans.co/blog/garage/">this blog</a> recommended it for self hosting kubernetes so I’d like to have it available in my environment. I found <a href="https://github.com/Doc-Tiebeau/proxmox-flatcar">this repository</a> which had its own scripts to create a flatcar template. Most of it looks broadly similar to the approach I’ve been taking, so let’s try it out. I notice that flatcar images come in <code>.img.bz2</code> format instead of <code>.img</code> or <code>.qcow2</code> like the other files I’ve downloaded. I may have to add in some logic to the script to extract images in that case. As a first step though I just tried running the whole workflow as is. That got me a template built, but the VM I created off it couldn’t find any bootable media, suggesting the disk creation didn’t work as intended. Probably because I have to extract it first. After adding a little bit of logic to my image building script:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${image_name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bz2"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bzip2</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${image_name}</span></span>
<span id="cb9-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">image_name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${image_name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>.<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb9-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span></code></pre></div>
<p>I got the VM to boot. I could auto login as user <code>core</code> over serial, but it looks like none of my other <code>cloud-init</code> config stuff worked. This post is already getting super long though so I’m going to save getting a fully working flatcar image for a separate post and declare victory on my general goal of “be able to make templates automatically”.</p>
</section>
</section>
<section id="automate-deploying-vms-from-templates" class="level1">
<h1>Automate deploying VMs from templates</h1>
<p>I’m not entirely done with templates at this point. I still want to schedule their rebuild so that I can have fresh templates to build VMs, and I need to figure out some way to be able to deploy VMs based off these templates to any node, either by recreating them on each node, or figuring out why creating them off shared storage didn’t work before. How exactly I go about some of that might depend on how I actually want to deploy VMs from these templates though, so let’s figure that out and come back to templates later.</p>
<p>Once again I’m at a decision point. I can keep using <a href="https://docs.ansible.com/ansible/latest/collections/community/general/proxmox_module.html">ansible</a> to deploy VMs, or I can switch to <a href="https://registry.terraform.io/providers/Telmate/proxmox/latest/docs">terraform</a>. While for templates I avoided the hashicorp product and the associated learning curve, I’ve actually used terraform a bit before, and I know that it’s something I’ll want to learn for other applications like deploying cloud resources, so in this case it seems to be worth the extra effort to figure out.</p>
<p>In my <a href="https://github.com/ianepreston/recipes">recipes repository</a> I made a <code>terraform</code> directory and a <code>pve</code> subdirectory under that to contain this project. That repository already has terraform configured from my devcontainer so I’m off to a good start. I created a <code>main.tf</code> file and put in just the required info for the proxmox provider so I could run <code>terraform init</code>. This seemed to work ok, so next up is to configure the connection to my cluster.</p>
<p>Following <a href="https://registry.terraform.io/providers/Telmate/proxmox/latest/docs">the docs</a> for the provider I created a terraform user in my cluster. In theory I should automate this with ansible too as part of my proxmox setup, but I feel like I’m already getting pretty in the weeds here and would like to move towards actually accomplishing things. I guess I’ll end up regretting this if I need to entirely rebuild my cluster and can’t figure out why my terraform jobs aren’t running all of a sudden. After creating the user I added a <code>pve_creds.env</code> file to the directory (but also put it in <code>.gitignore</code>) with the username and password I’d just set up. This part is fragile too, since if I move to a different machine or delete this repository I’ll have to recreate that file. At some point in the future I’ll either figure out <a href="https://www.hashicorp.com/products/vault">vault</a> or maybe just set up the <a href="https://go.bitwarden.com/password-management-for-business-teams-organizations/">bitwarden</a> CLI to properly retrieve secrets. But that’s a project for another day.</p>
<p>With my credentials (presumably) set up, let’s try and provision a machine. There’s all sorts of fancy stuff I can eventually do to parametrize the build and I will definitely set all of that up eventually, but for now let’s start with spinning up one machine using hard coded values.</p>
<pre class="hcl"><code>resource "proxmox_vm_qemu" "test_server" {
  count       = 1
  name        = "test-vm-${count.index + 1}"
  target_node = "pve1"
  clone       = "ubuntujammytemplate"
  agent       = 1
  os_type     = "cloud-init"
  cores       = 3
  cpu         = "host"
  memory      = 4096
  bootdisk    = "scsi0"
  disk {
    slot = 0
    # set disk size here. leave it small for testing because expanding the disk takes time.
    size     = "10G"
    type     = "scsi"
    storage  = "local-zfs"
    iothread = 1
  }
  network {
    model  = "virtio"
    bridge = "vmbr0"
  }
  ipconfig0 = "ip=192.168.85.9${count.index + 1}/24,gw=192.168.85.1"
}</code></pre>
<p>The first run of <code>terraform plan</code> was disappointing because I’d accidentally used the username for the terraform user in one post I’d been reading in the environment, but set a username based on the official docs on my datacenter, so I just got a permission denied. After that though it looked promising with the following:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Terraform</span> used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span>
<span id="cb11-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> create</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Terraform</span> will perform the following actions:</span>
<span id="cb11-5"></span>
<span id="cb11-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># proxmox_vm_qemu.test_server[0] will be created</span></span>
<span id="cb11-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"proxmox_vm_qemu"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_server"</span> {</span>
<span id="cb11-8">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> additional_wait           = 0</span>
<span id="cb11-9">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> agent                     = 1</span>
<span id="cb11-10">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> automatic_reboot          = true</span>
<span id="cb11-11">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> balloon                   = 0</span>
<span id="cb11-12">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> bios                      = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seabios"</span></span>
<span id="cb11-13">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> boot                      = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span></span>
<span id="cb11-14">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> bootdisk                  = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scsi0"</span></span>
<span id="cb11-15">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> clone                     = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ubuntujammytemplate"</span></span>
<span id="cb11-16">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> clone_wait                = 0</span>
<span id="cb11-17">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> cores                     = 3</span>
<span id="cb11-18">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> cpu                       = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"host"</span></span>
<span id="cb11-19">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> default_ipv4_address      = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-20">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> define_connection_info    = true</span>
<span id="cb11-21">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> force_create              = false</span>
<span id="cb11-22">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> full_clone                = true</span>
<span id="cb11-23">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> guest_agent_ready_timeout = 100</span>
<span id="cb11-24">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> hotplug                   = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"network,disk,usb"</span></span>
<span id="cb11-25">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> id                        = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-26">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> ipconfig0                 = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip=192.168.85.91/24,gw=192.168.85.1"</span></span>
<span id="cb11-27">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> kvm                       = true</span>
<span id="cb11-28">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> memory                    = 4096</span>
<span id="cb11-29">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> name                      = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test-vm-1"</span></span>
<span id="cb11-30">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> nameserver                = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-31">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> numa                      = false</span>
<span id="cb11-32">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> onboot                    = false</span>
<span id="cb11-33">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> oncreate                  = true</span>
<span id="cb11-34">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> os_type                   = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cloud-init"</span></span>
<span id="cb11-35">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> preprovision              = true</span>
<span id="cb11-36">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> reboot_required           = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-37">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> scsihw                    = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-38">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> searchdomain              = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-39">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> sockets                   = 1</span>
<span id="cb11-40">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> ssh_host                  = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-41">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> ssh_port                  = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-42">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> tablet                    = true</span>
<span id="cb11-43">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> target_node               = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pve1"</span></span>
<span id="cb11-44">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> unused_disk               = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-45">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> vcpus                     = 0</span>
<span id="cb11-46">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> vlan                      = <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span></span>
<span id="cb11-47">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> vmid                      = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-48"></span>
<span id="cb11-49">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> disk {</span>
<span id="cb11-50">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> backup             = 0</span>
<span id="cb11-51">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> cache              = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span></span>
<span id="cb11-52">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> file               = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-53">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> format             = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-54">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops               = 0</span>
<span id="cb11-55">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_max           = 0</span>
<span id="cb11-56">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_max_length    = 0</span>
<span id="cb11-57">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_rd            = 0</span>
<span id="cb11-58">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_rd_max        = 0</span>
<span id="cb11-59">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_rd_max_length = 0</span>
<span id="cb11-60">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_wr            = 0</span>
<span id="cb11-61">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_wr_max        = 0</span>
<span id="cb11-62">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_wr_max_length = 0</span>
<span id="cb11-63">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iothread           = 1</span>
<span id="cb11-64">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> mbps               = 0</span>
<span id="cb11-65">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> mbps_rd            = 0</span>
<span id="cb11-66">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> mbps_rd_max        = 0</span>
<span id="cb11-67">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> mbps_wr            = 0</span>
<span id="cb11-68">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> mbps_wr_max        = 0</span>
<span id="cb11-69">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> media              = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-70">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> replicate          = 0</span>
<span id="cb11-71">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> size               = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10G"</span></span>
<span id="cb11-72">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> slot               = 0</span>
<span id="cb11-73">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> ssd                = 0</span>
<span id="cb11-74">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> storage            = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"local-zfs"</span></span>
<span id="cb11-75">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> storage_type       = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-76">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> type               = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scsi"</span></span>
<span id="cb11-77">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> volume             = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-78">        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-79"></span>
<span id="cb11-80">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> network {</span>
<span id="cb11-81">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> bridge    = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vmbr0"</span></span>
<span id="cb11-82">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> firewall  = false</span>
<span id="cb11-83">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> link_down = false</span>
<span id="cb11-84">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> macaddr   = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-85">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> model     = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"virtio"</span></span>
<span id="cb11-86">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> queues    = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-87">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> rate      = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-88">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> tag       = <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span></span>
<span id="cb11-89">        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-90">    <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-91"></span>
<span id="cb11-92"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Plan:</span> 1 to add, 0 to change, 0 to destroy.</span></code></pre></div>
<p>That looks like the sort of thing I want to do, let’s do it with a run of <code>terraform apply</code>… It worked! It took a fair bit longer than doing it manually runtime wise (about a minute and 30 seconds), but I had read that the proxmox API is kind of slow, so that wasn’t totally surprising. At the end of the process though I had a new VM with the name and IP I’d assigned with the CPU/RAM/Disk I’d specified that I was able to ssh into. Neat! There’s a lot more I’d like to do with terraform in terms of actually deploying machines I care about of course, but this post is already getting super long so let’s save that for later.</p>
</section>
<section id="automate-creating-templates-across-nodes" class="level1">
<h1>Automate creating templates across nodes</h1>
<p>So it seems like terraform is going to be cloning templates based on their name, not their VM ID. This should mean as long as I have a template with the same name on each node, I should be able to provision VMs to any node I want from terraform. It’s definitely a bit of extra disk/CPU to do it this way, but it seems fairly clean and easy, so let’s give it at try. I think all I’ll have to do is change my playbook to target all of my nodes, since I already have logic to adjust the VM id of the template based on which node it’s on. Turns out that did indeed work, so not much to write about this one.</p>
</section>
<section id="automate-scheduled-rebuilds-of-the-templates" class="level1">
<h1>Automate scheduled rebuilds of the templates</h1>
<p>Last thing to do before I wrap up this section of my homelab saga. That’s to schedule the creation of these templates. This way if there are updated images of a particular distro, or if the packages themselves need to be updated, any machines I create from the template will have those changes reflected regularly.</p>
<p>Using the <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/cron_module.html">cron</a> module, I created a task to add an entry for each template:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb12-1"></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create crontab entry for template creation</span></span>
<span id="cb12-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.cron</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Create template {{ template_name }}"</span></span>
<span id="cb12-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minute</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ 5 * build_vm_template_num | int }}"</span></span>
<span id="cb12-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ build_vm_host_digit }}"</span></span>
<span id="cb12-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb12-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">day</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span></span>
<span id="cb12-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">job</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cd {{ install_dir }} &amp;&amp; ./build_image.sh"</span></span></code></pre></div>
<p>I don’t want all these jobs to kick off at once, so I had the start hour vary based on the node, from 1am to 3am, and then the minute vary by the template number multiplied by 5 so each job should kick off in 5 minute intervals. If I end up with more than 12 (11?) templates I’ll have to revise this, but that’s a problem for future me.</p>
<p>I’m not 100% sure this will work, the crontab entries look fine, but I never totally trust a cron job until I’ve seen it execute at least once. Fortunately I’m writing this on the 30th of the month so I’ll be able to check back and see soon enough.</p>
</section>
<section id="conclusion-and-next-steps" class="level1">
<h1>Conclusion and next steps</h1>
<p>In this post I (over)designed a way to create Virtual Machines on my proxmox cluster for a variety of Linux distributions. To recap: so far in this series I have selected and acquired hardware, done a basic proxmox install on that hardware and clustered it, configured the underlying proxmox environment using ansible, created a number of template VMs for various Linux distributions, and set up the basic tooling necessary to create VMs from those templates using code with Terraform.</p>
<p>With all of this done, surely it’s time to actually start <em>doing things</em> on my cluster rather than setting it up, right? Not so fast! There’s still one more piece of low level infrastructure I need to set up before I’m fully ready to deploy VMs to actually do things in this environment, and that’s to configure distributed storage on the 1TB SSDs I have in each node using <a href="https://ceph.com/en/">ceph</a>. I’ll cover that in the next post.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <category>linux</category>
  <category>proxmox</category>
  <guid>https://blog.ianpreston.ca/posts/2023-01-21-proxmox3.html</guid>
  <pubDate>Sat, 21 Jan 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
