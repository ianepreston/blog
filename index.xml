<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Ian&#39;s blog</title>
<link>https://blog.ianpreston.ca/index.html</link>
<atom:link href="https://blog.ianpreston.ca/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Sat, 18 Nov 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Databricks cluster policies in terraform</title>
  <link>https://blog.ianpreston.ca/posts/2023-11-18-terraform-cluster.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Recently I had to define some <a href="https://learn.microsoft.com/en-ca/azure/databricks/administration-guide/clusters/policies">databricks cluster policies</a> at work using <a href="https://registry.terraform.io/providers/databrickslabs/databricks/latest/docs/resources/cluster_policy">terraform</a>. I didn’t have super sophisticated requirements (at least I didn’t think so), but I still struggled to find sample code online that covered my requirements. This post is a brief write up on what I implemented and why, as well as some notes on potential improvements I might make later as my requirements get more detailed.</p>
</section>
<section id="creating-the-policies" class="level1">
<h1>Creating the policies</h1>
<p>All cluster policies are encoded in JSON, which we create from passing a collection of <code>map</code>s that we <code>merge</code> in terraform into the <code>jsonencode</code> method.</p>
<section id="runtimes" class="level2">
<h2 class="anchored" data-anchor-id="runtimes">Runtimes</h2>
<p>One of the first things we want our cluster policy to enforce is using a recent version of the Databricks Runtime (DBR). Depending on the environment we might further restrict this to LTS releases only. Using a series of <code>data</code> blocks I find all the relevant releases. Note that this will change as new releases come out, so we’ll want to schedule running this to ensure we’re always enforcing the latest runtimes. As an example, this block finds the latest LTS release that supports the ML runtime and has GPU drivers installed:</p>
<pre class="hcl"><code>data "databricks_spark_version" "latest_ml_gpu_lts" {
  latest            = true
  long_term_support = true
  ml                = true
  gpu               = true
}</code></pre>
<p>Another bonus on enforcing runtime policies is it provides an easier way to restrict GPU compute without having to find a list of instance types with GPUs. Since you can’t provision a runtime onto a VM with a GPU unless it includes GPU drivers we can limit access to GPU easily with this.</p>
<p>In terms of which runtimes are enabled I made the assumption that we would want consistency across policies in terms of enabled runtimes. That is, the code does not allow for you to enable GPUs on single node compute policies but disable them on multi node.</p>
<p>You’ll see a bit further down that offering multiple runtime limitations across policies within a workspace would be fairly straightforward but introduce a lot of boilerplate code, at least the way I’ve implemented it. Again, I don’t really see this being a requirement. Specific runtimes are enabled or disabled with the module booleans <code>lts_dbr</code>, <code>ml_dbr</code>, and <code>gpu_dbr</code>. So if <code>lts_dbr</code> is true then only LTS runtimes are enabled, if it’s false users are allowed to choose LTS or the most recent runtime. It’s similar for <code>ml_dbr</code> for ML runtimes and <code>gpu_dbr</code> for ML runtimes with GPU enabled (there is no non-ML GPU enabled runtime)</p>
<p>Setting the actual array of allowed runtimes feels kind of hacky, terraform doesn’t seem to support if else blocks, or other cleaner ways I could think of to do this:</p>
<pre class="hcl"><code>  no_lts_no_ml_no_gpu_arr = (!var.lts_dbr &amp;&amp; !var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_lts.id, data.databricks_spark_version.latest.id] : null
  lts_no_ml_no_gpu_arr    = (var.lts_dbr &amp;&amp; !var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_lts.id] : null
  lts_ml_no_gpu_arr       = (var.lts_dbr &amp;&amp; var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_ml_lts.id, data.databricks_spark_version.latest_lts.id] : null
  lts_ml_gpu_arr          = (var.lts_dbr &amp;&amp; var.ml_dbr &amp;&amp; var.gpu_dbr) ? [data.databricks_spark_version.latest_ml_lts.id, data.databricks_spark_version.latest_lts.id, data.databricks_spark_version.latest_ml_gpu_lts.id] : null
  no_lts_ml_no_gpu_arr    = (!var.lts_dbr &amp;&amp; var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_ml_lts.id, data.databricks_spark_version.latest_ml.id, data.databricks_spark_version.latest_lts.id, data.databricks_spark_version.latest.id, ] : null
  no_lts_ml_gpu_arr       = (!var.lts_dbr &amp;&amp; var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_ml_lts.id, data.databricks_spark_version.latest_ml.id, data.databricks_spark_version.latest_lts.id, data.databricks_spark_version.latest.id, data.databricks_spark_version.latest_ml_gpu_lts.id, data.databricks_spark_version.latest_ml_gpu.id] : null
  fallback_spark_vers_arr = [data.databricks_spark_version.latest_lts.id]
  runtime_version = {
    "spark_version" : {
      "type" : "allowlist",
      "values" : coalesce(local.no_lts_no_ml_no_gpu_arr, local.lts_no_ml_no_gpu_arr, local.lts_ml_no_gpu_arr, local.no_lts_ml_no_gpu_arr, local.no_lts_ml_gpu_arr, local.fallback_spark_vers_arr),
      "defaultValue" : data.databricks_spark_version.latest_lts.id
    }
  }</code></pre>
<p>basically, whichever of those conditionals is true for the combination of runtime booleans that’s the list of runtimes that will be available to users of that policy. I put just the latest LTS runtime as a fallback just to handle errors, it shouldn’t really come up.</p>
<p>This is honestly more limiting than I’d strictly prefer for the non-LTS releases. As an example, if DBR 14.0 is the latest LTS runtime, and 14.2 is the latest overall runtime, I’d prefer users be able to provision 14.1 as well. To handle that though I think I’d have to do some array sorting and regex inference to find the position of the LTS release in the non-LTS array and return everything up to and including that index, and frankly I didn’t feel like writing that. Maybe I’ll be more motivated in the future.</p>
</section>
<section id="cost-management" class="level2">
<h2 class="anchored" data-anchor-id="cost-management">Cost management</h2>
<p>The next big thing we want to enforce is cost management. One approach would be setting careful limitations on combinations of instance types and number of workers, but databricks also offers a <code>max_dbu</code> parameter which just limits the compute cost. This doesn’t exactly translate to overall cost, as underlying VM costs are not factored in, but they tend to be very closely related to the DBU cost of the instance type, so the simplicity seemed like a worthwhile trade off. Again, I’m assuming that we don’t want to have too many different DBU limits within a given workspace, although I have allowed for interactive and job/DLT compute to have different thresholds. We probably generally want to limit the threshold for exploratory work below what we use to run scheduled jobs. Note that this does introduce a somewhat perverse incentive at the margins to run a larger instance with photon disabled, as enabling photon doubles your DBU cost for any given size of underlying compute.</p>
<p>This is accomplished by passing a line into the compute policy definition that looks something like this:</p>
<pre class="hcl"><code>    { "dbus_per_hour" : { "type" : "range", "maxValue" : var.max_dbu_job } },</code></pre>
</section>
<section id="single-of-multi-node" class="level2">
<h2 class="anchored" data-anchor-id="single-of-multi-node">Single of multi node</h2>
<p>For interactive clusters I’ve created both single node and multi node cluster policies. In theory we shouldn’t really care which a user selects, as long as they’re below their cost threshold, but for less sophisticated users it might reduce complexity to only allow single node clusters.</p>
<pre class="hcl"><code>  single_node = {
    "spark_conf.spark.databricks.cluster.profile" : {
      "type" : "fixed",
      "value" : "singleNode",
      "hidden" : true
    },
    "num_workers" : {
      "type" : "fixed",
      "value" : 0,
      "hidden" : true
    }
  }</code></pre>
<p>This can either be added to or left out of a policy definition to enforce single node</p>
</section>
<section id="auto-termination" class="level2">
<h2 class="anchored" data-anchor-id="auto-termination">Auto termination</h2>
<p>For all interactive policies (it’s not relevant to jobs or DLT) I enforce an auto termination of 10 minutes to minimize cluster idling. We could make that a variable if a need comes up, but I’d personally like to keep it low and consistent for now:</p>
<pre class="hcl"><code>  autotermination = {
    "autotermination_minutes" : {
      "type" : "fixed",
      "value" : 10
      # "hidden" : true
  } }</code></pre>
<p>I took off the <code>hidden</code> flag for now so users can see that it’s been auto set for them. We can remove that later to reduce the complexity of the cluster creation interface.</p>
<p>I have heard some feedback from ML users that it’s not reasonable to expect them to be sitting around ready to pounce on long running tasks when they’re prototyping so I’m going to end up modifying this to a range with a higher maximum value that we can configure for ML workspaces.</p>
</section>
<section id="tags" class="level2">
<h2 class="anchored" data-anchor-id="tags">Tags</h2>
<p>Finally, I added some tags, which right now don’t really do much since I don’t know what additional tags we want to add. A lot gets auto applied that might be sufficient, but I wanted to demonstrate the capability:</p>
<pre class="hcl"><code>  default_tags = {
    "custom_tags.lob" : {
      "type" : "fixed",
      "value" : "${var.lob_name}",
      "hidden" : true
    },
    "custom_tags.TEST" : {
      "type" : "fixed",
      "value" : "testfromterraform"
    }
  }</code></pre>
</section>
<section id="actual-cluster-policies" class="level2">
<h2 class="anchored" data-anchor-id="actual-cluster-policies">Actual cluster policies</h2>
<p>Putting it all together we can define cluster policies like so:</p>
<pre class="hcl"><code>resource "databricks_cluster_policy" "multi-node-personal" {
  count = var.create_multi_node_personal_policy ? 1 : 0
  name  = "Multi Node Personal Compute"
  definition = jsonencode(merge(
    { "dbus_per_hour" : { "type" : "range", "maxValue" : var.max_dbu_interactive } },
    local.runtime_version,
    local.autotermination,
    local.default_tags,
    local.photon
  ))
}</code></pre>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this post I demonstrated how to create a set of databricks cluster policies using a terraform module that can be applied to your workspaces. Nothing particularly earth shattering, and I’m not sure whether to be pleased or horrified with that giant block I wrote to produce the acceptable runtime list, but it works and it at least adds some more example code that others can build off.</p>


</section>

 ]]></description>
  <category>databricks</category>
  <category>terraform</category>
  <guid>https://blog.ianpreston.ca/posts/2023-11-18-terraform-cluster.html</guid>
  <pubDate>Sat, 18 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Automating my network</title>
  <link>https://blog.ianpreston.ca/posts/2023-07-06-network-automation.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In a <a href="../posts/2023-04-08-managed-switch.html">previous post</a> I set up a managed switch in my network, but I did it all manually through the menus. Realistically that’s fine, I don’t have a super big or complicated network and I don’t move things around enough to justify the investment in learning how to automate it in terms of time savings. But I like automating things, so let’s see what I can figure out.</p>
</section>
<section id="what-id-have-liked-to-do" class="level1">
<h1>What I’d have liked to do</h1>
<p>Ideally I would handle this through Ansible, since that’s what I use to do most of the rest of my home automation. Unfortunately, my switch is not one of the supported devices in Ansible’s networking stack as near as I can tell. The next best thing would have been to use <a href="https://napalm.readthedocs.io/en/latest/">NAPALM</a> for python based automation, but that’s also not supported. So I have to go one level down the stack and use <a href="https://pypi.org/project/netmiko/">netmiko</a>. Let’s see how that goes.</p>
</section>
<section id="connecting-to-the-switch" class="level1">
<h1>Connecting to the switch</h1>
<p>In the previous post I connected using the serial console and then telnet. For netmiko to work I will need SSH. This does not appear to be enabled by default. After checking the manual it looks like enabling this is a command line only operation. From the initial login I’m in the manager level interface and my prompt looks like this: <code>ProCurve Switch 2810-48G#</code> I need to get from there to the Global configuration level by running <code>config</code> so it looks like this <code>ProCurve Switch 2810-48G(config)#</code> and then run <code>crypto key generate ssh</code> to create a host key on the switch, <code>ip ssh</code> to enable ssh, and then <code>show ip ssh</code> to confirm that it worked.</p>
<p>After this I’ll try and connect to the switch and find that it’s got too old a key exchange method to work by default:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Unable</span> to negotiate with 192.168.10.2 port 22: no matching key exchange method found. Their offer: diffie-hellman-group1</span></code></pre></div>
<p>After finding a bunch of other out of date security protocols that my ssh client didn’t support by default (probably a good reason to not have this switch in the enterprise anymore) I was able to get it working with the following ssh config:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Host</span> switch</span>
<span id="cb2-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">User</span> admin</span>
<span id="cb2-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">HostName</span> 192.168.10.2</span>
<span id="cb2-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">KexAlgorithms</span> +diffie-hellman-group1-sha1</span>
<span id="cb2-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PubkeyAcceptedAlgorithms</span> +ssh-rsa</span>
<span id="cb2-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">HostkeyAlgorithms</span> +ssh-rsa</span>
<span id="cb2-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Ciphers</span> +3des-cbc</span></code></pre></div>
<p>With that set I can now ssh into my switch. Let’s try and actually do something with netmiko.</p>
<p>The baby connection test script that I used looks like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> netmiko</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> getpass <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> getpass</span>
<span id="cb3-3"></span>
<span id="cb3-4">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.10.2"</span>,</span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"device_type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hp_procurve"</span>,</span>
<span id="cb3-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"admin"</span>,</span>
<span id="cb3-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password"</span>: getpass(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter password for the switch:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb3-9">}</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> netmiko.ConnectHandler(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>device) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> connection:</span>
<span id="cb3-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(connection)</span></code></pre></div>
<p>which does print out a signature for a connection object. I don’t have any actual info on the switch itself, but it appears to be working as I was getting a connection error before I configured ssh properly.</p>
<p>We can do something a little more interesting that also validates the connection by modifying the last two lines to:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> netmiko.ConnectHandler(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>device) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> conn:</span>
<span id="cb4-2">    sys_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_command(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show system-information"</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sys_info)</span></code></pre></div>
<p>This indeed prints out the system info, so the connection is working.</p>
</section>
<section id="figuring-out-the-commands-i-need" class="level1">
<h1>Figuring out the commands I need</h1>
<p>Last time I worked on this I just did everything with the menu because I was lazy. If I’m going to automate things I will need to use the CLI, so let’s identify the commands I need and what their outputs look like.</p>
<ul>
<li><code>show vlan</code> will list all my VLANs</li>
<li><code>show vlan &lt;vlan#&gt;</code> will list a specific VLAN as well as any ports that do tagged or untagged traffic for that VLAN</li>
<li><code>show mac-address [&lt;port&gt;]</code> show mac addresses seen by the switch, optionally specify for a particular port. Returns them in format <code>######-######</code></li>
</ul>
</section>
<section id="see-if-i-can-do-some-parsing-on-those-before-i-do-actual-change-based-operations" class="level1">
<h1>See if I can do some parsing on those before I do actual change based operations</h1>
<p>So far I haven’t identified the commands necessary to actually modify my setup, but let’s see if I can do some easy parsing on these to begin with.</p>
<p>I’ll try <code>show vlan</code> to start. With a little bit of string parsing I can get a nice looking output:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_vlans(conn) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]]:</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get VLAN info.</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns a list of dictionaries with keys for</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    vlan_num, vlan_name and vlan_status, all as strings.</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-7">    base_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_command(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show vlan"</span>)</span>
<span id="cb5-8">    output_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> base_output.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> line.strip()]</span>
<span id="cb5-9">    vlan_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.split() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> output_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> re.match(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\d+\ "</span>, line)]</span>
<span id="cb5-10">    vlan_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-11">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vlan_num"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vlan_name"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vlan_status"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]}</span>
<span id="cb5-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlan_list</span>
<span id="cb5-13">    ]</span>
<span id="cb5-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> vlan_dict</span></code></pre></div>
<p>Which returns something like:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">[</span>
<span id="cb6-2">  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_num'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEFAULT_VLAN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_status'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Port-based'</span>},</span>
<span id="cb6-3">  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_num'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'15'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TRUST'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_status'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Port-based'</span>},</span>
<span id="cb6-4">  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_num'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'30'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Guest'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_status'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Port-based'</span>},</span>
<span id="cb6-5">  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_num'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'40'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LAB'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_status'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Port-based'</span>}</span>
<span id="cb6-6">]</span></code></pre></div>
<p>I can probably do something for showing a particular VLAN:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_vlan_ports(conn, vlan_num):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get the ports associated with a vlan and their tagged or default status."""</span></span>
<span id="cb7-3">    base_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_command(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"show vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-4">    output_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> base_output.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> line.strip()]</span>
<span id="cb7-5">    vlan_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.split() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> output_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> re.match(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\d+\ "</span>, line)]</span>
<span id="cb7-6">    vlan_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"port"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlan_list]</span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> vlan_dict</span></code></pre></div>
<p>Which gets me something like:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'port'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tagged'</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'port'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'7'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tagged'</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'port'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'15'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Untagged'</span>}]</span></code></pre></div>
<p>For the MAC address I’m going to make a little helper function to do some string formatting first, as the formatting for MAC addresses from the switch is different than what I see in most other places. I want to be able to just copy paste from anywhere and have them comparable. This is a one liner: <code>re.sub("[^0-9]", "", mac)</code> in a function that takes <code>mac</code> as an argument. After that we have a similar pattern except in this case I’m going to return a dictionary where each key is a MAC address and each value is its associated port:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_mac_ports(conn):</span>
<span id="cb9-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get MAC addresses seen by the switch and their ports."""</span></span>
<span id="cb9-3">    base_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_command(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show mac-address"</span>)</span>
<span id="cb9-4">    output_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> base_output.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> line.strip()]</span>
<span id="cb9-5">    mac_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-6">        line.split() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> output_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> re.match(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"[\da-fA-F]</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{6}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, line)</span>
<span id="cb9-7">    ]</span>
<span id="cb9-8">    mac_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {mac_parser(line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]): line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mac_list}</span>
<span id="cb9-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mac_dict</span></code></pre></div>
<p>With this if I have a dictionary with keys being the MAC addresses of my devices and values being the names of those devices, I can find what devices are on what ports in an automated way (if they’re on, the switch only shows current connections).</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> map_devices_to_ports(conn):</span>
<span id="cb10-2">    mac_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_mac_ports(conn)</span>
<span id="cb10-3">    home_ports <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {v: mac_dict.get(k) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> home_macs.items()}</span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> home_ports</span></code></pre></div>
<p>So one last thing in terms of info gathering. I’d like to know the state in terms of VLAN settings for all of my ports, plus the device associated with them if I have that:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> vlan_status(conn):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get the VLAN assignment of each port, along with a name if you can."""</span></span>
<span id="cb11-3">    vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_vlans(conn)</span>
<span id="cb11-4">    vlan_nums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vlan_num"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlans]</span>
<span id="cb11-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vlan_desc = {x["vlan_num"]: f'{x["vlan_num"]}_{x["vlan_name"]}' for x in vlans}</span></span>
<span id="cb11-6">    all_ports <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb11-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(port): {k: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> vlan_nums} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> port <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span>)</span>
<span id="cb11-8">    }</span>
<span id="cb11-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign names to ports I know</span></span>
<span id="cb11-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> map_devices_to_ports(conn).items():</span>
<span id="cb11-11">        all_ports[v][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k</span>
<span id="cb11-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Associate VLAN tags</span></span>
<span id="cb11-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlan_nums:</span>
<span id="cb11-14">        port_dicts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_vlan_ports(conn, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(vlan))</span>
<span id="cb11-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> port_dict <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> port_dicts:</span>
<span id="cb11-16">            port <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> port_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"port"</span>]</span>
<span id="cb11-17">            state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> port_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state"</span>]</span>
<span id="cb11-18">            all_ports[port][vlan] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state</span>
<span id="cb11-19"></span>
<span id="cb11-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> all_ports</span></code></pre></div>
<p>I had to do a few hacky things because I haven’t thought through my data structures very well, but I’m ok with this, it does the trick. Now for every port I get a name if I know the device as well as the status of ever VLAN in terms of “tagged”, “untagged” or an empty string for not applied. I start at port 3 because I have the first two trunked to my router and I don’t expect to have to change them and because they’re trunk ports I can’t just show ports 1 and 2.</p>
</section>
<section id="do-actual-modifications-to-the-switch-config" class="level1">
<h1>Do actual modifications to the switch config</h1>
<p>Let’s experiment with configuring an actual port the way I want it. The way the commands work in the HP console is operations are performed on VLANs based on ports, so something like <code>vlan 30 tagged 1-5</code> would allow traffic tagged with VLAN 30 on ports 1-5. I think of things more in terms of how I want ports to behave, so my preferred syntax would be something like <code>port 5 v30 tagged v15 untagged</code> to set port 5 to accept tagged traffic on VLAN 30 and mark untagged traffic as being on VLAN 15. There’s probably clever ways to bundle together my current state and desired state and only execute the commands necessary to reconcile them, but let’s do some building block stuff and figure out how to just change a particular VLAN assignment on a particular port to start.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_port_vlan_state(conn, port: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, vlan: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, state: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb12-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Set VLAN state on a port."""</span></span>
<span id="cb12-3">    command <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb12-4">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_config_set(command)</span>
<span id="cb12-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
<p>This “works” but doesn’t account for a lot of edge cases. For one thing, I can only enable VLANs as either tagged or untagged with this. If I want to disable them I need to add a flag that will add a “no” to the command. However, if I do that, I also need to ensure I’m not ending up in an invalid state, as I have to have at least one VLAN enabled either tagged or untagged on any given port. I think based on this it might make more sense to try and do a comprehensive remapping rather than individual steps.</p>
<p>To start I’ll make a constant at the top of the script called <code>DESIRED_STATE</code> in the same format as the output of <code>vlan_status</code>. This should make it easier to reconcile and also lets me copy paste the output of <code>vlan_status</code> to do the initial population.</p>
<p>Let’s write a little helper function to do basic validation on this <code>DESIRED_STATE</code>. I won’t be able to catch everything that could be wrong here, especially not just misconfiguration, but I can get the basics:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> validate_desired_state():</span>
<span id="cb13-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Make sure my desired state will actually work."""</span></span>
<span id="cb13-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We'll catch VLANs actually existing later, just make sure we're consistent</span></span>
<span id="cb13-4">    reference_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(DESIRED_LAYOUT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span>].keys())</span>
<span id="cb13-5">    correct_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Untagged"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tagged"</span>}</span>
<span id="cb13-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> DESIRED_LAYOUT.items():</span>
<span id="cb13-7">        states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(pv <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> pk, pv <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> v.items() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>)</span>
<span id="cb13-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> correct_states:</span>
<span id="cb13-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(</span>
<span id="cb13-10">                <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unknown VLAN status on port </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> correct_states<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb13-11">            )</span>
<span id="cb13-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(v.keys()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> reference_keys:</span>
<span id="cb13-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Keys for port </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> don't match port 3"</span>)</span>
<span id="cb13-14">        untagged_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> v.values() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Untagged"</span>])</span>
<span id="cb13-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> untagged_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb13-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Port </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> has more than one VLAN set to untagged"</span>)</span>
<span id="cb13-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> untagged_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb13-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Port </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> has no VLAN specified for untagged"</span>)</span></code></pre></div>
<p>Now we can do something to compare the current state and the desired state, and return any ports that don’t reconcile:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_vlan_status(current_state: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb14-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Is the current state the same as the desired state?"""</span></span>
<span id="cb14-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check names first</span></span>
<span id="cb14-4">    mismatch_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb14-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> current_state.keys():</span>
<span id="cb14-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (</span>
<span id="cb14-7">            current_state[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> DESIRED_LAYOUT[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>]</span>
<span id="cb14-8">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Allow for devices to just be turned off</span></span>
<span id="cb14-9">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> current_state[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb14-10">        ):</span>
<span id="cb14-11">            mismatch_names[</span>
<span id="cb14-12">                k</span>
<span id="cb14-13">            ] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Current Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>current_state[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Desired Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DESIRED_LAYOUT[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb14-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mismatch_names:</span>
<span id="cb14-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Names don't match on some ports"</span>)</span>
<span id="cb14-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mismatch_names.items():</span>
<span id="cb14-17">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Port: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Port name mismatch"</span>)</span>
<span id="cb14-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure we're working with the same VLANs</span></span>
<span id="cb14-20">    desired_vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-21">        key</span>
<span id="cb14-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> vlans <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> DESIRED_LAYOUT.values()</span>
<span id="cb14-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlans.keys()</span>
<span id="cb14-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span></span>
<span id="cb14-25">    }</span>
<span id="cb14-26">    current_vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-27">        key <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> vlans <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> current_state.values() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlans.keys() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span></span>
<span id="cb14-28">    }</span>
<span id="cb14-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> desired_vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> current_vlans:</span>
<span id="cb14-30">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb14-31">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"VLANs don't match. Current state: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>current_vlans<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Desired: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>desired_vlans<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb14-32">        )</span>
<span id="cb14-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VLAN selection mismatch"</span>)</span>
<span id="cb14-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If names are all good check ports</span></span>
<span id="cb14-35">    mismatched_ports <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb14-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> DESIRED_LAYOUT.items():</span>
<span id="cb14-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> current_vlans:</span>
<span id="cb14-38">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> DESIRED_LAYOUT[k][vlan] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> current_state[k][vlan]:</span>
<span id="cb14-39">                mismatched_ports[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DESIRED_LAYOUT[k]</span>
<span id="cb14-40">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb14-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mismatched_ports</span></code></pre></div>
<p>We do a little more runtime checking to make sure that devices I think are in a particular port aren’t showing up elsewhere. Note that I want to be able to run this with some devices powered down, as I may want to only bring them up after reconfiguring their ports, so I allow for the name identified in the current state to be an empty string. Then we make sure I have the right VLANs in my desired state, so I haven’t created or deleted any from my current state that I think I should have. If all that goes well I go through each port and if I find a mismatch in VLAN config I add the desired state to a <code>mismatched_ports</code> dictionary that I can pass into some reconcilliation function later.</p>
<p>While doing some testing for this I got my switch into a weird state where I got intermitent errors running the script, even on functions that had worked fine before. I gave the switch a reboot to see if I could clear things up and that seemed to work, but it does add to how sketchy this whole setup feels. This is probably going to get filed under “learning activity” rather than “thing I use to manage my environment”. We’ll see though.</p>
<p>I did get a function that would update the configuration of a port to match what I want from a desired state dictionary:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_port_vlan_state(conn, port: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, state: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb15-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Set VLAN state on a port."""</span></span>
<span id="cb15-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get rid of the name key</span></span>
<span id="cb15-4">    state.pop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb15-5">    vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(state.keys())</span>
<span id="cb15-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Should only be one untagged VLAN and we validate that elsewhere.</span></span>
<span id="cb15-7">    untagged_vlan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [k <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> state.items() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Untagged"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb15-8">    tagged_vlan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [k <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> state.items() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tagged"</span>]</span>
<span id="cb15-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the untagged VLAN first so we definitely don't end up orphaned.</span></span>
<span id="cb15-10">    commands <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb15-11">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>untagged_vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> untagged </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb15-12">    ]</span>
<span id="cb15-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn off untagged explicitly for all other VLANs</span></span>
<span id="cb15-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> {untagged_vlan}:</span>
<span id="cb15-15">        commands.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"no vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> untagged </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set tagged vlans</span></span>
<span id="cb15-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tagged_vlan:</span>
<span id="cb15-18">        commands.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> tagged </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn off tags on other VLANs</span></span>
<span id="cb15-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(t <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tagged_vlan):</span>
<span id="cb15-21">        commands.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"no vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> tagged </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now save the desired config</span></span>
<span id="cb15-23">    commands.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"write memory"</span>)</span>
<span id="cb15-24">    conn.send_config_set(commands)</span></code></pre></div>
<p>I still run into hanging the connection to the switch from time to time with it, but maybe that’s not as big a deal given how infrequently I’ll actually be doing this outside of developing the script. The last thing I have to do is put that together with the list of unreconciled ports that I created into one big function:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reconcile(conn):</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Bring the current state of the switch in line with the desired state."""</span></span>
<span id="cb16-3">    validate_desired_state()</span>
<span id="cb16-4">    current_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vlan_status(conn)</span>
<span id="cb16-5">    mismatches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> check_vlan_status(current_state)</span>
<span id="cb16-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mismatches:</span>
<span id="cb16-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> port, state <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mismatches.items():</span>
<span id="cb16-8">            set_port_vlan_state(conn, port, state)</span></code></pre></div>
<p>And that appears to work!</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I’m pretty sure this is not what most people are talking about when they say “software defined networking”, and there were many hacky parts to the setup. On the other hand, it’s slightly easier for me to modify my switch setup in the future, I learned a bit more about managing my switch, and I got to practice my python. Overall I’d call that a win.</p>


</section>

 ]]></description>
  <category>networking</category>
  <guid>https://blog.ianpreston.ca/posts/2023-07-06-network-automation.html</guid>
  <pubDate>Thu, 06 Jul 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Finding all AD group users with ansible</title>
  <link>https://blog.ianpreston.ca/posts/2023-06-04-ansible-ad-users.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is a write up summarizing the process I went through to retrieve information about members of Active Directory groups from a Linux VM using ansible. My specific intent was to use it as part of a playbook to configure <a href="https://docs.docker.com/engine/security/rootless/">rootless docker</a>, but it would be applicable in any other situation where you need to get the members of a number of AD groups. The hardest part of it by far is getting the output of earlier tasks into a format that’s suitable for later steps. I’ve got a reasonable clean approach documented below, after trying some extremely ugly alternate approaches earlier. I’m sure there’s some even fancier way to do this that will make my approach look silly, and if you know it I’d love for you to fill me in.</p>
</section>
<section id="pre-requisites" class="level1">
<h1>Pre-requisites</h1>
<p>In order to do this I need the user ansible is running as to be authenticated against Active Directory. I don’t have elevated privileges on the AD I tested this on, so I think any normal user account should be sufficient. For this example I have my username and password stored as variables <code>ad_user</code> and <code>ad_password</code>.</p>
<p>I’ve also got a host variable configured for each host I’m doing this on that maps to a list of AD groups I want members of for that host, called <code>domain_groups</code> in this playbook.</p>
<p>Having set this up I need to make sure the host machine has a pre-requisite module available, and that the user I’m running as has a kerberos ticket issued for my user:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install ldap pre-requisites</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> python3-ldap</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Issue a kerberos ticket to authenticate to AD</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-9">    echo "{{ ad_password }}" | kinit -l 1h {{ ad_user }}@example.com</span>
<span id="cb1-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span></code></pre></div>
<p>I’ve changed the actual domain to <code>example.com</code> and you’ll need to modify that to your domain of course.</p>
</section>
<section id="get-the-users" class="level1">
<h1>Get the users</h1>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Return all users in the groups associated with the machine using LDAP search</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">community.general.ldap_search</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dn</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cn={{ item }},cn=Users,dc=EXAMPLE,dc=COM"</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sasl_class</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gssapi"</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">server_uri</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ldap://example.com"</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attrs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> member</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> intermediate_calc_group_members</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ domain_groups }}"</span></span></code></pre></div>
<p>This first part does the actual data retrieval, everything that follows is just cleanup. For reference, the JSON I get out of this looks something like:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"ansible_loop_var"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-3">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"changed"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-4">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"failed"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-5">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"invocation"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-6">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"module_args"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-7">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"attrs"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-8">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"member"</span></span>
<span id="cb3-9">                    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-10">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bind_dn"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-11">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bind_pw"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-12">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dn"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cn=group1,cn=Users,dc=EXAMPLE,dc=COM"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-13">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"filter"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(objectClass=*)"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-14">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"referrals_chasing"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"anonymous"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-15">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"sasl_class"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gssapi"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-16">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"schema"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-17">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scope"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-18">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"server_uri"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ldap://example.com"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-19">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"start_tls"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-20">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"validate_certs"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-21">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-22">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb3-23">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"item"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group1"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-24">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"results"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-25">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-26">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dn"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cn=group1,cn=Users,dc=EXAMPLE,dc=COM"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-27">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"member"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-28">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-29">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-30">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-31">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-32">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-33">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-34">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-35">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Synced to Azure,OU=Example Client,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span></span>
<span id="cb3-36">                    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-37">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-38">            <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-39">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-40">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-41">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"ansible_loop_var"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-42">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"changed"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-43">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"failed"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-44">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"invocation"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-45">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"module_args"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-46">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"attrs"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-47">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"member"</span></span>
<span id="cb3-48">                    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-49">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bind_dn"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-50">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bind_pw"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-51">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dn"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cn=group2,cn=Users,dc=EXAMPLE,dc=COM"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-52">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"filter"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(objectClass=*)"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-53">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"referrals_chasing"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"anonymous"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-54">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"sasl_class"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gssapi"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-55">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"schema"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-56">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scope"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-57">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"server_uri"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ldap://example.com"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-58">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"start_tls"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-59">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"validate_certs"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-60">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-61">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb3-62">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"item"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group2"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-63">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"results"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-64">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-65">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dn"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cn=group2,cn=Users,dc=EXAMPLE,dc=COM"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-66">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"member"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-67">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example Clients,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-68">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example Clients,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-69">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example Clients,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-70">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example Clients,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-71">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example Clients,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-72">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,CN=Users,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-73">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example Clients,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-74">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example Clients,OU=Example Corporate,dc=EXAMPLE,dc=COM"</span></span>
<span id="cb3-75">                    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-76">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-77">            <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-78">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>In the example above I’ve replaced all the actual user names with <code>example_user</code> but you can see that the information I want to assemble (the usernames and which group each of them is in) is surrounded by a lot of extraneous data and text.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Get group and member list</span></span>
<span id="cb4-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_fact</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    intermediate_calc_users</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;-</span></span>
<span id="cb4-4">      {%- set result = [] -%}</span>
<span id="cb4-5">      {%- for play_dict in intermediate_calc_group_members.results -%}</span>
<span id="cb4-6">        {%- for user in play_dict['results'][0]['member'] -%}</span>
<span id="cb4-7">          {%- set clean_user = user | regex_search('^CN=(\\w\\d+),.+', '\\1') | first | lower -%}</span>
<span id="cb4-8">          {{</span>
<span id="cb4-9">            result.append({'group': play_dict['item'], 'id': clean_user, 'user': clean_user + "@EXAMPLE.COM"})</span>
<span id="cb4-10">          }}</span>
<span id="cb4-11">        {%- endfor -%}</span>
<span id="cb4-12">      {%- endfor -%}</span>
<span id="cb4-13">      {{ result | to_json | from_json }}</span></code></pre></div>
<p>Some parts of this are witchcraft to me. I don’t really know why I have to pipe my result to json and then back from json. It’s doing something to clean up my variables in such a way that subsequent steps can understand it, but as for why I’m not really sure. I got a lot of the structure of this variable construction from <a href="https://stackoverflow.com/questions/58727924/convert-nested-list-of-dicts-to-dict-in-ansible">this post</a>.</p>
<p>The regex I’m using in this particular case is based on the fact that all the user IDs I’m working with are in the format of one letter followed by several numbers. If your user IDs are more heterogeneous you’ll have to mess with the regext to get just the username out of that part of the output that looks something like:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb5-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"CN=example_user,OU=Example</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Clients,OU=Example</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Corporate,dc=EXAMPLE,dc=COM"</span></span></code></pre></div>
<p>At the end of this step I have a list of dictionaries with one entry per user with keys for their AD group, just their username, and their username with the domain appended.</p>
<p>Note that this step will fail if you pull an AD group that only has one member, because the <code>member</code> item in the dictionary will go from being a list to a string. I didn’t specifically have to deal with that in my use case, but it would be more robust to do something like putting <code>play_dict['results'][0]['member']</code> in a list and then flattening that list so you always got a list back.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Register getent results so I can retrieve UIDs</span></span>
<span id="cb6-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.getent</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">database</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> passwd</span></span>
<span id="cb6-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item.user }}"</span></span>
<span id="cb6-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ intermediate_calc_users }}"</span></span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> intermediate_calc_getent</span></span></code></pre></div>
<p>For my particular use case in addition to the usernames I also needed the UIDs of each user, so in this step I use ansible’s built in <code>getent</code> module and the dictionary I created above in the last step to return the entry in <code>/etc/passwd</code> for each user, which will include their UID.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Cleanup getent results</span></span>
<span id="cb7-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_fact</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    intermediate_calc_getent_clean</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;-</span></span>
<span id="cb7-4">      {%- set result = [] -%}</span>
<span id="cb7-5">      {%- for play_dict in intermediate_calc_getent.results -%}</span>
<span id="cb7-6">        {%- set getent_passwd = play_dict['ansible_facts']['getent_passwd'] -%}</span>
<span id="cb7-7">        {%- set key = getent_passwd.keys() | first -%}</span>
<span id="cb7-8">        {{ result.append({'key': key,'value': getent_passwd[key][1]}) }}</span>
<span id="cb7-9">      {%- endfor -%}</span>
<span id="cb7-10">      {{ result | items2dict | to_json | from_json }}</span></code></pre></div>
<p>Again, this step is a bit of black magic, just messing around with the output of the last step (ansible’s debug is your friend for this) and fiddling with it until I have a list of dictionaries with one item where the key is the username and the value is their UID.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create final list of dicts for all users</span></span>
<span id="cb8-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_fact</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    users_dict</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;-</span></span>
<span id="cb8-4">      {%- set result = [] -%}</span>
<span id="cb8-5">      {%- for user in intermediate_calc_users -%}</span>
<span id="cb8-6">        {{ result.append({'group': user['group'], 'user': user['user'], 'user': user['user'], 'uid': intermediate_calc_getent_clean[user['user']]})}}</span>
<span id="cb8-7">      {%- endfor -%}</span>
<span id="cb8-8">      {{ result | to_json | from_json }}</span></code></pre></div>
<p>Now all I have to do is combine those two dictionaries together into one. This part is pretty self explanatory except for that <code>to_json | from_json</code> bit at the bottom.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>If you work with Linux systems where users are managed by AD (or probably other LDAP providers, but I’m using AD in this example) then this is a handy trick to get a fact in your playbook with basic information about those users.</p>


</section>

 ]]></description>
  <category>ansible</category>
  <category>Linux</category>
  <guid>https://blog.ianpreston.ca/posts/2023-06-04-ansible-ad-users.html</guid>
  <pubDate>Sun, 04 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Install Microsoft ODBC drivers with ansible</title>
  <link>https://blog.ianpreston.ca/posts/2023-06-04-odbc-drivers-ansible.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is a quick note on how to set up Microsoft ODBC drivers using ansible. Most of it is quite trivial, but you can run into issues with the Microsoft repository version of dotnet conflicting with the one from the base Ubuntu repository, and this playbook addresses that.</p>
</section>
<section id="how-to-do-it" class="level1">
<h1>How to do it</h1>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install odbc pre-requisites</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> lsb-release</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Add microsoft gpg key</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-8">    install -m 0755 -d /etc/apt/keyrings &amp;&amp; \</span>
<span id="cb1-9">    curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /etc/apt/keyrings/microsoft.gpg &amp;&amp; \</span>
<span id="cb1-10">    chmod a+r /etc/apt/keyrings/microsoft.gpg</span>
<span id="cb1-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/apt/keyrings/microsoft.gpg"</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> add Microsoft repository to apt</span></span>
<span id="cb1-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apt_repository</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deb [arch=amd64,armhf,arm64 signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/ubuntu/{{ansible_distribution_version}}/prod {{ansible_distribution_release}} main"</span></span>
<span id="cb1-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> present</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Prioritize Microsoft repo so you don't end up with dotnet conflicts if you need it later</span></span>
<span id="cb1-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.copy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">src</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"99-microsoft-dotnet.pref"</span></span>
<span id="cb1-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/apt/preferences.d/99-microsoft-dotnet.pref"</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install odbc drivers</span></span>
<span id="cb1-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> msodbcsql18</span></span>
<span id="cb1-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ACCEPT_EULA</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span></span></code></pre></div>
<p>The <code>99-microsoft-dotnet.pref</code> file is simple and looks like this:</p>
<pre class="conf"><code>Package: *
Pin: origin "packages.microsoft.com"
Pin-Priority: 1001</code></pre>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I’m not going to do a bunch of exposition on this. If you’re in the very specific circumstance of needing to install Microsoft ODBC drivers with ansible I hope this helps.</p>


</section>

 ]]></description>
  <category>Linux</category>
  <category>ansible</category>
  <guid>https://blog.ianpreston.ca/posts/2023-06-04-odbc-drivers-ansible.html</guid>
  <pubDate>Sun, 04 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Configuring Rootless docker with ansible</title>
  <link>https://blog.ianpreston.ca/posts/2023-06-04-rootless-docker.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is a write up summarizing the process I went through at work to configure Linux hosts with <a href="https://docs.docker.com/engine/security/rootless/">rootless docker</a>. After figuring out the manual way to do things I further automated it with an ansible playbook, as there’s a lot of per-user stuff you have to do that quickly becomes untenable to do manually, even if you’re only doing it on one host, and really out of hand if you have multiple hosts.</p>
<p>This document will outline the key steps for configuring rootless docker for users and the associated ansible tasks required for it. I’m not going to show every aspect of setting up ansible like creating the inventory of hosts, just the components that are specific to rootless docker.</p>
<p>I previously documented the manual approach I took while figuring all this out in <a href="../posts/2022-12-30-rootless-docker.html">this post</a>.</p>
<section id="why-rootless-docker" class="level2">
<h2 class="anchored" data-anchor-id="why-rootless-docker">Why rootless docker?</h2>
<p>Briefly, let me describe what motivated this approach. At work we have a number of teams that want to use docker, either for a development environment in <a href="https://code.visualstudio.com/docs/devcontainers/containers">devcontainers</a>, building containers for deployment, or both. All of our laptops run Windows, so the immediate obvious solution would be to install <a href="https://www.docker.com/products/docker-desktop/">docker desktop</a>. Unfortunately, that installation required turning on some services that we had disabled for security reasons, so we were not able to proceed with that approach. The next option would be docker on a remote Linux host. The traditional way of installing docker means that anyone who has access to work with docker effectively has root access to the system they’re running it on. This obviously presents a security issue on a shared machine, and the cost and complexity of giving every user their own VM was not practical, particularly for users that required GPUs for some of their workloads. Given these constraints, I set out to configure rootless docker so that multiple users could securely share a remote Linux instance and work in docker without security concerns. This has the added benefit of allowing users to do things like stop all their running containers with <code>docker container stop $(docker container ls -aq)</code> without stopping everyone else’s.</p>
</section>
</section>
<section id="install-the-docker-engine" class="level1">
<h1>Install the docker engine</h1>
<p>This part of the playbook is the same whether or not you’re going to do rootless, but I’ll include it for completeness. We’re basically following the <a href="https://docs.docker.com/engine/install/">docker install instructions</a> in ansible format. This particular playbook assumes the host OS is Ubuntu, and will need slight modification for other distributions:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install docker pre-requisites</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ca-certificates</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> curl</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gnupg</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> lsb-release</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      # Necessary for rootless installer</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> uidmap</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Add docker gpg key</span></span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-13">    install -m 0755 -d /etc/apt/keyrings &amp;&amp; \</span>
<span id="cb1-14">    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg &amp;&amp; \</span>
<span id="cb1-15">    chmod a+r /etc/apt/keyrings/docker.gpg</span>
<span id="cb1-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/apt/keyrings/docker.gpg"</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> add docker repository to apt</span></span>
<span id="cb1-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apt_repository</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"</span></span>
<span id="cb1-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> present</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install docker</span></span>
<span id="cb1-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker-ce</span></span>
<span id="cb1-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker-ce-cli</span></span>
<span id="cb1-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> containerd.io</span></span>
<span id="cb1-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docker-compose-plugin</span></span></code></pre></div>
<p>Figuring out how to correctly create the GPG key and the associated apt repository was a bit tricky. Originally I wanted to use <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_key_module.html">apt_key</a> but it’s been deprecated due to security concerns. For whatever reason using the alternate examples provided in the docs with <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/get_url_module.html">get_url</a> didn’t seem to work. I’m not totally clear on what the <code>gpg --dearmor</code> is doing in the above playbook, but it’s definitely necessary. Fortunately it’s easy to make that script idempotent with the <code>creates</code> argument for the task.</p>
</section>
<section id="perform-rootless-docker-setup" class="level1">
<h1>Perform rootless docker setup</h1>
<p>This is where the meat of the install goes. This assumes you’ve got a list somewhere of all the users you want to configure for rootless docker and their UIDs. If your users are all members of AD groups then you can do something like what I document in <a href="../posts/2023-06-04-ansible-ad-users.html">this post</a> to get that fact set in your playbook.</p>
<section id="create-etcsubuid-and-etcsubgid" class="level2">
<h2 class="anchored" data-anchor-id="create-etcsubuid-and-etcsubgid">Create /etc/subuid and /etc/subgid</h2>
<p>The next thing we do is configure which UID and GID ranges on the host machine should be uniquely mapped for each user into their docker daemon. We want to reserve a range of IDs for each user so that permissions for a user within a container do not provide privilege escalation outside the container. Just as an aside, in a rootless runtime, UID 0 or root inside the container maps to the user that is running docker and their UID outside the container, so be sure to run your containers as root if you have any volumes bind mounted and don’t want to have to deal with weird permission issues.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> apply subuid and subgid settings for mapping</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">src</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> subid.j2</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/{{ item }}</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0644'</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subuid"</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subgid"</span></span></code></pre></div>
<p>The task itself is quite straightforward, where the magic happens is in the template:</p>
<pre class="jinja"><code># {{ ansible_managed }}
{% for user in users_dict %}
{{ user.user }}:{{100000 + (loop.index0 * 65536)}}:65536
{% endfor %}</code></pre>
<p>As mentioned, for each user we want a non-overlapping range of UIDs. In the docker docs they give each user a range of 65536 UIDs to use and start at 100000, which we reproduce here. The format of each entry is <code>username:start UID range:size of range</code>. We ensure this is non overlapping by multiplying the index of the loop we’re on by the size of the UID range. <code>/etc/subuid</code> and <code>/etc/subgid</code> have the exact same format so in the playbook we just apply the same template to both files.</p>
</section>
<section id="stop-the-root-level-docker-service" class="level2">
<h2 class="anchored" data-anchor-id="stop-the-root-level-docker-service">Stop the root level docker service</h2>
<p>This will conflict with the user level docker service, so we have to ensure it’s stopped:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Make sure the root level docker service is stopped and disabled</span></span>
<span id="cb4-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.systemd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item }}"</span></span>
<span id="cb4-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> stopped</span></span>
<span id="cb4-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb4-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"docker.service"</span></span>
<span id="cb4-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"docker.socket"</span></span></code></pre></div>
</section>
<section id="create-home-directories-for-each-user" class="level2">
<h2 class="anchored" data-anchor-id="create-home-directories-for-each-user">Create home directories for each user</h2>
<p>This is potentially being run on a newly created machine with users from Active Directory. Because of this, the users may not have a home directory created for them before they log in, so we have to ensure it’s created in order to copy later user level config files into it. We also create an ansible temp directory at this stage to suppress a warning.</p>
<p>I’m not totally sure the home directory creation needs to be done as a separate task, since the temp directory will create all parent folders necessary, but I wrote the first task before I realized I needed the second, and it’s nice to separate out the reasons for each step.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Make sure home directory exists</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/{{ item.user }}"</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item.user }}"</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"domain users@example.com"</span></span>
<span id="cb5-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> directory</span></span>
<span id="cb5-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0755'</span></span>
<span id="cb5-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Make sure the ansible temp dir exists for each user</span></span>
<span id="cb5-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/{{ item.user }}/.ansible/tmp"</span></span>
<span id="cb5-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item.user }}"</span></span>
<span id="cb5-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"domain users@example.com"</span></span>
<span id="cb5-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> directory</span></span>
<span id="cb5-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0700'</span></span>
<span id="cb5-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span></code></pre></div>
<p>Your value for <code>group</code> will likely be different, but you get the idea.</p>
</section>
<section id="create-an-entry-in-etcpasswd" class="level2">
<h2 class="anchored" data-anchor-id="create-an-entry-in-etcpasswd">Create an entry in /etc/passwd</h2>
<p>This is another feature of using domain users. Domain users don’t appear to automatically get an entry in <code>/etc/passwd</code> that lists things like their default shell. Even though users may have their default shell set to <code>bash</code> by <code>PAM</code> or whatever else, VS code doesn’t seem to recognize this without an <code>/etc/passwd</code> record, which causes it to try and run devcontainers through <code>/bin/sh</code>, which means your <code>~/.bashrc</code> doesn’t get loaded, which causes problems you’ll see in future steps. The TLDR is we want to manually create a record for each user in <code>/etc/passwd</code>. If you’re not dealing with users managed by AD then you can probably skip all this.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Get lines for /etc/passwd</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb6-3">    getent passwd {{ item.user }}</span>
<span id="cb6-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> getentstask</span></span>
<span id="cb6-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Filter results to just stdout</span></span>
<span id="cb6-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_fact</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb6-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getents</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{getentstask.results | map(attribute='stdout')}}"</span></span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Make sure there's a line in /etc/passwd</span></span>
<span id="cb6-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.lineinfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/passwd</span></span>
<span id="cb6-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">line</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item }}"</span></span>
<span id="cb6-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ getents }}"</span></span></code></pre></div>
<p>This feels a bit weird. In theory running <code>getent passwd &lt;user&gt;</code> should just be returning exactly what’s in <code>/etc/passwd</code> for that user to <code>stdout</code> so taking that result from <code>stdout</code> and putting it in <code>/etc/passwd</code> feels a bit circular, but it’s necessary for AD users.</p>
</section>
<section id="turn-on-linger-for-users" class="level2">
<h2 class="anchored" data-anchor-id="turn-on-linger-for-users">Turn on linger for users</h2>
<p>Turning this on allows user level services like rootless docker to persist when the user is not logged in. If we want users to be able to host small apps with docker from their user account for testing without being logged in all the time this is handy</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Turn on linger for all users</span></span>
<span id="cb7-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb7-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loginctl enable-linger {{ item.user }}"</span></span>
<span id="cb7-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/var/lib/systemd/linger/{{ item.user }}"</span></span>
<span id="cb7-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span></code></pre></div>
<p>Don’t ask me why I used <code>command</code> here and <code>shell</code> in the previous one. I should really just use <code>shell</code> all the time.</p>
</section>
<section id="run-the-installer" class="level2">
<h2 class="anchored" data-anchor-id="run-the-installer">Run the installer</h2>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Run the rootless docker installer</span></span>
<span id="cb8-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become_user</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item.user }}"</span></span>
<span id="cb8-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb8-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dockerd-rootless-setuptool.sh install</span></span>
<span id="cb8-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/{{ item.user }}/.docker/config.json"</span></span>
<span id="cb8-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">XDG_RUNTIME_DIR</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/run/user/{{ item.uid }}"</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span></code></pre></div>
<p>Note the call to <code>become_user</code>, that’s important. You can’t run the install script as root and tell it to do it for a specific user, at least I couldn’t figure out how, so we need to actually run this as the user we want. Also note that setting <code>XDG_RUNTIME_DIR</code> is necessary for successful completion of the install and requires you to know the UID of the user you’re configuring. Failing to set this variable will result in the script still running but the daemon and user service not actually being installed.</p>
</section>
<section id="set-bashrc-to-export-the-docker-socket" class="level2">
<h2 class="anchored" data-anchor-id="set-bashrc-to-export-the-docker-socket">Set bashrc to export the docker socket</h2>
<p>At this point users have docker installed and should be able to run <code>docker run hello-world</code> or some other similar test. We do have to take an extra step to get it to work with VS code though, and that’s setting an environment variable that points to the docker socket. This is the part I mentioned above that won’t work if you don’t have your default shell set to bash in <code>/etc/passwd</code>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Make sure bashrc exports the docker socket</span></span>
<span id="cb9-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb9-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become_user</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item.user }}"</span></span>
<span id="cb9-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.lineinfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/{{ item.user }}/.bashrc"</span></span>
<span id="cb9-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">line</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"export DOCKER_HOST=unix:///run/user/$(id -u)/docker.sock"</span></span>
<span id="cb9-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb9-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span></code></pre></div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Setting up rootless docker for an individual user isn’t a ton of work, but trying to scale that to multiple users on multiple machines begs for automation or else you’re pretty much guaranteed to waste time and make errors. The steps above should help you set up rootless docker for users with ansible.</p>


</section>

 ]]></description>
  <category>docker</category>
  <category>Linux</category>
  <guid>https://blog.ianpreston.ca/posts/2023-06-04-rootless-docker.html</guid>
  <pubDate>Sun, 04 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Configuring autofs for CIFS mounts with ansible</title>
  <link>https://blog.ianpreston.ca/posts/2023-06-04-ansible-autofs.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This guide shows how to set up user isolated mounts of CIFS (samba) network shares on a shared linux VM. Each user will get folders under <code>/mnt/&lt;user&gt;</code> that they authenticate to using kerberos. In this document I’m assuming that users are members of a group and that each group all should have access to the same shares. We’ll further assume you’ve got a fact set in your playbook that maps each user to their corresponding group. If you need guidance on that you can see <a href="../posts/2023-06-04-ansible-ad-users.html">this post</a>.</p>
<p>This is a nice way of attaching file shares because it ensures users don’t need elevated privileges to access file shares (although an administrator has to configure it for them) and that creating a share for one user doesn’t inadvertently expose it to others. For a fully user level way of attaching file shares you can use <a href="https://man.archlinux.org/man/gio.1">gio</a> but I found it extremely flaky and annoying to use, so if you can handle having an administrator configure the share mount points for users I would recommend this approach.</p>
</section>
<section id="variable-format" class="level1">
<h1>Variable format</h1>
<p>Somewhere in your playbook (in my case I set it in the variables folder of the role I was using, but putting in as a host variable or somewhere else may be more appropriate for your use case) we need a variable for each group that contains a list of associated shares. Something like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">example_group1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local_share_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> share1</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">full_share_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//fileshare.example.com/share1"</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local_share_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> share2</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">full_share_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//fileshare.example.com/share2"</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">example_group2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local_share_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> share3</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">full_share_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//fileshare.example.com/share3"</span></span></code></pre></div>
</section>
<section id="basic-setup" class="level1">
<h1>Basic setup</h1>
<p>In this stage we will ensure pre-requisite software is installed on the host (assuming Ubuntu here, you will have to modify for other distros), and that the mount point folder for each user has been created:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install autofs</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> autofs</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cifs-utils</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> keyutils</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create base file share mount point</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/mnt/{{ item.user }}"</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> directory</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item.user }}"</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"domain users@example.com"</span></span>
<span id="cb2-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0700"</span></span>
<span id="cb2-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Start and enable the autofs service</span></span>
<span id="cb2-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.systemd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> autofs</span></span>
<span id="cb2-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> started</span></span>
<span id="cb2-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<p>Where <code>users_dict</code> looks like what I created in <a href="../posts/2023-06-04-ansible-ad-users.html">this post</a>. You will also have to modify the <code>group</code> variable to be appropriate for your environment.</p>
<p>I actually have the autofs service start task at the bottom of this play in my case, but thematically it makes more sense here.</p>
</section>
<section id="populate-auto.master" class="level1">
<h1>Populate auto.master</h1>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> populate auto.master with entries for each users' configs</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">src</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> auto.master.j2</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/auto.master</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0644'</span></span></code></pre></div>
<p>Each user needs an entry in <code>/etc/auto.master</code> that points to a config file (which we’ll set in the next phase) with all their specific mount points. Using the template task and the template below we can accomplish this:</p>
<pre class="jinja"><code># {{ ansible_managed }}
{% for user in users_dict %}
/mnt/{{ user.user }} /etc/auto.sambashares-{{ user.user }} --timeout=30 --ghost
{% endfor %}</code></pre>
<p>Each user gets a point below the <code>/mnt/&lt;user&gt;</code> folder we created in the basic setup, we point to a config file for them, set a timeout so the fileshare will not stay connected if users aren’t using it and then we add the <code>--ghost</code> flag so that all mount points get a directory created, even if they’re not currently attached. See <a href="https://learn.redhat.com/t5/Platform-Linux/Halloween-tip-of-the-day-Using-autofs-with-the-ghost-option/td-p/2326">here</a> for further docs.</p>
</section>
<section id="populate-user-level-share-specs" class="level1">
<h1>Populate user level share specs</h1>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Populate user specific share mounts</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">src</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> auto.sambashares.j2</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/auto.sambashares-{{ item.user }}"</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb5-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb5-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0644'</span></span>
<span id="cb5-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span></code></pre></div>
<p>Again we’re populating a template, but this time we’re doing one for each user. As with above, most of the magic happens in the template itself:</p>
<pre class="jinja"><code># {{ ansible_managed }}
{% set shares = lookup('vars', item.group | replace('-', '_')) %}
{% for share in shares %}
{{ share.local_share_name }} -fstype=cifs,rw,sec=krb5,uid=${UID},cruid=${UID} :{{ share.full_share_path }}
{% endfor %}</code></pre>
<p>The <code>replace</code> step is because a lot of the groups I was using had a <code>-</code> in their name, which you can’t have in an ansible variable so I map the <code>-</code> to an <code>_</code>. We can then use that to refer to the variable described at the top of this post for whichever group the particular user happens to be in. Then we just iterate through all the shares defined and create a folder under <code>/mnt/&lt;user&gt;/&lt;local_share_name&gt;</code> that maps to <code>full_share_path</code> and will be authorized with kerberos.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Autofs and ansible are a pretty nice way to set up a bunch of users with consistent file shares securely on a shared host or multiple hosts.</p>


</section>

 ]]></description>
  <category>ansible</category>
  <category>Linux</category>
  <guid>https://blog.ianpreston.ca/posts/2023-06-04-ansible-autofs.html</guid>
  <pubDate>Sun, 04 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A couple notes on working with Nvidia cards</title>
  <link>https://blog.ianpreston.ca/posts/2023-06-04-nvidia-notes.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>While helping the infrastructure team at work get Nvidia drivers working on a VM virtualized on top of esxi and then getting that GPU to be available within rootless docker containers I learned a couple things that I want to note down here.</p>
</section>
<section id="installing-nvidia-drivers" class="level1">
<h1>Installing nvidia drivers</h1>
<p>So after I went and wrote a nice playbook to do this, I realized that nvidia maintains their own <a href="https://github.com/NVIDIA/ansible-role-nvidia-driver">here</a>, so in the future I would definitely just use this. I’m sure it would work better. One note that I will add. In my experience, installing the CUDA version of the drivers is not worth it. I was able to do GPU accelerated ML workloads without it, and installing them caused me nothing but pain and suffering. Maybe it would go smoother with the official Nvidia role, but I would suggest trying without unless you really know for sure you need them.</p>
<p>For posterity, here’s how I installed Nvidia drivers:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://fabianlee.org/2021/05/19/ansible-installing-linux-headers-matching-kernel-for-ubuntu/</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install dependencies</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> linux-headers-generic</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> curl</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Get distribution name in the weird format nvidia wants it</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-10">    . /etc/os-release;echo $ID$VERSION_ID</span>
<span id="cb1-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> os_release</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Add nvidia gpg key</span></span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-15">    curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /etc/apt/keyrings/nvidia-container-toolkit-keyring.gpg</span>
<span id="cb1-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/apt/keyrings/nvidia-container-toolkit-keyring.gpg"</span></span>
<span id="cb1-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Add nvidia container toolkit repository to apt</span></span>
<span id="cb1-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-21">    curl -s -L https://nvidia.github.io/libnvidia-container/{{os_release.stdout}}/libnvidia-container.list | \</span>
<span id="cb1-22">    sed 's#deb https://#deb [signed-by=/etc/apt/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \</span>
<span id="cb1-23">    tee /etc/apt/sources.list.d/nvidia-container-toolkit.list</span>
<span id="cb1-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/apt/sources.list.d/nvidia-container-toolkit.list"</span></span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> update packages</span></span>
<span id="cb1-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb1-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">upgrade</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span></span>
<span id="cb1-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update_cache</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">yes</span></span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Headless 530 is the latest available as of 2023/5/16</span></span>
<span id="cb1-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> install nvidia driver and container runtime docker</span></span>
<span id="cb1-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb1-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nvidia-driver-525-server</span></span>
<span id="cb1-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nvidia-utils-525-server</span></span>
<span id="cb1-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nvidia-container-toolkit-base</span></span>
<span id="cb1-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nvidia-docker2</span></span>
<span id="cb1-42"></span>
<span id="cb1-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Blacklist nouveau drivers</span></span>
<span id="cb1-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb1-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.copy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">src</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nouveau-blacklist.conf</span></span>
<span id="cb1-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/modprobe.d/nouveau-blacklist.conf</span></span>
<span id="cb1-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb1-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb1-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0644'</span></span>
<span id="cb1-51"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">notify</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-52"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Restart machine</span></span></code></pre></div>
<p>Of particular note is the step to blacklist the nouveau drivers. I’m not 100% sure since I didn’t do either the bare metal or virtualized install on the systems I was testing this on, but it appears that nouveau drivers get automatically installed on virtualized systems on top of esxi. Because of that, you have to blacklist them or else you get all sorts of esoteric errors that do a terrible job of telling you where the issue actually is.</p>
</section>
<section id="extra-stuff-to-make-it-work-with-rootless-docker" class="level1">
<h1>Extra stuff to make it work with rootless docker</h1>
<p>A couple pieces of this got covered in the above section, specifically installing <code>nvidia-container-toolkit-base</code> and <code>nvidia-docker2</code>. I’m not actually sure <code>nvidia-container-toolkit-base</code> is required, I couldn’t get anything working when I had just it installed, <code>nvidia-docker2</code> did the trick though, along with the extra steps below.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Add CDI support</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb2-4">    nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml</span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/cdi/nvidia.yaml"</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Disable cgroups</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">become</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.lineinfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/nvidia-container-runtime/config.toml</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regexp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^no-cgroups '</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">insertafter</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^#no-cgroups '</span></span>
<span id="cb2-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">line</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no-cgroups = true'</span></span></code></pre></div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>If you want to install nvidia drivers on hosts using ansible, don’t trust some hacked together code from some guy on the internet, use the official Nvidia role. But if that role doesn’t handle rootless docker integration, or you run into weird issues getting it working on VMs virtualized on top of esxi, take a look at this stuff and see if it helps you out.</p>


</section>

 ]]></description>
  <category>docker</category>
  <category>Linux</category>
  <category>nvidia</category>
  <guid>https://blog.ianpreston.ca/posts/2023-06-04-nvidia-notes.html</guid>
  <pubDate>Sun, 04 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Redesigning my network</title>
  <link>https://blog.ianpreston.ca/posts/2023-04-09-network-rework.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Now that <a href="../posts/2023-04-08-managed-switch.html">I have basic connectivity</a> for my managed switch I need to figure out what I actually want my network to look like, and how I want to make it look that way.</p>
</section>
<section id="basic-goals" class="level1">
<h1>Basic goals</h1>
<p>Right now my network is completely flat and open, which means that the wifi leak sensor I’ve got that’s running who knows what firmware can reach the management interface on my router, or any of the internal servers I’m running. The same is true for guests on my wifi, or the couple friends I’ve created VPN credentials for so they can access some of the services I run. Just typing that actually stresses me out a bit.</p>
<p>The main goal is enhanced security and reliability through network segmentation. Guests connected to my WiFi shouldn’t be able to connect to management interfaces in my house for example.</p>
<p>A bonus goal is increased performance. My NAS has 4 rj45 ports that support <a href="https://en.wikipedia.org/wiki/Link_aggregation">link aggregation</a>, and so does the box that’s running my pfsense router. While link aggregation can’t boost the speed of a single connection, and I don’t do a ton of concurrent work on my network, having this would still be nice. Credit to <a href="https://forum.netgate.com/topic/165219/same-vlan-on-multiple-interfaces/6">this post</a> for making me realize I should be using link aggregation with the router rather than trying to split VLANs between multiple separately managed interfaces. <em>Addendum</em> I realize later down in this that I want to use the multiple NAS ports to connect directly into different networks, rather than do a big aggregation on one but still have everything have to go through my router.</p>
</section>
<section id="hardware-im-working-with" class="level1">
<h1>Hardware I’m working with</h1>
<p>My network starts with my router, a QOTOM Q330G4 with 4 1Gb Intel rj45 ports running pfsense. Next is my recently acquired HP procurve 2810 with layer 3 management and 48 1Gb ports. Finally for the network stack I have 2 Unifi AP AC-Lite WAPs that support multiple SSIDs with VLAN tagging. I think that will cover my requirements but there’s only one way to find out for sure.</p>
</section>
<section id="what-networks-i-need" class="level1">
<h1>What networks I need</h1>
<section id="list-all-the-types-of-devices-i-have-and-their-usage-considerations" class="level2">
<h2 class="anchored" data-anchor-id="list-all-the-types-of-devices-i-have-and-their-usage-considerations">List all the types of devices I have and their usage considerations</h2>
<p>To think about what networks I need I have to consider what sorts of things I have on my network and how I’d like to organize them.</p>
<p>To start, I have the management interfaces for my networking devices. The router at least won’t be on its own network, I’ll just have to lock that down with firewall rules. I’m not entirely clear how locking down the management interface on the switch works, I could probably put that on its own VLAN, but maybe that’s overkill. Right now my unifi controller is running on the same server that’s running all my other services, so I can’t isolate it with VLANs, that will also be firewall rules I guess.</p>
<p>Next there’s my servers and homelab. Currently there’s my three node proxmox cluster as well as a standalone box that’s running my services until I get things figured out on the proxmox cluster, but eventually that will be consolidated physically into one big cluster. Eventually within those physical servers there might be VMs representing different environments (dev/prod) that I might want to isolate. I’m pretty sure I can apply VLAN tags to VM interfaces, will have to test that to be sure.</p>
<p>I’ve got my work laptop, which should really be isolated from everything else. It’s got a wired connection so at least I won’t have to make an SSID just for it.</p>
<p>I’ve got IoT devices, although that’s a bit of a hand wavy category. The wifi leak sensor I previously mentioned doesn’t have to talk to anything else in my house so I can safely isolate it. My phone might be considered an IoT device, but I want it to at least be able to talk to my NAS so it can do photo backups. My Kobo probably counts as an IoT device, but there’s an ebook service that I run that I’d want it to connect to. This will require some thought and maybe some firewall rules on top of just network segmentation I think.</p>
<p>I’ve got trusted devices for admin like my workstation and my laptop. Those can probably just go on the same network as my lab and servers.</p>
<p>I’ve got my partner’s trusted devices like her laptop. At this point I’m not sure if she needs elevated privileges compared to house guests, but it also feels a bit weird putting her on a guest network in her own house.</p>
<p>Speaking of which, we’ve got the phones and laptops of any guests that visit us. Generally I think they just need internet access and can be isolated from IoT and server stuff.</p>
<p>I’ve mentioned it in a few other places, but I also have my NAS. I’d like to block most networks from accessing its management interface, but several of them will have to access its file share, and it also has my photo service running on it.</p>
<p>The last piece is the virtual networks for VPNs. I have OpenVPN running to connect to an off site Synology NAS that’s my off site backup. For everything else I use wireguard, although right now there’s just one tunnel both for myself for administration and trusted friends that I want to access my services. I’ll have to split those out.</p>
</section>
<section id="initial-network-idea" class="level2">
<h2 class="anchored" data-anchor-id="initial-network-idea">Initial network idea</h2>
<p>I’ll probably end up changing this, and I’ll definitely start with a subset of them while I’m testing, but let’s get the idea down.</p>
<section id="infra-lan" class="level3">
<h3 class="anchored" data-anchor-id="infra-lan">Infra LAN</h3>
<p>This will have the management interface for my switch, my proxmox nodes, my NAS, and any VMs or physical servers running production services. I think I’ll also put my workstation on this LAN to make administering things easier. I’ll either have an SSID that’s attached to this network or have a wireguard tunnel that can connect to it. If I can make the wireguard tunnel work internally and externally I’ll go with that.</p>
</section>
<section id="sandbox-vlan" class="level3">
<h3 class="anchored" data-anchor-id="sandbox-vlan">Sandbox VLAN</h3>
<p>This will only be used by VMs in my proxmox cluster. This is less for security than for testing out services in an isolated environment that might conflict with production services. It might also be a good place to test out firewall rules or other capabilities without impacting services.</p>
</section>
<section id="trusted-devices-vlan" class="level3">
<h3 class="anchored" data-anchor-id="trusted-devices-vlan">Trusted devices VLAN</h3>
<p>This will be for devices my partner or I own that we want to be able to access internal services. Laptops, phones, streaming boxes etc. If I want to limit the services some devices can access I’ll do it with firewall rules.</p>
</section>
<section id="guest-devices-vlan" class="level3">
<h3 class="anchored" data-anchor-id="guest-devices-vlan">Guest devices VLAN</h3>
<p>This will be for IoT stuff in the house and guests. It should just be able to access the internet and I could even experiment with rules that don’t let devices on this network talk to each other, just for added security. I think for now at least I’ll put my work machine on this network as well, especially if I can get device isolation within this VLAN.</p>
</section>
<section id="infra-wireguard-tunnel" class="level3">
<h3 class="anchored" data-anchor-id="infra-wireguard-tunnel">Infra wireguard tunnel</h3>
<p>A wireguard tunnel for me to use to administer my network.</p>
</section>
<section id="trusted-guests-wireguard-tunnel" class="level3">
<h3 class="anchored" data-anchor-id="trusted-guests-wireguard-tunnel">Trusted guests wireguard tunnel</h3>
<p>A wireguard tunnel for guests I’ve granted access to specific services. Exact services can be set with firewall rules and similar to guest devices VLAN I can restrict within network communication (I think). <em>Addendum</em>: I ended up not going with this and just using firewall rules.</p>
</section>
<section id="offsite-openvpn" class="level3">
<h3 class="anchored" data-anchor-id="offsite-openvpn">Offsite OpenVPN</h3>
<p>OpenVPN connection to my offsite backup. Should only be able to communicate with my NAS in the infra VLAN.</p>
</section>
<section id="trusted-devices-ssid" class="level3">
<h3 class="anchored" data-anchor-id="trusted-devices-ssid">Trusted devices SSID</h3>
<p>WiFi connection for the trusted devices VLAN</p>
</section>
<section id="guest-devices-ssid" class="level3">
<h3 class="anchored" data-anchor-id="guest-devices-ssid">Guest devices SSID</h3>
<p>WiFi connection for the guest devices VLAN.</p>
</section>
<section id="summary" class="level3">
<h3 class="anchored" data-anchor-id="summary">Summary</h3>
<p>So that’s four VLANs, two of which require SSIDs for WiFi, plus two wireguard tunnels and an OpenVPN tunnel. Compared to my current network of one LAN with one associated SSID, one wireguard tunnel, and one OpenVPN tunnel. Definitely more complex, but at least right at this moment this doesn’t feel like complete hubris.</p>
</section>
</section>
</section>
<section id="clean-up-pfsense" class="level1">
<h1>Clean up pfsense</h1>
<p>Before I start moving things around there are a couple of small tweaks I want to make to my pfsense setup after reviewing <a href="https://www.youtube.com/watch?v=fsdm5uc_LsU">this guide from Lawrence Systems</a> in preparation for this move. I’ll document them here, but they’re not really directly relevant to what I’m doing, I just want to have them done before I create a bunch of new networks, as some of them will interact with that.</p>
<p>The first tip I’m going to follow is just to add a third column to my dashboard. This obviously doesn’t relate to the network setup, but it was a great tip and now I can see more of what’s going on at a glance in my pfsense dashboard on my nice wide monitor.</p>
<p>The next one is the thing that made me want to take care of this stuff prior to messing with my network, and that’s to change the default port for the management portal on pfsense. The guide makes the very good point that if you want your gateway to handle reverse proxy tasks (which I eventually will for things like load balancing entrypoints to my kubernetes or proxmox cluster) then having your management interface on the default https port 443 will lead to conflicts. There’s a minor security through obscurity advantage to moving it too, but for me it’s about removing conflicts with reverse proxies. Since I’m going to put firewall rules in place that allow or block access to this management interface on various networks it will be nice to have the port updated and defined in advance. In the system, advanced, admin access section I’ll set the webConfigurator to use HTTPS on port <code>10443</code>. The redirect works although I’m getting errors about self-signed certs. I’ve got a plan for that but it’s happening after I get this other stuff sorted.</p>
<p>The one other thing I’m going to do at this point before I get started doesn’t come from the guide, but I’m going to rename a couple of my interfaces. Specifically I’m going to rename my old LAN interface from <code>LAN</code> to <code>LegacyLAN</code> and <code>LabLAN</code> to just <code>LAN</code>. I might eventually get rid of the LAN interface altogether and add it as another aggregation line for my new LAN, but for the foreseeable future it’s just going to kick around as a fallback network in case things go bad and I want to go back to a flat network while I figure them out.</p>
</section>
<section id="look-up-switch-commands" class="level1">
<h1>Look up switch commands</h1>
<p>At this point I’m almost ready to actually start setting up the network. The last thing I want to do is make sure I’m familiar with the commands or processes of configuring this stuff on pfsense and my switch. For pfsense I’m as comfortable as I can be without having actually implemented anything. I’ve watched some guides and read the docs on link aggregation and VLANs. The switch (as my <a href="../posts/2023-04-08-managed-switch.html">last post</a> demonstrated) is a lot more of a black box for me at this point. For what I’m trying to do I could probably use either the menu or cli interface. I know hardcore network folks would be all about the CLI, but I think I’ve established that’s not who I am, and for this level of complexity the menu is probably easier. I’d like to know what the commands are as well though just to have some options. I’ll be doing all of this config from a connection on the serial port of the switch to reduce the odds of locking myself out while I test something.</p>
<section id="figure-out-the-menu" class="level2">
<h2 class="anchored" data-anchor-id="figure-out-the-menu">Figure out the menu</h2>
<p>Getting into the menu interface is easy from the cli, just enter <code>menu</code> from the command prompt. From the menu interface option 5 takes me back to the CLI. Let’s take a look around at the things I’ll want to use.</p>
<section id="status-and-counters" class="level3">
<h3 class="anchored" data-anchor-id="status-and-counters">Status and Counters</h3>
<p>Under <code>Status and Counters</code> and then <code>General System information</code> I get some traffic info, the MAC address, and the firmware version of the switch (which looks like it’s at the latest version). Under <code>Switch Management Address Information</code> I see the management IP and gateway info I set. I also notice that the time server address isn’t set. I should probably change that since right now the switch thinks it’s January 1990. Add that to the todo list. Under <code>Port Status</code> I can see that only the port I’ve connected to pfsense is up. All the ports look basically the same except they’re a mixture of <code>MDI</code> and <code>MDIX</code> for <code>MDI Mode</code>. I have no idea what that means. Based on <a href="https://community.fs.com/blog/mdi-vs-mdix-and-auto-mdimdix-basis.html">this post</a> it’s related to the type of cable wiring you’re using. There’s also apparently an option to have it automatically configured. I’ll keep this in mind but for now let’s assume my switch defaults to auto configure that and it’ll just work, but keep this in mind for troubleshooting later. <code>VLAN Address table</code> is empty but has columns for <code>MAC address</code> and <code>Located on Port</code> so that might be handy to come back to later. <code>Port Address Table</code> lets me pick a port and then pulls up a table listing <code>MAC address</code>, but it’s empty. Leave that for now.</p>
</section>
<section id="set-time-server" class="level3">
<h3 class="anchored" data-anchor-id="set-time-server">Set time server</h3>
<p>Hopping over to switch setup I set the Time Sync method to <code>TIMEP</code>, the mode to <code>Manual</code> and set the server address as my gateway to use the pfsense time server. Setting that didn’t change the time in the menu. I think maybe I need <code>SNTP</code>, which <a href="https://forum.netgate.com/topic/143151/does-pfsense-support-sntp/5">according to this</a> is interoperable with the <code>NTP</code> protocol pfsense uses (I don’t have an option for <code>NTP</code> on the switch). Setting that up still doesn’t seem to be updating the time. Maybe I have to wait for a refresh? You’d think it would trigger one automatically when you change the config. How can I test this? Searching around doesn’t find anything. Let’s not get too sidetracked. I’ll set a timer for 12 minutes (default polling interval is 720 seconds) and check back on this later.</p>
<p>Coming back after 12 minutes the time is showing up correctly on the switch. Glad I didn’t spend a bunch of time troubleshooting that, although it’s silly it doesn’t try and sync after a config change automatically.</p>
</section>
<section id="switch-configuration" class="level3">
<h3 class="anchored" data-anchor-id="switch-configuration">Switch configuration</h3>
<p>This is the menu where most of the action will be for me. The first entry <code>System Information</code> is just what you get when you run the <code>setup</code> command so I’ve already been there. It’s where I configure the switch IP, default gateway and time settings (or try to at least).</p>
<p>Under <code>Port/Trunk Settings</code> I see that all my ports are set to enabled and <code>Mode</code> is set to <code>auto</code>, so that probably means I don’t have to worry about that whole <code>MDI/MDX</code> thing. I can also group ports into trunks here, which is probably where I’ll need to be to enable <code>LACP</code>. The interface is annoying, I have to hit space to toggle through 24 trunk groups before I can get back to the default of being empty. I can see why I’d want to use the CLI if I was going to do this a lot.</p>
<p><code>Network Monitoring Port</code> is disabled and that’s probably fine for now. <code>IP Configuration</code> has similar settings to what I did under <code>System Information</code> so I don’t need to mess with it.</p>
<p><code>SNMP Community Names</code> is a new thing for me. <a href="https://www.netadmintools.com/snmp-community-string">Based on this</a> post I’m just going to leave it alone for now.</p>
<section id="vlan-menu" class="level4">
<h4 class="anchored" data-anchor-id="vlan-menu">VLAN Menu</h4>
<p><code>VLAN Menu</code> seems like it will be of interest to me, let’s see what I can do here.</p>
<p>Under <code>VLAN Support</code> I can set the maximum number of VLANs to support. The default of 8 is more than the 3 I currently think I need so let’s leave that. Primary VLAN is set to <code>DEFAULT_VLAN</code> which from my preliminary reading should be <code>VLAN1</code>. I think that’s all fine, just note it for now. The last piece under here is whether GVRP is enabled, and by default it isn’t. From reading <a href="https://www.techtarget.com/searchnetworking/definition/GVRP">this</a> that seems to be what I want so let’s move on.</p>
<p>Under <code>VLAN Names</code> I’ve currently only got ID <code>1</code> associated with <code>DEFAULT_VLAN</code> so that confirms my suspicion there. I’ll come back to this and add <code>trust</code>, <code>guest</code>, and <code>lab</code> VLANs later. Under <code>VLAN Port Assignment</code> I can tag various ports with the VLAN tags I’ve created. Again, that will come in handy eventually.</p>
</section>
</section>
</section>
<section id="figure-out-the-cli" class="level2">
<h2 class="anchored" data-anchor-id="figure-out-the-cli">Figure out the CLI</h2>
<p>While it seems like I could do everything I need to do from the menu, let’s give me another option with the CLI.</p>
<ul>
<li>Port status: <code>show interfaces brief</code> nicely pages through the port status I saw in the menu. I think checking that from the menu is nicer since I can scroll up and down easily but it’s nice that it’s there. I can also check specific ports by adding a number, a comma separated list of numbers, or a dashed number range to just see a few ports. That might be handier.</li>
<li>Port/Trunk settings: I can use the <code>show trunks</code> command to show configured trunks, with the option to add a port range for just certain ports. I can also run <code>show lacp</code> just to see <code>LACP</code> configured ports. I should also be able to use <code>trunk &lt;port-list&gt; &lt; trk1 ... trk24 &gt; &lt; trunk | lacp &gt;</code> to configure a trunk. A nice word of caution at this point, the docs <strong>strongly</strong> recommend not having these ports connected when you’re configuring this. So I’ll have to do this over serial with the uplink ports disconnected until both pfsense and the switch are configured.</li>
<li>VLAN stuff: VLAN stuff is apparently not included in my docs. Weird. After grabbing the “Advanced traffic management guide” for the switch I’m ready to go. <code>show vlans</code> lists all the VLANs I have configured, currently just the default one. <code>show vlan &lt;vlan-id&gt;</code> does what you’d expect. For instance if I do <code>show vlan 1</code> all my ports show as <code>untagged</code> which means untagged packets that they receive will be treated as part of vlan1. <code>vlan &lt;vlan-id&gt; [name &lt;name-str&gt;]</code> will either create a vlan with the specified ID and name, or enter me into the context of that vlan if it already exists. I think that’s all I actually need to do at this point.</li>
</ul>
</section>
</section>
<section id="set-up-lacp-for-uplink" class="level1">
<h1>Set up LACP for uplink</h1>
<p>Time for the first stage of implementation. I want to get link aggregation set up to pfsense before anything else because I have to create the aggregation interfaces in pfsense from scratch, I can’t use an existing interface. Plus I’ll have to do this part with a serial connection. Down in the utility room I hook my laptop up to the serial port and then bring up the pfsense interface. Might as well do that part first. A lot of this information is referenced from another guide from <a href="https://www.youtube.com/watch?v=VULKulpXBYU">Lawrence Systems</a>.</p>
<p>The first thing I have to do is delete the interface I’ve been using for LAN on the switch, as I can’t have any devices that are assigned to an interface as part of my link aggregation. In pfsense I go to Interfaces and then assignments and delete my interface on <code>igb2</code>, noting that I also have <code>igb3</code> available, with <code>igb0</code> being my WAN and <code>igb1</code> being my legacy LAN, which I’m keeping around for the time being. Still on interfaces I switch over to the <code>LAGG</code> tab and add an interface. I select <code>igb2</code> and <code>igb3</code> as parent interfaces, set the LAGG protocol to LACP. I’ll leave LACP Timeout mode on the default of <code>Slow</code> and set the interface description to <code>igb2_3</code> because why not. After saving that I have a new interface labelled <code>LAGG0</code>. Back to the interface assignment tab I add an interface on <code>LAGG0</code> and then click on its default name of <code>OPT1</code> to configure it. In the config screen I check the box to enable it, give it a description of <code>LAN</code> (might change this to Infra later since that’s its intended purpose), set IPv4 Configuration type to static, give it an IP address of <code>192.168.10.1/24</code> and hit save.</p>
<p>Next up I have to set some firewall rules so traffic can actually happen on this interface. Head over to Firewall, Rules, and the LAN interface tab. I can’t seem to set the auto anti lockout rule for an interface other than the one I’m connected on, so I’ll make a poor man’s version with a rule that allows traffic to <code>This firewall</code> on the https port I set for management above. Then for now I’m just going to add an allow all style rule because I want to deal with firewall rules separately later.</p>
<p>Last bit of config within pfsense I’ll enable DHCP for this interface. This isn’t technically necessary, but it sure will make testing easier from my laptop. Under Services, DHCP server, and then the tab for LAN I’ll enable the DHCP server for this interface and give it a range for dynamic assignments from <code>192.168.10.200</code> to <code>192.168.10.250</code>. That should be more than enough since most of the devices on this network should be infra and therefore have static IPs.</p>
<p>That should cover it for pfsense, so let’s move over to the switch. I’m going to try doing this from the menu so I head to <code>Switch Configuration</code> then <code>Port/Trunk</code> settings. I set ports 1 and 2 to the group <code>Trk1</code> with type <code>LACP</code>, and hit save. At this point I think I’m ok so let’s plug in the cables and see what happens.</p>
<p>The first thing I check is if I can ping out from the switch. From the cli <code>ping 192.168.10.1</code> works, so that’s a good start. I can also ping the switch IP from my laptop which is still connected to <code>LegacyLAN</code>. This seems to be fine, but let’s see if I actually have redundancy. To do that I’ll start pinging the switch from my laptop (still on <code>LegacyLAN</code>) and then alternate unplugging cables from the switch. It works! I miss a few sequences while it fails over, but still pretty good!</p>
<p>Last thing to check is that the other ports are now working regularly on the default <code>LAN</code> network on the switch. Plugging into a random port I pull <code>192.168.10.200</code> and can ping out to the internet and <code>LegacyLAN</code>. Looks like we’re all good there, as would be expected.</p>
</section>
<section id="figure-out-actual-address-space-for-each-network-described" class="level1">
<h1>Figure out actual address space for each network described</h1>
<p>Before I go and create a ton of VLANs let’s write out the planned networks I want and their subnets.</p>
<ul>
<li>Infrastructure: This is called <code>LAN</code> right now and corresponds to the default VLAN on my switch. It’s in the <code>192.168.10.0/24</code> range and unless I have to add my laptop into it because I can’t get Wireguard to work the way I want then it doesn’t need a VLAN tag because everything on it will be wired. Devices on this networks should be able to talk to devices on any other network as this is the main administrative network.</li>
<li>Trust: For devices I know that I want to be able to access services. I’ll open up access to servers within Infrastructure to this group, but not to the management interfaces for things like my firewall or switch. This will be on the <code>192.168.15.0/24</code> range, will use VLAN tag <code>15</code> I’m going to make them match to the third octet of the IP to make it easier to reason about. There will be wireless devices on this network so I’ll have to create an additional <code>-trust</code> SSID beyond my regular one with the appropriate VLAN tag.</li>
<li>Guest: For devices that just need internet access. My work machine, IoT devices, and whatever devices friends and family connect with will go on here by default. I’ll keep this with the old SSID I was using to reduce the migration headache. This network will not be able to connect to anything but WAN, although I think I’ll have to enable avahi for things like Chromecasts to work. This will be on the <code>192.168.30.0/24</code> range and VLAN tag <code>30</code>.</li>
<li>Infrastructure Wireguard tunnel: For me to be able to administer the network from my laptop. Hopefully this will work both on site and remotely. That’s the design plan for now at least. It will use the <code>192.168.20.0/24</code> range through a wireguard tunnel interface. <em>Addendum</em>: Didn’t end up using this.</li>
<li>Trust Wireguard tunnel: Similar to the trust internal network, but for remote access, either for myself or trusted friends and family. It will use the <code>192.168.25.0/24</code> range.</li>
<li>OpenVPN tunnel: For connection to my offsite Synology. Synology only natively supports OpenVPN and I don’t want to add complexity by either hacking in Wireguard or adding a device over there for routing. This will stay on the <code>192.168.90.0/24</code> range but I’ll have to modify the firewall rules so it can talk to my NAS when I move it over to the Infrastructure network.</li>
<li>LAB: This will be for VMs or other devices that I want to experiment with and don’t want potentially impacting the rest of my network. I don’t want to just put them on guest because I’m hoping to block traffic within that network as well, plus the IP address space will just be crowded. This will pretty much only be used by VMs in my proxmox cluster. It will be in the range <code>192.168.40.0/24</code> with the VLAN tag <code>40</code>. If for some weird reason I find the need to segment this further I’ll use <code>41</code>, <code>42</code>, etc.</li>
</ul>
<p>In addition to these intended networks I’ll have a couple legacy networks around at least for now. Legacy LAN is where everything will live until I migrate it over, and I’ll probably keep it around for quite a while (or maybe forever) just to be safe even after nothing is connected to it. It’s in the <code>192.168.85.0/24</code> range. I’ve also got my legacy wireguard tunnel at <code>192.168.105.0/24</code>. I’ll see if I can just turn that into the Trust Wireguard tunnel since that’s what everyone who’s not me is using it for. I’ll have to change the address range and update the firewall rules but that should be ok.</p>
</section>
<section id="setup-vlans" class="level1">
<h1>Setup VLANs</h1>
<p>Next up we have to see if I can get VLANs working. To start I’ll just create one to make sure it works before I go wild.</p>
<p>I’ll start in pfsense under Interfaces, Assignments and then the VLAN tab. Let’s do the guest VLAN first since it has a simple firewall rule I can test easily. I set the parent interface to <code>lagg0</code>, the VLAN tag to 30, leave the priority at 0, and set the description to “Guest VLAN”. Back on the Interface Assignments tab I select VLAN 30 from the available network ports dropdown and click add. Then I click on the <code>Opt2</code> link to configure the new network. I enable the interface, give it the description “Guest VLAN”, and set it to static IPv4 with an IP address of <code>192.168.30.1/24</code>. Save and apply and then it’s over to services to configure its DHCP server. On the GUESTVLAN tab I enable DHCP and set the address pool to <code>192.168.30.100</code>-<code>192.168.30.250</code>. Even though most stuff on here will just grab a random IP, I’ll still use static maps for a lot of devices, so I want to keep space free for that. Last up on the pfsense side I have to create some firewall rules. First I add rules to block access to “this firewall” on the ssh and admin https ports. For the next part there are going to be a bunch of networks that I want to block this from access to, so I’ll create an alias first. Under firewall, aliases, I add an alias that includes the private networks I currently have configured, I’ll extend it later. I give it the name <code>private_networks</code> and then add entries for my Legacy LAN, LAN, and OpenVPN network and hit save. Back in rules under GUESTVLAN I add a rule to block traffic of any protocol to the alias <code>private_networks</code>, which should mean I can’t connect to anything outside my guest VLAN. At the bottom of the list I add an allow all rule so that anything that isn’t blocked by my rules above is allowed through.</p>
<p>Now over to the switch. I’m going to do this one through the menu at least, so I head to Switch Configuration, VLAN Menu, VLAN Names. I create a new VLAN with ID 30 and name Guest. Back one level to VLAN port assignments. First I set <code>Trk1</code>, my uplink aggregation port to “Untagged” for the default VLAN and “Tagged” for the Guest VLAN. I mapped out how I want to assign my ports and I know I’d like my work computer to go on port 14 so I’ll set it to “No” for the default VLAN and “tagged” for the guest. After saving it’s time to test.</p>
<section id="get-sidetracked-on-issue-with-wsl" class="level2">
<h2 class="anchored" data-anchor-id="get-sidetracked-on-issue-with-wsl">Get sidetracked on issue with WSL</h2>
<p>On my laptop plugged into a port other than 14 I pull a LAN IP address. I’m able to acces the admin console of pfsense, and I can ssh in.</p>
<p>Unplugging from that port and moving over to 14 I initially seem to have my old IP. After unplugging and plugging back in one more time now I’m pulling <code>169.254.49.68</code>, so something appears to be broken. I bet I should have set port 14 to “Untagged” for Guest VLAN. My laptop obviously isn’t applying VLAN tags, that will make more sense for ports connected to proxmox where I will be adding tags on VMs. Back to port 14. I pull <code>192.168.30.100</code>! Great start. Ok but I can’t connect to the internet or even ping my default gateway at <code>192.168.30.1</code>. That’s less good. Let’s check my firewall rules. Back over to a regular port so I can actually do that. Looking at the rules it looks like all the traffic is blocked by my private networks rule. I don’t see offhand why that would be the case, but let’s disable it and confirm that’s the issue. Disabling it didn’t fix things. Now I’m noticing that my allow all rule was actually set to just allow TCP, so maybe that’s the problem? Ok, with that fixed I can access the internet. That’s a good start. I can’t connect to the admin interface for pfsense, which is also intended behavior. I can’t seem to get online from within WSL though. I wonder if that’s something about the connection not being established with that VLAN tag originally? It shouldn’t be a firewall rule right now since I haven’t turned the private networks rule back on. I do a reboot just to be safe. Nope, that wasn’t it. I can’t even ping <code>192.168.30.1</code> from WSL. That’s super strange.</p>
<p>This requires a better setup for testing. Something very weird is going on and I don’t want to try and solve it standing in my utility room. Fortunately I have a spare port in my office upstairs, so I patch that one to the <code>.30</code> VLAN port and my workstation to a port on the switch that doesn’t have VLANs assigned. Back in the office I confirm that I still have the same behaviour from my laptop on the <code>.30</code> and my workstation works correctly on <code>.10</code>.</p>
<p>Back on the laptop, just for kicks mostly I try and connect to the network with docker (which is running on top of WSL2) and it works?! Now my mind is really blown.</p>
<p>Let’s try another experiment then. I’ll swap my workstation over to the VLAN port and see if its WSL can connect. Is it just something weird I didn’t realize I did on my laptop? Nope, exact same behaviour. Windows works fine, docker works fine, Ubuntu WSL does not.</p>
<p>Time for some searching. There’s <a href="https://github.com/microsoft/WSL/issues/6001">this GitHub issue</a> which describes similar behavior but it’s a couple years old with no resolution. They do have a request to collect and provide logs, depending on what I find I might come back and contribute to this. There’s <a href="https://github.com/microsoft/WSL/issues/6410">this GitHub issue</a> but in this case they’re trying to add VLAN tags on the network adapter for the Windows machine. The root cause might be similar, but the scenario isn’t quite the same, and there’s no resolution listed anyway. There’s <a href="https://github.com/MicrosoftDocs/WSL/issues/507">this GitHub issue</a> about applying a VLAN ID to the WSL network interface. That might work and might be worthwhile for testing but I’d like to see if there’s a cleaner fix. There’s <a href="https://github.com/microsoft/WSL/issues/6698">this GitHub issue</a> that says the 8021q module isn’t available in WSL. That appears to be true for me, but shouldn’t be relevant since I’m not trying to add my own VLAN tags, I’m just having the switch assign them.</p>
<p>Well I’m running real low on ideas at this point so back at the first issue I run their recommended log gathering script and put it up on the issue in a gist. I also add the note about docker working ok in case that’s a relevant clue to anyone who knows more about WSL and networking than me. In the meantime let’s take a look through the testing output and see if anything jumps out.</p>
<p>I notice that I can’t even ping the internal gateway of the WSL virtual network. I check that on my workstation and I can’t do it there either though, but it’s able to get online and talk to other devices in my network. I also can’t ping the Windows host IP, but I can’t seem to do that from anywhere, including pfsense itself so I’m not sure what to make of that.</p>
<p>Running <code>traceroute</code> on WSL without the VLAN I can see it hit the internal WSL gateway, then my <code>192.168.10.1</code> gateway, then the internet. Running it again on the WSL that’s on the VLAN it makes it to the WSL gateway (even though I can’t ping it) and then times out, it can’t make it any further. Let’s try that within docker on the machine with a VLAN to see if that shows anything. After loading the container with <code>docker pull ubuntu &amp;&amp; docker run -it ubuntu /bin/bash</code> and installing the tools I need with <code>apt update &amp;&amp; apt upgrade &amp;&amp; apt install inetutils-traceroute inetutils-ping</code> I run traceroute on the machine behind a VLAN. It doesn’t work? I reach the default docker network gateway of <code>172.17.0.1</code> ok, head on to a gateway of <code>192.168.65.5</code> which is super weird because I don’t have that subnet configured anywhere and then time out. But I can still ping out to the same internet site I was trying. Same thing for an internal server. I can ping it and resolve the correct internal IP, but traceroute gets hung up at <code>192.168.65.5</code>, which from some searching is the docker DNS server. Let’s try the same thing on the machine that’s not behind a VLAN. Same behavior. What. Let’s try traceroute from the WSL of the machine that’s not behind a VLAN. Works totally fine. What is happening with these networks?</p>
<p>At this point I have to step back from this issue. There are no resolutions on GitHub, and I’ve added my logs and comments to the issues in case anything comes up. I’ve posted on Reddit and <a href="https://serverfault.com/">serverfault</a> with no helpful response.</p>
<p>Fortunately, as long as docker works the impact of this on me is actually fairly minimal. I’ll keep my workstation in the Infra LAN without a tag so it will be fine. My laptop won’t be able to connect with WSL but I do almost everything Linux related on it from devcontainers anyway. I might have to make an Infra SSID when I get to the wireless step, just to have somewhere to connect from my laptop, but I don’t expect to need it often. As inconvenient as this is I don’t think it’s a showstopper so I’m going to move on. Maybe I’ll learn some more in the meantime that will be helpful.</p>
<p><em>Note</em>: Below I find that this behaviour doesn’t reproduce over WiFi. I’m so confused.</p>
</section>
<section id="carry-on-with-vlan-setup" class="level2">
<h2 class="anchored" data-anchor-id="carry-on-with-vlan-setup">Carry on with VLAN setup</h2>
<p>At this point I think it’s worth setting up the basics of what I need in terms of VLANs. I’ll save the firewall rules for later, but I’ll at least create the tags and interfaces. In the switch interface I’ve already got my Infra VLAN (1, default) and Guest (30) VLAN names created so I just have to add Trust (15) and Lab (40). Then it’s down to VLAN port assignment. I’ve got to update my trunk port to allow the new VLANs I’ve created, I’ll do that first since it’s at the bottom of the list and otherwise I might forget it. The next two ports I’ll use for my wireless access points. I want the APs themselves to be on my infra network so I’ll set the default VLAN to untagged. They’re also going to be creating guest and trust networks when I get to that point so I turn tags 15 and 30 on. I don’t see anything in my lab/dev environment being wireless so I’ll leave that off for now. The next four ports I’ll eventually use for my NAS. It’s got four connections on it so I can have one for each network. I originally thought about just putting them all into infra with link aggregation, but after watching some more Lawrence Systems videos I realized that it makes more sense to have them on each network directly so I’m not putting load on my router whenever I’m using the NAS, as I would be if the NAS was on Infra and most of the devices accessing it were on trust or guest. With that in mind for the next four ports I’ll set each one to untagged for a single VLAN (default/infra, trust, guest, lab in order) and <code>No</code> for the other VLANs. Next up we’ve got my three proxmox nodes. Those should be on infra by default, but I want to be able to add lab VMs, so I’ll turn VLAN 40 on. I don’t think anything in there makes sense for trust or guest, so I’ll leave that off. Just a handy reminder for myself here, the options <code>auto</code> and <code>forbid</code> are for if GVRP is enabled on my switch, which as discussed above, it is not. The next two ports are for my current standalone server and my workstation, both of which I’m putting on infra, so the default VLAN gets left as <code>untagged</code> and the other VLANs are set to <code>No</code>. The last two devices are my work computer and a Hue bridge for my lights, both of which belong on guest, so I set that VLAN to <code>untagged</code> and <code>No</code> for the other VLANs.</p>
<p>Now over on pfsense I have to create the VLANs, add DHCP for them, and (for now) give them a nice open “allow all” type firewall rule. The process is the same as what I described in the guest VLAN above so I won’t write it out again.</p>
</section>
</section>
<section id="migrate-services" class="level1">
<h1>Migrate Services</h1>
<section id="proxmox" class="level2">
<h2 class="anchored" data-anchor-id="proxmox">Proxmox</h2>
<p>Changing proxmox might be tricky since it uses static IPs. Presumably if I go in and change my network config I will lose connectivity until I move the host over to the new network. This will probably also do fun things to my cluster and ceph setup. That’s ok though, I’m not running anything production on there yet, that’s part of why I wanted to do this network rework now.</p>
<p>The first thing I do is remove the static leases I was using in pfsense to ensure name resolution of the proxmox hosts. This means I have to connect in from their IPs, but that’s ok. I’ll add in name resolution again later. Now on the proxmox hosts, I’ll do this one at a time. On the first one under system I go to DNS and update the DNS server to the new gateway. I add the old one in as a secondary one for now. Next I modify the hosts section to identify the new IP I’m going to give this host (192.168.10.11, I’ll leave 2-10 for more foundational infrastructure and start in the tens to match the PVE node number). Finally, and here’s where things will break until I switch ports, I go to the network section and update the <code>vmbr0</code> interface to the new address range. I get prompted to either apply changes or reboot. A reboot seems safer so I go for that and while that’s happening I head downstairs and move it over to the correct port on the switch. Backupstairs I can access it again from the new IP! It can no longer see the other two nodes, so maybe there’s something about not clustering across broadcast ranges. That’s fine, I’ll update the other two and then work on getting ceph set back up. After connecting the second node back it gets the correct IP and can join, but it can’t see the first node. Going up to the datacenter page in proxmox it looks like all the nodenames are still pointing to the old IP addresses, maybe name resolution isn’t working in pfsense?</p>
<p>I know I could do host overrides in the DNS server settings in pfsense, but I like assigning static leases to devices so I can see all the IP addresses I’m using from the DHCP page. There might be other things I can do with DNS to auto identify hostnames but I’m going to save that for later (either later in this post or another post). In pfsense I apply static leases for the two nodes I’ve moved over (glad I copied that when I deleted their leases on the old network). Doing this allows me to ping and correctly resolve the name for the other node but I still don’t see them in the cluster. In the <a href="https://pve.proxmox.com/wiki/Cluster_Manager#_cluster_network">proxmox docs</a> it looks like I have to edit <code>/etc/pve/corosync.conf</code>. There are also some handy docs on <a href="https://pve.proxmox.com/wiki/Cluster_Manager#pvecm_edit_corosync_conf">editing corosync</a>, which include incrementing the version. I can’t follow them though because even as root the file is read only. <a href="https://forum.proxmox.com/threads/cmd-access-is-good-gui-access-is-bad.106482/">This post</a> is from someone having the exact same issue as me, it’s because my nodes don’t have quorum because I took them down so cluster settings get locked. That’s totally sensible, probably should have thought of that before I tried migrating. Reading <a href="https://pve.proxmox.com/pve-docs/chapter-pvecm.html#_remove_a_cluster_node">these docs</a> it looks like I can remove nodes from the cluster, but then I’m going to have a bad time and have to reinstall them to get them back in. Let’s back up and try doing this a bit more gracefully. I’ll reset the first two nodes to their old address and put them back on the old switch just to make sure I can get back to a known good state and then more slowly move them over. Back in pfsense I remove the static mappings for the two nodes on the infra network and add then back in the legacy network. I change the host config and IP settings on the nodes and reboot them. Down to the utility room to plug them back into the old switch. Ok, we’re back up with quorum. Now to figure out the smart way to do this migration. <a href="https://pve.proxmox.com/pve-docs/chapter-pvecm.html#_adding_redundant_links_to_an_existing_cluster">Adding redundant links</a> feels like it should work, but the different links can’t talk to each other, so I’m not sure if I’ll get in a weird in between state partway through. I guess it should recover once all three nodes are on the new network. Let’s give it a shot. Given that this is already risky let’s follow the recommendations in the docs for editing corosync. On my first proxmox node I copy the current corosync config into a <code>.new</code> and <code>.bak</code> copy:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /etc/pve/corosync.conf /etc/pve/corosync.conf.new</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /etc/pve/corosync.conf /etc/pve/corosync.conf.bak</span></code></pre></div>
<p>Then I edit the new file. For each node I add an entry for <code>ring1_addr:</code> with the IP I’m migrating to. In the totem I increment the <code>config_version:</code> field. Finally I duplicate the interface section with link number 1. Let’s just check it on another node to make sure things are syncing properly. Yup, it’s over on my other node. Move the <code>.new</code> file to overwrite the original config and I should be good to go. Let’s try migrating again.</p>
<p>I move the static leases over from legacy LAN to Infra. This time I’m going to change all three nodes over at once and power them off, move the network cables over, and then bring them all back up. Let’s see if it works.</p>
<p>They came back up, and I can ping all of them at their new address. I can even ssh into them, but the web interface isn’t loading. So that’s fun. Ok, even weirder. I actually just can’t access the web interface for the first node. All three show as joined to my datacenter though and I can access the first node from the web interfaces of the other two. That’s pretty close to functional, just have to figure out this first web interface. Maybe it just needs a reboot? Worth a shot at least. Ok, that did it. Not really sure why that did it, but who ever knows why rebooting fixes things?</p>
<p>Last up, let’s get rid of the old addresses from the corosync config. I make another <code>.new</code> copy, edit it to remove the old <code>ring0</code> address and change the updated <code>ring1</code> address to be <code>ring0</code>, increment the <code>config_version</code> and get rid of the second interface. Checking the cluster info from the datacenter page I see all three nodes using the correct IP on the first interface. Success!</p>
<section id="ceph" class="level3">
<h3 class="anchored" data-anchor-id="ceph">CEPH</h3>
<p>I’m sure all these address changes have done interesting things to my CEPH cluster. Let’s try and get that back on track now. On one of my nodes I head over to the CEPH tab and check the configuration page. I can’t seem to update anything from the web portal so let’s try making changes in the terminal to <code>/etc/pve/ceph.conf</code>. I update <code>cluster_network</code>, <code>mon_host</code>, <code>public_network</code> and the <code>mon</code> settings for each node.</p>
<p>Still getting timeouts from CEPH, probably because it has to reload something? Let’s just reboot all the nodes again to be safe and see what happens. Still nothing. The config seems to have been applied but I don’t see anything. Running <code>pveceph status</code> or <code>ceph -s</code> just times out. Looking back on my <a href="../posts/2023-02-05-proxmox-ceph.html">previous effort</a> let’s see if I can find some good troubleshooting steps. The first thing I did was initialize ceph if <code>pveceph status</code> showed “not initialized” so I’m going to skip that. <code>pgrep ceph-mon</code> shows no monitors running but <code>pgrep ceph-mgr</code> and <code>pgrep ceph-osd</code> both show processes. Interestingly in the web interface I can see all three monitors, just with status “unknown”, but I can’t see any managers or OSDs.</p>
<p>Just as an aside here. I recognize I’m almost certainly going to spend more time troubleshooting this than I would just rebuilding the cluster. Especially since I went to all that effor to configure things with ansible. I’m treating this as a learning opportunity, not a productivity hack.</p>
<p>Reviewing the docs I find <a href="https://docs.ceph.com/en/latest/rados/operations/add-or-rm-mons/#changing-a-monitor-s-ip-address">this handy warning</a> that existing monitors are not supposed to change their IP address. From reading <a href="https://docs.ceph.com/en/latest/rados/operations/add-or-rm-mons/#changing-a-monitor-s-ip-address-the-right-way">this</a> I’m basically hooped unless I move all three nodes back to the old IP address range and even then I’m not sure I could painstakingly migrate one node at a time without losing quorum on either my ceph cluster or my proxmox cluster. In summary, don’t expect to be able to migrate a proxmox cluster over to a new address range, it’s going to be a rebuild.</p>
<p>I still want to try a bit more here before I give up on rebuilding ceph. Mostly because I’m stubborn, partially because it will help me understand how ceph works.</p>
<p>Checking what I still have running for ceph related processes I find the following:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:~#</span> ps ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> ceph</span>
<span id="cb2-2">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1621</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span>        Ss     0:00 /usr/bin/python3.9 /usr/bin/ceph-crash</span>
<span id="cb2-3">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2478</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span>        Ssl    0:01 /usr/bin/ceph-osd <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cluster</span> ceph <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--id</span> 0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--setuser</span> ceph <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--setgroup</span> ceph</span>
<span id="cb2-4">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6658</span> pts/0    S+     0:00 grep ceph</span></code></pre></div>
<p>The result is the same on all three of my nodes. Taking a look at <a href="https://forum.proxmox.com/threads/unexpected-ceph-behaviour-from-unused-ceph-installation.95229/">this forum</a> gives me a tip to check the status of <code>ceph-crash</code> which in turn gives me this error:</p>
<p><code>Apr 15 13:17:33 pve1 ceph-crash[1421]: ERROR:ceph-crash:directory /var/lib/ceph/crash/posted does not exist; please create</code></p>
<p>After creating that directory I don’t see any records getting created.</p>
<p>Looks like I can stop the running <code>ceph-osd</code> with <code>systemctl stop ceph-osd.target</code> I still have the <code>ceph-crash</code> service running and even if I kill it the process comes back, so it’s being triggered by some service. Running <code>systemctl --type=service --state=running</code> I can see there’s the <code>ceph-crash</code> service so I stop that on each node. After running that it doesn’t seem like I have any more CEPH services running. Let’s try a purge again.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:~#</span> pveceph purge <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--crash</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--logs</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error</span> gathering ceph info, already purged<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span> Message: got timeout</span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Foreign</span> MON address in ceph.conf. Keeping config <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">keyrings</span></span></code></pre></div>
<p>So no luck there. Let’s try <a href="https://forum.proxmox.com/threads/not-able-to-use-pveceph-purge-to-completely-remove-ceph.59606/">this post</a> and run the following on each node:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> /etc/systemd/system/ceph<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">killall</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-9</span> ceph-mon ceph-mgr ceph-mds</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> /var/lib/ceph/mon/  /var/lib/ceph/mgr/  /var/lib/ceph/mds/</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> /etc/pve/ceph.conf</span></code></pre></div>
<p>Now I need to wipe my disks to get ready to start again. Initially when I try and wipe it from the menu I get a warning about the device having a holder. From <a href="https://forum.proxmox.com/threads/sda-has-a-holder.97771/">this forum</a> post I learn to run <code>lsblk | grep ceph</code> to find the id and then <code>dmsetup remove &lt;the id I found&gt;</code>. After this I can wipe the disks.</p>
<p>Let’s see if I can rebuild the cluster using my ansible playbook from last time. After modifying it with the new network addresses of course. I can initialize the ceph cluster but creating monitors fails because I don’t have <code>/var/lib/ceph/mon</code> to create monitors in. Fine, I create that folder on each node and then try adding monitors. Same thing fore creating managers, have to create <code>/var/lib/ceph/mgr</code>, might as well recreate <code>/var/lib/ceph/mds</code> while I’m at it. This whole experience is really making me rethink integrating distributed storage with my hypervisor. Let’s try creating an OSD. Here’s where things fall apart again: <code>auth: unable to find a keyring on /etc/pve/priv/ceph.client.bootstrap-osd.keyring: (2) No such file or directory</code></p>
<p>Ok. That’s enough of this. This is way off topic for figuring out my network and it’s pretty clear that I’m going to have to come back and figure out my distributed storage solution again.</p>
</section>
</section>
<section id="nfs" class="level2">
<h2 class="anchored" data-anchor-id="nfs">NFS</h2>
<p>After all that I realized my NFS share wasn’t loading anymore. After thinking for a second I realized that made sense since my NFS rules only allowed connections from the <code>192.168.85.0/24</code> range. Adding a new rule for the infra range fixed that up. <em>Addendum</em>: I did this for my proxmox shared folder but not for the rest of them here, this bites me later in the NAS migration section.</p>
</section>
<section id="vms-with-vlan-tags" class="level2">
<h2 class="anchored" data-anchor-id="vms-with-vlan-tags">VMs with VLAN Tags</h2>
<p>For now let’s make sure creating VMs with VLAN tags works the way I think it should and move on. I’ll have to come back to refiguring my storage in a future post. First I create a VM with no VLAN tag assigned to the network interface and DHCP settings. It comes up and gives me an IP in the correct range. I could just create a new one, but let’s see what happens if I just shut this down and change the VLAN tag on the interface? On the hardware tab I go to the network interface and give it a VLAN tag of 40. It pulls the new IP when it comes back up and works perfectly. Finally something goes well!</p>
</section>
<section id="migrate-synology-and-prod-server" class="level2">
<h2 class="anchored" data-anchor-id="migrate-synology-and-prod-server">Migrate Synology and prod server</h2>
<p>Now that I have my VLANs setup, it’s time to migrate my NAS over. To start I’m going to shutdown my production server so it doesn’t get any weird behavior while things are shifting over. Once I’ve got the Synology back up I’ll migrate it to the new Infra LAN as well. I can head into the “Info Center” and then Network section of the Synology control panel to get MAC addresses for each interface. This will allow me to create static routes in pfsense to give correct IP addresses. On the infra LAN the next free IP address after the gateway and switch is <code>192.168.10.3</code> so I’ll assign that to the NAS. I’ll keep the same pattern of making it <code>192.168.x.3</code> on each network for consistency. For hostnames I’ll just use the name I’ve assigned the nas on infra, and all other networks I’ll prepend the network name to distinguish. After adding in all the static mappings and confirming the order I set the ports on the VLAN it’s time to head down to the utility room and move some cables around. When I come back upstairs I’m delighted to see that I can ping all the interfaces at the IP I expected. I have to flush my DNS cache before I can ping the original hostname on the infra IP, but otherwise this part is smooth sailing. Let’s bring up my prod server and see if all my services still work. It came back up ok and it picked up the new IP, but only some of my docker containers are coming back. Again, that’s out of scope for this so I’ll just re-run my ansible playbook for setting up this machine and see if that resolves it. Ok, the problem was that I had volumes specified with reference to the old IP address. Even though the associated containers weren’t running, they still had a claim on those volumes and so ansible couldn’t remove and re-add them. After stopping all containers and removing them I re-ran the playbook and realized I had to update the NFS share permissions on my other shares to allow access from the Infra network. This was actually one of the reasons I wanted to migrate over. NFS is not secure (at least without some fancy user auth tied in that I’ve never bothered to setup) so having it only available on my infra network and using SMB everywhere else will enhance my security. While I was at this I moved my media box over to my guest network and after a bit of fiddling with kodi settings to point to the new share that’s on the guest network things all came back up.</p>
</section>
<section id="migrate-the-last-couple-wired-devices" class="level2">
<h2 class="anchored" data-anchor-id="migrate-the-last-couple-wired-devices">Migrate the last couple wired devices</h2>
<p>Beyond what I’ve moved over so far the only wired devices I have left are my work computer, a Hue bridge for lights, and my access points. I’ll deal with the access points when it’s time to migrate the SSIDs in the coming section. The last two devices went smoothly and joined the guest network as I’d expect them to. I still haven’t set any firewall rules so the guest network isn’t actually any more/less secure right now, but at least they’re joining the correct network and nothing is immediately breaking.</p>
</section>
</section>
<section id="set-up-ssids-with-vlan-tags" class="level1">
<h1>Set up SSIDs with VLAN tags</h1>
<p>This part is a little scary because almost all of my devices in this house are on WiFi so if I break this I’m going to have a bad time. I think I’m just going to prove out the actual VLAN activity working and that nothing breaks just by being on a different network before I set up firewall rules. Right now my APs are still on my unmanaged switch. I think I first want to create new SSIDs with VLAN tags, confirm that doesn’t break anything on the unmanaged side, and then move them over to the managed switch and see what happens.</p>
<p>Over in my unifi controller portal the first thing I have to do is create networks for each of the VLANs I’m using. On the networks panel I add two networks named [Trust/Guest]VLAN and give them the appropriate VLAN tags. Over on WiFi I’m going to keep my existing SSID and just make it the guest network. This seems like the easiest way to handle migration and it will reduce confusion for guests. I’ll change the network for that one from <code>default</code> to <code>GuestVLAN</code>. I’m not going to make it a guest network at this point, I’m not even sure what that will do if my router isn’t Unifi. I’ll handle firewall rules in pfsense later. I make a second network for the trust VLAN and I should be basically good to go. At this point my controller can’t actually see my APs. I can ping them from the server that’s running it, but I think since they’re on different networks some broadcast that they’re using for discovery isn’t working. I’m guessing/hoping that all I’ll have to do to address this is move them over to the other network. Down in the utility room again I change over the APs to their designated ports on the switch. They both come back up and pick up the static leases I assigned for them. Checking the Unifi console both of them show up with the status “Adopting”, which is better than not visible at all. While the adoption is happening I take a look at my phone. I am online, but I’ve pulled an IP in the <code>Infra</code> range, so the VLAN tags aren’t being applied yet. That makes sense given the APs are still adopting so they wouldn’t have been able to incorporate any configs. The Unifi web interface now has them cycling between “Adopting” and “Offline” although I can still consistently ping them. I think something about moving my controller has broken the APs connections. I perform a factory reset on the APs and try again. Something about the credentials don’t seem to be working. Let’s try forgetting the AP and re-adopting it. It feels like it should work, I even get a notification that the AP has been adopted, but it still hangs on adotping. Still not working. Let’s try a firmware update on the AP through ssh.</p>
<p>Ok, firmware is updated, devices have been rebooted. I’ve also set the existing entries for both devices to “Forget” in the web UI. Both of them show back up as adoptable. I click adopt on one of them and eventually it just shows up as offline in the web portal even though I can still ssh into it. Let’s try another factory reset now that I’ve done the firmware update. After running that command I can’t ssh back into it. Power cycle the AP to see if that comes back up. Hmm, it comes back up but the firmware version is back. Looking at the AP it seems to start off with the default inform address, but when I set it to the correct one it goes back to the old IP of my controller server. After a bit of searching I realize that this is because I had to hard code the inform IP setting in the controller so it didn’t use the docker IP of the container it was in, and that was set to my old IP. Let’s try adopting again. Ok! One of them at least has switched over to “Getting Ready”. That’s farther than I’ve made it before. After a bit more waiting they both come back online. What a relief. Checking my phone I am now pulling an IP in the <code>192.168.30.0/24</code> range so it looks like VLAN tags worked too!</p>
<p>I’m super curious at this point to see how my laptop will respond to getting VLAN tags from the WiFi. Will I still not be able to connect with WSL? I can?!? I’m so extra strength confused right now. Connecting to either SSID pulls the correct IP and WSL works just fine. Running traceroute confirms that it is routing traffic through the correct gateway address for whichever VLAN I’m on. Just to make sure I’m not totally losing it I plug back into the cable for my work machine that’s on the guest VLAN and confirm I can reproduce the failure on WSL. I can. I have absolutely no idea what to make of this.</p>
</section>
<section id="create-wireguard-tunnels" class="level1">
<h1>Create Wireguard Tunnels</h1>
<p>Now I need to deal with wireguard. Right now my tunnel allows communication to my legacy LAN. It also uses <code>.105</code> for the third octet which was closer to my old IP addressing scheme. To match my IP scheme a bit closer I’m going to move my Wireguard tunnel over to <code>192.168.25.0/24</code> to it’s close to the trust network range of <code>192.168.15.0/24</code>, that doesn’t actually do anything inherently, it just makes it easier for me to keep straight in my head. On the wireguard peers I have to adjust their allowed IP ranges to cover that new range as well. Further, on the client for the peers I have to adjust the allowed IPs to cover the Infra LAN (I’ll handle specific access to infra with firewall rules, but some services on that network have to be routable).</p>
<p>I was originally going to make two wireguard tunnels and handle firewall rules at that level, but upon further consideration I think it will be easier to just set rules for specific devices than bother with all that.</p>
<p>At this point I think Wireguard itself is basically correctly configured.</p>
</section>
<section id="set-up-static-leases" class="level1">
<h1>Set up static leases</h1>
<p>This part isn’t strictly necessary, but I like using static leases for all devices on my network so it’s easy to spot new additions and also to allow for hostname resolution. In pfsense I’ll keep one window on the leases under my legacy LAN since that will help me figure out the identity of devices I’ve previously given static leases, and also allow me to clear off their old leases. In the other Window I’ll check each of my newly created networks and ensure that they have the devices I’d expect. Checking my existing leases everything that doesn’t currently have a static lease is on my guest network, which is perfect since everything I added on other networks I gave a static lease so I shouldn’t be seeing anything there. After spending a little while confused about why I couldn’t see my iPhone to give it a static lease I noticed it had a setting turned on for “Pivate WiFi access”. Somehow this not only hides my MAC address but the IP it gets doesn’t even show up in my list of DHCP leases. That’s pretty neat, but also sneaky. For my home network I’m turning that setting off on the phone so I can give it a private address. Doing this is also a good opportunity to make sure I actually can identify all the devices on my network. For instance I got real confused by something labelled android but eventually realized it was the tablet panel for my security system.</p>
</section>
<section id="make-sure-everything-works-before-adding-firewall-rules" class="level1">
<h1>Make sure everything works before adding firewall rules</h1>
<p>At this point I’ve got a bunch of stuff on different networks, but no actual security since everything is still allowed to route to everything. In theory this should mean that I won’t have any issues at this stage but as I’ve seen at several other points in this adventure that’s not always actually true. Before I add more complexity with firewall rules I’m going to step through all my devices and make sure they still work as I’d expect.</p>
<p>It does! What a nice surprise after all the weird twists I’ve encountered going through this.</p>
</section>
<section id="create-firewall-rules" class="level1">
<h1>Create firewall rules</h1>
<p>Now we’re at the part where I actually add some security to all this network segmentation I’ve been doing.</p>
<p>First I’m going to create some aliases to make things a bit easier on myself. The first one I’ll make I’ll label <code>pfsense_admin</code> and include the ports for https and ssh access to the router, since I don’t want anything touching that. I can also use it to create my own anti-lockout rules for my infra LAN, since the default one from pfsense is tied to my legacy LAN. I’ll also create an alias for my devices on wireguard, as I’ll want them to have elevated access relative others I grant VPN access to. Next I’ll create a “web” port alias for 80 and 443. Right now my services are on http but I’d like to move them to https in the future.</p>
<section id="wireguard-rules" class="level2">
<h2 class="anchored" data-anchor-id="wireguard-rules">Wireguard rules</h2>
<p>I’m not going through these in any particular order beyond the order they happen to be in for my firewall rules tabs. I currently just have an allow all type rule on this interface so I need to restrict things a bit. The first rule I’ll add is to allow my laptops to access anything. I’ll make that the top rule and then I can add other rules below. Anyone else using this service is accessing either my file share over samba or one of the production services I’m running on my standalone machine. I add allow rules for samba by opening port 445 to my NAS IP, and the “web” alias port to my server. I also better allow access to this firewall since it’s providing DNS if nothing else, but I’ll block the admin ports first and then create an allow rule for the firewall generally. Rules are evaluated top to bottom so the block on admin ports will apply and then the allow on all other ports will follow. There might be a way to combine those rules but I’m going to try this for now. I don’t want anything else to happen through VPN so I can finally disable the allow all rule I had to start (I could just delete it but whatever).</p>
<p>Testing the rules from my phone on LTE work the way I’d expect. I can access my web portals but I can’t get into the firewall web interface. I tried testing my laptop tethered to my phone in hotspot mode but couldn’t get it working. I couldn’t even get regular web traffic happening while the VPN was on. Wireguard is set for split tunneling so I wonder if that’s something about the hotspot having protections in place rather than an actual restriction. I’m going to leave testing the rest of this for now. Next time I’m out with my laptop I’ll try some other tests. Coming back to this after some reboots this is working as expected so I’m going to leave it alone.</p>
</section>
<section id="guest-lan-rules" class="level2">
<h2 class="anchored" data-anchor-id="guest-lan-rules">Guest LAN rules</h2>
<p>First rule I need is blocking admin access to the firewall, using the alias I already created. Next I’ll create an alias for all my private networks, which is everything except this one and the WAN and block access to that. After that I just need an allow all rule. This one’s actually pretty straightforward rules wise. One more thing I have to open is access from my Kodi box to the port on my prod server where I’m hosting its mariadb database. I also have to add a rule so my kobo can talk to my calibre server.</p>
<p>Testing these rules I’m delighted to find that everything still works. My robot vacuum needed a reboot when I loaded it on the app, but maybe that was a coincidence?</p>
</section>
<section id="trust-lan-rules" class="level2">
<h2 class="anchored" data-anchor-id="trust-lan-rules">Trust LAN rules</h2>
<p>This one should be easy as well. I block access to the admin portal on the router, create an alias for my switch and access points and block that as well.</p>
<p>This works as expected. As a bonus, on my laptop if I connect through my wireguard tunnel I can access the router admin page, but I can’t without the tunnel, so the extra permissions on Wireguard seem to work even if I’m still on my local network as well.</p>
</section>
</section>
<section id="scream-test" class="level1">
<h1>Scream test</h1>
<p>I’m not really calling this done at this point. I’ve done all the testing I can think of and things appear to be performing the way I’d expect them to. But as I’ve seen above, networking impacts basically everything so I’m going to leave this for at least a week before I fully relax. I’m not going to wait to publish this that long though, if anything comes up I’ll come back here and edit this.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Networking is hard. Not so much because of VLANs or Firewall rules themselves. Those are actually fairly straightforward (except with WSL for whatever reason). The challenge is in thinking about all the services you have and how they all talk to each other. So many little hard coded configs that I didn’t think about, or access rules that I hadn’t considered. I’m still glad I did this because I learned a lot and my network will be in better shape for the future, but man, what an effort.</p>


</section>

 ]]></description>
  <category>networking</category>
  <category>Linux</category>
  <guid>https://blog.ianpreston.ca/posts/2023-04-09-network-rework.html</guid>
  <pubDate>Sun, 09 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Setting up my first managed switch</title>
  <link>https://blog.ianpreston.ca/posts/2023-04-08-managed-switch.html</link>
  <description><![CDATA[ 




<section id="edit" class="level1">
<h1>Edit</h1>
<p>I bought another switch, I guess I’m a glutton for punishment. This one has some different connectivity and configuration requirements so I’ll document them at the bottom of the post.</p>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>After some <a href="../posts/2023-02-24-k8s-the-hard-way.html">recent challenges</a> where experiments in my lab took down DNS for my entire network, I decided it was time to stop putting off cleaning up my network from the giant flat architecture it’s currently using.</p>
<p>To accomplish this goal I first needed to acquire a managed switch. Following a great deal of searching and talking myself into and out of getting some super fancy 10gb switch with PoE I found <a href="https://www.hpe.com/psnow/doc/c04140686?jumpid=in_lit-psnow-red">an hp 2810-48g</a> for $15 from a local reseller and decided it made more sense to pick that up and learn before committing to anything super fancy and expensive. As with most of my recent posts, this is going to be a log of the things I tried and issues I encountered, as opposed to a polished how-to guide for others to follow. Although, if you’re in a similar position to me at the start of this post, then maybe reading through will save you some pain on your own journey.</p>
</section>
<section id="connecting-to-the-switch" class="level1">
<h1>Connecting to the switch</h1>
<p>If I’m going to manage this switch, I need some way to connect with it. Right now it’s not even assigned an IP, and from my reading these types of switches don’t just pick one up by default. Instead I have to connect in over the management interface, which is a port that looks like ethernet on the switch, but is actually a serial console. I ordered in a RJ-45 to USB cable to handle this connection and hooked it up to one of the boxes I had down by the switch. I also ran a regular ethernet cable from the first port on the switch to one of the unused interface ports on my pfsense router. I’ll set up a separate network on that and slowly migrate devices onto this switch as I get it working.</p>
<p>Anyway, with the connection established physically, I have to figure out how to connect in from the machine. I ssh into the box the switch is connected to and run <code>lsusb</code>. <code>Bus 003 Device 002: ID 0403:6001 Future Technology Devices International, Ltd FT232 Serial (UART) I</code> looks like the right device. How do I connect to it? Well first I reboot because I realize I haven’t rebooted since I upgraded the kernel on this machine and I think that’s giving me problems accessing kernel modules <a href="https://bbs.archlinux.org/viewtopic.php?id=211536">as seen here</a>. The reboot also leads to <code>/dev/ttyUSB0</code> showing up, which was what I was looking for when I started poking around with <code>lsusb</code> and <code>dmesg</code>. Following the console connection <a href="https://docs.netgate.com/pfsense/en/latest/hardware/connect-to-console.html">docs from pfsense</a> I run <code>sudo screen /dev/ttyUSB0 115200</code> and just get a blank screen. After waiting a fair while and almost giving up I’m greeted with the procurve screen!</p>
<pre><code>ProCurve J9022A Switch 2810-48G
Software revision N.10.02

Copyright (C) 1991-2006 Hewlett-Packard Co.  All Rights Reserved.

                           RESTRICTED RIGHTS LEGEND

 Use, duplication, or disclosure by the Government is subject to restrictions
 as set forth in subdivision (b) (3) (ii) of the Rights in Technical Data and
 Computer Software clause at 52.227-7013.

         HEWLETT-PACKARD COMPANY, 3000 Hanover St., Palo Alto, CA 94303

We'd like to keep you up to date about:
  * Software feature updates
  * New product announcements
  * Special events

Please register your products now at:  www.ProCurve.com




Press any key to continue</code></pre>
</section>
<section id="connect-in-and-bring-up-setup" class="level1">
<h1>Connect in and bring up setup</h1>
<p>Now I’ve got a nice prompt saying <code>ProCurve Switch 2810-48G#</code>. So now what? According to the manual I can just type <code>setup</code>, that’s handy, let’s give that a shot.</p>
<pre><code>ProCurve Switch 2810-48G                                    7-Jan-1990  18:21:16
==========================- CONSOLE - MANAGER MODE -============================
                                  Switch Setup

  System Name : ProCurve Switch 2810-48G
  System Contact :
  Manager Password :                    Confirm Password :
  Logon Default : CLI                   Time Zone [0] : 0
  Community Name : public               Spanning Tree Enabled [No] : No

  Default Gateway :
  Time Sync Method [None] : TIMEP
  TimeP Mode [Disabled] : Disabled

  IP Config [DHCP/Bootp] : DHCP/Bootp
  IP Address  :
  Subnet Mask :


 Actions-&gt;   Cancel     Edit     Save     Help</code></pre>
<p>That’s pretty neat. At this point I guess I better set up the router to actually operate on that port. Over in pfsense I go to <code>Interfaces -&gt; Interface Assignments</code>. I’ve got <code>igb0</code> set as my WAN, <code>igb1</code> as my (currently only) LAN, and nothing on <code>igb2</code>, which I assume is the port my switch is plugged into since I plugged it in beside the other two. Let’s create an interface there and call it <code>LABLan</code> for now. After adding the interface I head into the options, mark it enabled, rename it from the default <code>Opt1</code> and give it an IP address of <code>192.168.10.1/24</code>. Eventually I’m going to have to refigure my addressing scheme, but for now that space isn’t in use so let’s go with it.</p>
</section>
<section id="test-basic-connectivity" class="level1">
<h1>Test basic connectivity</h1>
<p>I think at this point I can give my switch an IP address and connect into it that way. Let’s try. I change the IP Config to manual and then enter an IP address of <code>192.168.85.2</code> and a subnet mask of <code>255.255.255.0</code>. Let’s test this. To avoid potential routing or firewall problems as an issue I’ll first start by just trying to ping it from a shell on pfsense. I get a response! Good start. Let’s see if I can ping it from my LAN on another machine, probably not. Yeah, I can’t. Eventually I’m going to lock these different networks down, but for now while I’m testing let’s see if I can open things up. Again, I’ll clean this up later, but for now I’m just adding a rule that passes any traffic from <code>LAN</code> net to <code>LABLan</code> net. But ping still doesn’t work. Why would that be? Probably because I didn’t add a rule that allowed outbound traffic from <code>LABLan</code>. Getting closer, at least now my switch can ping the default gateway where it couldn’t before. But I still can’t seem to ping it from my other network. Let’s take a step back and see if I can ping that gateway from my network. I can, so that suggests the network rules are working. But then why can’t I ping the switch? Running <code>traceroute</code> from another machine shows it reaching the gateway at <code>192.168.10.1</code> but not making it through to the switch.</p>
<p>I’ve simplified my firewall rule for that interface even further with just allowing pass everywhere, but it’s still not working.</p>
<p>I want to try pinging out from the switch, but for whatever reason connecting in again using the same <code>sudo screen /dev/ttyUSB0 115200</code> that was working before is not rendering well anymore. Guess I’ll get sidetracked and work on that.</p>
</section>
<section id="get-sidetracked-on-the-serial-interface" class="level1">
<h1>Get sidetracked on the serial interface</h1>
<section id="try-some-other-consoles-and-commands" class="level2">
<h2 class="anchored" data-anchor-id="try-some-other-consoles-and-commands">Try some other consoles and commands</h2>
<p>For whatever reason upon trying to reconnect I’m getting either nothing from the terminal or some random gibberish characters, or parts of what seem to be the prompt or menu screen, but not rendered correctly to actually read. I assume there’s something wrong with how my serial connection is configured. I tried connecting with <code>minicom</code> instead, and got similar results. I tried connecting at different baud rates, but that also didn’t imporve things. I read that the switch would auto-negotiate based on whatever rate I first connected to it with, so I reset the switch and tried connecting at <code>38400</code> since I’d seen that in some guides, but it was still basically the same. At least I learned the proper way to end a <code>screen</code> session with <code>ctrl+a</code> and then <code>k</code>.</p>
</section>
<section id="realize-i-can-telnet-in" class="level2">
<h2 class="anchored" data-anchor-id="realize-i-can-telnet-in">Realize I can telnet in</h2>
<p>Now that I have an IP address assigned, it looks like I can <code>telnet</code> in from pfsense with <code>telnet 192.168.10.2</code>. I’d still like to get the serial interface figured out as a fallback, but at least this lets me work through the menus while I’m figuring that out.</p>
<p>Just as a quick first test I see if I can ping out from the switch, and I cannot. I can ping my default gateway, but I can’t ping anything on the LAN or internet. That’s weird, but I’m coming back to that later, right now we’re getting the serial console working properly.</p>
<p>From the telnet session I run <code>show console</code> to get my serial config:</p>
<pre><code> Console/Serial Link

  Inbound Telnet Enabled [Yes] : Yes
  Web Agent Enabled [Yes] : Yes
  Terminal Type [VT100] : VT100
  Screen Refresh Interval (sec) [3] : 3
  Displayed Events [All] : All

  Baud Rate [Speed Sense] : speed-sense
  Flow Control [XON/XOFF] : XON/XOFF
  Session Inactivity Time (min) [0] : 0</code></pre>
</section>
<section id="try-with-hard-coded-baud-rates-and-putty-finally-figure-it-out-sort-of" class="level2">
<h2 class="anchored" data-anchor-id="try-with-hard-coded-baud-rates-and-putty-finally-figure-it-out-sort-of">Try with hard coded baud rates and putty, finally figure it out (sort of)</h2>
<p>Let’s try hard coding the baud rate to what I’m using. First I run <code>config</code> to get into config mode, then <code>console baud-rate 115200</code> to set the rate, then <code>write memory</code> to save the setting, and <code>reload</code> to reboot the switch. After giving it a minute to come back up I re-run my screen command. Still doesn’t work. I wonder if this is some weird quirk of trying to do things over ssh. Let’s connect my laptop directly and try it out. That will introduce the added factor of using putty into the mix, but oh well.</p>
<p>Working with putty seemed to work a bit better. I still ended up with blank screens but with a bit of fussing around I was able to get it started up again. I wonder if I just left it in a weird state before and if I can get back in cleanly remotely now.</p>
<p>Ok yeah, that seems to be it. I guess I’ll have to remember to leave the session in a clean state. Let’s see if I can quit out and come back in. I can, ok, must have just been something about the state I left it in. Back to actually setting up this switch.</p>
<p>Actually, one more thing. Let’s set the baud-rate back to auto. Again from the switch I run <code>config</code> to get into config mode, then <code>console baud-rate speed-sense</code> then <code>write memory</code> then <code>reload</code>. After rebooting the switch I reconnect with <code>sudo screen /dev/ttyUSB0</code> without specifying a speed. It auto connects at 9600 baud, which seems to work fine.</p>
</section>
</section>
<section id="set-up-routing" class="level1">
<h1>Set up routing</h1>
<p>Back to actually making this thing work for networking. I have an IP address for the switch, and I can reach that from my router, and I can reach the router from my switch, but I can’t get out to the internet or my other networks from the switch, or into the switch from my other networks. What gives?</p>
<p>As part of the test I decide to see if I can connect my NAS into this network on one of its other ports. I go in, give it a static IP on that port (since I haven’t enabled DHCP on this interface yet) and… get locked out of my NAS on the LAN interface. I’m able to confirm that I can ping the NAS from my switch now, but I’ve taken down my NAS from my main network, which is definitely not good. I’ll go unplug that cable and hope my NAS comes back. Oh good, it did. Still have to figure out what’s up with my routing though.</p>
<p>I guess this is a good point to do a manual backup of my pfsense setup. I should have backups going automatically, but this seems like a time to have a little extra insurance.</p>
<p>Oh wait, I think my LAN firewall rules only allow outgoing traffic from other networks. I probably have to add an allow rule to receive traffic from LabLAN. Nope, still can’t ping.</p>
<p>Just to restate where I’m at, from my LAN connected computer at <code>192.168.85.2</code> I can ping the <code>LabLAN</code> gateway at <code>192.168.10.1</code>, but not the switch at <code>192.168.10.2</code>. From the pfsense router I can ping the switch at <code>192.168.10.2</code> and from the switch I can ping the <code>LabLAN</code> gateway at <code>192.168.10.1</code> but not the <code>LAN</code> gateway at <code>192.168.85.1</code>. For the brief period when I had my NAS connected on that interface I could ping it from the switch, although that also messed up my connectivity on <code>LAN</code> for the NAS, so I turned that off while I’m testing.</p>
<p>After some poking around I decide to check the output of the <code>show ip</code> command on the switch:</p>
<pre><code>ProCurve Switch 2810-48G# show ip

 Internet (IP) Service


  Default Gateway :
  Default TTL     : 64
  Arp Age         : 20

  VLAN         | IP Config  IP Address      Subnet Mask     Proxy ARP
  ------------ + ---------- --------------- --------------- ---------
  DEFAULT_VLAN | Manual     192.168.10.2    255.255.255.0   No</code></pre>
<p>So I don’t have a default gateway set. That would do it. Looking back I didn’t write down anything about setting that. Oops.</p>
<p>I run setup again, I set the default gateway to <code>192.168.10.1</code> and everything works. I can see how I missed that now, the default gateway setting is well above where you set the IP of the switch. Well that was a waste of a fair bit of time.</p>
</section>
<section id="try-the-web-interface" class="level1">
<h1>Try the web interface</h1>
<p>I know all the hardcore network people use the shell, and maybe at some point I’ll do that too, but I’d at least like the option of a network interface. Let’s see if I can get my hands on that.</p>
<p>Opening up a browser and loading the IP of the switch I get:</p>
<p><code>This product requires the Java language, which is either disabled or not available on this browser.</code></p>
<p><code>To use this product you must either upgrade your browser to one that is Java compliant, or enable the Java language on your current browser.</code></p>
<p>From checking out <a href="https://community.spiceworks.com/topic/1146093-hp-procurve-java-application-blocked">this post</a> it seems like I’d have to have a very old browser to use this web interface. Fine, guess it’s menus and CLIs for me.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this post I demonstrated that I don’t really know a lot about networking and that this is going to be quite the learning experience. I also got the basic connectivity working on my managed switch. In the next post I’ll do some actual planning for my network and start configuring things and moving services over.</p>
</section>
<section id="new-switch" class="level1">
<h1>New switch</h1>
<p>I picked up another HP switch recently, a HP JG542A 5500-48G-PoE+. The nice thing about this compared to my earlier switch is the support for PoE+, which should mean I can take the PoE injectors out of my rack that I’m using for my access points, and support more devices later. It’s also got a couple SFP+ ports which might come in handy if I ever get cool enough to do fiber.</p>
<p>Of course new switch means new problems. The first issue was that somehow the bootloader on it had been corrupted. I’m guessing the techs who refurbished it went a little to hardcore doing factory resets. After a bunch of searching I determined that the resolution would be to flash a new firmware. Unfortunately, firmware for this switch is behind an HPE paywall. After a bunch of back and forth I managed to get ahold of HPE support, who advised me to use my corporate email to create an account, even though I very clearly told them this was purely for my home lab and not at all related to my employment. After creating an account with my work email (good thing I have one of those I guess) the support team went above and beyond and actually set up a zoom call with me where they helped me find the firmware and walked me through flashing it on my switch. I think I’d still have preferred that the firmware just be public, but that was a nice consolation.</p>
<p>After getting the switch flashed and confirming that I had connectivity, I had a new problem. The CLI for this switch appears to be different than my previous one. At a minimum I can’t seem to bring up a menu with the <code>menu</code> command. Let’s figure out how to give it an IP and configure it.</p>
<p>As part of the flashing, the HPE folks helped me set up an IP address for the switch, unfortunately I don’t remember what commands I used so for now I can’t change it. I also don’t have any remote configs enabled on that interface, so I can ping it through there but that’s about it.</p>
<p>Connecting over serial still works ok. I did the initial config with putty since it was easier, but now that the switch is down in my rack, I’m back to sshing into a server that has the console on a USB to serial connection and running <code>sudo screen /dev/ttyUSB0 9600</code> I have to connect at the slower rate on this switch, at least for now. Also, pro tip, <code>ctrl+backspace</code> is how you do backspace over serial.</p>
<p>From there at least I’m able to turn on the web interface with <code>system-view</code> followed by <code>ip http enable</code>. According to <a href="https://techexpert.tips/hp-switch/hp-switch-initial-configuration/">this page</a> I should be able to login with username <code>admin</code> and no password by default but that didn’t work. If I run <code>return</code> to get back from <code>system-view</code> and then <code>display web users</code> I get back an empty list. So I assume I have to create or update a user?</p>
<p>Let’s look at <a href="https://techhub.hpe.com/eginfolib/networking/docs/switches/5500hi/5998-5327_fund_cg/content/378579358.htm">the docs</a> according to this I have to:</p>
<ul>
<li>Assign an IP address to a Layer 3 interface.</li>
<li>Create a local user account.</li>
<li>Configure a local user account for Web login</li>
<li>Assign a user privilege level and the Web service to the account.</li>
</ul>
<p>First step is done.</p>
<p>Second step I accomplish with <code>system-view</code>, <code>local-user admin</code>, <code>password simple &lt;password&gt;</code> which I think has created a local user and given it a password.</p>
<p>Ok, having found the Fundamentals Configuration Guide, which is differen than the Fundamentals Command Reference (Why does HP split their docs into so many documents?) I think I have a better handle on how to do this.</p>
<p><code>system-view</code>, <code>local-user admin</code> <code>authorization-attribute level 3</code> (I think this is “manage”), <code>service-type web</code>. Weirdly this is referred to as a telnet service type, <code>quit</code>.</p>
<p>After putting that all in I try the login page and it works! Let’s hit save on the web interface before I do anything else so I don’t lose my progress.</p>
<p>As with the last switch, in theory I could get all fancy and learn the commands and automation for setting this up, but for now let’s just try and do things the GUI way. I’m not really trying to become a network wizard here (at least at this point) I just want a switch to work on my network.</p>
<p>I take a quick run through the wizard. It allows me to set the device name (I’ll stick with HP) as well as IP configuration. Right now it’s just using DHCP, which is fine with me at this point but I’ll have to reconfigure that once I actually swap it out with my main switch to a hard coded value.</p>
<p>Let’s walk through the rest of the menu items and see what I can find:</p>
<p>Under Device -&gt; System time I’m able to configure NTP and have the switch reflect the correct date and time, always handy.</p>
<p>Under port management I’ve got some handy status checks and also a place to add descriptions, which will come in handy later. I can also set default VLAN IDs for ports, but I haven’t created VLANs on this switch yet so that will have to wait.</p>
<p>Under Energy Saving I can disable PoE on ports or shut them down. I’ll want to come back to this later as well.</p>
<p>Under Network I can create VLANs so that’s an important piece for me.</p>
<p>I create my VLANs again and give them names in that section. After that I head to modify VLAN and assign port statuses to match my old switch.</p>
<p>Finally, I head down to PoE to turn on PoE just on the two ports that my access points will be connected to. No sense enabling it on anywhere else at this time.</p>
<p>I think that’s it for now, let’s save and see if I can make this work.</p>
<section id="failure" class="level2">
<h2 class="anchored" data-anchor-id="failure">Failure</h2>
<p>After all that I swapped over all the ports, took out my PoE injectors, fired everything up and couldn’t connect to anything wired or get power to my access points. I suppose I could keep hacking at this but we’ve gone well over the amount of effort I feel justified putting in to avoid having two PoE injectors in my rack so I’m going to give up. Fortunately the switch was fairly cheap.</p>


</section>
</section>

 ]]></description>
  <category>networking</category>
  <category>Linux</category>
  <guid>https://blog.ianpreston.ca/posts/2023-04-08-managed-switch.html</guid>
  <pubDate>Sat, 08 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Notes on Kubernetes the hard way</title>
  <link>https://blog.ianpreston.ca/posts/2023-02-24-k8s-the-hard-way.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this post I’ll be recording notes related to working through <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way">kubernetes the hard way</a> by Kelsey Hightower. I’ve gone through a few kubernetes tutorials before, and messed around with <a href="https://minikube.sigs.k8s.io/docs/">minikube</a> a bit, but that’s it. Before I try and get a “proper” k8s cluster going on my proxmox setup I’m going to try and work through this guide in the hope that it will improve my understanding of the setup.</p>
</section>
<section id="provisioning-compute" class="level1">
<h1>Provisioning compute</h1>
<p>All the terraform code for the provisioning can be found <a href="https://github.com/ianepreston/scratch/tree/main/k8s-the-hard-way/pve-terraform">here</a>.</p>
<p>Almost immediately I’m deviating from the guide because it expects me to deploy things in google cloud, and instead I’m going to do it on my local network. I don’t expect this to cause me a ton of problems, except I won’t have access to an external cloud load balancer, so I’ll have to figure something else out there. I’ll cross that bridge when I get to it.</p>
<p>Additionally, I also can’t provision the VMs the guide recommends using the gcs specific commands, instead I’ll use terraform to provision VMs from the templates I set up in <a href="../posts/2023-01-21-proxmox3.html">an earlier post</a>.</p>
<section id="sidebar-to-load-in-secrets" class="level2">
<h2 class="anchored" data-anchor-id="sidebar-to-load-in-secrets">Sidebar to load in secrets</h2>
<p>Terraform needs credentials to control my proxmox cluster, and I clearly don’t want to have those in git. In my earlier post I mentioned that I’d try using vault or bitwarden to manage secrets at some point. I’m going to save vault for now, but I have added the <a href="https://bitwarden.com/help/cli/">bitwarden cli</a> to my devcontainer, so I should be able to use it to securely retrieve credentials into a project. I created a secure note in bitwarden labeled <code>pve_terraform_cred</code>, now to load that into my workspace.</p>
<p>This actually turned out to be pretty straightforward, which was a nice surprise:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-f</span> pve_creds.env <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb1-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Credentials file doesn't already exist, loading from Bitwarden."</span></span>
<span id="cb1-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Logging into bitwarden"</span></span>
<span id="cb1-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bw</span> login</span>
<span id="cb1-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Getting the terraform creds"</span></span>
<span id="cb1-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bw</span> get notes pve_terraform_cred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> pve_creds.env</span>
<span id="cb1-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span></code></pre></div>
<p>Now when I start working in terraform I just have to run <code>source pve_creds.env</code> in my terminal to have the environment variables for my username and password available. I spent a bit of time trying to get the script itself to set the environment variables, but child processes can’t modify the environment of their parents so I’m stuck there.</p>
</section>
<section id="basic-setup" class="level2">
<h2 class="anchored" data-anchor-id="basic-setup">Basic setup</h2>
<p>I covered this in the templates post, but briefly let’s go over setting up the provider and a connection to my cluster. In my <code>main.tf</code> file I have the following code:</p>
<pre class="tf"><code>terraform {
  required_providers {
    proxmox = {
      source  = "telmate/proxmox"
      version = "2.9.11"
    }
  }
}
provider "proxmox" {
  pm_tls_insecure = true
  pm_api_url      = "https://pve1.local.ipreston.net:8006/api2/json"
}</code></pre>
<p>And that’s it for setting up the connection. I have environment variables set by my script above with the username and password to my cluster so I don’t need to provide anything in the code. A quick <code>terraform init</code> followed by <code>terraform plan</code> shows that I’m all set up.</p>
</section>
<section id="provision-vms" class="level2">
<h2 class="anchored" data-anchor-id="provision-vms">Provision VMs</h2>
<p>To follow the guide I will need to create a total of 6 VMs, 3 each of controllers and workers. The configuration of all of these nodes should be largely identical, with the exception of hostname, IP address, and which proxmox node they’re loaded on. The most straightforward way to do this in terraform would be to just set up one VM, and then copy-paste its config 5 more times with slight modifications. I could do a slightly fancier version with <a href="https://developer.hashicorp.com/terraform/language/meta-arguments/for_each">for each loops</a>, but that will still have a lot of common config mixed in with the parts that are looping and will be tricky to read and update. It’s a bit overkill for something like this, but the point here is learning so I’m going to create a <a href="https://developer.hashicorp.com/terraform/tutorials/modules/module-create">module</a> that hard codes all the common aspects of the VMs I’m going to create and only leaves the parts that will change across nodes and controlllers/workers as variables.</p>
<section id="create-a-module" class="level3">
<h3 class="anchored" data-anchor-id="create-a-module">Create a module</h3>
<p>In the terraform folder I’ll make a <code>modules/ubuntu-vm</code> subdirectory and in that I’ll place two files. First we have <code>variables.tf</code>:</p>
<pre class="tf"><code>variable "node" {
  description = "Proxmox node number to deploy to"
  type        = number
}

variable "type" {
  description = "A controller or worker node"
  type        = string
}

variable "ip" {
  description = "The static IP for the VM"
  type        = string
}</code></pre>
<p>This is just defining the variables that I’ll need to pass into this module to create a resource. As described above, I want everything else about these nodes to be the same, so this is all I need for variables.</p>
<p>Then I have a <code>main.tf</code>:</p>
<pre class="tf"><code>terraform {
  required_providers {
    proxmox = {
      source  = "telmate/proxmox"
      version = "2.9.11"
    }
  }
}

resource "proxmox_vm_qemu" "ubuntu-vm" {
  name        = "ubuntu-${var.type}-${var.node}"
  target_node = "pve${var.node}"
  onboot      = true
  oncreate    = true
  clone       = "ubuntujammytemplate"
  full_clone  = true
  agent       = 1
  os_type     = "cloud-init"
  cores       = 4
  cpu         = "host"
  memory      = 8192
  bootdisk    = "scsi0"
  disk {
    slot     = 0
    size     = "100G"
    type     = "scsi"
    storage  = "local-zfs"
    iothread = 1
  }
  network {
    model  = "virtio"
    bridge = "vmbr0"
  }
  ipconfig0 = "ip=${var.ip}/24,gw=192.168.85.1"
}</code></pre>
<p>Having to put the required provider up here was a little confusing at first, since I had it defined in the base terraform module, but after some errors and troubleshooting I learned that I have to specify the required provider in every module that uses it. Note that I don’t have the <code>provider</code> block that explicitly points to the actual proxmox instance I want to apply this to, that only lives in the base module. The rest of this block is a standard <a href="https://registry.terraform.io/providers/Telmate/proxmox/latest/docs/resources/vm_qemu">terraform proxmox VM</a> resource where I’ve hard coded in all the parameters I want to be consistent across nodes, and plugged in variables for the parts that are going to change.</p>
</section>
<section id="fun-with-loops" class="level3">
<h3 class="anchored" data-anchor-id="fun-with-loops">Fun with loops</h3>
<p>The other tricky part of this is that I would really like to do nested for each loops, which I guess isn’t a native concept in terraform. In python to create the map of values that I want I’d do something like:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">vms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-2">    {</span>
<span id="cb5-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nodetype"</span>: nodetype,</span>
<span id="cb5-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pvenode"</span>: i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vm_ip"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"192.168.85.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> base_octet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-6">    }</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> nodetype, base_octet <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]</span>
<span id="cb5-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb5-9">]</span></code></pre></div>
<p>I can’t nest a for each in terraform, so I have to do some nested for loops in variables to create a map that I can then use for each on. <a href="https://faultbucket.ca/2020/09/terraform-nested-for_each-example/">This blog</a> has basically the same issue so I should be able to follow its logic to produce what I want. After some fiddling around I get the following:</p>
<pre class="tf"><code>locals {
  nodetypes = {
    "controller" = 0
    "worker"     = 3
  }
  vm_attrs_list = flatten([
    for nodetype, baseoctet in local.nodetypes : [
      for i in range(3) : {
        name = "${nodetype}${i}"
        node = "${i + 1}",
        type = "${nodetype}",
        ip   = "192.168.85.${70 + baseoctet + i}"
      }
    ]
  ])
  vm_attrs_map = {
    for obj in local.vm_attrs_list : "${obj.name}" =&gt; obj
  }

}</code></pre>
<p>Which is certainly a lot more verbose than python, but whatever. I can check it out before trying to apply it to a resource by using <code>terraform console</code>:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> terraform console</span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> local.vm_attrs_map</span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller0"</span> = {</span>
<span id="cb7-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.70"</span></span>
<span id="cb7-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller0"</span></span>
<span id="cb7-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node"</span> = 1</span>
<span id="cb7-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller"</span></span>
<span id="cb7-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller1"</span> = {</span>
<span id="cb7-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.71"</span></span>
<span id="cb7-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller1"</span></span>
<span id="cb7-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node"</span> = 2</span>
<span id="cb7-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller"</span></span>
<span id="cb7-15">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-16">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller2"</span> = {</span>
<span id="cb7-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.72"</span></span>
<span id="cb7-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller2"</span></span>
<span id="cb7-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node"</span> = 3</span>
<span id="cb7-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"controller"</span></span>
<span id="cb7-21">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-22">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker0"</span> = {</span>
<span id="cb7-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.73"</span></span>
<span id="cb7-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker0"</span></span>
<span id="cb7-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node"</span> = 1</span>
<span id="cb7-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker"</span></span>
<span id="cb7-27">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-28">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker1"</span> = {</span>
<span id="cb7-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.74"</span></span>
<span id="cb7-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker1"</span></span>
<span id="cb7-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node"</span> = 2</span>
<span id="cb7-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker"</span></span>
<span id="cb7-33">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-34">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker2"</span> = {</span>
<span id="cb7-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.75"</span></span>
<span id="cb7-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker2"</span></span>
<span id="cb7-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node"</span> = 3</span>
<span id="cb7-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker"</span></span>
<span id="cb7-39">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-40"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
<section id="put-it-all-together" class="level2">
<h2 class="anchored" data-anchor-id="put-it-all-together">Put it all together</h2>
<p>Now that I’ve got my module created and my map to loop over I can finish up in <code>main.tf</code> in the root of this project:</p>
<pre class="tf"><code>module "ubuntu_vm" {
  source   = "./modules/ubuntu-vm"
  for_each = local.vm_attrs_map
  node     = each.value.node
  type     = each.value.type
  ip       = each.value.ip
}</code></pre>
<p>Nice and easy! I run <code>terraform init</code> again so that the module I created is loaded, then <code>terraform plan</code> to make sure I’m actually getting the 6 nodes I expect. Everything looks good so I run <code>terraform apply</code>… and wait an hour and a half for it to not actually deploy any nodes. When I initially tested terraform back when I was doing templates I did notice that it took a lot longer to deploy via terraform than via the menu, but that was minutes, not hours. Time to figure out what’s going on here.</p>
<p>As a fun aside to remember for later, as part of troubleshooting I tried updating the proxmox provider from the <code>2.9.11</code> version I was using to the <code>2.9.13</code> release and it just straight up doesn’t work. Everything installs ok but then I get:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> terraform plan</span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">╷</span></span>
<span id="cb9-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span> Error: Plugin did not respond</span>
<span id="cb9-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span> </span>
<span id="cb9-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   with provider<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"registry.terraform.io/telmate/proxmox"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>,</span>
<span id="cb9-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   on main.tf line 9, in provider <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"proxmox"</span>:</span>
<span id="cb9-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>    9: provider <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"proxmox"</span> {</span>
<span id="cb9-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span> </span>
<span id="cb9-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span> The plugin encountered an error, and failed to respond to the plugin.<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*GRPCProvider</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.ConfigureProvider</span> call. The plugin</span>
<span id="cb9-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span> logs may contain more details.</span>
<span id="cb9-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">╵</span></span></code></pre></div>
<p>When I revert back to the old release I can at least run <code>terraform plan</code>. There are quite a few threads about how the proxmox provider for terraform is kind of buggy and I’m starting to wonder if ansible would be a better way to go. I like the ability of terraform to tear down infrastructure with <code>terraform destroy</code> but I’m not sure it’s worth all this other hassle. I’ll keep messing with it for a bit though.</p>
<p>I found an <a href="https://github.com/Telmate/terraform-provider-proxmox/issues/325">open issue</a> on the proxmox terraform provider about slow provisioning. There’s also <a href="https://github.com/Telmate/terraform-provider-proxmox/issues/705">this one</a> about issues deploying multiple VMs. Both are still open but there were some suggested config changes, along with a recommendation to run in debug. Let’s try that with <code>TF_LOG=DEBUG terraform apply --auto-approve</code>. This dumped a giant stream of output, most of which I will not reproduce. One thing that caught my eye was that it couldn’t find the template VM I wanted to use. Looking back at my code I realized that I had missed the dashes in the template name. That’s definitely on me, although I’m going to put some blame on the provider for just hanging forever instead of returning an error.</p>
<p>After fixing the template the playbook applied and I had 6 VMs up and running, two on each node. It took a couple minutes to apply, but that’s not bad at all. Problem solved?</p>
<p>Almost. The newly deployed VMs are up and running, and I can ssh into them at their IPs, but they don’t have qemu guest agents running so I can’t see their IPs from the proxmox UI, or load up a terminal session from there. This isn’t the end of the world, but I’d like to fix it if I can. I think the problem is that I had <code>agent</code> turned off in the proxmox config as part of troubleshooting the slow deploy. Let’s see if I can fix that. This will also give me a chance to confirm that <code>terraform destroy</code> works. The destroy worked no problem. Setting <code>agent = 1</code> back in the template config worked fine in terms of creating the VM (no slowdown in deploy), but I still couldn’t load them from the proxmox UI. I created a manual clone of the same template to see if I could figure out the issue there. This one did show me the configured IP, but still wouldn’t let me open a console. After some more troubleshooting I realized this was because <a href="https://github.com/ianepreston/recipes/commit/a98994320b20d00e4b702aaf7aa9b3357039a07b#diff-8ea9f6ece084ec63cd3ec7c27a9cc2b4d1638be05824823990187a97dad99767">some changes</a> I’d made to my proxmox ssh host keys were blocking me from bringing up terminal sessions on any hosts other than the one I was connecting to the UI through. Again, that’s totally my bad, although I could have gone for some better error messages.</p>
</section>
</section>
<section id="generating-config" class="level1">
<h1>Generating config</h1>
<p>All the ansible playbooks and configs for the sections below can be found <a href="https://github.com/ianepreston/scratch/tree/main/k8s-the-hard-way/ansible">here</a>.</p>
<section id="provisioning-a-ca-and-generating-tls-certificates" class="level2">
<h2 class="anchored" data-anchor-id="provisioning-a-ca-and-generating-tls-certificates">Provisioning a CA and Generating TLS certificates</h2>
<p><a href="https://github.com/ianepreston/scratch/blob/main/k8s-the-hard-way/ansible/01_ca_certs.yml">Ansible playbook</a></p>
<p>On to <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/04-certificate-authority.md">chapter 4</a> in the guide!</p>
<p>I have to do some minor modification of the scripts outlined in the doc since I’m not using GCP. I think for these future configs I’m going to use ansible, since that’s how I’d like to actually manage hosts in the future.</p>
<p>The first big headache I ran into was getting <code>cfssl</code> installed to generate the certs. It didn’t have a <code>.deb</code> available that I could find so I had to install <code>go</code> and then install the package there, as well as figuring out how to make the path to the binary it installed available to my user (learned a couple things about <code>GOPATH</code> in the process).</p>
<p>Other than that creating all the keys and copying them onto the hosts was pretty straightforward ansible. I’ll have to wait until later to see if anything broke, but for now it seems good.</p>
</section>
<section id="generating-kubernetes-configuration-files-for-authentication" class="level2">
<h2 class="anchored" data-anchor-id="generating-kubernetes-configuration-files-for-authentication">Generating Kubernetes configuration files for authentication</h2>
<p><a href="https://github.com/ianepreston/scratch/blob/main/k8s-the-hard-way/ansible/02_kube_config.yml">Ansible playbook</a></p>
<p>On to the next thing! This section uses <code>kubectl</code>, which I fortunately already have available in my devcontainer, so no config required there. I’ll keep going with my pattern of using ansible to manage the scripting. No issues with any of these steps, at least not at this point. I might have to come back to some of it for troubleshooting.</p>
</section>
<section id="generating-the-data-encryption-config-and-key" class="level2">
<h2 class="anchored" data-anchor-id="generating-the-data-encryption-config-and-key">Generating the data encryption config and key</h2>
<p><a href="https://github.com/ianepreston/scratch/blob/main/k8s-the-hard-way/ansible/03_encryption.yml">Ansible playbook</a></p>
<p>Same as the above. I did a slightly different workflow for the ansible playbook. Since this called for generating a random number as part of the config, rather than doing something fancy like registering the output of a command to generate the random number and then inserting that into a template I just wrapped the whole thing in a shell command.</p>
</section>
</section>
<section id="bootstrap-the-etcd-cluster" class="level1">
<h1>Bootstrap the etcd cluster</h1>
<p><a href="https://github.com/ianepreston/scratch/blob/main/k8s-the-hard-way/ansible/04_bootstrap_etcd.yml">Ansible playbook</a></p>
<p>On to <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/07-bootstrapping-etcd.md">chapter 7</a> Now we’re getting into interesting stuff where I’m actually starting services on the nodes. The instructions for this part are fairly imperative so I’ll actually have to do some modification to make them work properly with ansible, for instance using <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/get_url_module.html">get_url</a> instead of invoking <code>wget</code> to grab the <code>etcd</code> binary. Actually upon further reading I can just use the <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/unarchive_module.html">unarchive</a> module to download and extract the archive, neat!</p>
<p>This all seemed to be going well until I actually had to start the etcd service and hit an error:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> systemctl status etcd.service</span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">●</span> etcd.service <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> etcd</span>
<span id="cb10-3">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded:</span> loaded <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/etc/systemd/system/etcd.service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vendor</span> preset: enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-4">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Active:</span> activating <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">auto-restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Result:</span> exit-code<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">since</span> Sat 2023-03-04 23:55:47 UTC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3s</span> ago</span>
<span id="cb10-5">       <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Docs:</span> https://github.com/coreos</span>
<span id="cb10-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Process:</span> 13038 ExecStart=/usr/local/bin/etcd <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\ </span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>203/EXEC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-7">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Main</span> PID: 13038 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>203/EXEC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-8">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CPU:</span> 1ms</span></code></pre></div>
<p>Ok, looks like when I copied the <code>etcd</code> binaries into <code>/usr/local/bin</code> they lost their execute permission. Adding <code>mode: '0700'</code> to the copy task in ansible seems to fix that, but now I have a new failure:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> systemctl status etcd.service</span>
<span id="cb11-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">●</span> etcd.service <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> etcd</span>
<span id="cb11-3">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded:</span> loaded <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/etc/systemd/system/etcd.service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vendor</span> preset: enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-4">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Active:</span> activating <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">auto-restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Result:</span> exit-code<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">since</span> Sun 2023-03-05 00:00:09 UTC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3s</span> ago</span>
<span id="cb11-5">       <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Docs:</span> https://github.com/coreos</span>
<span id="cb11-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Process:</span> 13571 ExecStart=/usr/local/bin/etcd <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\ </span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1/FAILURE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-7">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Main</span> PID: 13571 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1/FAILURE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-8">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CPU:</span> 13ms</span></code></pre></div>
<p>Running <code>journalctl -xeu etcd.service</code> I think the pertinent line is:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:02:26 ubuntu-controller-1 etcd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">13841</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: error verifying flags, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'\'</span> is not a valid flag. See <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'etcd --help'</span>.</span></code></pre></div>
<p>I’m able to run the <code>etcd</code> binary manually, so my best guess is something in my service definition is wrong.</p>
<p>Two problems came up after looking at the output of the template. First I had to change my variable to get the host IP address from <code>{{ ansible_default_ipv4 }}</code> to <code>{{ ansible_default_ipv4.address }}</code> to just get the IP address instead of a big dictionary of everything about the network connection. Next I think the code I copied from the guide had <code>\\</code> after every line break to escape the <code>\</code> character because it was being piped through <code>tee</code> in the example. Since I’m not doing that I swapped to just a <code>\</code>.</p>
<p>This seems to have cleaned up the service definition, but I’m still having a failure.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> systemctl status etcd.service</span>
<span id="cb13-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">●</span> etcd.service <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> etcd</span>
<span id="cb13-3">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded:</span> loaded <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/etc/systemd/system/etcd.service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vendor</span> preset: enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-4">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Active:</span> activating <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">auto-restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Result:</span> exit-code<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">since</span> Sun 2023-03-05 00:14:59 UTC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1s</span> ago</span>
<span id="cb13-5">       <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Docs:</span> https://github.com/coreos</span>
<span id="cb13-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Process:</span> 15563 ExecStart=/usr/local/bin/etcd <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> ubuntu-controller-1 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cert-file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/etc/etcd/kuber<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb13-7">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Main</span> PID: 15563 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1/FAILURE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-8">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CPU:</span> 15ms</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:14:59 ubuntu-controller-1 systemd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: etcd.service: Failed with result <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exit-code'</span>.</span>
<span id="cb13-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:14:59 ubuntu-controller-1 systemd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: Failed to start etcd.</span></code></pre></div>
<p>Looking at journalctl again it looks like my error is <code>Mar 05 00:15:09 ubuntu-controller-1 etcd[15585]: couldn't find local name "ubuntu-controller-1" in the initial cluster configuration</code>. Right, that’s because I didn’t update that part of the template from the hostnames used in the guide to the hostnames I gave my controllers. One more try.</p>
<p>Alright, now the service is started. Running the confirmation command from the guide I get an output that looks good:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> sudo ETCDCTL_API=3 etcdctl member list <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb14-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--endpoints</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://127.0.0.1:2379 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\c</span>d-v3.4.15-linux-amd64$</span>
<span id="cb14-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--cacert=/etc/etcd/ca.pem</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\~</span>/etcd/etcd-v3.4.15-linux-amd64$</span>
<span id="cb14-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--cert=/etc/etcd/kubernetes.pem</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb14-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--key</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/etc/etcd/kubernetes-key.pem</span>
<span id="cb14-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">7dceec040adbf023,</span> started, ubuntu-controller-2, https://192.168.85.71:2380, , false</span>
<span id="cb14-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ab94230b177e1d5c,</span> started, ubuntu-controller-1, https://192.168.85.70:2380, https://192.168.85.70:2379, false</span>
<span id="cb14-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">e88d02db26fab5bc,</span> started, ubuntu-controller-3, https://192.168.85.72:2380, https://192.168.85.72:2379, false</span></code></pre></div>
<p>I’m getting some concerning errors in the service status though:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> systemctl status etcd.service</span>
<span id="cb15-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">●</span> etcd.service <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> etcd</span>
<span id="cb15-3">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded:</span> loaded <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/etc/systemd/system/etcd.service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vendor</span> preset: enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-4">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Active:</span> active <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">running</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">since</span> Sun 2023-03-05 00:18:35 UTC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3min</span> 29s ago</span>
<span id="cb15-5">       <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Docs:</span> https://github.com/coreos</span>
<span id="cb15-6">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Main</span> PID: 16361 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">etcd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-7">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Tasks:</span> 14 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">limit:</span> 9492<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-8">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Memory:</span> 37.6M</span>
<span id="cb15-9">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CPU:</span> 33.018s</span>
<span id="cb15-10">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CGroup:</span> /system.slice/etcd.service</span>
<span id="cb15-11">             <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└─16361</span> /usr/local/bin/etcd <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> ubuntu-controller-1 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cert-file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/etc/etcd/kubernetes.pem <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--key-file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/etc/etcd/kubernetes-key.pem <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--peer-cert-file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/etc/etcd/kubernetes.pem <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--peer-key-file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/etc/etcd/kubernetes-key.pem <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--trusted-ca-file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:22:04 ubuntu-controller-1 etcd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">16361</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: rejected connection from <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.71:37770"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">error</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tls: </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">192.168.85.71</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not match any of DNSNames [</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc.cl&gt;</span></span>
<span id="cb15-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Mar 05 00:22:04 ubuntu-controller-1 etcd[16361]: rejected connection from "</span>192.168.85.71:37780<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" (error "</span>tls: <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>192.168.85.71<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> does not match any of DNSNames [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc.cl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:22:05 ubuntu-controller-1 etcd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">16361</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: rejected connection from <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.71:37790"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">error</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tls: </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">192.168.85.71</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not match any of DNSNames [</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc.cl&gt;</span></span>
<span id="cb15-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Mar 05 00:22:05 ubuntu-controller-1 etcd[16361]: rejected connection from "</span>192.168.85.71:37796<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" (error "</span>tls: <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>192.168.85.71<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> does not match any of DNSNames [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc.cl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:22:05 ubuntu-controller-1 etcd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">16361</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: health check for peer 7dceec040adbf023 could not connect: x509: certificate is valid for 192.168.85.70, 192.168.86.71, 192.168.85.72, 127.0.0.1, not 192.168.85.71</span>
<span id="cb15-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:22:05 ubuntu-controller-1 etcd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">16361</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: health check for peer 7dceec040adbf023 could not connect: x509: certificate is valid for 192.168.85.70, 192.168.86.71, 192.168.85.72, 127.0.0.1, not 192.168.85.71</span>
<span id="cb15-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:22:05 ubuntu-controller-1 etcd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">16361</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: rejected connection from <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.71:37806"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">error</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tls: </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">192.168.85.71</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not match any of DNSNames [</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc.cl&gt;</span></span>
<span id="cb15-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Mar 05 00:22:05 ubuntu-controller-1 etcd[16361]: rejected connection from "</span>192.168.85.71:37818<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" (error "</span>tls: <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>192.168.85.71<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> does not match any of DNSNames [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc.cl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 05 00:22:05 ubuntu-controller-1 etcd<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">16361</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: rejected connection from <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.85.71:37828"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">error</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tls: </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">192.168.85.71</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not match any of DNSNames [</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kubernetes.default.svc.cl&gt;</span></span>
<span id="cb15-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Mar 05 00:22:05 ubuntu-controller-1 etcd[16361]: rejected connection from "</span>192.168.85.71:37832<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" (error "</span>tls: <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>192.168.85.71<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> does not match any of DNSNames [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>kubernetes.default.svc.cl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Right, right, that’s because I had a typo in the cert generation where I put <code>192.168.86.71</code> instead of <code>192.168.85.71</code>. Ok, fine. Fix that and try again.</p>
<p>Looks like it works! The service is up and running, the status is not beset with errors about not being able to talk. I think I’m good!</p>
</section>
<section id="bootstrap-the-kubernetes-control-plane" class="level1">
<h1>Bootstrap the kubernetes control plane</h1>
<p><a href="https://github.com/ianepreston/scratch/blob/main/k8s-the-hard-way/ansible/05_bootstrap_control_plane.yml">Ansible playbook</a></p>
<p>A lot of the activity in this section is similar to bootstrapping the etcd cluster from an ansible perspective. Download some files, copy some others over into various locations, start up some systemd units and off you go. I had very few issues getting this initially set up, except that I realized I’d missed copying over one config file in the CA certs section so I had to go back and update that playbook to fix that issue.</p>
<p>When it came time to verify the cluster status though I ran into an issue:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> sudo kubectl cluster-info <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--kubeconfig</span> admin.kubeconfig</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">To</span> further debug and diagnose cluster problems, use <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kubectl cluster-info dump'</span>.</span>
<span id="cb16-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">The</span> connection to the server 127.0.0.1:6443 was refused <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> did you specify the right host or port<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span></code></pre></div>
<p>So now we’re in troubleshooting mode. First up, let’s check the status of the services I just started:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> systemctl status kube-apiserver</span>
<span id="cb17-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">●</span> kube-apiserver.service <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> Kubernetes API Server</span>
<span id="cb17-3">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded:</span> loaded <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/etc/systemd/system/kube-apiserver.service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vendor</span> preset: enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-4">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Active:</span> activating <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">auto-restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Result:</span> exit-code<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">since</span> Sun 2023-03-12 22:17:56 UTC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2s</span> ago</span>
<span id="cb17-5">       <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Docs:</span> https://github.com/kubernetes/kubernetes</span>
<span id="cb17-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Process:</span> 19077 ExecStart=/usr/local/bin/kube-apiserver <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\ </span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1/FAILURE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-7">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Main</span> PID: 19077 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1/FAILURE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-8">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CPU:</span> 83ms</span></code></pre></div>
<p>ok, not off to a great start.</p>
<p>Back to my old friend <code>journalctl -xeu kube-apiserver</code>:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mar</span> 12 22:19:04 ubuntu-controller-1 kube-apiserver<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">19370</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: Error: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kube-apiserver"</span> does not take any arguments, got <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>Oh right, this is that problem with templates again compared to how the GitHub page wants me to <code>cat</code> this stuff in.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> sudo kubectl cluster-info <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--kubeconfig</span> admin.kubeconfig</span>
<span id="cb19-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Kubernetes</span> control plane is running at https://127.0.0.1:6443</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">To</span> further debug and diagnose cluster problems, use <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kubectl cluster-info dump'</span>.</span></code></pre></div>
<p>Alright! At least that was an easy fix. Should have remembered it from last time, but oh well.</p>
<p>This section has some instructions for setting up a proxy to handle health checks from the load balancer, but I don’t have a load balancer at this point, so I’m going to skip it. I’ll have to figure out how to set all that up when I’m doing a proper cluster, but this is just for learning so I’ll skip it.</p>
<section id="rbac-for-the-kubelet-authorization" class="level2">
<h2 class="anchored" data-anchor-id="rbac-for-the-kubelet-authorization">RBAC for the kubelet authorization</h2>
<p>These commands I only have to run on one node, and I’m not sure how to easily make them idempotent with ansible. They’re making changes on my cluster, not creating files (at least that I know of), so I don’t know how to tell ansible not to re-run the commands. In theory running them multiple times shouldn’t really matter, so I’ll just do it manually anyway.</p>
</section>
<section id="front-end-load-balancer" class="level2">
<h2 class="anchored" data-anchor-id="front-end-load-balancer">Front end load balancer</h2>
<p>Again, I don’t actually have a load balancer (maybe that will be what I do in my next post). So I’ll skip this part.</p>
</section>
</section>
<section id="bootstrapping-the-kubernetes-worker-nodes" class="level1">
<h1>Bootstrapping the kubernetes worker nodes</h1>
<p><a href="https://github.com/ianepreston/scratch/blob/main/k8s-the-hard-way/ansible/06_bootstrap_workers.yml">Ansible playbook</a></p>
<p>This is the last major step in having a working cluster as far as I can tell. The first step is installing some system dependencies, which is no problem. The next step is making sure swap is off. I started looking into idempotent ways to ensure this wasn’t turned on, then decided to just check if it was in my VMs to begin with. Turns out I didn’t set them up with swap to begin with so I can just skip that part.</p>
<p>Next I’ve got a bunch of binaries to install. Some of them are gzipped tar files and some are straight binaries. In both cases I can refer back to what I did for setting up the controllers and etcd to build the playbook. All of this actually went quite smoothly. At the end of running the playbook it looks like I have three worker nodes in my cluster!</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> sudo kubectl get nodes <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--kubeconfig</span> admin.kubeconfig</span>
<span id="cb20-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NAME</span>              STATUS   ROLES    AGE     VERSION</span>
<span id="cb20-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ubuntu-worker-1</span>   Ready    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>none<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>   2m35s   v1.21.0</span>
<span id="cb20-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ubuntu-worker-2</span>   Ready    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>none<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>   2m35s   v1.21.0</span>
<span id="cb20-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ubuntu-worker-3</span>   Ready    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>none<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>   2m35s   v1.21.0</span></code></pre></div>
</section>
<section id="configuring-kubectl-for-remote-access" class="level1">
<h1>Configuring kubectl for remote access</h1>
<p>Let’s try this on my devcontainer. Again, I should be pointing at a load balancer, but I don’t have one, so I’m not. From the <code>workspace_ansible</code> folder within my devcontainer that has all my credentials saved I run the commands in <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/10-configuring-kubectl.md">the guide</a></p>
<p>After setting the context I run <code>kubectl version</code> and get:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl version <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--output</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>json</span>
<span id="cb21-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clientVersion"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb21-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>,</span>
<span id="cb21-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"26"</span>,</span>
<span id="cb21-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gitVersion"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v1.26.1"</span>,</span>
<span id="cb21-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gitCommit"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"8f94681cd294aa8cfd3407b8191f6c70214973a4"</span>,</span>
<span id="cb21-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gitTreeState"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clean"</span>,</span>
<span id="cb21-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"buildDate"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-18T15:58:16Z"</span>,</span>
<span id="cb21-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"goVersion"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"go1.19.5"</span>,</span>
<span id="cb21-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"compiler"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gc"</span>,</span>
<span id="cb21-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"platform"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linux/amd64"</span></span>
<span id="cb21-13">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb21-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kustomizeVersion"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v4.5.7"</span>,</span>
<span id="cb21-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"serverVersion"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb21-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>,</span>
<span id="cb21-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"21"</span>,</span>
<span id="cb21-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gitVersion"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v1.21.0"</span>,</span>
<span id="cb21-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gitCommit"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cb303e613a121a29364f75cc67d3d580833a7479"</span>,</span>
<span id="cb21-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gitTreeState"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clean"</span>,</span>
<span id="cb21-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"buildDate"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2021-04-08T16:25:06Z"</span>,</span>
<span id="cb21-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"goVersion"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"go1.16.1"</span>,</span>
<span id="cb21-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"compiler"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gc"</span>,</span>
<span id="cb21-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"platform"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linux/amd64"</span></span>
<span id="cb21-25">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-26"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">WARNING:</span> version difference between client <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1.26</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">and</span> server <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1.21</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">exceeds</span> the supported minor version skew of +/-1</span></code></pre></div>
<p>Most of this looks fine, the version skew is because I’m using old kubernetes based on the static guide on my server.</p>
<p><code>kubectl get nodes</code> returns my three worker nodes, so I’m set!</p>
</section>
<section id="provisioning-pod-network-routes" class="level1">
<h1>Provisioning pod network routes</h1>
<p>This appears to only matter if I’m in the cloud. I’m going to skip it.</p>
</section>
<section id="deploying-the-dns-cluster-add-on" class="level1">
<h1>Deploying the DNS cluster add-on</h1>
<p>I’m sure there are more DevOpsy ways to do these kubectl commands, with or without ansible, but I don’t feel like learning them as part of this exercise, so I’m just going to run these commands from my devcontainer and see how it goes:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> https://storage.googleapis.com/kubernetes-the-hard-way/coredns-1.8.yaml</span>
<span id="cb22-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">serviceaccount/coredns</span> created</span>
<span id="cb22-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clusterrole.rbac.authorization.k8s.io/system:coredns</span> created</span>
<span id="cb22-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clusterrolebinding.rbac.authorization.k8s.io/system:coredns</span> created</span>
<span id="cb22-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configmap/coredns</span> created</span>
<span id="cb22-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">deployment.apps/coredns</span> created</span>
<span id="cb22-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">The</span> Service <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kube-dns"</span> is invalid: spec.clusterIPs: Invalid value: []string{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10.32.0.10"</span>}: failed to allocated ip:10.32.0.10 with error:provided IP is not in the valid range. The range of valid IPs is 192.168.85.0/24</span></code></pre></div>
<p>Right out the gate I get an error. Nice. I guess I’ll download and then modify this file. After downloading and modifying the IP to point to my cluster it seems to work:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> coredns-1.8.yaml </span>
<span id="cb23-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">serviceaccount/coredns</span> unchanged</span>
<span id="cb23-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clusterrole.rbac.authorization.k8s.io/system:coredns</span> unchanged</span>
<span id="cb23-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">clusterrolebinding.rbac.authorization.k8s.io/system:coredns</span> unchanged</span>
<span id="cb23-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configmap/coredns</span> unchanged</span>
<span id="cb23-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">deployment.apps/coredns</span> unchanged</span>
<span id="cb23-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">service/kube-dns</span> created</span></code></pre></div>
<p>Except maybe it didn’t?</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get pods <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> k8s-app=kube-dns <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> kube-system</span>
<span id="cb24-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">No</span> resources found in kube-system namespace.</span></code></pre></div>
<p>Jumping ahead let’s try and deploy the <code>busybox</code> pod just to see if I can get anything running:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl run busybox <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--image</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>busybox:1.28 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--command</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--</span> sleep 3600</span>
<span id="cb25-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error</span> from server <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Forbidden</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> pods <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"busybox"</span> is forbidden: error looking up service account default/default: serviceaccount <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default"</span> not found</span></code></pre></div>
<p>Ok, do I have any service accounts?</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb26-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get serviceAccounts</span>
<span id="cb26-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">No</span> resources found in default namespace</span></code></pre></div>
<p>Guess not. What step did I miss? From <a href="https://stackoverflow.com/questions/33528398/why-dont-i-have-a-default-serviceaccount-on-kubernetes">this post</a> I should get this from the <code>kube-controller-manager</code> binary. Looking back I can see that I did at least attemp to install that program and set up a service for it. Let’s see check its status on one of my controller nodes:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ipreston@ubuntu-controller-1:~$</span> systemctl status kube-controller-manager</span>
<span id="cb27-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">●</span> kube-controller-manager.service <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> Kubernetes Controller Manager</span>
<span id="cb27-3">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded:</span> loaded <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/etc/systemd/system/kube-controller-manager.service</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vendor</span> preset: enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb27-4">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Active:</span> activating <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">auto-restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Result:</span> exit-code<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">since</span> Fri 2023-03-17 17:20:35 UTC<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">127ms</span> ago</span>
<span id="cb27-5">       <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Docs:</span> https://github.com/kubernetes/kubernetes</span>
<span id="cb27-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Process:</span> 589315 ExecStart=/usr/local/bin/kube-controller-manager <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--bind-address</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>0.0.0.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cluster-cidr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>192.168.85.0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb27-7">   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Main</span> PID: 589315 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exited, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1/FAILURE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb27-8">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CPU:</span> 651ms</span></code></pre></div>
<p>Cool, that would explain it. Looking through <code>journalctl -xeu kube-controller-manager</code> I see <code>/var/lib/kubernetes/kube-controller-manager.kubeconfig: no such file or directory</code>. Let’s see where I was supposed to generate that and figure out what went wrong. Going back into my code I see I generated the file but didn’t copy it into <code>/var/lib/kubernetes</code> in my control plane playbook when I copied the rest of the configs in. Let’s try again.</p>
<p>Ok, after re-running the playbook with that file added the service is up and running.</p>
<p>Let’s try that command again.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get serviceAccounts</span>
<span id="cb28-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NAME</span>      SECRETS   AGE</span>
<span id="cb28-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">default</span>   1         43s</span></code></pre></div>
<p>Nice! Ok, back to the DNS and busybox stuff.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb29-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get pods <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> k8s-app=kube-dns <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> kube-system</span>
<span id="cb29-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NAME</span>                       READY   STATUS              RESTARTS   AGE</span>
<span id="cb29-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-2bz8x</span>   0/1     ContainerCreating   0          88s</span>
<span id="cb29-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-pxw6f</span>   0/1     ContainerCreating   0          88s</span></code></pre></div>
<p>Without re-running anything it looks like the controller manager has picked up what I ran before. Now I just have to wait a bit for it to create the container, I hope…</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get pods <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> k8s-app=kube-dns <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> kube-system</span>
<span id="cb30-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NAME</span>                       READY   STATUS              RESTARTS   AGE</span>
<span id="cb30-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-2bz8x</span>   0/1     ContainerCreating   0          60m</span>
<span id="cb30-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-pxw6f</span>   0/1     ContainerCreating   0          60m</span></code></pre></div>
<p>I took the dog for a walk and came back to this. There’s no way these containers should take an hour to create, so something else is broken. Time for more learning!</p>
<p>Running <code>kubectl describe pods -l k8s-app=kube-dns -n kube-system</code> I get so much information about what’s not working, neat! I think the relevant part is:</p>
<p><code>Warning  FailedCreatePodSandBox  58s (x369 over 86m)  kubelet  Failed to create pod sandbox: rpc error: code = Unknown desc = failed to create containerd task: cgroups: cgroup mountpoint does not exist: unknown</code></p>
<p>searching isn’t giving me a silver bullet solution to this, but it suggests there’s something wrong with my container runtime, so let’s take a look at my worker node.</p>
<p>First thing to do is check the status of the services I was supposed to start. <code>containerd</code>, <code>kubelet</code> and <code>kube-proxy</code> services all appear to be up and running. I can see the same error about cgroup mountpoint not existing in <code>journalctl -xeu containerd</code> so the problem is in there, but I’m still not sure what’s actually broken.</p>
<p>Ok, with a little more context that I should be searching for that error in association with containerd I find <a href="https://github.com/kubernetes/minikube/issues/11310">this issue</a>.</p>
<p>Now I have to figure out how to apply that to this guide. First let’s check if there are open issues in the repository to resolve it. There’s a <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way/pull/728/commits/2adb5c0f5cae7e9d3129a4d8ab9f2ff8daf8ffaf#diff-387650bdd066d5645818d0579c5d3d562ceac2c9c94bd176a9e3162bc9917e94">PR</a> to upgrade to a newer kubernetes, that includes a different way of generating the containerd config file. I’m not sure how exactly to apply that in my example though.</p>
<p>I found a nice <a href="https://github.com/kubernetes/minikube/pull/11325/commits/813138734d347b3d84c527ed135fb37e509983f0">PR</a> in the minikube project that showed how to do the upgrade. After running it I got a little better, but was still having some resolution errors and backoffs. I’d noticed some other weird behaviour with my worker nodes so I decided to give them a reboot to see how that worked.</p>
<p>After a reboot here’s where I am:</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb31-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get pods <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> k8s-app=kube-dns <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> kube-system</span>
<span id="cb31-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NAME</span>                       READY   STATUS             RESTARTS   AGE</span>
<span id="cb31-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-2bz8x</span>   0/1     ImagePullBackOff   0          3h30m</span>
<span id="cb31-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-pxw6f</span>   0/1     ImagePullBackOff   0          3h30m</span></code></pre></div>
<p>I ssh into a worker node and find that DNS no longer works on it. Controller nodes still resolve hosts fine, and if I put in the IP of a local or external site I can ping it. So something about how I configured that DNS service has broken things for my workers. Hmmmm. Even more fun, after a bit of this, DNS on my entire home network broke. I shut down all the nodes, rebooted my router and got DNS back.</p>
<p>After being afraid to touch this for a while I decided to start the nodes back up and see what happened. Right now DNS is ok on my host machine at least. Connecting into my worker nodes I can see that DNS doesn’t work on two of them, and a whole bunch of extra network interfaces have been created. That would definitely explain why I can’t pull images. I wonder if my earlier attempt to apply that manifest left something in a failed state that they can’t recover from. I give <code>kubectl delete -f coredns-1.8.yaml</code> a run to reverse the playbook. I can’t immediately resolve names on those nodes after running that, but let’s give them a reboot and see what happens. Ok, after a reboot DNS is back up. Let’s try applying that playbook again and see what happens:</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb32-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get pods <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> k8s-app=kube-dns <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> kube-system</span>
<span id="cb32-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NAME</span>                       READY   STATUS         RESTARTS   AGE</span>
<span id="cb32-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-jn25z</span>   0/1     ErrImagePull   0          3s</span>
<span id="cb32-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-8494f9c688-lhhg5</span>   0/1     ErrImagePull   0          3s</span></code></pre></div>
<p>So we’re back to not working. At least the rest of my network is still ok for now. Looking at the workers that are coming back up, I think I see something confusing. The nodes that are running the coredns pods have a new network interface with an IP that matches my router: <code>cnio0:</code>. I can still ping my router by its IP, and I can still ping external sites if I know their IP, so routing isn’t completely broken, but name resolution seems to be. At this point I decided to confirm whether the weird network wide DNS failure I had previously was indeed a result of this configuration. I rebooted my phone and when it came back up DNS no longer worked. I deleted the manifest, rebooted my router, and all was right with the world again. I don’t even have my head around how this could happen, let alone what it means. I guess that <code>cnio0</code> device is broadcasting that it has my router’s IP or something?</p>
<p>Reading through <a href="https://github.com/ehlesp/smallab-k8s-pve-guide/blob/main/G017%20-%20Virtual%20Networking%20~%20Network%20configuration.md#g017-virtual-networking-network-configuration">this guide</a> a bit, which is more focused on a homelab k8s deployment I can see that they had two virtual network interfaces for the cluster, one for external facing connectivity, and one for internal facing cluster communication. I think probably trying to do everything on one network is part of what’s causing me problems.</p>
</section>
<section id="call-it-quits" class="level1">
<h1>Call it quits</h1>
<p>At this point I feel like I’m hitting pretty serious diminishing returns in terms of how much I’m learning vs how weird the edge cases I’m encountering are. I’m definitely not done learning kubernetes, and I might even come back to this later, but I think there are clearly some other aspects of my setup and kubernetes that I have to learn about more before working through this will provide additional value.</p>


</section>

 ]]></description>
  <category>kubernetes</category>
  <category>proxmox</category>
  <category>Linux</category>
  <guid>https://blog.ianpreston.ca/posts/2023-02-24-k8s-the-hard-way.html</guid>
  <pubDate>Fri, 24 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Home Cluster Part 4 - Setup CEPH</title>
  <link>https://blog.ianpreston.ca/posts/2023-02-05-proxmox-ceph.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is the fourth post ( <a href="../posts/2022-11-21-proxmox.html">part 1</a>, <a href="../posts/2022-12-31-proxmox2.html">part 2</a>, <a href="../posts/2023-01-21-proxmox3.html">part 3</a> ) in my home cluster with proxmox series. In this post we’re going to add distributed storage to the cluster using <a href="https://ceph.com/en/">ceph</a>. As with the other posts in this series, this is not a how-to guide from an established practitioner, but a journal I’m writing as I try and do something new.</p>
<p>Ceph in many ways is overkill for what I’m doing here. It’s designed to support absolutely massive distributed storage at huge scale and throughput while maintaining data integrity. To accomplish that it’s very complicated and their <a href="https://docs.ceph.com/en/octopus/start/hardware-recommendations/">hardware recommendations</a> reflect that. On the other hand, it’s integrated with proxmox and I’ve seen it run <a href="https://www.youtube.com/watch?v=Vd8GG9twjRU">on even lower spec gear</a> than I’m using. In this post my goal is to get a ceph cluster working that uses the 3 1TB SSDs I have in my nodes for file sharing. I’m not going to do any performance testing or tuning, and other than deploying an image to one just to confirm it works I probably won’t even use it in this section. The thing I actually want this storage for is to be my persistent storage in kubernetes, backed by <a href="https://rook.io/">rook</a>, but that will come later once I actually have kubernetes set up.</p>
<p>As with most things with computers I won’t be starting from scratch. I’ve found a <a href="https://github.com/peacedata0/proxmox-ansible-1">repository</a> of ansible roles for setting up a proxmox cluster that includes ceph configuration and is very similar to my overall setup. I’ll work through <a href="https://medium.com/plain-and-simple/dependency-vendoring-dd765be75655">vendoring</a> this code into my <a href="https://github.com/ianepreston/recipes">recipes</a> repository through this post.</p>
<section id="note" class="level2">
<h2 class="anchored" data-anchor-id="note">Note</h2>
<p>I ran into <em>lots</em> of problems getting this working. This post is definitely less of a guide and more a diary of the struggles I had getting ceph working. There may be some value to another reader if they find themselves having a similar challenge to me, but mostly this was just my scratchpad as I worked through getting things set up.</p>
</section>
</section>
<section id="initial-attempt-using-ansible" class="level1">
<h1>Initial attempt using Ansible</h1>
<p>I was hoping that similar to my experience with postfix I’d be able to grab some ansible roles that had been previously developed, tweak their settings a bit, and be good to go.</p>
<p>As you’ll see, this was not the case, but here are my notes of working through the ansible files and figuring out what they do.</p>
<section id="setting-up-the-inventory" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-inventory">Setting up the inventory</h2>
<p>The first section of the repo that I’ll incorporate is the <code>inventory</code> folder. This contains descriptions of the hosts, as well as what groups they belong to for roles. The inventory folder in this repo also contains <code>group_vars</code> and <code>host_vars</code>, which I keep in their own folders in my repo.</p>
<p>Looking at the actual inventory there are a bunch of groups created for various ceph roles like <code>mds</code>, <code>mgr</code>, and <code>osd</code>. However, in the example case and in my case all nodes will fulfill all roles, so this is only necessary for expansion or comprehensibility of what tasks are doing what when a role is run. There is one differentiator for <code>ceph_master</code>, which only targets the first node to handle tasks that are managed at the proxmox cluster level. In my previous setup I’ve just had a <code>pve</code> group for the cluster and manually set <code>pve1</code> as the host for things that take place at the cluster level. If I end up growing my cluster a lot and want to split things out I’ll have to refactor, but for now for simplicity I’m going to stick with just using the <code>pve</code> group. Based on this I don’t need any actual changes to my inventory. Looking at <code>host_vars</code> there are host specific variables identifying the separate NIC and IP address the nodes are using for the ceph network. Having a separate network for ceph is a recommendation that I am not following at this point so I don’t need to worry about that. They also have a host var specifying which storage drive should be attached to the ceph cluster. For me that’s <code>/dev/sda</code> on all of my nodes. I’ll have to refactor that out if I add another node that deviates from that, but for now I’m going to minimize the complexity in terms of number of files I have to reference and leave that alone. Looking at the group vars under ceph there’s an entry for the pool name, and for the list of nodes. Again, both of those I can just set as defaults for now and refactor later if I have to expand. So based on initial reading I’m going to leave this folder alone.</p>
</section>
<section id="checking-the-library-folder" class="level2">
<h2 class="anchored" data-anchor-id="checking-the-library-folder">Checking the library folder</h2>
<p>The library folder contains a script for managing proxmox VMs with the <code>qm</code> command. That’s interesting, but not relevant to what I’m trying to do with ceph so I won’t worry about it here.</p>
</section>
<section id="roles" class="level2">
<h2 class="anchored" data-anchor-id="roles">Roles</h2>
<p>Here is going to be the bread and butter of this process. There are a number of roles in this folder helpfully prepended with <code>ceph_</code> that I’ll want to take a look at.</p>
<p>In terms of order of reviewing these files I’m going to look at the <code>site.yml</code> file that’s at the base of the repository to understand what order they’re called in. That should make the most sense.</p>
<section id="ceph_node" class="level3">
<h3 class="anchored" data-anchor-id="ceph_node">ceph_node</h3>
<p>The first role is <code>ceph_node</code> which runs on all the nodes. There are two steps here, the first with the name “Install ceph packages”, and the second “Configure ceph network”, which I’ll ignore. There’s also a <a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_handlers.html#handlers">handler</a> in this role, but it’s only to restart the network after configuring the second network, so I don’t need that. The first task looks like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install ceph packages</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> yes | pveceph install</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">creates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/apt/sources.list.d/ceph.list</span></span></code></pre></div>
<p>There are a few things I have not seen before here that I’d like to understand before I blindly copy paste. The first is the <code>yes</code> command. <a href="https://www.howtogeek.com/415535/how-to-use-the-yes-command-on-linux/">This post</a> explains what it is and why I’d use it. It’s basically for entering <code>y</code> into the user input of everything the command it’s piped to installs. The other thing I haven’t seen before is <code>args</code>. While args appears to be a generic <a href="https://docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html#task">keyword</a> its use in this case is pretty well documented in the <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html">docs for shell</a>. In this case it’s being used to say that running this command will create that file, so if it exists the file doesn’t need to be run, ensuring idempotency. Pretty handy!</p>
<p>While I’m sure this would just work, I do want to know a bit about what I’m hitting <code>y</code> to by running this playbook, so let’s ssh into one of my nodes and manually run the command and save the output.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> ls /etc/apt/sources.list.d <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> ceph</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">download_proxmox_com_debian_ceph_quincy.list</span></span></code></pre></div>
<p>Prior to running the command I can confirm I do not have that file present.</p>
<p>Running <code>pveceph install</code> prompts an <code>apt install</code> command, the <code>y</code> is to confirm that I want to install a ton of ceph related packages. There are no other prompts so this seems safe to run.</p>
</section>
<section id="ceph_master" class="level3">
<h3 class="anchored" data-anchor-id="ceph_master">ceph_master</h3>
<p>The next role is described as creating the ceph cluster and only needs to be run on one node. This is also a small task and it looks like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check ceph status</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph status 2&gt;&amp;1 | grep -v "not initialized"</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph_status</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create ceph network</span></span>
<span id="cb3-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph init --network 10.10.10.0/24</span></span>
<span id="cb3-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph_status.rc == 1</span></span></code></pre></div>
<p>I’ll have to modify the network part to match my own setup, but otherwise this looks straightforward. Just for curiosity, let’s see what the first command looks like. As a reminder to myself, the <code>2&gt;&amp;1</code> redirects <code>stderr</code> to <code>stdout</code>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph status <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pveceph</span> configuration not initialized</span></code></pre></div>
<p>Looking at the <a href="https://pve.proxmox.com/pve-docs/pveceph.1.html">pveceph docs</a> it looks like I can just drop the <code>--network</code> argument if I’m not specifying a separate one, so this will be a very small task. <em>Note from me in the future: you need the network flag.</em></p>
</section>
<section id="ceph_mon" class="level3">
<h3 class="anchored" data-anchor-id="ceph_mon">ceph_mon</h3>
<p>Next up we create <a href="https://docs.ceph.com/en/latest/rados/operations/add-or-rm-mons/">monitors</a>. This is also a simple looking role:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check for ceph-mon</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pgrep ceph-mon</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_mon_status</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create ceph-mon</span></span>
<span id="cb5-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph createmon</span></span>
<span id="cb5-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_mon_status.rc == 1</span></span></code></pre></div>
<p><code>pgrep</code> looks for running processes, so that’s how we check if the monitor is already up and running. If it’s not, we create a monitor. The only arguements for this command are to assign an address or ID, neither of which I want to explicitly do, so I can leave this as is.</p>
</section>
<section id="ceph_mgr" class="level3">
<h3 class="anchored" data-anchor-id="ceph_mgr">ceph_mgr</h3>
<p>After the monitor we create a <a href="https://docs.ceph.com/en/quincy/mgr/index.html">manager</a>. The setup is basically the same as the monitor and the command it runs has even fewer arguments than the monitor so I won’t spell it out here.</p>
</section>
<section id="ceph_osd" class="level3">
<h3 class="anchored" data-anchor-id="ceph_osd">ceph_osd</h3>
<p>Now we have to create an <a href="https://docs.ceph.com/en/latest/man/8/ceph-osd/">osd</a> which is the first place we’ll have to touch an actual disk. Having this step not be idempotent would be <em>really</em> bad as it could lead to wiping disks. The task looks like this:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check for existing ceph_osd</span></span>
<span id="cb6-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pgrep ceph-osd</span></span>
<span id="cb6-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_osd_pid</span></span>
<span id="cb6-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb6-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Read first 5KB of ceph device to determine state</span></span>
<span id="cb6-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dd if={{ ceph_device }} bs=5K count=1 | sha256sum</span></span>
<span id="cb6-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ceph_osd_pid.rc != 0"</span></span>
<span id="cb6-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_device_first_5KB_sha256</span></span>
<span id="cb6-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Determine if should initialize ceph_osd</span></span>
<span id="cb6-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ceph_osd_pid.rc != 0 and ceph_device_first_5KB_sha256.stdout == 'a11937f356a9b0ba592c82f5290bac8016cb33a3f9bc68d3490147c158ebb10d  -'"</span></span>
<span id="cb6-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_fact</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceph_device_initialize</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb6-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span></span>
<span id="cb6-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Initialize ceph_osd device</span></span>
<span id="cb6-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_device_initialize == True</span></span>
<span id="cb6-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph createosd {{ ceph_device }}</span></span></code></pre></div>
<p>There’s also a default variable for <code>ceph_device_initialize</code> that’s set to <code>False</code>. It only gets updated to true if that third step’s condition is met. I’m a little confused and worried about this role to be honest. The first step is fine, we’re just checking if the <code>osd</code> process is running. The next one is apparently making some assumption about what the hash of the first 5KB of my disk should look like if it doesn’t already have an osd installed. I don’t know how this would work and searching didn’t turn anything up. Let’s test though and check what it returns on my drives:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> dd if=/dev/sda bs=5K count=1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sha256sum</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1+0</span> records in</span>
<span id="cb7-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1+0</span> records out</span>
<span id="cb7-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5120</span> bytes <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5.1</span> kB, 5.0 KiB<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">copied,</span> 0.00509153 s, 1.0 MB/s</span>
<span id="cb7-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">a11937f356a9b0ba592c82f5290bac8016cb33a3f9bc68d3490147c158ebb10d</span>  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span></span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve2:~#</span> dd if=/dev/sda bs=5K count=1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sha256sum</span></span>
<span id="cb7-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1+0</span> records in</span>
<span id="cb7-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1+0</span> records out</span>
<span id="cb7-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5120</span> bytes <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5.1</span> kB, 5.0 KiB<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">copied,</span> 0.00511535 s, 1.0 MB/s</span>
<span id="cb7-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">a11937f356a9b0ba592c82f5290bac8016cb33a3f9bc68d3490147c158ebb10d</span>  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span></span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:~#</span> dd if=/dev/sda bs=5K count=1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sha256sum</span></span>
<span id="cb7-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1+0</span> records in</span>
<span id="cb7-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1+0</span> records out</span>
<span id="cb7-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5120</span> bytes <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5.1</span> kB, 5.0 KiB<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">copied,</span> 0.00503435 s, 1.0 MB/s</span>
<span id="cb7-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">a11937f356a9b0ba592c82f5290bac8016cb33a3f9bc68d3490147c158ebb10d</span>  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span></span></code></pre></div>
<p>Just to make sure I wasn’t losing it, I tried it on another device that wasn’t blank and got a different hash. This is why I love the internet, there is absolutely no way I would have figured that out on my own. I don’t know how it works and that makes me a little nervous, but at this point I’m convinced that it will work. I’ll add in a default variable for my ceph device of <code>/dev/sda</code> and should be good to go.</p>
</section>
<section id="ceph_pool" class="level3">
<h3 class="anchored" data-anchor-id="ceph_pool">ceph_pool</h3>
<p>Now that I’ve got my OSDs, it’s time to create a <a href="https://docs.ceph.com/en/latest/rados/operations/pools/">pool</a>. This role also has a defaults file, with currently just one variable to specify the minimum number of nodes that must be up for pool creation (set to 3 which works for me). I’ll have to add in another default to mine for the pool name, as the original repo sets that in group vars. Beyond that let’s focus on the task:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check ceph status</span></span>
<span id="cb8-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph status</span></span>
<span id="cb8-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph_status</span></span>
<span id="cb8-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check ceph pools</span></span>
<span id="cb8-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph pool ls | grep -e "^{{ ceph_pool }} "</span></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_pool_status</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create ceph pool</span></span>
<span id="cb8-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_pool_status.rc &gt; 0 and (pveceph_status.stdout | from_json).osdmap.osdmap.num_up_osds &gt;= minimum_num_osds_for_pool</span></span>
<span id="cb8-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pveceph pool create {{ ceph_pool }}</span></span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check ceph-vm storage</span></span>
<span id="cb8-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pvesm list ceph-vm</span></span>
<span id="cb8-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_vm_status</span></span>
<span id="cb8-22"></span>
<span id="cb8-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create ceph VM storage (ceph-vm)</span></span>
<span id="cb8-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_vm_status.rc &gt; 0</span></span>
<span id="cb8-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pvesm add rbd ceph-vm -nodes {{ ceph_nodes }} -pool {{ ceph_pool }} -content images</span></span>
<span id="cb8-26"></span>
<span id="cb8-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check ceph-ct storage</span></span>
<span id="cb8-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pvesm list ceph-ct</span></span>
<span id="cb8-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">changed_when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignore_errors</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_ct_status</span></span>
<span id="cb8-32"></span>
<span id="cb8-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create ceph container storage (ceph-ct)</span></span>
<span id="cb8-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph_ct_status.rc &gt; 0</span></span>
<span id="cb8-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pvesm add rbd ceph-ct -nodes {{ ceph_nodes }} -pool {{ ceph_pool }} -content rootdir</span></span></code></pre></div>
<p>The first step pulls up a detailed description of the ceph pool status. In the third step we’ll parse it to check that we have the minimum number of OSDs up. The next one is pretty straightforward, make sure the pool we want to create doesn’t already exist. Next, assuming we have at least the minimum number of OSDs and our pool hasn’t been created, create it. This one is using all the defaults of the command since we don’t pass any arguments. Briefly, they are:</p>
<ul>
<li>not to configure VM and CT storage for the pool (that appears to happen later)</li>
<li>set the application as <a href="https://docs.ceph.com/en/quincy/rbd/index.html">rbd</a> (we will configure ceph fs later on).</li>
<li>Some other stuff about scaling and erasure coding that I don’t understand and hopefully won’t need for now. Full docs <a href="https://pve.proxmox.com/pve-docs/pveceph.1.html">here</a>, search for <code>pveceph pool create &lt;name&gt; [OPTIONS]</code></li>
</ul>
<p>The next four parts configure proxmox to use ceph as a storage location for VMs and containers. I actually don’t want to do that, my VMs will live on my nvme drives, but it won’t hurt to have as an option I guess, and at least I can test if I can do stuff on the pool with this enabled so I’ll leave it but not spend much time working out how it works. I will have to add a variable for <code>ceph_nodes</code> to my defaults that maps to a comma separated list of my nodes.</p>
</section>
<section id="ceph_mds" class="level3">
<h3 class="anchored" data-anchor-id="ceph_mds">ceph_mds</h3>
<p>After this we’re doing some necessary pre-configuration for enabling ceph-fs. Specifically the <a href="https://docs.ceph.com/en/latest/glossary/#term-MDS">ceph metadata server</a>. This is another very short task that checks if the service is running and starts it if not with a oneliner, so I won’t reproduce it here.</p>
</section>
<section id="ceph_fs" class="level3">
<h3 class="anchored" data-anchor-id="ceph_fs">ceph_fs</h3>
<p>Last one. Ceph fs, from what little I’ve read of it would be nice to have as it will enable sharing storage across pods (<a href="https://rook.io/docs/rook/v1.10/Storage-Configuration/Shared-Filesystem-CephFS/filesystem-storage/">docs</a>). This task has very similar structure to the earlier ones as well so I won’t write it up in detail here.</p>
</section>
</section>
<section id="adding-them-to-the-playbook" class="level2">
<h2 class="anchored" data-anchor-id="adding-them-to-the-playbook">Adding them to the playbook</h2>
<p>Having created the roles, I now need to make sure they’re done in the correct order in my playbook. As mentioned above I can base that on the order they’re listed in <code>site.yml</code> in the base repository I’ve been working off.</p>
</section>
</section>
<section id="troubleshoot-the-playbook" class="level1">
<h1>Troubleshoot the playbook</h1>
<p>Moment of truth, will it work or will I get errors?</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"changed"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cmd"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pveceph"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"createosd"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/dev/sda"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"delta"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0:00:00.421412"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"end"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-02-05 20:09:49.235881"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"msg"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"non-zero return code"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rc"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"start"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-02-05 20:09:48.814469"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stderr"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"binary not installed: /usr/sbin/ceph-volume"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stderr_lines"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"binary not installed: /usr/sbin/ceph-volume"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stdout"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"stdout_lines"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Of course it’s not that easy. I made it to the <code>ceph_osd</code> role but then hit this failure. Let’s compare the steps I’ve put into my playbook with the <a href="https://pve.proxmox.com/pve-docs/chapter-pveceph.html">proxmox docs</a> and see if I missed anything.</p>
<p>It looks like the manual tasks match what I did in the playbook, so that’s not it. Next I’ll search for the error message I got from ansible (probably should have done that first). I found a bug report stating that <code>ceph-volume</code> is only recommended by <code>ceph-osd</code>, so depending on apt settings it may not get installed. Weird, but easy to fix. In the <code>ceph_node</code> role I add the following:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install extra ceph packages</span></span>
<span id="cb10-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ceph-volume</span></span></code></pre></div>
<p>Ok, that got me a bit farther, but now I have new errors. First off, let’s manually check what state my system is in before I assess anything else. Looking at the ceph dashboard in proxmox I have 1 OSD showing in and up, -1 (?) showing out and up, and 1 showing out and down. That’s interesting. Running <code>pgrep ceph-osd</code> on each node I get a PID for my second node, but not for the other two. Fun. Let’s just try manually zapping the SSD on the other two hosts and see what happens. First I run <code>ceph-volume lvm zap /dev/sda --destroy</code> to wipe the SSD (just to be safe), and then I run <code>pveceph createosd /dev/sda</code>. Let’s find out how that goes.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph createosd /dev/sda</span>
<span id="cb11-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">create</span> OSD on /dev/sda <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bluestore</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">wiping</span> block device /dev/sda</span>
<span id="cb11-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">200+0</span> records in</span>
<span id="cb11-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">200+0</span> records out</span>
<span id="cb11-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">209715200</span> bytes <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">210</span> MB, 200 MiB<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">copied,</span> 0.520585 s, 403 MB/s</span>
<span id="cb11-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Running</span> command: /bin/ceph-authtool <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--gen-print-key</span></span>
<span id="cb11-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Running</span> command: /bin/ceph <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cluster</span> ceph <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> client.bootstrap-osd <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--keyring</span> /var/lib/ceph/bootstrap-osd/ceph.keyring <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> osd new ab6b5e33-e5ca-40b6-a94e-40d3ce61283d</span>
<span id="cb11-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> 2023-02-06T16:01:03.421-0700 7f32c24e1700 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span> auth: unable to find a keyring on /etc/pve/priv/ceph.client.bootstrap-osd.keyring: <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">No</span> such file or directory</span>
<span id="cb11-10"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> 2023-02-06T16:01:03.421-0700 7f32c24e1700 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span> AuthRegistry<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0x7f32bc060800</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> keyring found at /etc/pve/priv/ceph.client.bootstrap-osd.keyring, disabling cephx</span>
<span id="cb11-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> 2023-02-06T16:01:03.425-0700 7f32bb7fe700 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span> monclient<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">hunting</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> handle_auth_bad_method server allowed_methods <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> but i only support <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-12"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> 2023-02-06T16:01:03.425-0700 7f32c0a7e700 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span> monclient<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">hunting</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> handle_auth_bad_method server allowed_methods <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> but i only support <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-13"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> [errno 13] RADOS permission denied <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">error</span> connecting to the cluster<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>  RuntimeError: Unable to create a new OSD id</span>
<span id="cb11-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">command</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ceph-volume lvm create --cluster-fsid 6d4cf20c-f09d-4edf-ae78-0038b57f9709 --data /dev/sda'</span> failed: exit code 1</span></code></pre></div>
<p>Ok so I’m getting an error connecting to the cluster, why would that be? Checking the ceph status from the proxmox interface it appears that the monitor is skipping between running on my first and third nodes, but not my second (which is where I was able to install the OSD). Now I’m really confused and wondering if maybe I should have just done this whole thing manually through the GUI. But what would I learn that way? Ok, one thing I didn’t do was create a separate network for ceph. Maybe I should have done that. Let’s destroy these monitors and initialize the ceph cluster with the network flag. Fun update, I can’t destroy the last monitor in a cluster. Maybe I have to reverse some of the other steps first?</p>
<p>The last thing I did before trying to create OSDs was create managers, so let’s remove those with <code>pveceph destroymgr &lt;hostname&gt;</code> on each of the nodes.</p>
<p>Back to my second node I try <code>pveceph destroymon pve2</code> and get the error <code>can't remove last monitor</code>. Ok, maybe I can add the other two back now that I don’t have managers? Nope.</p>
<p>Ok, ceph has docs on <a href="https://docs.ceph.com/en/latest/rados/operations/add-or-rm-mons/#removing-monitors-from-an-unhealthy-cluster">removing monitors from an unhealthy cluster</a> I’d say that’s what I have. After running these commands I don’t see any running monitors, and I’m also getting a timeout on the ceph page of proxmox and <code>ceph -s</code> is hanging from the terminal. Since I don’t have any monitors now I shouldn’t have any managers either. <code>pveceph mon destroy</code> indicates that it destroys managers as well. I can also run <code>pgrep ceph-mgr</code> to confirm there’s no manager process running.</p>
<p>Alright, let’s try manually creating some monitors this time. Starting with my first node I’ll run <code>pveceph mon create</code> and… get an error:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph mon create</span>
<span id="cb12-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Could</span> not connect to ceph cluster despite configured monitors</span></code></pre></div>
<p>Ok, so there must still be something in my ceph config that’s pointing to the monitors, even though I destroyed them. Maybe I’ll take a step further back and remove that file as well. After deleting the file I now get a popup in the proxmox UI on the ceph page saying “Ceph is not initialized. You need to create an initial config once.” with a button to configure ceph. That seems like I’ve got everything reset back, except maybe those initially installed packages, but that should be fine. Let’s try running the playbook again with a proper ceph network defined. Aaaand we fail to create monitors. Let’s see what’s going on.</p>
<p>Here’s the cleaned up output of the error, it’s the same as from ansible just not in json format:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph mon create</span>
<span id="cb13-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">unable</span> to get monitor info from DNS SRV with service name: ceph-mon</span>
<span id="cb13-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Could</span> not connect to ceph cluster despite configured monitors</span></code></pre></div>
<p>Alright, I clearly haven’t reset my state properly. A little more searching leads me to <code>pveceph purge</code>. That sounds promising, let’s give that a shot. I’ll run it on all nodes to be safe, and with the <code>--crash</code> and <code>--logs</code> flags to purge all the logs. <a href="https://forum.proxmox.com/threads/reinstall-ceph-on-proxmox-6.57691/">This thread</a> has some details about purging ceph config to start clean, although the posters there are having lots of problems, so I hope I don’t have to go that far. After running the purge command I ran my playbook and… failed at creating monitors again. However, this time I could ssh into each host and create a monitor from the command line, same for managers. Checking my ceph dashboard I now see all three nodes with monitors and managers up and running. Let’s leave the playbook alone for now and just try and do the rest of this manually. On node 1 I was able to create an OSD no problem. On node 2 I got told <code>device '/dev/sda' is already in use</code>. Following the guide I run <code>ceph-volume lvm zap /dev/sda --destroy</code>:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve2:~#</span> ceph-volume lvm zap /dev/sda <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--destroy</span></span>
<span id="cb14-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Zapping: /dev/sda</span>
<span id="cb14-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Zapping lvm member /dev/sda. lv_path is /dev/ceph-ff288a69-40e3-4076-a422-52e100d7d302/osd-block-64f34da5-6b0c-4d20-8a60-ddc7227345ed</span>
<span id="cb14-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Unmounting /var/lib/ceph/osd/ceph-0</span>
<span id="cb14-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Running</span> command: /usr/bin/umount <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> /var/lib/ceph/osd/ceph-0</span>
<span id="cb14-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> umount: /var/lib/ceph/osd/ceph-0: target is busy.</span>
<span id="cb14-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>  RuntimeError: command returned non-zero exit status: 32</span></code></pre></div>
<p>Ok, so it looks like this is already set up as an OSD, except I don’t actually see it when I go to the ceph panel. Let’s try the third node and come back to this one. That one added just fine too, what is going on with my second node? First test, when in doubt try turning it off and on again. After a reboot I try the commands again:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve2:~#</span> ceph-volume lvm zap /dev/sda <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--destroy</span></span>
<span id="cb15-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Zapping: /dev/sda</span>
<span id="cb15-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Running</span> command: /usr/bin/dd if=/dev/zero of=/dev/sda bs=1M count=10 conv=fsync</span>
<span id="cb15-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> 10+0 records in</span>
<span id="cb15-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">10+0</span> records out</span>
<span id="cb15-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stderr:</span> 10485760 bytes <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">10</span> MB, 10 MiB<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">copied,</span> 0.0274736 s, 382 MB/s</span>
<span id="cb15-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Zapping successful for: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Raw Device: /dev/sda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve2:~#</span> pveceph createosd /dev/sda</span>
<span id="cb15-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">device</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/dev/sda'</span> is already in use</span></code></pre></div>
<p>Ok, that’s a bit of progress, I can actually run the zap, but then why can’t I create the osd? Why is it saying the device is already in use? From the disks page in the proxmox UI I selected the disk and picked “wipe”. Let’s try again. And it worked. Computers are weird.</p>
<p>My ceph cluster is healthy! Three monitors, three managers, three OSDs, 2.73TB of raw disk. Let’s create a storage pool:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve2:~#</span> pveceph pool create tank <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--add_storages</span></span>
<span id="cb16-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> tank: applying size = 3</span>
<span id="cb16-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> tank: applying application = rbd</span>
<span id="cb16-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> tank: applying min_size = 2</span>
<span id="cb16-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> tank: applying pg_autoscale_mode = warn</span>
<span id="cb16-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> tank: applying pg_num = 128</span></code></pre></div>
<p>Next up I create a metadata service on each nodes so I can run cephfs:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:~#</span> pveceph mds create</span>
<span id="cb17-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">creating</span> MDS directory <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/var/lib/ceph/mds/ceph-pve3'</span></span>
<span id="cb17-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">creating</span> keys for <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mds.pve3'</span></span>
<span id="cb17-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">setting</span> ceph as owner for service directory</span>
<span id="cb17-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabling</span> service <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ceph-mds@pve3.service'</span></span>
<span id="cb17-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Created</span> symlink /etc/systemd/system/ceph-mds.target.wants/ceph-mds@pve3.service <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> /lib/systemd/system/ceph-mds@.service.</span>
<span id="cb17-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">starting</span> service <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ceph-mds@pve3.service'</span></span></code></pre></div>
<p>This looked the same on all three nodes. Finally, some consistency!</p>
<p>The last piece from the playbook was to create a cephfs:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph fs create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--pg_num</span> 128 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--add-storage</span></span>
<span id="cb18-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">creating</span> data pool <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cephfs_data'</span>...</span>
<span id="cb18-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">error</span> with <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'osd pool create'</span>: mon_cmd failed <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span>  pg_num 128 size 3 would mean 771 total pgs, which exceeds max 750 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mon_max_pg_per_osd</span> 250 <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> num_in_osds 3<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> </span></code></pre></div>
<p>So close! That’s what I get for just copy pasting. I guess I have to figure out how many placement groups I should actually have.</p>
<p>After referencing <a href="https://ceph.io/rados/new-in-nautilus-pg-merging-and-autotuning/">this post</a> about auto scaling placement groups I have some idea where to go.</p>
<p>Starting with checking my current and recommended status:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> ceph osd pool autoscale-status</span>
<span id="cb19-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">POOL</span>    SIZE  TARGET SIZE  RATE  RAW CAPACITY   RATIO  TARGET RATIO  EFFECTIVE RATIO  BIAS  PG_NUM  NEW PG_NUM  AUTOSCALE  BULK</span>
<span id="cb19-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.mgr</span>   1152k                3.0         2794G  0.0000                                  1.0       1              on         False</span>
<span id="cb19-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tank</span>      0                 3.0         2794G  0.0000                                  1.0     128          32  warn       False</span></code></pre></div>
<p>My tank pool has 128 placement groups, with a recommended number of 32. What happens if I change autoscale from <code>warn</code> to <code>on</code>?</p>
<p>After running <code>ceph osd pool set tank pg_autoscale_mode on</code> and waiting a little bit, I do indeed now have 32 placement groups in the pool, as expected. If I do this again I’ll add <code>--pg_autoscale_mode on</code> to the arguments for my pool creation to get this right from the beginning.</p>
<p>Ok, back to the file system. The default <code>pg_num 128</code> seems likely to be incorrect here, I wonder if I can just have it auto-scale as well? Looking at the docs it doesn’t seem so. The default in my ansible playbook, which was for a similarly sized cluster used <code>64</code>, so let’s do that.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph fs create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--pg_num</span> 64 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--add-storage</span></span>
<span id="cb20-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">creating</span> data pool <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cephfs_data'</span>...</span>
<span id="cb20-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> cephfs_data: applying application = cephfs</span>
<span id="cb20-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> cephfs_data: applying pg_num = 64</span>
<span id="cb20-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">creating</span> metadata pool <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cephfs_metadata'</span>...</span>
<span id="cb20-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pool</span> cephfs_metadata: applying pg_num = 16</span>
<span id="cb20-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configuring</span> new CephFS <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cephfs'</span></span>
<span id="cb20-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Successfully</span> create CephFS <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cephfs'</span></span>
<span id="cb20-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Adding</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cephfs'</span> to storage configuration...</span>
<span id="cb20-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Waiting</span> for an MDS to become active</span>
<span id="cb20-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Waiting</span> for an MDS to become active</span></code></pre></div>
<p>With that everything seems to be up! In the UI I can see my pools, and I have all green across the board.</p>
<p>Let’s try putting an image in there just to make sure it actually works at all. I was able to stand up an image on my <code>tank</code> pool, boot into it, and live migrate it. I’d say we’re good!</p>
</section>
<section id="get-back-to-square-one" class="level1">
<h1>Get back to square one</h1>
<p>I’ve done it once, let’s make sure I can do it again.</p>
<section id="clean-up-the-install" class="level2">
<h2 class="anchored" data-anchor-id="clean-up-the-install">Clean up the install</h2>
<p>As discussed in the last section I’ll run <code>pveceph purge --crash --logs</code> on all three nodes (that might be overkill but let’s be safe).</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph purge <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--crash</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--logs</span></span>
<span id="cb21-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Unable</span> to purge Ceph!</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">To</span> continue:</span>
<span id="cb21-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> remove pools, this will !!DESTROY DATA!!</span>
<span id="cb21-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> remove active OSD on pve1</span>
<span id="cb21-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> remove active MDS on pve1</span>
<span id="cb21-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> remove other MONs, pve1 is not the last MON</span></code></pre></div>
<p>Ok, I can’t purge to start, I’ll have to back my way out.</p>
<section id="remove-cephfs" class="level3">
<h3 class="anchored" data-anchor-id="remove-cephfs">remove cephfs</h3>
<p>The list above only talks about pools, but I’ve got a cephfs on top of that to remove first. The <a href="https://pve.proxmox.com/pve-docs/chapter-pveceph.html#_destroy_cephfs">pveceph docs</a> have a section on destroying a cephfs. Let’s follow that.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">umount</span> /mnt/pve/cephfs</span>
<span id="cb22-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pveceph</span> stop <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--service</span> mds.cephfs <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run this on all nodes</span></span></code></pre></div>
<p>That didn’t seem to actually stop the MDSs, so I went into the UI and destroyed them all. Based on the guide, after that I should be able to remove it with <code>pveceph fs destroy cephfs --remove-storages --remove-pools</code> but I get <code>storage 'cephfs' is not disabled, make sure to disable and unmount the storage first</code>. A little more searching gets me <code>ceph fs rm cephfs --yes-i-really-mean-it</code> which runs ok and upon completion I don’t see any entries for cephfs anymore, so I think that’s good.</p>
</section>
<section id="remove-my-other-pool" class="level3">
<h3 class="anchored" data-anchor-id="remove-my-other-pool">remove my other pool</h3>
<p>I think I’m going to do the rest of this through the UI. It’s not the sort of thing I need to automate, and the UI seem to be cleaner and easier. Ok, my pools are gone, including some related to cephfs that didn’t seem to clear out with the old command. My nodes are still showing the pools as storage locations, but with a <code>?</code> by them. I think that will go away once I purge the config for ceph, so let’s not worry about it for now.</p>
</section>
<section id="remove-osds" class="level3">
<h3 class="anchored" data-anchor-id="remove-osds">remove OSDs</h3>
<p>From the UI, for each OSD in my cluster I first take it out, stop it, then destroy it.</p>
</section>
<section id="remove-mds" class="level3">
<h3 class="anchored" data-anchor-id="remove-mds">remove MDS</h3>
<p>Looks like that was taken care of when I removed cephfs. No action</p>
</section>
<section id="remove-managers-and-monitors" class="level3">
<h3 class="anchored" data-anchor-id="remove-managers-and-monitors">remove managers and monitors</h3>
<p>Again from the UI I <code>destroy</code> each manager, and then destroy all but one monitor.</p>
</section>
<section id="try-purging-again" class="level3">
<h3 class="anchored" data-anchor-id="try-purging-again">try purging again</h3>
<p>Hmmm, I’m still getting told to remove pools and mons. Not sure what’s up with that. Ahh, <code>pveceph pool ls</code> tells me I still have a <code>.mgr</code> pool. I didn’t realize that counted. Ok, that’s cleared out. I’ve still got this monitor listed under one of my nodes but with status unknown and I can’t seem to destroy it from the UI. Going into the <a href="https://docs.ceph.com/en/latest/rados/operations/add-or-rm-mons/">ceph docs</a> I can see there are some docs on removing mons from an unhealthy cluster. The ghost monitor is running on my third node so I ssh into it and I can see the monitor service is indeed running there. I’m able to stop the service on that node with <code>systemctl stop ceph-mon.target</code>. This still doesn’t let me run purge though. If I run it I get told that my monitor isn’t the last one running, but also if I try and remove that monitor I get told it’s the last one. That’s… confusing. Ok, let’s go back to that third node, disable the monitor service and reboot it the node. Still nothing. Running <code>ceph mon dump</code> on any node only shows the monitor I know is running on my first node. Looking at <code>/etc/pve/ceph.conf</code> I only see the one monitor. Ok, bit of googling and I’m back to <a href="https://forum.proxmox.com/threads/ceph-cant-remove-monitor-with-unknown-status.63613/">this thread</a> which reminds me to check <code>/var/lib/ceph/mon</code> on the node with the unknown status monitor. Sure enough, there’s still a folder there and after I delete it I don’t see that entry anymore. Let’s try purging again.</p>
<p>That seems to have worked. If I go to the ceph page in the UI I’m told that it’s not configured. I can still see the storage pools on my nodes though. I wonder if that’s just in <code>/etc/pve/storage.cfg</code> like my NFS share configs are. Yup! Ok, after deleting that I no longer see them as storage in the UI. I think I’m good. One last thing to do is to go into each node through the UI and wipe the SSDs.</p>
</section>
</section>
</section>
<section id="retry-using-ansible" class="level1">
<h1>Retry using ansible</h1>
<p>The manual steps worked, maybe just not having the network configured correctly when I initially ran my playbook got me into an unstable state. After double checking my playbook I’ll try running through it one step at a time. I think the biggest issue was the network config being missing in the initial install, which meant the monitors couldn’t talk to each other on each node and then everything spiraled from there. I’ve gone back and fixed that in the playbook, and also added some syntax to enable pg autoscaling to avoid that other issue I had during manual config.</p>
<p>I’m going to be a little more cautious this time and only run it with one incremental new role uncommented at a time. I got to the monitor creation before hitting an issue. The command completed no problem, but my node 3 monitor can’t see my nodes 1 and 2 (they can see each other). I’m thinking this is either because I didn’t entirely clear out my state, or maybe something about ansible running the monitor creation command in parallel is breaking things. Let’s just try deleting and re-adding the monitor on the third node. Ok, I can’t remove it the normal way because it thinks it’s the last monitor. <code>/etc/pve/ceph.conf</code> lists all three monitors. Running <code>ceph mon dump</code> either shows me two monitors on my first two nodes, or just the third monitor on my last node. This is a little different than what I had before.</p>
<p>Following the ceph docs for removing an unhealthy monitor doesn’t help because my third node’s monitor isn’t in the monmap of my healthy monitors, that’s the problem:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> pveceph stop <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--service</span> mon.pve1</span>
<span id="cb23-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> ceph-mon <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> pve1 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--extract-monmap</span> /tmp/monmap</span>
<span id="cb23-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2023-02-20T16:31:41.732-0700</span> 7f41ca2cf700 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span> wrote monmap to /tmp/monmap</span>
<span id="cb23-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve1:~#</span> monmaptool /tmp/monmap <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--rm</span> pve3</span>
<span id="cb23-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">monmaptool:</span> monmap file /tmp/monmap</span>
<span id="cb23-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">monmaptool:</span> removing pve3</span>
<span id="cb23-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">monmaptool:</span> map does not contain pve3</span></code></pre></div>
<p>Ok, back in the third node, let’s clear out this monitor:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:~#</span> systemctl stop ceph-mon.target</span>
<span id="cb24-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:~#</span> systemctl disable ceph-mon.target</span>
<span id="cb24-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:~#</span> cd /etc/systemd/system</span>
<span id="cb24-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:/etc/systemd/system#</span> ls <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> ceph</span>
<span id="cb24-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ceph-mgr.target.wants</span></span>
<span id="cb24-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ceph-mon.target.wants</span></span>
<span id="cb24-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ceph.target.wants</span></span>
<span id="cb24-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:/etc/systemd/system#</span> rm <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> ceph-mon.target.wants/</span>
<span id="cb24-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:/etc/systemd/system#</span> systemctl status ceph-mgr.target</span>
<span id="cb24-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">●</span> ceph-mgr.target <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> ceph target allowing to start/stop all ceph-mgr@.service instances at once</span>
<span id="cb24-11">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded:</span> loaded <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/lib/systemd/system/ceph-mgr.target</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vendor</span> preset: enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb24-12">     <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Active:</span> active since Sun 2023-02-19 15:54:58 MST<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">24h</span> ago</span>
<span id="cb24-13"></span>
<span id="cb24-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Warning:</span> journal has been rotated since unit was started, output may be incomplete.</span>
<span id="cb24-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:/etc/systemd/system#</span> systemctl stop ceph-mgr.target</span>
<span id="cb24-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:/etc/systemd/system#</span> systemctl disable ceph-mgr.target</span>
<span id="cb24-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Removed</span> /etc/systemd/system/multi-user.target.wants/ceph-mgr.target.</span>
<span id="cb24-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Removed</span> /etc/systemd/system/ceph.target.wants/ceph-mgr.target.</span>
<span id="cb24-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:/etc/systemd/system#</span> ls <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> ceph</span>
<span id="cb24-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ceph-mgr.target.wants</span></span>
<span id="cb24-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ceph.target.wants</span></span>
<span id="cb24-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root@pve3:/etc/systemd/system#</span> rm <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> ceph-mgr.target.wants</span></code></pre></div>
<p>In addition to that I removed the monitor record from <code>/etc/pve/ceph.conf</code>.</p>
<p>After that my ceph status hung for a second, which confused me until I remembered I’d turned off the monitor service on my first node to do that monmap dump. After turning it back on I seem to be ok.</p>
<p>Now my third node is seeing my other two nodes’ monitors. If I try to create a monitor though I get told the monitor address is in use. I double checked that the unit was completely removed and ran <code>systemctl daemon-reload</code> as well as removing everything in <code>/var/lib/ceph/mon</code>. Maybe a reboot? Nope. Ahh! There’s a line up in <code>/etc/pve/ceph.conf</code> for <code>mon_host</code> that still has that IP listed. After deleting it I have three monitors up and running! I think this must be a syncing issue. I don’t have the energy to go back and run this playbook from scratch to test for sure, but I’m going to add a random sleep in front of the command like so <code>sleep $[ ( $RANDOM % 30 ) + 1 ]s &amp;&amp;</code> and hope that will do it if I ever have to run this playbook again.</p>
<p>Back on track I added in the manager role and it worked fine. OSD creation also worked.</p>
<p>Pool creation failed. It looks like the conditional for checking the OSD count was expecting <code>pveceph status</code> to return json that ansible could parse. It doesn’t do that for me so I substituted the command with <code>ceph osd stat | awk '{print $3}'</code> to get the number of up OSDs. I don’t know if that will work in weird failed states, but it at least worked in the happy path I could test. Note that I had to change the playbook slightly to use <code>shell</code> instead of <code>command</code> so that I could <a href="https://stackoverflow.com/questions/47994497/how-to-pipe-commands-using-ansible-e-g-curl-sl-host-com-sudo-bash">include pipes</a> and I had to cast the output of that command to an integer to let it compare to the minimum OSD requirement. I also had to change the command to search for the pool slightly to account for the output format of <code>pveceph pool ls</code> changing from when the playbook was written.</p>
<p>At this point I’m able to fully run through the playbook. Other than that issue with monitors, that I think I’ve resolved, I have a fully functioning playbook for ceph cluster provisioning.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>So, was automating this worth it? For actual usability, I’d have to say no. Given the modifications I had to make to the playbook to handle the output of the status checking commands I don’t have a ton of faith that if way down the road I need to redeploy ceph that this playbook will just work. On the other hand, trying to automate it, failing terribly, learning to clean up that failed state, rebuild it manually, and then actually automating it was a decent way for me to learn some things about ceph. I also picked up a couple ansible tricks along the way. I definitely still have a ton to learn about ceph, but I feel a little more comfortable with it than I would have if I’d just followed the wizard in the UI. I can’t imagine too many people who aren’t me are going to read this post, but maybe some of the errors I’ve included in it will show up in someone’s future search and they’ll be able to see what I did about them, here’s hoping that’s useful. If not, I learned a bunch and keeping this record helped me remember what I was doing as I worked through this over the course of several days.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <category>proxmox</category>
  <category>Linux</category>
  <category>ceph</category>
  <guid>https://blog.ianpreston.ca/posts/2023-02-05-proxmox-ceph.html</guid>
  <pubDate>Sun, 05 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Migrating to quarto</title>
  <link>https://blog.ianpreston.ca/posts/2023-02-03-migration.html</link>
  <description><![CDATA[ 




<section id="update" class="level1">
<h1>Update</h1>
<p>This blog is now rendered with <a href="https://quarto.org/">quarto</a> rather than <a href="https://github.com/fastai/fastpages">fastpages</a>. Honestly fastpages was working fine for me, but they’ve deprecated it and I like being on the new thing. There are some nice navigation and filtering features added in this new tool, and the live preview on my dev machine works quite nicely. Mostly I’m making this post to ensure that my github action was set up correctly.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <guid>https://blog.ianpreston.ca/posts/2023-02-03-migration.html</guid>
  <pubDate>Fri, 03 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Home cluster part 3 - Setup VM templates on proxmox</title>
  <link>https://blog.ianpreston.ca/posts/2023-01-21-proxmox3.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is the third post ( <a href="../posts/2022-11-21-proxmox.html">part 1</a>, <a href="../posts/2022-12-31-proxmox2.html">part 2</a>) documenting my adventures setting up a home cluster. In this one I will try a few different methods of getting VMs installed on proxmox. As with the previous posts, this is not intended to be a how to guide from an expert. I haven’t used proxmox before working on this project, so I’m mostly doing this to document what I do for future reference, or maybe provide others with the perspective of what it’s like to work on proxmox as a relative beginner.</p>
<p>All the code I reference in this post is in my <a href="https://github.com/ianepreston/recipes">recipes</a> repository. Specifically, the ansible role to create templates is <a href="https://github.com/ianepreston/recipes/tree/master/ansible/roles/pve_templates">here</a> and the terraform code is <a href="https://github.com/ianepreston/recipes/tree/master/terraform/pve">here</a></p>
</section>
<section id="basic-menu-driven-install" class="level1">
<h1>Basic menu driven install</h1>
<section id="create-the-vm" class="level2">
<h2 class="anchored" data-anchor-id="create-the-vm">Create the VM</h2>
<p>The most obvious way to install a VM is through the UI. I know I won’t want to take this approach indefinitely as it involves manual work and isn’t reproducible (at least not easily), but it seems like the right place to start, both to ensure I don’t have any unforeseen issues with my setup, and also to provide a baseline for comparison when I try other methods later.</p>
<p>Selecting one of my nodes from the web interface I click “Create VM”. In the first tab I pick the node to install to and give it a name, we’ll do <code>ubuntu-test</code> for this. I could also assign it to a <a href="https://pve.proxmox.com/wiki/User_Management#pveum_resource_pools">resource pool</a> if I had any of those created but I don’t so I won’t. The other thing I can assign is a VM ID, which is the unique numeric identifier proxmox uses internally. At this point I’m fine to let proxmox manage that though so I’ll leave it on the default.</p>
<p>Checking the advanced options I can also configure the VM to start at boot so it will come back up if I reboot my cluster. I can also configure the order it starts/stops. The start at boot setting seems like it would be handy for production services, but I’m just testing so I’ll leave it for now.</p>
<p>On the next tab I can configure the OS. I’ve already configured my NAS (set up in part 2) to hold things like ISO images for installing and uploaded an Ubuntu 22.10 server image, so I’ll select that. The guest OS settings are already correctly set on Linux with a modern kernel so I’m all good there.</p>
<p>Next up is the System tab. The first option is Graphic Card. There’s a ton of options under this one, but at this point I don’t have any intention of installing anything that will care so I’ll leave it at default. Maybe at some point I’ll have a system with a GPU that I want to pass through, or will need a Windows server, but not right now. I also have to pick a machine option. Based on <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings">the docs</a> as long as I don’t want to do PCIe passthrough I can stick with the default, so I will for now. Next I pick a SCSI controller. Again, referring to <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_hard_disk">the docs</a> the <code>VirtIO SCSI Single</code> option that it had selected by default seems perfect for me. There’s also a checkbox for <code>Qemu Agent</code>. Reading <a href="https://pve.proxmox.com/wiki/Qemu-guest-agent">the docs</a> this seems like a handy thing to have, so I’ll turn it on (looks like mostly it’s for cleaner shutdown and pausing during disk backups). The last thing on this tab is whether to enable TPM. Since I’m not making a Windows image I don’t need this, so I’ll leave it unchecked.</p>
<p>Following that we’re on to Disks. I can create multiple disks I’m sure, but for now let’s just set up one. First I make sure that the backing storage is my <code>local-zfs</code> storage, which is the NVME drive on the host, rather than my NAS. I haven’t configured the SSD in these hosts yet, I’m planning to set up <a href="https://docs.ceph.com/en/quincy/">ceph</a> on them but that’s for a future post. The other basic thing to set on this page is disk size. I’m not planning to keep this image around, so I’ll stick with the default 32GB for now. The <code>Bus/Device</code> field defaults to the SCSI interface I set up on the last tab so that seems fine. There’s an option for cache mode as well. Right now I’m not really sure what that does, but from <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_hard_disk">the docs</a> the default of no cache seems like it will work for me, so I’ll leave it. Taking a look at <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_hard_disk_discard">the docs</a> it seems like I want to have the <code>Discard</code> option checked so I’ll do that. From <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings">the docs</a> <code>IO Thread</code> only seems like it really matters if I have multiple disks attached, but I don’t see the harm of turning it on so let’s do that. I’ll check <code>SSD emulation</code> since the underlying disk really is an SSD and the guest OS might as well think so too. I’ll uncheck the <code>backup</code> option on this one, since I’m planning to just destroy this VM shortly after I create it and I don’t need backups hanging around. I want to be able to try replicating this VM to different hosts, and I’d want this disk to be included, so I’ll leave <code>skip replication</code> unchecked. The last thing I have to pick is the <code>Async IO</code> option. From reading <a href="https://kb.blockbridge.com/technote/proxmox-aio-vs-iouring/">this</a> it seems like the default <code>io_uring</code> will work for me, I’m not deep enough on how this sort of thing works to have strong opinions or requirements so I’ll go with the default.</p>
<p>Now we come to CPU. For <code>sockets</code> I’ll leave it at 1, since all my hosts have only 1 physical socket. For cores my hosts have either 4 or 6 cores, so there’s definitely no point going over 6. Since this is just a test machine let’s just give it 2. For CPU type I’m going to leave it on the Default (<code>kvm64</code>). From the docs on CPU type if I set the CPU to <code>host</code> it will exactly match the CPU flags and type of my host system, but I might have migration issues across hosts, since they’re not all the exact same CPU. The default will allow easier migration, but might disable some specific CPU flags that would be beneficial. For now I’ll stick with the easy option. There’s some other stuff for CPU limits and extra CPU flags here that I’m also going to leave alone for now.</p>
<p>Now we’re on to memory. Each of these hosts has <code>32GB</code> of memory, so I don’t really have to be cheap here, at least while I’m testing. Under advanced I can set a memory floor and enable/disable ballooning. From the docs, I want to have <code>ballooning</code> enabled, even if I have the memory floor and ceiling set the same, so that my host can see how much memory the VM is actually using. If I was running a bunch of VMs with dynamic memory requirements I could see overallocating the max across them and setting the floor for each. In this case I’m just going to leave it at the default <code>2GB</code> since I’m not going to actually run anything on this VM.</p>
<p>Almost done, next up is network. I’ve only got one bridge right now so I’ll leave that selected. I’m not currently doing any VLAN stuff in my network so I’ll leave the <code>VLAN tag</code> entry blank. For model I’ll stick with <code>VirtIO</code> as the docs say that’s the one to pick for best performance as long as your host supports it. The <code>firewall</code> option is checked by default. I haven’t looked into the proxmox firewall at all at this point, but let’s leave that on for now. I can also do some rate limiting and other fancy network config here but I’m going to leave those on the default for now.</p>
<p>The only thing to do now is confirm my settings and actually create the VM. I’ll check <code>start after created</code> so it fires up right away.</p>
</section>
<section id="configure-the-vm" class="level2">
<h2 class="anchored" data-anchor-id="configure-the-vm">Configure the VM</h2>
<p>After waiting a little bit I can see my newly created VM listed under the node I set it up on. Clicking into that VM and selecting the <code>Console</code> section I can see that I’m in the Ubuntu server installation wizard. Since this isn’t a post about installing Ubuntu server I’ll work through the menus without writing everything down. Going through the install worked fine until it came time to reboot and it failed to unmount the virtual CD-ROM that had the installation ISO. I went to the hardware tab on the VM in the proxmox interface, removed the CD-ROM and rebooted. After the reboot the VM came up fine, and I was able to ssh into it from my desktop.</p>
</section>
</section>
<section id="create-a-template-image" class="level1">
<h1>Create a template image</h1>
<p>After confirming the manual VM creation process worked, I started looking into automating the process. From what I could see, most automation tools like ansible or terraform require you to have a VM template created that they can use. There are also some tools to automate the creation of templates, but let’s not get ahead of ourselves. There’s tons of docs on getting a template created and I started getting a bit of analysis paralysis going through them all, so let’s try the <a href="https://docs.technotim.live/posts/cloud-init-cloud-image/">Techno Tim</a> guide and see where that leads.</p>
<p>I was able to mostly follow the guide, and other than having to change references from <code>local-lvm</code> to <code>local-zfs</code> for storage of the disk I didn’t encounter any obvious errors. I created a new machine and it started up, but I couldn’t access it over the web interface for the shell, or see info about its IP (no qemu guest agent installed). In the cloud-init config I set the IP to be DHCP, just to see what would happen. I wasn’t able to resolve the host by name to try and ssh in using that. After checking my router I found a host just named <code>ubuntu</code> and was able to ssh into its IP with the username and ssh key I specified in the cloud init template. For a further test I created a second clone from the template. One thing I noticed was that I had to create it on the same node as the template. Presumably I can migrate it later. The second VM came up, got a new ID in proxmox, and pulled a different IP showing a different MAC address in my router. I was able to ssh into it the same way. After confirming that I shut it down and migrated it to another node, just to see how that would go. The migration went fine, the VM came back up, got the same IP, and I was able to ssh back into it.</p>
<section id="thoughts-on-manual-templates" class="level2">
<h2 class="anchored" data-anchor-id="thoughts-on-manual-templates">Thoughts on manual templates</h2>
<p>This wasn’t too bad. There are a few tweaks I’d want to apply, like adding the guest agent into the machine, but overall template creation is pretty easy. I could see wanting to update my templates semi regularly when new versions of base OSs come out though, and I’d like to understand more of the theory behind how this actually works, since a lot of what I did was pretty much copy paste. To do that, I’ll clear these out and look into some other template creation options.</p>
</section>
<section id="cleaning-up" class="level2">
<h2 class="anchored" data-anchor-id="cleaning-up">Cleaning up</h2>
<p>I don’t want lingering stuff from this experiment hanging out on my nodes, so let’s go in and see what I have to get rid of. First is the created VMs - I can stop and remove them from the UI easily enough. Same deal for the template VM. I checked the local storage through the UI as well and it looks like any virtual disks I created were removed when I got rid of the VM. The only other thing to remove was that initially downloaded cloud image, so I went into the shell for the node and just ran <code>rm</code> to get rid of that.</p>
</section>
</section>
<section id="automate-creating-a-template" class="level1">
<h1>Automate creating a template</h1>
<p>Creating templates doesn’t immediately feel like the sort of thing I’ll have to do super often and will therefore want to automate. In researching how I would do it though I found a few use cases, namely to schedule the creation of updated templates to avoid a long running <code>apt update &amp;&amp; apt upgrade</code> cycle on each newly created image. I found a nice looking <a href="https://gtgb.io/2022/07/23/proxmox-vm-templating/">post</a> that had a fairly reasonable looking workflow using a few shell scripts. Further research suggested that the “production” way to do this would be with <a href="https://developer.hashicorp.com/packer">packer</a>. That seems more complicated, but it would help me learn a more broadly applicable skill that I might be able to transfer to other projects. I honestly can’t tell if that’s a good use of my time or just <a href="https://en.wiktionary.org/wiki/yak_shaving">yak shaving</a> so I’ll try and get by without for now.</p>
<p>Following the post linked above, there’s only one pre-requisite on the proxmox nodes to run the scripts, and that’s <code>libguestfs-tools</code> in order to modify the cloud image bases we’ll be building templates from. That’s easy enough to add to the ansible playbook I’ve been using throughout this series to configure my proxmox nodes. After that there’s just four scripts I have to tweak slightly for my own requirements and then get onto at least one node. I can also set these up in ansible with some templates, which should make them easier to modify and otherwise maintain. Plus then I have them stored somewhere if I have to rebuild these nodes in the future. The repository associated with the above post is <a href="https://github.com/geektx/Proxmox-VM-Template">here</a>.</p>
<p>As a starting point I copied in the scripts as templates into an ansible role. I swapped out all the variables that were hard coded in the scripts for ansible variables, and then set what I wanted to initially test on as ansible variables in the defaults for the role. The idea is that this way if I want to build multiple templates I can just call this role with a variables file that overrides the specific things I want to change (image id, cloud image). After a little bit of fiddling I got the files copied over and ran the script, which did create a template for me. So far one advantage over the manual template from before is that this image has <code>qemu-guest-agent</code> installed, so I can see the hosts IP in the summary tab. There’s still some more stuff I’d like to sort out though.</p>
<p>By changing the storage location of the template from local storage of the node to my NAS I was able to clone the template to another node in my cluster. That image then came up in a bootloop though. Even more fun, I couldn’t stop it from the web interface, which meant I couldn’t delete it. I had to ssh into the node it was running on, run <code>ps aux | grep "/usr/bin/kvm -id &lt;VM ID&gt;"</code> and then <code>kill -9</code> that PID. Crazy. I tried creating it on the same node as the template with a target of local storage but got the same issue.</p>
<p>After looking at the docs it seems like if I want to automate building images from templates I’ll be using the template name, rather than a VM ID anyway. So I think I’ll try modifying the script to create a template with the same name but different ID on each of my nodes, which should let me provision VMs to any node. First let’s clean up the template some more though. As a future project maybe I’ll come back and figure out why building the template on my NAS causes it to boot loop, but that’s a problem for future me.</p>
<p>One thing I definitely want to be able to do is scale VMs I create off these templates up or down. 2 cores, 2GB of RAM and 2GB of disk will not always do it. To test this I create a VM from the template without modification and ssh into it. <code>df -h</code> confirms that I have 2GB of disk assigned to the VM by default. <code>lscpu</code> shows 2 cores. <code>free -h</code> confirms I have 2GB of RAM. Let’s turn the VM off and adjust those. From the Hardware tab of the VM from the proxmox UI I adjust the CPU up to 3 cores and RAM up to 4GB. Disk resizing cannot be done from the UI, so from the terminal based on <a href="https://pve.proxmox.com/wiki/Resize_disks#1._Resizing_guest_disk">the docs</a> I run <code>qm resize 100 scsi0 +5G</code> to add 5GB to the disk. Let’s fire the machine back up and see what happened. <code>lscpu</code> indeed now shows 3 cores, that’s cool. <code>free -h</code> shows the updated amount of RAM. Even <code>df -h</code> shows the correct amount of disk. That last one is frankly surprising to me because the docs indicate that only the disks should have been resized, not the logical volumes or anything else, which would have meant some commands being run within the VM to make the space available. That has also been my experience with VMs at work. Maybe it’s something fancy in the Ubuntu image I’m using? Either way, pretty sweet for now.</p>
<p>Another thing to change is how the VM authenticates over SSH. The default way I’ve been doing it is to just put my laptop’s public key in <code>~/.ssh/authorized_keys</code> using cloud-init. This works ok, but it’s not how I manage ssh in the rest of my network. See <a href="https://blog.ianpreston.ca/ssh/linux/bash/2020/05/03/ssh.html">my earlier post</a> for details, but the tldr is I want to us a certificate authority to allow any signed key to authenticate as a user, and all my host keys to authenticate themselves with a CA. The former is a bit of a convenience as I could just add a couple keys for my other devices to my <code>keyfiles</code> file and keep them up to date if I rotated keys. The Host key thing will be super handy though, since otherwise I’ll have to manually verify that I trust the host key of each new VM I start up, and if I ever tear down and replace a VM I’ll get errors on host validation. So let’s fix that. The first step is to copy the host CA key and the user CA public key into a folder on my NAS that’s accessible from proxmox so I can inject those keys into the templates. I could have ansible copy them over and encrypt them in the playbook, but I think having them on the NAS is slightly more convenient and secure, even if I’d have encrypted the keys with <code>ansible-vault</code>. Next I need to modify the template creation script to copy those files in, and modify <code>sshd_config</code> to use them. While I’m at it I can turn off password authentication over SSH for a little more security. This actually went surprisingly smoothly. I updated the <code>build_image</code> script to copy in the public key for the user CA as well as the private host CA key. Then I set it to run a very slightly modified version of the host setup script I created in my earlier post. After re-running the template build script and creating a VM from the new template I was able to ssh in from my laptop without having passed in a key file to the cloud-init template, or being prompted to validate the host key. Magic!</p>
<p>A note on name resolution. I think I remember seeing/reading this somewhere but it didn’t come back to me until I started troubleshooting. When I first create a machine from a template, if I tell it to use DHCP for IP address acquisition it gets a lease from my router with the hostname <code>ubuntu</code>. So if I want to ping/ssh the machine by name I have to use <code>ubuntu.local.ipreston.net</code> instead of <code>&lt;vm-name&gt;.local.ipreston.net</code>. I typically like to use DHCP on my servers and then just do static mappings in my router to pin them to an IP, rather than hard coding the IP itself, mostly so that I can get easy name resolution without having to put manual entries into my DNS. Even my proxmox nodes themselves which do use static IPs, I created a static mapping in my DHCP server to their MAC addresses so that all my IPs would be available in one place. Anyway, after you reboot the VM once it gets a lease with its actual hostname so just reboot it once, or manually alter the hostname when you do your static mapping.</p>
<section id="automate-creating-another-template" class="level2">
<h2 class="anchored" data-anchor-id="automate-creating-another-template">Automate creating another template</h2>
<p>Having a working Ubuntu template is pretty handy, but what if I want to branch out? Can I apply this approach to other distros? I’m pretty sure this approach will work fine with another debian based distro, and probably even another fairly standard Linux like CentOS will be fine (although I should test). But what about weird ones? Specifically I want to see if I can get this working on <a href="https://www.flatcar.org/">flatcar Linux</a> since I want to try using it for my kubernetes nodes. Let’s walk before we try running though and extend to another version of Ubuntu.</p>
<p>The first thing I want to do is tweak how I’m numbering my templates. Right now each template gets a variable set for its whole VM ID. I’d like to break that out into chunks. The first digit should just always be 8 (at least for now) to indicate a template and keep it out of the range of actual VMs I’m deploying. The next one I’m thinking should be the node the template is created on, and then the last two digits can be an identifier for the specific template. This actually wasn’t bad at all. The one variable definition gets a little long, but basically I just go from one line in defaults of <code>build_vm_id: "8000"</code> to <a href="https://github.com/ianepreston/recipes/blob/master/ansible/roles/pve_templates/defaults/main.yml#L2-L5">this</a>.</p>
<p>This relies on all my proxmox nodes having hostnames of the format <code>pve&lt;Num&gt;</code> but I can work with that. The number of digits in my IDs will change if I get more than 9 nodes or 99 templates too, but I’m not really expecting that to happen, and I don’t even think that would necessarily break anything if it did, so I won’t worry about it for now.</p>
<p>With that slight modification to the role complete I set my playbook to call the role twice, modifying the variables from the defaults for just the template name, the template number, and the URL of the cloud image to build from for Ubuntu Jammy and Kinetic.</p>
<p>Around this time I realized it was going to be a little tedious running the template build script each time I added a template, so I added a <a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_handlers.html">handler</a> to the role to execute the template build script whenever it made a change. It took a little bit of tweaking to figure out that I needed the full path of the script I wanted to run, as well as set it as the working directory so I could call the subscript that defines all the build variables. After those changes the handler triggered properly and built my templates whenever the script changed, or I added a new template to build.</p>
<p>At this point the general template creation process is working quite nicely for Ubuntu versions, but what about other distros? Let’s give debian a shot. I grabbed the <code>cloudgeneric</code> version of debian bullseye from their official cloud images page and plugged it into my playbook. No problem at all. The template built, I was able to build an image from it just the same as the Ubuntu ones.</p>
<p>Let’s get a bit braver and branch out to an even more different distro Rocky Linux. This one might come in handy if I want to try out anything enterprisey or just want to see what the Red Hat experience is like. I found their generic cloud images <a href="https://rockylinux.org/alternative-images/">here</a> and plugged the link into my playbook. The template built ok, but trying to run the VM I ran into problems where it got stuck on a line that said <code>Probing EDD (edd=off to disable)... ok</code> and just hung out there. Similar to the weird boot loop I got deploying from my NAS I wasn’t able to shut down the VM from the Web UI and had to go into the terminal on the node and <code>ps aux | grep "/usr/bin/kvm -id &lt;VM ID&gt;"</code> to find its PID and <code>kill -9</code> it before I could remove the VM. I guess I have to do some troubleshooting. A little searching finds that this error is pretty common, although it doesn’t actually relate to the message, but something that’s happening after. There are a few potential kernel configs I might be able to change, but as I’m poking around in the machine I notice something interesting, it’s got way more disk to start than my Ubuntu templates did. I wonder if I’m somehow filling the disk, so I use that command from the previous section and resize the disk on a newly cloned template before starting it up. Disappointingly this did not solve the problem. Another weird thing I noticed during the start up is that CPU usage on the VM is pinned at right around 50%. Since I gave it 2 cores that suggests that one core is working flat out on something. Several of the posts indicated that after about 10 minutes the system would come up. That’s obviously a terrible startup time, but I’d like to give it a while to see if I at least have the same problem. So I go do some reading and let this VM run for a while… and discover that tragically the usually perfect strategy of ignoring a problem and hoping it goes away doesn’t work in this case.</p>
</section>
<section id="examine-the-template-creation-script-and-modify-it" class="level2">
<h2 class="anchored" data-anchor-id="examine-the-template-creation-script-and-modify-it">Examine the template creation script and modify it</h2>
<p>Something about how I have my VM configured is not playing nice with Rocky Linux. It could just be a very specific thing that I only want to modify for that distro, but I also just copy-pasted most of the other template creation parameters from some guy on the internet. So before I assume that my basic parameters are the best and it’s only Rocky that needs to be modified, let’s examine those options that I’m using and see if I want to modify any of them. Maybe while I’m at it I’ll fix my Rocky issue (or introduce new ones to working distros), but at a minimum I’ll have a better understanding of what’s going on.</p>
<p>The first little bit of the script downloads a cloud image, and then uses virt-customize to update packages, install a list of packages (just qemu-guest-agent and cloud-init by default), copy in a build-info file with some metadata about the template build, copy in some ssh related files and have a script to set them up on first boot (note to self, maybe that’s the part that’s breaking in Rocky, I’ve only tested that script in debian and Arch based distros so far). That stuff (except maybe the ssh part) is all straightforward and I understand what it’s trying to do, so let’s skip to the next line:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> destroy <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span></span></code></pre></div>
<p>Remove the old template before you build a new one, makes sense.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> create <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--memory</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${vm_mem}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cores</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${vm_cores}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--net0</span> virtio,bridge=vmbr0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${template_name}</span></span></code></pre></div>
<p>Create a new VM (that we’ll turn into a template later) with an ID of <code>build_vm_id</code>, memory and cores set to our variables, and a <code>virtio</code> network adapter, which is what I did in the manual template creation. Finally we give it a name based on the <code>template_name</code> variable. So far so good, but I had a lot more options available when I built a VM manually earlier in this post, anything else I should set? Reading back through my manual config I set basically everything else to defaults so I think I’m good here. Let’s see what’s next.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> importdisk <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${image_name}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${storage_location}</span></span></code></pre></div>
<p>Ok, this is fine, I’m importing the disk image I downloaded and modified to the VM I created and putting it in the storage location I specify. All seems fine. Maybe I’ll need to revisit this if I take another crack at storing these templates on my NAS, but fine for now.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> set <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--scsihw</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${scsihw}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--scsi0</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${storage_location}</span>:vm-<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span>-disk-0</span></code></pre></div>
<p>Ok, here’s where I deviate from what I picked in the manual build. In my defaults (based on the script I copied in) I had <code>scsihw</code> set to <code>virtio-scsi-pci</code>, whereas in my manual build I went with <code>virtio-scsi-single</code>. I’m struggling to find the actual difference between these settings, but let’s change it for kicks for now.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> set <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--ide0</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${storage_location}</span>:cloudinit</span></code></pre></div>
<p>Add the cloud-init drive, seems fine. It’s emulating a CD drive so ide makes sense.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> set <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--nameserver</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${nameserver}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--ostype</span> l26 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--searchdomain</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${searchdomain}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--ciuser</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${cloud_init_user}</span></span></code></pre></div>
<p>Add a couple defaults to the cloud-init template and set the ostype to linux (l26). No worries there.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> set <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--boot</span> c <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--bootdisk</span> scsi0</span></code></pre></div>
<p><code>--boot c</code> tells it to boot from hard disk (as opposed to CD or network) and we set the bootdisk to the image that’s been mounted to the VM. Seems fine.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qm</span> set <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${build_vm_id}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--agent</span> enabled=1</span></code></pre></div>
<p>This turns on qemu agent, which we want.</p>
<p>One thing I noticed from going through this is I had some lines that set multiple options, even though they weren’t necessarily related. So I cleaned that up to be one option per line. Easier to parse and modify that way.</p>
<p>I took a quick look back at the manual config section and didn’t see anything else that stood out, so I guess I have to get back to fixing Rocky Linux.</p>
</section>
<section id="get-back-to-making-rocky-linux-work-spoiler-i-do-not-succeed" class="level2">
<h2 class="anchored" data-anchor-id="get-back-to-making-rocky-linux-work-spoiler-i-do-not-succeed">Get back to making Rocky Linux work (spoiler, I do not succeed)</h2>
<p>Ok, that was a fun side quest, but let’s get back to figuring out Rocky. I re-run my template creation playbook, just in case that storage config changed anything. I also found <a href="https://forum.proxmox.com/threads/getting-probing-edd-edd-off-to-disable-ok-when-booted.97414/">a proxmox forum post</a> where someone was having the same problem with a particular RHEL image, but no solution. That post also said it worked fine with RHEL 7 and the issue was with 6. I’m trying Rocky 9 (I believe they use the same version as RHEL for compatibility) so I don’t know if that’s helpful. <a href="https://leo.leung.xyz/wiki/No_Console_Output">This post</a> suggests the output just means my console output is being redirected somewhere else, so I’m not seeing whatever the actual issue is. I guess I should fix that first regardless. One suggested solution there is to change the default tty from serial. An alternative approach there, is to check out the <a href="https://pve.proxmox.com/wiki/Serial_Terminal">proxmox docs</a> and enable serial out on the VM with <code>qm set &lt;VM ID&gt; -serial0 socket</code>. Let’s add that line to my template and see if I get anything. A little bit of progress in that it doesn’t just tell me I don’t have serial on that machine, but I also only see <code>starting serial terminal on interface serial0 (press Ctrl+O to exit)</code>, which isn’t exactly informative. Let’s ditch my ssh script setup on first boot, just to make sure that’s not what’s hanging the template. Removing it from the template script gives me the same issue, so the problem is elsewhere. Just for kicks, let’s try a different Rocky cloud image. I found <a href="https://medium.com/geekculture/create-a-rocky-linux-virtual-machine-vm-with-terraform-and-proxmox-6692a49f7b43">this blog</a> that’s using the <code>GenericCloud</code> image rather than the <code>GenericCloudBase</code> image I was using. I’m not sure why I picked <code>GenericCloudBase</code> to begin with so let’s swap over and see what happens. Still nothing. Ok, the blog also has a bunch more cloud-init modules installed than I do. Maybe one of them will fix things. Let’s add them to the package list for that template. Still no luck. Ok, back to basics. We have a blog post where someone made a template, and apparently it worked. Let’s try manually working through those instructions and see what happens. Well, first problem their link goes to a pinned daily build of Rocky that’s no longer available on the site. Fine, we’ll do the latest one and hope that there’s not just some daily build issue that’s leading to all of this. So I get the same error following the guide. After a little more digging I find a link in the rocky vault to the exact image that the blog was using. Let’s apply my template to that image. Slightly better luck. It still bootloops, but I can actually see things in the console and by being very speedy I was even able to get a screencap of the kernel panic error it’s throwing.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.ianpreston.ca/posts/{{ site.baseurl }}/images/proxmox3/panic.png" title="Rocky Panic" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Nodes</figcaption>
</figure>
</div>
<p>Finding out that this was the issue led me to a <a href="https://forum.proxmox.com/threads/kernel-panic-installing-rocky-or-almalinux.114885/">proxmox forum</a> post where it turns out lots of people are having this issue with Rocky 9 if they set their CPU to the default <code>kvm64</code>. I reset my VM to use <code>host</code> for the CPU. That fixed the boot loop error but led to another error. At this point I decided I didn’t feel like running Rocky Linux very much.</p>
</section>
<section id="try-arch-linux" class="level2">
<h2 class="anchored" data-anchor-id="try-arch-linux">Try Arch Linux</h2>
<p>Rocky was supposed to be an intermediate difficulty distro to test out my template process. I don’t actually have a use case for it, I just figured it would be more different than debian but less different than flatcar when it comes to testing. I’m really hoping that I just got unlucky and that other distros won’t be so hard. Let’s see if that’s correct. I don’t have an immediate use case for Rocky, but I do like running Arch, it’s what my current server has. Let’s try that. Building the template goes fine, and this one actually boots to a login prompt from the proxmox UI, so we’re on a happier path than with Rocky already. At first it seemed like Arch wasn’t updating my default user. I started up the image and tried to ssh in but got a <code>connection refused</code> error. Trying to ssh in as the default <code>arch</code> user that the image uses got a <code>permission denied</code> error instead. After some testing it turns out that cloud-init just takes longer to complete on first boot in Arch, I think because it has to do more package updating. If I just left the VM running for a bit I was able to ssh right in.</p>
</section>
<section id="try-flatcar-linux" class="level2">
<h2 class="anchored" data-anchor-id="try-flatcar-linux">Try flatcar Linux</h2>
<p>I’ve never used flatcar before, but it sounds interesting and <a href="https://eevans.co/blog/garage/">this blog</a> recommended it for self hosting kubernetes so I’d like to have it available in my environment. I found <a href="https://github.com/Doc-Tiebeau/proxmox-flatcar">this repository</a> which had its own scripts to create a flatcar template. Most of it looks broadly similar to the approach I’ve been taking, so let’s try it out. I notice that flatcar images come in <code>.img.bz2</code> format instead of <code>.img</code> or <code>.qcow2</code> like the other files I’ve downloaded. I may have to add in some logic to the script to extract images in that case. As a first step though I just tried running the whole workflow as is. That got me a template built, but the VM I created off it couldn’t find any bootable media, suggesting the disk creation didn’t work as intended. Probably because I have to extract it first. After adding a little bit of logic to my image building script:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${image_name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bz2"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bzip2</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${image_name}</span></span>
<span id="cb9-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">image_name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${image_name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>.<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb9-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span></code></pre></div>
<p>I got the VM to boot. I could auto login as user <code>core</code> over serial, but it looks like none of my other <code>cloud-init</code> config stuff worked. This post is already getting super long though so I’m going to save getting a fully working flatcar image for a separate post and declare victory on my general goal of “be able to make templates automatically”.</p>
</section>
</section>
<section id="automate-deploying-vms-from-templates" class="level1">
<h1>Automate deploying VMs from templates</h1>
<p>I’m not entirely done with templates at this point. I still want to schedule their rebuild so that I can have fresh templates to build VMs, and I need to figure out some way to be able to deploy VMs based off these templates to any node, either by recreating them on each node, or figuring out why creating them off shared storage didn’t work before. How exactly I go about some of that might depend on how I actually want to deploy VMs from these templates though, so let’s figure that out and come back to templates later.</p>
<p>Once again I’m at a decision point. I can keep using <a href="https://docs.ansible.com/ansible/latest/collections/community/general/proxmox_module.html">ansible</a> to deploy VMs, or I can switch to <a href="https://registry.terraform.io/providers/Telmate/proxmox/latest/docs">terraform</a>. While for templates I avoided the hashicorp product and the associated learning curve, I’ve actually used terraform a bit before, and I know that it’s something I’ll want to learn for other applications like deploying cloud resources, so in this case it seems to be worth the extra effort to figure out.</p>
<p>In my <a href="https://github.com/ianepreston/recipes">recipes repository</a> I made a <code>terraform</code> directory and a <code>pve</code> subdirectory under that to contain this project. That repository already has terraform configured from my devcontainer so I’m off to a good start. I created a <code>main.tf</code> file and put in just the required info for the proxmox provider so I could run <code>terraform init</code>. This seemed to work ok, so next up is to configure the connection to my cluster.</p>
<p>Following <a href="https://registry.terraform.io/providers/Telmate/proxmox/latest/docs">the docs</a> for the provider I created a terraform user in my cluster. In theory I should automate this with ansible too as part of my proxmox setup, but I feel like I’m already getting pretty in the weeds here and would like to move towards actually accomplishing things. I guess I’ll end up regretting this if I need to entirely rebuild my cluster and can’t figure out why my terraform jobs aren’t running all of a sudden. After creating the user I added a <code>pve_creds.env</code> file to the directory (but also put it in <code>.gitignore</code>) with the username and password I’d just set up. This part is fragile too, since if I move to a different machine or delete this repository I’ll have to recreate that file. At some point in the future I’ll either figure out <a href="https://www.hashicorp.com/products/vault">vault</a> or maybe just set up the <a href="https://go.bitwarden.com/password-management-for-business-teams-organizations/">bitwarden</a> CLI to properly retrieve secrets. But that’s a project for another day.</p>
<p>With my credentials (presumably) set up, let’s try and provision a machine. There’s all sorts of fancy stuff I can eventually do to parametrize the build and I will definitely set all of that up eventually, but for now let’s start with spinning up one machine using hard coded values.</p>
<pre class="hcl"><code>resource "proxmox_vm_qemu" "test_server" {
  count       = 1
  name        = "test-vm-${count.index + 1}"
  target_node = "pve1"
  clone       = "ubuntujammytemplate"
  agent       = 1
  os_type     = "cloud-init"
  cores       = 3
  cpu         = "host"
  memory      = 4096
  bootdisk    = "scsi0"
  disk {
    slot = 0
    # set disk size here. leave it small for testing because expanding the disk takes time.
    size     = "10G"
    type     = "scsi"
    storage  = "local-zfs"
    iothread = 1
  }
  network {
    model  = "virtio"
    bridge = "vmbr0"
  }
  ipconfig0 = "ip=192.168.85.9${count.index + 1}/24,gw=192.168.85.1"
}</code></pre>
<p>The first run of <code>terraform plan</code> was disappointing because I’d accidentally used the username for the terraform user in one post I’d been reading in the environment, but set a username based on the official docs on my datacenter, so I just got a permission denied. After that though it looked promising with the following:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Terraform</span> used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span>
<span id="cb11-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> create</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Terraform</span> will perform the following actions:</span>
<span id="cb11-5"></span>
<span id="cb11-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># proxmox_vm_qemu.test_server[0] will be created</span></span>
<span id="cb11-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"proxmox_vm_qemu"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_server"</span> {</span>
<span id="cb11-8">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> additional_wait           = 0</span>
<span id="cb11-9">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> agent                     = 1</span>
<span id="cb11-10">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> automatic_reboot          = true</span>
<span id="cb11-11">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> balloon                   = 0</span>
<span id="cb11-12">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> bios                      = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seabios"</span></span>
<span id="cb11-13">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> boot                      = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span></span>
<span id="cb11-14">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> bootdisk                  = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scsi0"</span></span>
<span id="cb11-15">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> clone                     = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ubuntujammytemplate"</span></span>
<span id="cb11-16">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> clone_wait                = 0</span>
<span id="cb11-17">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> cores                     = 3</span>
<span id="cb11-18">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> cpu                       = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"host"</span></span>
<span id="cb11-19">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> default_ipv4_address      = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-20">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> define_connection_info    = true</span>
<span id="cb11-21">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> force_create              = false</span>
<span id="cb11-22">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> full_clone                = true</span>
<span id="cb11-23">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> guest_agent_ready_timeout = 100</span>
<span id="cb11-24">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> hotplug                   = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"network,disk,usb"</span></span>
<span id="cb11-25">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> id                        = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-26">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> ipconfig0                 = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip=192.168.85.91/24,gw=192.168.85.1"</span></span>
<span id="cb11-27">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> kvm                       = true</span>
<span id="cb11-28">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> memory                    = 4096</span>
<span id="cb11-29">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> name                      = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test-vm-1"</span></span>
<span id="cb11-30">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> nameserver                = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-31">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> numa                      = false</span>
<span id="cb11-32">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> onboot                    = false</span>
<span id="cb11-33">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> oncreate                  = true</span>
<span id="cb11-34">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> os_type                   = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cloud-init"</span></span>
<span id="cb11-35">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> preprovision              = true</span>
<span id="cb11-36">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> reboot_required           = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-37">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> scsihw                    = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-38">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> searchdomain              = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-39">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> sockets                   = 1</span>
<span id="cb11-40">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> ssh_host                  = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-41">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> ssh_port                  = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-42">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> tablet                    = true</span>
<span id="cb11-43">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> target_node               = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pve1"</span></span>
<span id="cb11-44">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> unused_disk               = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-45">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> vcpus                     = 0</span>
<span id="cb11-46">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> vlan                      = <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span></span>
<span id="cb11-47">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> vmid                      = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-48"></span>
<span id="cb11-49">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> disk {</span>
<span id="cb11-50">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> backup             = 0</span>
<span id="cb11-51">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> cache              = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span></span>
<span id="cb11-52">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> file               = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-53">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> format             = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-54">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops               = 0</span>
<span id="cb11-55">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_max           = 0</span>
<span id="cb11-56">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_max_length    = 0</span>
<span id="cb11-57">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_rd            = 0</span>
<span id="cb11-58">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_rd_max        = 0</span>
<span id="cb11-59">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_rd_max_length = 0</span>
<span id="cb11-60">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_wr            = 0</span>
<span id="cb11-61">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_wr_max        = 0</span>
<span id="cb11-62">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iops_wr_max_length = 0</span>
<span id="cb11-63">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> iothread           = 1</span>
<span id="cb11-64">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> mbps               = 0</span>
<span id="cb11-65">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> mbps_rd            = 0</span>
<span id="cb11-66">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> mbps_rd_max        = 0</span>
<span id="cb11-67">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> mbps_wr            = 0</span>
<span id="cb11-68">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> mbps_wr_max        = 0</span>
<span id="cb11-69">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> media              = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-70">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> replicate          = 0</span>
<span id="cb11-71">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> size               = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10G"</span></span>
<span id="cb11-72">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> slot               = 0</span>
<span id="cb11-73">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> ssd                = 0</span>
<span id="cb11-74">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> storage            = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"local-zfs"</span></span>
<span id="cb11-75">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> storage_type       = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-76">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> type               = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scsi"</span></span>
<span id="cb11-77">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> volume             = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-78">        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-79"></span>
<span id="cb11-80">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> network {</span>
<span id="cb11-81">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> bridge    = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vmbr0"</span></span>
<span id="cb11-82">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> firewall  = false</span>
<span id="cb11-83">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> link_down = false</span>
<span id="cb11-84">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> macaddr   = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-85">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> model     = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"virtio"</span></span>
<span id="cb11-86">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> queues    = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-87">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> rate      = <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">known</span> after apply<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-88">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> tag       = <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span></span>
<span id="cb11-89">        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-90">    <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-91"></span>
<span id="cb11-92"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Plan:</span> 1 to add, 0 to change, 0 to destroy.</span></code></pre></div>
<p>That looks like the sort of thing I want to do, let’s do it with a run of <code>terraform apply</code>… It worked! It took a fair bit longer than doing it manually runtime wise (about a minute and 30 seconds), but I had read that the proxmox API is kind of slow, so that wasn’t totally surprising. At the end of the process though I had a new VM with the name and IP I’d assigned with the CPU/RAM/Disk I’d specified that I was able to ssh into. Neat! There’s a lot more I’d like to do with terraform in terms of actually deploying machines I care about of course, but this post is already getting super long so let’s save that for later.</p>
</section>
<section id="automate-creating-templates-across-nodes" class="level1">
<h1>Automate creating templates across nodes</h1>
<p>So it seems like terraform is going to be cloning templates based on their name, not their VM ID. This should mean as long as I have a template with the same name on each node, I should be able to provision VMs to any node I want from terraform. It’s definitely a bit of extra disk/CPU to do it this way, but it seems fairly clean and easy, so let’s give it at try. I think all I’ll have to do is change my playbook to target all of my nodes, since I already have logic to adjust the VM id of the template based on which node it’s on. Turns out that did indeed work, so not much to write about this one.</p>
</section>
<section id="automate-scheduled-rebuilds-of-the-templates" class="level1">
<h1>Automate scheduled rebuilds of the templates</h1>
<p>Last thing to do before I wrap up this section of my homelab saga. That’s to schedule the creation of these templates. This way if there are updated images of a particular distro, or if the packages themselves need to be updated, any machines I create from the template will have those changes reflected regularly.</p>
<p>Using the <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/cron_module.html">cron</a> module, I created a task to add an entry for each template:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb12-1"></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create crontab entry for template creation</span></span>
<span id="cb12-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.cron</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Create template {{ template_name }}"</span></span>
<span id="cb12-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minute</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ 5 * build_vm_template_num | int }}"</span></span>
<span id="cb12-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ build_vm_host_digit }}"</span></span>
<span id="cb12-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb12-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">day</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span></span>
<span id="cb12-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">job</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cd {{ install_dir }} &amp;&amp; ./build_image.sh"</span></span></code></pre></div>
<p>I don’t want all these jobs to kick off at once, so I had the start hour vary based on the node, from 1am to 3am, and then the minute vary by the template number multiplied by 5 so each job should kick off in 5 minute intervals. If I end up with more than 12 (11?) templates I’ll have to revise this, but that’s a problem for future me.</p>
<p>I’m not 100% sure this will work, the crontab entries look fine, but I never totally trust a cron job until I’ve seen it execute at least once. Fortunately I’m writing this on the 30th of the month so I’ll be able to check back and see soon enough.</p>
</section>
<section id="conclusion-and-next-steps" class="level1">
<h1>Conclusion and next steps</h1>
<p>In this post I (over)designed a way to create Virtual Machines on my proxmox cluster for a variety of Linux distributions. To recap: so far in this series I have selected and acquired hardware, done a basic proxmox install on that hardware and clustered it, configured the underlying proxmox environment using ansible, created a number of template VMs for various Linux distributions, and set up the basic tooling necessary to create VMs from those templates using code with Terraform.</p>
<p>With all of this done, surely it’s time to actually start <em>doing things</em> on my cluster rather than setting it up, right? Not so fast! There’s still one more piece of low level infrastructure I need to set up before I’m fully ready to deploy VMs to actually do things in this environment, and that’s to configure distributed storage on the 1TB SSDs I have in each node using <a href="https://ceph.com/en/">ceph</a>. I’ll cover that in the next post.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <category>linux</category>
  <category>proxmox</category>
  <guid>https://blog.ianpreston.ca/posts/2023-01-21-proxmox3.html</guid>
  <pubDate>Sat, 21 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Home cluster part 2 - Configuring Proxmox</title>
  <link>https://blog.ianpreston.ca/posts/2022-12-31-proxmox2.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In <a href="../posts/2022-11-21-proxmox.html">part 1</a> of this series I laid out the rationale for building a homelab cluster, walked through my hardware selection, and ran through the proxmox installer. In this post I’ll document the further configuration of the cluster and its nodes. The actual implementation will be done in ansible and tracked in my <a href="https://github.com/ianepreston/recipes">recipes</a> repository, so I will keep it light on code in this post. What I’m going to try and document here is the steps I took, why I took them, and any weird edge cases or other fun learning opportunities I encounter in the process.</p>
</section>
<section id="the-goals-for-this-post" class="level1">
<h1>The goals for this post</h1>
<p>By the end of this post I’d like to have accomplished the following things with my cluster:</p>
<ul>
<li>Set up their entries in ansible and be able to connect to each node individually or address them as a group</li>
<li>Turn off the enterprise repository and add the non-enterprise one</li>
<li>Make each node aware of my UPS state (one directly and the other two as clients)</li>
<li>Set up email alerting</li>
<li>Configure locale settings</li>
<li>Set up my NAS as a storage target</li>
</ul>
</section>
<section id="what-im-working-on" class="level1">
<h1>What I’m working on</h1>
<p>Just for kicks, let’s include an actual picture of these nodes I’m working on in this post:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.ianpreston.ca/posts/proxmox2/nodes.jpg" title="Proxmox nodes" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Nodes</figcaption>
</figure>
</div>
<p>Here they are, sitting in my utility room near the rest of my gear. So cute!</p>
</section>
<section id="the-code" class="level1">
<h1>The code</h1>
<p>The playbook I built for this is available <a href="https://github.com/ianepreston/recipes/blob/master/ansible/pve.yml">here</a>. That link points to the main playbook, and the repository more generally has the custom roles and other configs I made to get everything set up.</p>
</section>
<section id="ansible-connectivity" class="level1">
<h1>Ansible connectivity</h1>
<p>I haven’t set up these hosts to use key based authentication yet, and decided to just try password auth. I ended up getting some host key errors, which I didn’t quite understand. At first I thought it was something with the devcontainer config I was using, but I tried the same thing on the host system and got the same error. After that I realized it was because I’d reinstalled that host and the key I had saved in <code>~/.ssh/known_hosts</code> was from the old install. After clearing out that record I was able to ssh to all three hosts from my main system. I then had to refresh the devcontainer so it would copy in an updated copy of my <code>~/.ssh/known_hosts</code> file. I’m not sure how frequently devcontainers normally refresh that, but it’s a config alignment issue I’ll have to keep in mind for future problems. Anyway, beside that little known hosts config issue, adding all three hosts and addressing them in the <code>pve</code> group all worked fine.</p>
</section>
<section id="set-up-the-non-subscription-repository" class="level1">
<h1>Set up the non-subscription repository</h1>
<p>Proxmox has two repositories for package updates, one for Enterprise subscribers, and one for non-subscribers. By default it comes with the enterprise repository enabled, but since I’m not a subscriber I want to switch repos. Ansible comes with a built in <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_repository_module.html">apt repository</a> module so that was an easy way to ensure the enterprise repo was absent from my sources list and that all the recommended ones (including for CEPH) were included. I set that role to also update my repository list and upgrade all installed packages for good measure as well using the <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_module.html">apt</a> module.</p>
</section>
<section id="set-up-ups-state-alerting" class="level1">
<h1>Set up UPS state alerting</h1>
<section id="failed-first-attempt" class="level2">
<h2 class="anchored" data-anchor-id="failed-first-attempt">Failed first attempt</h2>
<p>I made a good amount of progress trying to set this up a certain way, but eventually hit a wall. Some of what I tried originally is still interesting, it just didn’t work. The core issue is that I was dynamically identifying which host had the UPS attached to it based on the output of a locally run command on each host. This worked fine in terms of setting conditionals to only do server setup stuff on the node with the UPS attached, but ran into troubles configuring the clients. The clients need to know the hostname of the server, but I couldn’t figure out any way to dynamically identify that host in an ansible playbook. Registered variables from commands (what I was using to identify which host was connected to the UPS) are host variables only, so the other hosts didn’t have access to it. From the look of it you can’t really make a host variable a global variable based on a condition. There might be a way to concatenate all host variables in a way that would let me get <code>&lt;server host&gt; + '' + '' == &lt;server host&gt;</code> as the output for all hosts, but that felt pretty hacky. Based on this I’m just going to hard code which host is directly connected to the UPS and build my playbook from that.</p>
<section id="borked-attempt-write-up" class="level3">
<h3 class="anchored" data-anchor-id="borked-attempt-write-up">Borked attempt write up</h3>
<p>One node in my cluster is connected via USB to my UPS. In the event of a power failure I want it to be alerted via that USB connection, and then pass that alert on to the other nodes via <a href="https://networkupstools.org/">NUT</a>. I’m largely relying on the <a href="https://wiki.archlinux.org/title/Network_UPS_Tools">Arch wiki</a> to set this up, even though proxmox is Debian based, just because that wiki is amazing. I also found <a href="https://github.com/ykuksenko/ansible.nut">this repository</a> which has a role configured for setting up nut. It’s set up in a different way than I want, and also has a lot more abstraction that’s good for portability but bad for interpretability, so I won’t use it directly.</p>
<p>The first thing I want to do is install the <code>nut</code> utility on all the systems, as with the previous section this is easily accomplished with the apt module in ansible.</p>
<p>Next I need to identify which system has the UPS USB cable connected to it, as this one will be the NUT server, and the others will be NUT clients. Realistically this is not going to change and I could just hard code it, but I thought it would be fun to figure out how to automate it.</p>
<p>The <code>nut</code> package comes with a <code>nut-scanner</code> utility which can be used to identify compatible devices. I can register the output of that command in ansible and then set a <a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_conditionals.html#conditions-based-on-registered-variables">conditional</a> to only perform certain operations if the output of the command listed a USB device. To test this before I actually applied anything with conditionals I used the <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/debug_module.html">debug</a> module to output which host had the UPS attached. I won’t keep that debug in my final playbook, so I’ll reproduce that part here:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check if USB for UPS is connected to this host</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.shell</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nut-scanner -U -P</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ups_driver</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Show me which host has the UPS connected</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">msg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> System {{ inventory_hostname }} has UPS driver {{ ups_driver }}</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ups_driver.stdout.find('usbhid-ups') != -1</span></span></code></pre></div>
<p>Next is to configure the driver on connected system. To do this I copy over a <code>ups.conf</code> file based on the output of the <code>nut-scanner</code> command. After copying over the template I test it by sshing into the machine and running <code>upsdrvctl start</code>. Since that looked good I enable the <code>nut-driver</code> service with ansible’s systemd module.</p>
<p>After that it’s time to set up the nut server for clients (both the local machine and the other nodes in the cluster) to connect to. Following the Arch wiki I created a <code>upsd.users</code> file with user configuration for the clients and then tried to enable and start the nut server. I didn’t get an error from ansible for this, but when I tried to check the server I got nothing, and checking the state of the service I saw that it was dead. The relevant lines in the service status seemed to be:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">upsd</span> disabled, please adjust the configuration to your needs</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Then</span> set MODE to a suitable value in /etc/nut/nut.conf to enable it</span></code></pre></div>
<p>Taking a look at that file I see this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##############################################################################</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The MODE determines which part of the NUT is to be started, and which</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># configuration files must be modified.</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This file try to standardize the various files being found in the field, like</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /etc/default/nut on Debian based systems, /etc/sysconfig/ups on RedHat based</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># systems, ... Distribution's init script should source this file to see which</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># component(s) has to be started.</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The values of MODE can be:</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - none: NUT is not configured, or use the Integrated Power Management, or use</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   some external system to startup NUT components. So nothing is to be started.</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - standalone: This mode address a local only configuration, with 1 UPS</span></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   protecting the local system. This implies to start the 3 NUT layers (driver,</span></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   upsd and upsmon) and the matching configuration files. This mode can also</span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   address UPS redundancy.</span></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - netserver: same as for the standalone configuration, but also need</span></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   some more network access controls (firewall, tcp-wrappers) and possibly a</span></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   specific LISTEN directive in upsd.conf.</span></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   Since this MODE is opened to the network, a special care should be applied</span></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   to security concerns.</span></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - netclient: this mode only requires upsmon.</span></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># IMPORTANT </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  This file is intended to be sourced by shell scripts.</span></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  You MUST NOT use spaces around the equal sign!</span></span>
<span id="cb3-27"></span>
<span id="cb3-28"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">MODE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>none</span></code></pre></div>
<p>So based on this I think I need ansible to remove the <code>MODE=none</code> line and change it to <code>MODE=netserver</code> on the server. Probably it will have to be <code>MODE=netclient</code> on the clients, but let’s leave that alone for now. I can handle this using the <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/lineinfile_module.html">lineinfile</a> module. After doing this and restarting the <code>nut-server</code> service I ran <code>upsc pveups</code> and had the state of the UPS returned, indicating the config was good for the directly connected node. <strong>This is where I got stuck, see the write up above</strong></p>
</section>
</section>
<section id="working-second-attempt" class="level2">
<h2 class="anchored" data-anchor-id="working-second-attempt">Working second attempt</h2>
<p>Don’t reinvent the wheel folks. I vendored in <a href="https://github.com/ykuksenko/ansible.nut">this role</a> and got everything working pretty much right away. I did have to hard code which host was attached to the UPS, but that’s a small price to pay. Problem solved!</p>
</section>
</section>
<section id="setup-email-alerting" class="level1">
<h1>Setup email alerting</h1>
<p>The next thing I want is to set up an outbound email configuration, so I can receive email alerts for things like backups or drive issues. The general idea for configuring this comes from <a href="https://docs.technotim.live/posts/proxmox-alerts/">Techno Tim</a>. I’m learning my lesson from NUT and not trying to roll my own ansible role, instead I’m using <a href="https://github.com/Oefenweb/ansible-postfix">this role</a> I found on GitHub.</p>
<p>I set up the playbook to run, ansible indicated it had made some changes, so I tried sending an email from the command line with</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a test message sent from postfix on my Proxmox Server"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mail</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test Email from Proxmox"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>my.email@address.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>But nothing went out. Ok, time to troubleshoot.</p>
<ul>
<li><p>Check if postfix service is up with <code>systemctl status postfix</code>. It looks fine</p></li>
<li><p>Check if I have a correct looking config in <code>/etc/postfix/sasl_passwd</code>. I do and there’s the <code>sasl_passwd.db</code> file in that folder as well that I’d expect</p></li>
<li><p>Check <code>/etc/postfix/main.cf</code>. Config looks ok</p></li>
<li><p>Check <code>/var/log/mail.log</code>. Pertinent error seems to be around this:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bounced <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">host</span> smtp.gmx.com<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">212.227.17.184</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> said: 550-Requested action not taken: mailbox unavailable 550 invalid DNS MX or A/AAAA resource record <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(in</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">reply</span> to MAIL FROM command<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">))</span></span></code></pre></div></li>
<li><p>Figure I probably set up <code>postfix_aliases</code> wrong in the role variables, so change that and try again. Slightly different error</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bounced <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">host</span> smtp.gmx.com<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">212.227.17.174</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> said: 550-Requested action not taken: mailbox unavailable 550 Sender address is not allowed. <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(in</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">reply</span> to MAIL FROM command<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">))</span></span></code></pre></div></li>
<li><p>Realize that I was using <code>postfix_aliases</code> the way I should have been using <code>postfix_sender_canonical_maps</code>. Redo that part.</p></li>
</ul>
<p>Email sent! Right now they all show up as just coming from <code>root</code>. Per the Techno Tim docs linked above I know there’s a way to make that a more informative name. This would work, but I’d like it to say which host it’s actually coming from.</p>
<p>I took a guess from the Techno Tim post and figured the config I needed to change in the playbook would be <code>postfix_header_checks</code> and after poking around in the related jinja templates and looking at what the Techno Tim post said to write I got a config together that at least didn’t blow up. Sent a test email again and:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">status</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bounced <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">host</span> smtp.gmx.com<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">212.227.17.184</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> said: 554-Transaction failed 554-Reject due to policy restrictions. 554 For explanation visit https://postmaster.gmx.net/en/error-messages<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span>ip=24.64.146.237<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">c</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">in</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">reply</span> to end of DATA command<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">))</span></span></code></pre></div>
<p>Ok, this isn’t a critical feature, but I can handle hacking at it for a bit before I give up.</p>
<ul>
<li>Compare what’s in my <code>/etc/postfix/header_checks</code> to what the guide showed: It looks mostly the same, although I’ve got <code>.</code>s in my name since I used the <code>{{ ansible_hostname }}</code> variable to define it. Maybe that’s it? Nope. Same error.</li>
<li>Techno Tim blog installed <code>postfix-pcre</code> to enable this. Playbook didn’t by default. Add that to the <code>postfix_install</code> var and try again: Still bounced.</li>
<li>Notice that in the Techno Tim post he didn’t bother including a real email in the replacement line because it wasn’t supposed to matter. Maybe GMX actually cares ( his example had been for gmail). Update the variable so it keeps my real email for that part and just changes the name: It works!</li>
</ul>
</section>
<section id="configure-locale-settings" class="level1">
<h1>Configure locale settings</h1>
<p>Around this time I noticed I was getting some error messages when I would connect to a shell on the nodes: <code>perl: warning: Please check that your locale settings:</code>. I already had a role created to set up locales for previously configured hosts, so this was an easy fix, I just had to add it to the playbook for these hosts. Not much to say about this, just noting it here for completeness.</p>
</section>
<section id="set-up-nfs-shares" class="level1">
<h1>Set up NFS shares</h1>
<p>I already configured this manually, but now I’d like to make sure it stays configured if I rebuild, so I’ll move it into ansible.</p>
<p>According to the <a href="https://pve.proxmox.com/wiki/Storage:_NFS">proxmox docs</a> the configuration is stored in <code>/etc/pve/storage.cfg</code>.</p>
<p>Taking a look in there I can see that I do have a NFS share configured there, along with my local and zfs storage.</p>
<p>This seems like a great use case for the <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/blockinfile_module.html">blockinfile</a> module in ansible.</p>
<p>Well this is weird. After removing the original block from that file and having ansible add it, I can access the mount point from the terminal on all my hosts, but it no longer shows up as a storage option in the UI.</p>
<p>After doing a reboot and some further testing I confirmed that removing that entry should remove it from the mount point and the UI (and it does). Adding the entry back does not seem to add the storage either to the mount point or the UI. I’m not sure why that would be, so let’s see what else there is to do.</p>
<p>Looking more through the proxmox docs I see there’s a <a href="https://pve.proxmox.com/pve-docs/chapter-pvesm.html">pve storage manager</a> command. Maybe what I should do instead is check if that share is in the config file, and if it’s not run a shell command to add it.</p>
<p>In doing some testing for the shell command, I confirmed that all the shell command does is fill in an entry in the file mentioned above. After some further testing, the issue seems to be related to the <code>#Ansible Managed Block</code> comments the ansible function places around the entry. Something about needing blank lines around entries. By modifying the block marker to have newlines on either side of the comment I was able to use blockinfile to set up the share. Easier than parsing shell output and sending a big long command. I could have set this to be applied to all hosts, but since this is in <code>/etc/pve</code> the cluster manager will handle replication across hosts for me.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this post I covered a bunch of configuration I wanted to have in place on my proxmox nodes before I got into the business of actually deploying anything. Stay tuned for my next post in this series where maybe I’ll actually use the cluster for what it was intended for and spin up some VMs.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <category>linux</category>
  <category>proxmox</category>
  <guid>https://blog.ianpreston.ca/posts/2022-12-31-proxmox2.html</guid>
  <pubDate>Sat, 31 Dec 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Building my own devcontainers</title>
  <link>https://blog.ianpreston.ca/posts/2022-12-30-devcontainers.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Microsoft has created the <a href="https://code.visualstudio.com/docs/devcontainers/containers">devcontainer</a> standard for packaging up your development environment into a docker image and I love it.</p>
<p>Even though I have a fairly automated environment setup at home, it’s still a hassle whenever I want to start a new project or pick up an old one to make sure I have all the dependencies in place. It’s even trickier if I’m trying to help another person contribute to a project of mine. Devcontainers solve both these issues. Microsoft publishes a number of out of the box images and templates in their GitHub <a href="https://github.com/devcontainers">devcontainers project</a>.</p>
<p>These work quite well, but I’m picky and want things set up in a certain way. For instance, I want <a href="https://github.com/thoughtbot/rcm">rcm</a> installed for dotfile management, and <a href="https://starship.rs/">starship prompt</a> in any environment I work in. On top of that, for python development I like the <a href="https://cjolowicz.github.io/posts/hypermodern-python-01-setup/">hypermodern</a> suite of tools to be installed. It would be relatively easy to make a dockerfile that has these features installed and put it in every project, but I want to overengineer things. This isn’t entirely just me liking to hack on things. The build time for my python environment is actually quite long thanks to compiling several different versions of python, so while a Dockerfile would work, it would be annoying to maintain and take quite a while to build.</p>
<p>In light of this, I decided to make my own copy of the <a href="https://github.com/devcontainers/images">images repository</a> that Microsoft uses to build their devcontainers and make my own. This post chronicles some of the challenges I had doing that.</p>
</section>
<section id="figuring-out-the-code" class="level1">
<h1>Figuring out the code</h1>
<p>To start I just copied the entire <a href="https://github.com/devcontainers/images">images</a> repository and poked around. It’s a beast of a repo (at least compared to the personal or small organization projects I’m used to working on) so it took quite a while just to get a sense of what was there. At a high level there’s a <code>.github</code> folder which contains the CI/CD workflows, a <code>build</code> folder that contains node scripts that build the images, and a <code>src</code> folder that contains the devcontainer specs. I started by deleting all but the <code>base-ubuntu</code> image from <code>src</code> so I could focus on getting one container built without extensive build times. After that I tried to get the build script working locally. Fortunately there are pretty good README files included in each section of the codebase, so I could get a general sense of what was going on.</p>
<p>The next two difficult parts that went together were figuring out how to navigate and understand the node codebase, since I’ve never written node or any javascript before, and figuring out what I’d need to modify to get things working in my repository. Some things were relatively straightforward, like the GitHub actions were calling for secrets like <code>REPOSITORY_NAME</code> and <code>REPOSITORY_SECRET</code> that I’d have to swap out for my image registry name and credentials. Once I got past that surface level understanding though, it got trickier. One fairly easy example was that the original GitHub action wanted to be run on some custom Microsoft <code>devcontainer-image-builder-ubuntu</code> VM that I didn’t have access to. It seemed to work fine if I changed that to <code>ubuntu-latest</code>, I just had to notice the issue and change it. Other things were more embedded. Microsoft is publishing their images to <a href="https://azure.microsoft.com/en-us/products/container-registry/">Azure container registry</a> whereas I want to use <a href="https://hub.docker.com/">Docker hub</a>. Again, some of this was as simple as switching out <code>az login</code> with <code>docker login</code> in the scripts, but some of it was a little more complicated. Part of the node code queries the registry to see what images are there and what tags they have to make sure published image tags aren’t overwritten accidentally. This is a great feature, but it relied heavily on calling the <code>acr</code> command prompt to retrieve that info. I had to find those sections in the code, figure out what sort of data they’d be returning, figure out what request to send to the docker hub API to get similar data, and then modify the node code to parse it the same way. Since I’d never worked with the docker hub API, or node, or seen the actual output of the <code>acr</code> commands I was trying to reproduce, this took some trial and error.</p>
<p>An additional challenge was separating out the nice features of the Microsoft code base from the stuff that I didn’t want and that just made things more complicated. The two main things in the latter category were the secondary registry logic and the stubs repository logic. In both cases, Microsoft is publishing lots of extra stuff besides the built devcontainer image, either because they have two repositories to publish to (I think this relates to them moving the devcontainer spec outside of VS Code into its own project) or they want to publish stub files that other developers can extend for their own purposes. Neither applies to me, but since that logic is embedded in the GitHub actions and the node code that publishes regular images I had to find and strip out all that logic before I could publish my own images.</p>
</section>
<section id="building-my-own-devcontainers" class="level1">
<h1>Building my own devcontainers</h1>
<p>Prior to going to all the trouble of setting up this build infrastructure, I’d already spent quite a bit of time building devcontainer images, primarily for python. In light of that, once I got the build infrastructure going it wasn’t a huge leap to get my own devcontainers building. There were some growing pains though. The Microsoft image builder builds multiple variants of images, namely basing them off different Ubuntu releases or architectures (x86/64 vs arm). I definitely ran into situations where things seemed to be building fine but then I realized some combo of release and architecture was failing and stopping the whole pipeline from completing. There are ways to test those things locally in the repository, but I didn’t have any comprehensive workflow set up so it was easy to miss things. Some stuff I just didn’t bother fixing and removed the troublesome build. For instance, there were a fair number of issues building images based on Ubuntu 18.04LTS (one of the default variants from Microsoft) and I just decided there was no point spending time fixing issues with a release that was about to be EOL from Ubuntu and just dropped it. Similarly, my Infrastructure as Code image didn’t want to install Terraform on the arm build. I’m not currently planning to run that on an arm system so I just dropped it, maybe I’ll put it back later if I want to run it off a raspberry pi but for now it’s not worth the effort.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This was quite likely more effort than it was objectively worth compared to just building an image and pushing it manually with some tags using the <a href="https://containers.dev/supporting#devcontainer-cli">devcontainer cli</a> at least for my personal projects. I did learn a fair bit going through the exercise though, and since I also intend to adopt devcontainers at work (for myself and other people writing at least python code) knowing how to build images in a more automated and versioned manner will be useful.</p>
<p>My repository is <a href="https://github.com/ianepreston/devcontainers">here</a>, the original Microsoft one is <a href="https://github.com/devcontainers/images">here</a>. My repo is definitely a bit of a mess with ugly commits just testing out CI/CD outcomes and a lot of failed releases since I’d never used GitHub directly to release software before, but that’s all part of the learning experience.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <category>linux</category>
  <guid>https://blog.ianpreston.ca/posts/2022-12-30-devcontainers.html</guid>
  <pubDate>Fri, 30 Dec 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Setting up rootless docker</title>
  <link>https://blog.ianpreston.ca/posts/2022-12-30-rootless-docker.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This post covers something that I did for work that I thought might be of more general interest. We have a number of developers that want to build and work in docker containers. Due to security constraints we can’t install WSL and docker desktop on our laptops, so some remote development solution is required. We don’t have kubernetes or anything fancy in our environment, so the initial solution was to just provision an Ubuntu VM and give everyone a login and access to the docker group. Unfortunately there are some major usability and security issues with this approach. Basically, since giving access to docker is essentially giving root access to the machine, developers can see and access each other’s containers and files. From a security perspective this is obviously no good. Even from a usability perspective it means there’s constant risk of inadvertently tripping over another developer’s work, and cleaning up your old images and containers has to be done with a lot more care. To address this issue I decided to look into <a href="https://docs.docker.com/engine/security/rootless/">rootless docker</a>.</p>
<p>I’m going to try a different approach with this blog. The next section will be a lightly edited transcription of all the things I tried (including failures, dead ends, and dumb mistakes). The following section will be a TLDR summary of what you actually need to do to get this working.</p>
</section>
<section id="live-blogging-step-by-step-discovery" class="level1">
<h1>Live blogging step by step discovery</h1>
<p>This experiment started with a vanilla Ubuntu 22.04.1 VM. I had a user with sudo permission, <code>dockertestian</code> and then created two users without any special credentials, <code>dockertesta</code> and <code>dockertestb</code>.</p>
<p>First I tried installing docker with <code>sudo apt install docker</code>, but that was lacking some of the additional features required for rootless docker. It’s possible that I could have found what I needed in the regular Ubuntu repository, but after being thwarted there, I switched to the <a href="https://docs.docker.com/engine/install/ubuntu/">docker docs</a> method and followed their instructions through.</p>
<p>Following the rootless install docs, I disabled the system level docker daemon, and then as each of my regular users I logged in and ran the rootless install script (described in the docker docs). I had to log out and log back in but beyond that I was able to run <code>docker run hello-world</code> without issue. I noticed that when I ran this for the second user it had to download the <code>hello-world</code> image again, which was a good sign for actual isolation.</p>
<p>After running the rootless install script I was given a notice that I might have to modify my <code>~/.bashrc</code>, but I left that alone for a pure test at first.</p>
<p>The next step was to see if I could use VS Code and <a href="https://code.visualstudio.com/docs/devcontainers/containers">devcontainers</a>. Initially this didn’t work, as VS code didn’t automatically look for the user level docker daemon that I was running. Following the prompt in the previous paragraph I added <code>export DOCKER_HOST=unix:///run/user/$(id -u)/docker.sock</code> to my <code>~/.bashrc</code> file. The original prompt from the user install script had my explicit UID instead of <code>$(id -u)</code> in that line, but I modified it so it would always map to the ID of my user across machines, since I like to reuse my dotfiles. It also makes it easier to instruct other users on setting up their machines.</p>
<p>After making this change I could load devcontainers, but ran into some file permission issues. VS code assumes that docker will be run as root, which means UID 0 in the container will correspond to UID 0 on the host machine. Based on that it uses <a href="https://docs.docker.com/engine/security/userns-remap/">namespace remapping</a> to map the <code>vscode</code> user inside the container to the host user outside the container. Running in rootless mode works differently. UID 0 in the container is whatever your user’s UID is outside the container. This results in the <code>root</code> user inside the container mapping to your user outside it. So if you create a file in your workspace outside the container it will be owned by root inside it. If you create a file inside the container it will be owned by some high unused UID outside the container.</p>
<p>The devcontainer spec has a number of options for changing how user mapping works. Setting <code>remoteUser</code> or <code>containerUser</code> to root in the <code>devcontainer.json</code> would work in the sense that I would be root in the container and have proper user level access to files in my workspace. That wasn’t ideal since the way I’d built the devcontainer there was some customization done with the <code>vscode</code> user (pipx installations and other stuff) that I lost if I was root. <code>updateRemoteUserUID</code> either mapped my host user to root int the container (if set to <code>true</code>) or just didn’t do any ID remapping. Within the container as the <code>vscode</code> user I could <code>sudo chown -R vscode .</code> on the workspace directory so that permissions all looked good inside the devcontainer. Of course this meant that they would break if I was outside the devcontainer. That could lead to a lock out situation if I broke the devcontainer config and was kicked out, since I wouldn’t be able to edit the <code>devcontainer.json</code> file since my host user would no longer be the owner. At the time of this writing I don’t believe there’s a totally clean way to use the <code>vscode</code> user inside a devcontainer that’s running on rootless docker. My current solution is to not do user level customization, so that running the container as root isn’t a problem. Unlike with a regular docker daemon this doesn’t represent a security issue, since the root user in the container shares the permissions of my unprivileged user outside it.</p>
<p>Next up was to figure out network share mounting. The normal way of creating a <code>CIFS</code> volume does not work on rootless docker as it requires root access on the host machine. I believe on the actual root daemon docker there are ways to allow mounting of shares from within the container runtime itself, but in some brief testing I couldn’t get them to work. In the past I had used <a href="https://en.wikipedia.org/wiki/GVfs">gvfs</a> to handle userspace mounting of file shares, but it brings in a ton of gnome dependencies and I found it very finicky to work with so I was hoping for a better option.</p>
<p>To properly test network share mounting it was time to join the host to the domain and use a domain account for testing. While in theory I could hard code my username and password into a credential file, in practice that’s not how I’d want users to do it from an ease of use or security perspective. This also surfaced another challenge with UID remapping within the dev container. I’ll want the network share to be associated with my domain user and its associated user ID, which will be UID 0 in the container. Another reason to just run as root in devcontainers if you’re going to use rootless docker. After getting the host VM joined to the domain and logging in with my domain account (unprivileged on this host) I was ready to start testing network shares.</p>
<p>The approach I took was to use <a href="https://help.ubuntu.com/community/Autofs">Autofs</a>. All the setup for this was done with the privileged account, then tested with the domain joined account. First step was to install <code>autofs</code> and <code>cifs-utils</code> and enable the autofs service. Next I created a folder under <code>/mnt/</code> for my domain user (<code>&lt;user&gt;</code> in the rest of this) at <code>/mnt/&lt;user&gt;</code> and locked down permissions for it <code>chmod 700 /mnt/&lt;user&gt;</code>. I relied on <a href="https://askubuntu.com/questions/1040095/mounting-cifs-share-per-user-using-autofs">these</a> <a href="https://askubuntu.com/questions/1026316/cifs-mounts-and-kerberos-permissions-on-access-or-best-practice">two</a> posts for the most part to figure out my config. I added the following line to <code>/etc/auto.master</code>:</p>
<p><code>/mnt/&lt;user&gt; /etc/auto.sambashares-&lt;user&gt; --timeout=30 --ghost</code> see <a href="https://learn.redhat.com/t5/Platform-Linux/Halloween-tip-of-the-day-Using-autofs-with-the-ghost-option/td-p/2326">here</a> for the deal with the <code>--ghost</code> flag.</p>
<p>Next under <code>/etc/auto.sambashares-&lt;user&gt;</code> I added a line for each fileshare I wanted to be able to access:</p>
<p><code>&lt;share_short_name&gt; -fstype=cifs,rw,sec=krb5,uid=${UID},cruid=${UID} :&lt;share_full_path&gt;</code></p>
<p>which will create a folder in <code>/mnt/&lt;user&gt;/&lt;share_short_name&gt;</code> that maps to <code>&lt;share_full_path&gt;</code>.</p>
<p>Here is where I went down a long and stupid rabbit hole. When I tried to access this share using my domain user account I got a permission issue. Eventually I figured out my user wasn’t being issued a kerberos ticket. This led to a ton of reading about how kerberos works, fiddling with a bunch of configs, installing and uninstalling a bunch of packages, all to no avail. Embarassingly, eventually I realized that the issue was that I was using an key to authenticate to this host, and you only get a kerberos ticket issued if you do password authentication for ssh. Feeling dumb I switched to password auth and was able to see the network share.</p>
<p>Having a working domain user that is able to access network shares without privilege escalation (assuming some privileged config of autofs is done on their behalf in advance) I was ready to get back to docker testing.</p>
<p>I realized I hadn’t actually installed rootless docker for my domain user, so I ran the install script and got an error that I was missing requirements and to modify <code>/etc/subuid</code> and <code>/etc/subgid</code>. Looking at those files I could see a pattern, they look something like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">user1:10000:65536</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">user2:165536:65536</span></span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">user3:231072:65536</span></span></code></pre></div>
<p>Each user gets an entry giving it a start UID with a very high number, and a range of UID space that it can use within a container. The subsequent entry starts where the previous one ends. While this got created just fine for my local users, it did not exist for my domain user. Using my privileged account I added a record for my domain user to <code>/etc/subuid</code> and <code>/etc/subgid</code> (they look identical) and re-ran the installer. This time it worked fine. I added the <code>DOCKER_HOST</code> argument to my <code>~/.bashrc</code> and fired up VS code. It didn’t work. After some poking around I discovered that this was because VS code looks in <code>/etc/passwd</code> to find your default shell, and similar to <code>/etc/subuid</code>, domain users don’t automatically get an entry there. Because of this it defaulted to running its setup in <code>/bin/sh</code> instead of <code>/bin/bash</code> like in my other accounts, which means it didn’t read the <code>DOCKER_HOST</code> argument, which means it didn’t work. Computers are fun. I tried adding the line to <code>~/.profile</code> because apparently <code>/bin/sh</code> does read that, but it didn’t work either. Following this <a href="https://serverfault.com/questions/736471/how-do-i-change-my-default-shell-on-a-domain-account">stack overflow</a> I figured out how to add an <code>/etc/passwd/</code> entry for my domain account: <code>getent passwd &lt;user&gt; | sudo tee -a /etc/passwd</code> which obviously also had to be done as my privileged user. Once that was complete the devcontainer fired up as expected.</p>
<p>The last piece was to double check that I could correctly access the autofs mounted network shares from within a container. In my <code>devcontainer.json</code> setting I added an entry like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb2-1"> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"mounts":</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb2-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-3">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/mnt/${localEnv:USER}/&lt;share_short_name&gt;"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-4">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"target"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/&lt;share_short_name&gt;"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-5">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bind"</span></span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>This worked! I also confirmed that other users on the system couldn’t see any of my volumes, images or containers. What an adventure. All in all this was about 4 days (calendar, not hours) of effort to figure out. What an adventure.</p>
</section>
<section id="cleaned-up-instructions" class="level1">
<h1>Cleaned up instructions</h1>
<section id="host-configuration" class="level2">
<h2 class="anchored" data-anchor-id="host-configuration">Host configuration</h2>
<p>Official documentation on rootless docker config can be found <a href="https://docs.docker.com/engine/security/rootless/">here</a></p>
<p>For further discussion of the user namespace remapping (which explains why users should be root within the devcontainer and what <code>/etc/subuid</code> and <code>/etc/subgid</code> are doing) see the official docs <a href="https://docs.docker.com/engine/security/userns-remap/">here</a></p>
<ul>
<li><p>All testing was done on an Ubuntu VM (specifically 22.04.1 LTS). As most development activity occurs within docker, most of these instructions will hopefully survive a newer Ubuntu release, and could probably even be applied to an entirely different distro if for some reason we wanted to do that. CPU, RAM and disk requirements will largely depend on the size of the team and their activity, but note that docker images tend to take up a fair bit of space, and due to (intentional) isolation of docker runtimes between users there will be no sharing of image layers. Thus 5 users each using a 2GB docker image will take up a total of 10GB of space.</p></li>
<li><p>Join the machine to the domain</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Setting up AD Authentication</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> realmd libnss-sss libpam-sss sssd sssd-tools adcli samba-common-bin oddjob oddjob-mkhomedir packagekit</span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Discovery</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> realm discover <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>domain<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Adding to the domain (enter password when prompted)</span></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> realm join <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-U</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>privileged domain user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Adding domain user to allow ssh</span></span>
<span id="cb3-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">realm</span> permit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> groupname@domainname</span></code></pre></div></li>
<li><p>Install docker enginer as per <a href="https://docs.docker.com/engine/install/ubuntu/">the official docker docs</a>. Note, do not use the included docker package in the Ubuntu base repository.</p></li>
<li><p>Make sure the system docker daemon is not running and disable it if it is: <code>sudo systemctl disable --now docker.service docker.socket</code></p></li>
<li><p>Install <code>autofs</code> and <code>cifs-utils</code> to allow users to mount network shares with their credentials.</p></li>
<li><p>For each user that will be running docker on this machine, create an entry in <code>/etc/subuid</code> and <code>/etc/subgid</code> (the entry in each file should look the same)</p>
<ul>
<li>each entry in each file has the format <code>&lt;username&gt;:&lt;baseuid&gt;:65536</code>. <code>&lt;baseuid&gt;</code> starts at 100000 for the first entry and increases by 65536 for each subsequent entry. For example, here’s what <code>/etc/subuid</code> looks like on the machine where this guide was tested:</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">admin:100000:65536</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dockertest:165536:65536</span></span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dockertesta:231072:65536</span></span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dockertestb:296608:65536</span></span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>:362144:65536</span></code></pre></div>
<ul>
<li>Local user accounts seem to get their entries auto-generated correctly, but at least in testing, domain joined user accounts had to be manually created.</li>
</ul></li>
<li><p>For each user that will be running docker in this machine, create an entry in <code>/etc/passwd</code> that specifies their default shell as <code>bash</code>. Otherwise VS code will not be able to figure out the user level docker socket it should attach to.</p>
<ul>
<li><code>getent passwd &lt;user&gt; | sudo tee -a /etc/passwd</code></li>
</ul></li>
<li><p>Create a base user folder to mount network shares for each user in <code>/mnt/&lt;user&gt;</code>, make that user the owner of that folder and lock down access to that user (<code>chown &lt;user&gt;</code> and <code>chmod 700 /mnt/&lt;user&gt;</code>).</p></li>
<li><p>For each user that will be running docker from this machine, create a line in <code>/etc/auto.master</code> in the following format:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/mnt/</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> /etc/auto.sambashares-<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> --timeout=30 –ghost</span></code></pre></div></li>
<li><p>Populate <code>/etc/auto.sambashares-&lt;user&gt;</code> with a line for each network share that user has to access as follows:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>localsharename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> -fstype=cifs,rw,sec=krb5,uid=<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${UID}</span>,cruid=<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${UID}</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>full share path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Where <code>&lt;localsharename&gt;</code> is the name of the folder under <code>/mnt/&lt;user&gt;</code> that the share will be mounted to, and <code>&lt;full share path&gt;</code> is the path to the SMB file share.</p></li>
</ul>
</section>
<section id="user-configuration" class="level2">
<h2 class="anchored" data-anchor-id="user-configuration">User configuration</h2>
<p>Most configuration of the VM should have been completed by its system administrator, but there are a couple user level tasks you will have to run before you can work with docker.</p>
<section id="install-the-rootless-docker-daemon" class="level3">
<h3 class="anchored" data-anchor-id="install-the-rootless-docker-daemon">Install the rootless docker daemon</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dockerd-rootless-setuptool.sh</span> install</span></code></pre></div>
</section>
<section id="set-an-environment-variable-for-the-docker-socket" class="level3">
<h3 class="anchored" data-anchor-id="set-an-environment-variable-for-the-docker-socket">Set an environment variable for the Docker socket</h3>
<p>Add the following line to <code>~/.bashrc</code>: <code>DOCKER_HOST=unix:///run/user/$(id -u)/docker.sock</code></p>
</section>
<section id="log-out-and-back-in-and-test" class="level3">
<h3 class="anchored" data-anchor-id="log-out-and-back-in-and-test">Log out and back in and test</h3>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run hello-world</span></code></pre></div>
</section>
<section id="set-up-network-shares" class="level3">
<h3 class="anchored" data-anchor-id="set-up-network-shares">Set up network shares</h3>
<p>Attaching network shares cannot be done directly by the user. System administrators provision network drives for each user under <code>/mnt/&lt;user&gt;</code>. If the network share you want is not there, contact your system administrator with its information and they will add it.</p>


</section>
</section>
</section>

 ]]></description>
  <category>configuration</category>
  <category>linux</category>
  <guid>https://blog.ianpreston.ca/posts/2022-12-30-rootless-docker.html</guid>
  <pubDate>Fri, 30 Dec 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Home cluster part 1 - Intro and Proxmox install</title>
  <link>https://blog.ianpreston.ca/posts/2022-11-21-proxmox.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I’ve been running services on my home network for years. It started with running things bare metal on the same machine I used as my desktop for day to day work. That was a nice easy way to get started, but I was constantly running into conflicting updates, or accidentally breaking something when I tried to get some desktop service working. The next step was getting a dedicated machine solely for hosting services. This worked a lot better since my service requirements changed a lot less frequently than my desktop requirements, but I still ran into conflicting services, or breaking one service when I was testing something out on another. The next step was a dedicated machine, but running all my services in docker containers. That really helped with isolation and was also where I got serious about automating my environment with ansible, which generally meant that even a complete system wipeout only took me down for as long as it took to reinstall the base OS and re-run my ansible playbook.</p>
<p>Now it’s time for the next step in making my home server environment fancier - <a href="https://www.proxmox.com/en/">Proxmox</a>.</p>
</section>
<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>Why bother doing this? My current system works pretty well, but it still has a few issues I’d like to address with Proxmox. The first is that my base OS is a single point of failure. I can swap out individual container services with impunity, but swapping out or experimenting with different operating systems means taking my whole stack down. Of course this also means that if any of the physical components of my server fail all of my services are down until I can replace or repair those components / the whole system.</p>
<p>Switching to Proxmox addresses both of these issues. First, even on a single physical host I can run multiple virtual machines to test different operating system configurations without downtime. Second, I can cluster together Proxmox nodes such that even if a single host fails I can fail over to another one.</p>
<p>Realistically, this is way overkill for the importance of the services I’m running currently. My <a href="https://miniflux.app/">miniflux</a> app going down for a while is just not that big a deal. One service that I’m planning to introduce in this environment that I was nervous to set up on my old stack for reliability reasons is <a href="https://www.home-assistant.io/">home assistant</a> but even in this new world I’m not going to have anything that won’t have an analog failback. It’s not like if this server goes down my furnace won’t work.</p>
<p>So honestly my motivation for this is mostly because I find it interesting to learn about clustering and want a freer hand to experiment with some new system administration and operation tools. Eventually I plan to figure out <a href="https://kubernetes.io/">kubernetes</a> on top of this stack, but that’s a whole other level of complexity so we’ll leave it alone for now.</p>
</section>
<section id="hardware-selection" class="level1">
<h1>Hardware selection</h1>
<p>I waffled for a ridiculously long time deciding what hardware I wanted to run this on. For reference, my existing server is a Dell Optiplex 7020. It’s got an i5-4590, 8GB of RAM and has been frankly doing just fine with the services I’ve put on it. I know I’m adding a little overhead by adding virtualization, and eventually k8s to the stack, and I plan to add some more services (particularly on the operations side like logging and alerting tools) but honestly my compute requirements are quite modest. In terms of power budget I’m lucky enough to be in a region with fairly affordable electricity, so after running some scenarios on different hardware I concluded that it wasn’t going to be a major financial factor unless I went with lots of really old inefficient enterprise gear. However, from an environmental perspective I still want to limit my consumption.</p>
<p>I considered four general classes of hardware: single board computers (SBCs) like raspberry pi, off lease/refurbished enterprise desktops, used enterprise servers, and custom built PCs.</p>
<p>SBCs are often promoted in terms of being both affordable and low power consumption. At the time of this writing considering them is something of a non-starter thanks to supply chain issues, but even if that weren’t the case I decided against them. While a base board is definitely quite affordable, once you add on all the additional required components (storage, case, power supply) the price point is pretty comparable to a refurbished enterprise desktop for considerably lower performance, essentially no upgradability (particularly RAM, which is key) and the challenges of ARM (most software has builds for ARM, but there are still some gaps). They’re definitely the lowest in absolute power consumption, but I think the gap narrows quite a bit when considering the electricity to compute power ratio, and besides, power consumption isn’t the most important thing to me in this build.</p>
<p>I didn’t really consider used enterprise servers. The noise, power consumption and physical space requirements just didn’t seem to make sense. Maybe if I was based in the US where the used market seems thicker I could have picked something up for cheap enough to consider, but up in Canada the price performance just didn’t seem to be there. Some people recommend enterprise gear because it more closely approximates an enterprise environment and has some fancy management features that’s missing from the consumer market, not to mention extra reliability features like ECC RAM and redundant power supplies. None of those were compelling enough features for me to overcome the previously mentioned noise, power, and space considerations.</p>
<p>A custom built PC was definitely a serious consideration. I specced out a pretty beefy machine using <a href="https://ca.pcpartpicker.com/">PC partpicker</a> that definitely would have handled whatever I threw at it for about $750 CAD. $2,250 would have gotten me a three node setup with plenty of power and the option to do things like throw in GPUs if I wanted to mess around with GPU accellerated machine learning or do lots of video transcoding. While that was technically within my budget it seemed a lot to commit to what was essentially an experiment.</p>
<p>Finally, after going through all those options I decided to follow the path of <a href="https://www.servethehome.com/introducing-project-tinyminimicro-home-lab-revolution/">tiny mini micro</a> and score some ultra small form factor (USFF) used PCs from eBay. They don’t have quite the low space or power consumption of an SBC but they’re pretty dang small and use mostly laptop components so they’re fairly power efficient. On the other hand, there’s a much better upgrade path for them compared to SBCs and they’re x86 so there’s much greater compatibility. They’re definitely not as high power as a custom build, but as you’ll see below they’re way cheaper, and I can always extend the cluster or swap them out to use as media boxes or something with beefier hardware later.</p>
<section id="what-i-actually-bought" class="level2">
<h2 class="anchored" data-anchor-id="what-i-actually-bought">What I actually bought</h2>
<ul>
<li>HP ProDesk 400 G3
<ul>
<li>i5-7500T</li>
<li>32GB RAM</li>
<li>512 GB nvme SSD</li>
<li>1TB WD Blue SATA SSD (purchased new and installed after)</li>
<li>348.75 CAD total price - 252.75 CAD for the system 96 CAD for the SSD upgrade.</li>
</ul></li>
<li>HP EliteDesk 800 G3
<ul>
<li>i5-7500T</li>
<li>32GB RAM (purchased new and installed after, shipped with 4GB)</li>
<li>512 GB nvme SSD (purchased new, came with 240 GB that I repurposed for a portable drive)</li>
<li>1TB WD Blue SATA SSD (purchased new and installed after)</li>
<li>456.63 CAD total price - 141.34 for the system, 125.15 for the RAM, 96 for the SSD, 94.14 for the nvme SSD</li>
</ul></li>
<li>Dell 3060 Micro
<ul>
<li>i5-8500T</li>
<li>32GB RAM (purchased new and installed after, shipped with 8GB)</li>
<li>512 GB nvme SSD (purchased new, came with 240 GB that I repurposed for a portable drive)</li>
<li>1TB WD Blue SATA SSD (purchased new and installed after)</li>
<li>503.53 CAD total price - 180 for the system, 133.39 for the RAM, 96 for the SSD, 94.14 for the nvme SSD</li>
</ul></li>
</ul>
<p>As you can see the price varied between the nodes. I got lucky with the HP ProDesk because it was in Canada and came equipped with the RAM and nvme I wanted. Making those upgrades after on the other systems and ordering from the US increased the price. With further patience and luck maybe I could have saved a couple hundred bucks, but honestly I’d already been waiting a long time to get this project kicked off and I kind of think that ProDesk was a bit of a unicorn.</p>
</section>
</section>
<section id="installing-proxmox" class="level1">
<h1>Installing Proxmox</h1>
<p>The base proxmox install (should be) dead simple. Grab the <a href="https://www.proxmox.com/en/downloads/category/iso-images-pve">ISO</a>, rip it to a USB drive, boot it in your system and follow a couple prompts. My first issue with booting was that I couldn’t get into the boot menu or BIOS menu. It turned out that there was some weird incompatibility between my monitor and the host when using DisplayPort. Fortunately I had a DisplayPort to HDMI cable kicking around and using that let me get into the menu and select the right boot option. I had to go into the BIOS and turn off secure boot (Advanced -&gt; Secure boot config -&gt; legacy disable and secure boot disable in the HPs). That sounds sketchy, but it’s basically a requirement to boot anything other than Windows. While I was there I made sure that virtualization was enabled. In the HPs that was under Advanced -&gt; System options -&gt; and make sure “Virtualization Technology (VTx)” and “Virtualization Technologyy for directed I/O (VTd)” are checked. For the Dell the config is similar. <code>F2</code> gets you into the BIOS. Under “Security” turn off “TPM 2.0” and under “Secure boot” turn off “secure boot”. There’s also a tab for “virtualization support”. Both configs were alread checked on mine, but that’s where it lives. The next weird thing I had happen was actually booting the Proxmox image. I tried multiple USB drives and image burners (<a href="https://www.balena.io/etcher/">balena</a> and <a href="https://rufus.ie/en/">rufus</a>) but just couldn’t get it working. Ubuntu server and debian both booted fine but Proxmox wouldn’t play ball. After a bunch of searching I saw a recommendation to try <a href="https://www.ventoy.net/en/index.html">ventoy</a>. I’d heard of ventoy before but dismissed it as just another thing that could go wrong when trying to get an installer booting. Ironically it worked right away and now I’m a total convert, since I can just dump ISO images into a folder on the boot drive and pick from any of them when I plug it into a system. As a PS I also switched over from using a regular USB 3.0 flash drive to a USB SSD drive and oh man, if you have one of those available I recommend it, so much faster. Once I got past those initial hiccups it was mostly straightforward. I just gave the node a hostname, set its IP, my password, time zone info and maybe a couple other things. The main sneaky thing to change was on the first menu, where you select the drive to install to. I had to click “Options”, select “ZFS RAID 0” and have it only use my nvme drive. I don’t need most of the ZFS features, but if you want to migrate VMs across your cluster easily they need to be on that sort of storage. For the Kube nodes I won’t care about that, but some VMs I will, and I want to save the SSD for persistent volumes for kubernetes. After that it rebooted, I confirmed I could access the admin portal throught the web interface and stuck it down in my utility room to continue the setup remotely from my workstation.</p>
</section>
<section id="base-proxmox-config" class="level1">
<h1>Base Proxmox config</h1>
<p>I want most of the config for proxmox to be done using ansible, which I’ll cover in a follow up post. The only thing I did manually on the nodes was set them up as a cluster. That was actually ridiculously easy to do. The <a href="https://pve.proxmox.com/wiki/Cluster_Manager">docs</a> cover it well so I won’t go into it here.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>That’s it for this post, I just wanted to introduce the topic and get to the point where I had the nodes set up. Subsequent posts will deal with further node configuration, as well as actually deploying VMs to the nodes.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <category>linux</category>
  <category>proxmox</category>
  <guid>https://blog.ianpreston.ca/posts/2022-11-21-proxmox.html</guid>
  <pubDate>Mon, 21 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Dunning-Kruger is autocorrelation</title>
  <link>https://blog.ianpreston.ca/posts/2022-08-01-dunning.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>A while back I read <a href="https://economicsfromthetopdown.com/2022/04/08/the-dunning-kruger-effect-is-autocorrelation/">this interesting post</a> that explained how the Dunning-Kruger effect is an example of autocorrelation. Before proceeding with the rest of this post, I’d highly recommend reading that one. I liked their example of using simulated data to show that the supposed effect can be observed even in completely uncorrelated variables. It got me wondering what it would look like if we had other relationships between predicted and actual performance, and so this post is an opportunity to explore that.</p>
</section>
<section id="setup-all-the-code-is-here" class="level2">
<h2 class="anchored" data-anchor-id="setup-all-the-code-is-here">Setup (all the code is here)</h2>
<p>If you don’t want to read code and just want to see the charts feel free to skip to the next section.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-7"></span>
<span id="cb1-8">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dark_background"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">N_SAMPLES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1_000</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DunningKruger:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, actual_dist: np.ndarray, predicted_dist: np.ndarray) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb3-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Build dataframe of actual percentile vs predicted."""</span></span>
<span id="cb3-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb3-5">            pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual Distribution"</span>: actual_dist, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Distribution"</span>:predicted_dist})</span>
<span id="cb3-6">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Handle prediction errors that produce impossible percentiles</span></span>
<span id="cb3-7">            .clip(lower<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, upper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100.0</span>)</span>
<span id="cb3-8">            .assign(predict_error<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> df: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Distribution"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual Distribution"</span>])</span>
<span id="cb3-9">            .rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"predict_error"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prediction Error"</span>})</span>
<span id="cb3-10">        )</span>
<span id="cb3-11">    </span>
<span id="cb3-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb3-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> x_vs_y_chart(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> sns.axisgrid.FacetGrid:</span>
<span id="cb3-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Original style chart of actual vs predicted."""</span></span>
<span id="cb3-15">        g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.lmplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual Distribution"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Distribution"</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.df, scatter_kws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>})</span>
<span id="cb3-16">        g.ax.axline((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb3-17">        plt.show()</span>
<span id="cb3-18"></span>
<span id="cb3-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb3-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> x_vs_error_chart(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> sns.axisgrid.FacetGrid:</span>
<span id="cb3-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Actual vs prediction error (implicit reference in DK paper)."""</span></span>
<span id="cb3-22">        g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.lmplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual Distribution"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prediction Error"</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.df, scatter_kws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23">        g.ax.axline((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb3-24">        plt.show()</span></code></pre></div>
</div>
</section>
<section id="scenarios" class="level2">
<h2 class="anchored" data-anchor-id="scenarios">Scenarios</h2>
<p>In the following sections I’ll simulate some actual vs predicted distributions and see what they look like when you compare them to the Dunning Kruger graph. I’m not going to plot quantile vs percentile as in the original chart, as I think that just obscures what’s actually going on. The percentile vs percentile view shows the same overall pattern if you fit a regression line through it, which is easy enough to do.</p>
<section id="purely-random" class="level3">
<h3 class="anchored" data-anchor-id="purely-random">Purely random</h3>
<p>This was the example in the original blog post that convinced me of the argument. I’ll start by reproducing it here. In this example predicted percentile performance is completely random and independent of actual percentile.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">actual_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100.0</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N_SAMPLES)</span>
<span id="cb4-2">predicted_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100.0</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N_SAMPLES)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">dk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DunningKruger(actual_dist, predicted_dist)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">dk.x_vs_y_chart</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-08-01-dunning_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The basic format of this <code>x_vs_y_chart</code> will be the same in all scenarios, so I’ll just explain how to interpret it in this first example. The x axis represents someone’s actual place in the percentile distribution, the y axis is their predicted place in that same distribution. Each point in the scatter plot represents a single observation of someone’s actual place in the distribution and their corresponding prediction of where they are in the distribution. The white dotted line moving up at a 45 degree angle represents perfect prediction, where all observations would be if everyone could exactly predict their place in the distribution. The blue-green line is a regression line of the relationship between someone’s actual place in the distribution and their prediction. The fact that it’s pretty much flat suggests no relationship, which is what we’d expect since that’s how the data was generated</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">dk.x_vs_error_chart<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-08-01-dunning_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>As with the previous chart, the basic format of this <code>x_vs_error_chart</code> will be the same in all scenarios, so I’ll just explain how to interpret it in this first example. The x axis again represents someone’s actual place in the percentile distribution, but now the y axis is the difference between their prediction and actual place. Each point in the scatter plot represents a single observation of someone’s actual place in the distribution and their corresponding prediction error. The horizontal white dotted line moving up at a zero again represents perfect prediction, where all observations would be if everyone could exactly predict their place in the distribution. The blue-green line is a regression line of the relationship between someone’s actual place in the distribution and their prediction error. Note that in this randomly generated scenario we’re seeing something that looks like Dunning Kruger, with people on the low endof the distribution tending to overestimate their place, and people on the high end tending to underestimate.</p>
</section>
<section id="unbiased-prediction-error" class="level3">
<h3 class="anchored" data-anchor-id="unbiased-prediction-error">Unbiased prediction error</h3>
<p>In this scenario everyone is equally good at predicting their percentile placement with only a small, unbiased error.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">actual_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100.0</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N_SAMPLES)</span>
<span id="cb8-2">error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N_SAMPLES)</span>
<span id="cb8-3">predicted_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> actual_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> error</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">dk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DunningKruger(actual_dist, predicted_dist)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">dk.x_vs_y_chart<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-08-01-dunning_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">dk.x_vs_error_chart<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-08-01-dunning_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Even here we can see a slight appearance of “overconfidence” for lower percentiles and “underconfidence” for higher percentiles simply because prediction errors are truncated at the top and bottom (If I’m actually in the lowest percentile the only errors I can possibly make are to overestimate my performance).</p>
</section>
<section id="actual-dunning-kruger" class="level3">
<h3 class="anchored" data-anchor-id="actual-dunning-kruger">Actual Dunning Kruger</h3>
<p>Let’s see what this would actually look like if we simply had overconfidence in the bottom half of the distribution. I could add in underconfidence among the top half as well, but the message of the original paper focused on the overconfidence so let’s do the same here.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">actual_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100.0</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N_SAMPLES)</span>
<span id="cb12-2">base_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N_SAMPLES)</span>
<span id="cb12-3">below_median_indicator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> actual_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.0</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The further below the median you are the greater you might overestimate your position</span></span>
<span id="cb12-5">error_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> actual_dist) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> below_median_indicator</span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale up how overconfident this makes you</span></span>
<span id="cb12-7">overconfidence_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> error_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.random.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N_SAMPLES)</span>
<span id="cb12-8">predicted_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> actual_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> overconfidence_error</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">dk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DunningKruger(actual_dist, predicted_dist)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">dk.x_vs_y_chart<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-08-01-dunning_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">dk.x_vs_error_chart<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-08-01-dunning_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Honestly I was pretty convinced by the argument in the original post, so nothing earth shattering came out of this exercise for me. But it was interesting to see what the charts looked like under different situations. And it gave me an excuse to write some code and build some charts, which I haven’t had in a while.</p>
<p>If you’d like to try out other scenarios, you can click the binder link near the top of this post to open it in an interactive notebook. If you want to try other distributions for your actual/predicted/error distributions, check out the <a href="https://numpy.org/doc/stable/reference/random/">numpy docs</a> on random sampling.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>statistics</category>
  <guid>https://blog.ianpreston.ca/posts/2022-08-01-dunning.html</guid>
  <pubDate>Mon, 01 Aug 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Modeling out fixed closed vs capped variable mortgages</title>
  <link>https://blog.ianpreston.ca/posts/2022-03-17-mortgage.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I’m looking to buy a house in the near future. I’m pretty risk averse, so even though I know that in theory a variable rate mortgage should be better for me financially, I was willing to take a fixed rate mortgage in order to have more certainty. In discussion with a mortgage broker it was suggested that I could get the best of both worlds by taking out a capped variable mortgage and increasing my payment amount to what I would have paid under a fixed rate. In theory this gives me a hedge in that my payments are capped, and as long as my variable rate is below the fixed rate I’m making extra payments against my principle compared to what I’d be doing with a fixed rate. Let’s see what that looks like under some different scenarios using python. Some of these calculations I already implemented in my <a href="https://github.com/ianepreston/rentorown/blob/master/src/rentorown/house.py">rent or own calculator</a> but the scenarios I’m working on are different enough here that I’m only going to use that as a reference rather than importing any of the code.</p>
</section>
<section id="get-some-data" class="level2">
<h2 class="anchored" data-anchor-id="get-some-data">Get some data</h2>
<p>To do any scenario planning it will be helpful to have some historical data on the relevant interest rates. Specifically I want to know 5 year fixed mortgage rates, and the big bank prime rate, as that forms the basis of variable rate mortgages. At the time of this writing RBC is offering variable mortgages at “RBC Prime Rate - 0.750%” but they’re also offering a “special rate” of 3.34% compared to their posted rate of 4.79% for 5 year fixed. The delta there is 1.45%. Their posted variable rate is just their posted prime. I’m less interested in the exact rates than I am the delta. It looks like right now the delta of their offered rates between fixed and closed (3.34 - 1.95 = 1.39) is less than their posted fixed and closed rate (4.79 - 2.70 = 2.09). Because the data set I can work with only has posted rates and I have no way of estimating the “true” delta in historical periods I’ll use it as the basis for this analysis. However, it will be important to remember that at least in this current low interest rate environment there’s less of a gap between fixed and variable rates than my data will suggest. Depending on how close these scenarios play out I can re-run them by adding 2.09 - 1.39 = 0.7 onto my prime rate to simulate that narrower gap.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span></code></pre></div>
</div>
<p>First we grab some historical rate data in JSON from the Bank of Canada website. I tried to grab it as a CSV but it’s terribly formatted, so we’ll go with this and clean it up.</p>
<div class="cell" data-tags="[]" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">rates_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.bankofcanada.ca/valet/observations/group/chartered_bank_interest/json"</span>).json()</span></code></pre></div>
</div>
<p>Next I have to clean it up into a dataframe for analysis.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">renamer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> rates_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seriesDetail"</span>].items()}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">base_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb4-2">    pd.DataFrame(rates_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observations"</span>])</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert date series from string to datetime</span></span>
<span id="cb4-4">    .assign(d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> df: pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>]))</span>
<span id="cb4-5">    .set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>)</span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the actual rate value out of the dictionary it's in</span></span>
<span id="cb4-7">    .applymap(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v"</span>]), na_action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span>
<span id="cb4-8">    .rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>renamer)</span>
<span id="cb4-9">)</span></code></pre></div>
</div>
<p>Let’s take a quick look at it to make sure it’s sensible.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">base_df.tail()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Non-Chequable Savings Deposits</th>
<th data-quarto-table-cell-role="th">5-year personal fixed term</th>
<th data-quarto-table-cell-role="th">Prime rate</th>
<th data-quarto-table-cell-role="th">Conventional mortgage 5-year</th>
<th data-quarto-table-cell-role="th">Conventional mortgage 1-year</th>
<th data-quarto-table-cell-role="th">Conventional mortgage 3-year</th>
<th data-quarto-table-cell-role="th">Guaranteed investment certificates 5-year</th>
<th data-quarto-table-cell-role="th">Guaranteed investment certificates 1-year</th>
<th data-quarto-table-cell-role="th">Guaranteed investment certificates 3-year</th>
<th data-quarto-table-cell-role="th">Daily Interest Savings (balances over $100,000)</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">d</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2022-02-16</td>
<td>0.01</td>
<td>1.15</td>
<td>2.45</td>
<td>4.79</td>
<td>2.79</td>
<td>3.49</td>
<td>1.65</td>
<td>0.60</td>
<td>1.25</td>
<td>0.01</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2022-02-23</td>
<td>0.01</td>
<td>1.45</td>
<td>2.45</td>
<td>4.79</td>
<td>2.79</td>
<td>3.49</td>
<td>1.75</td>
<td>0.60</td>
<td>1.35</td>
<td>0.01</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2022-03-02</td>
<td>0.01</td>
<td>1.45</td>
<td>2.45</td>
<td>4.79</td>
<td>2.79</td>
<td>3.49</td>
<td>1.75</td>
<td>0.60</td>
<td>1.35</td>
<td>0.01</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2022-03-09</td>
<td>0.01</td>
<td>1.55</td>
<td>2.70</td>
<td>4.79</td>
<td>2.79</td>
<td>3.49</td>
<td>1.85</td>
<td>0.65</td>
<td>1.28</td>
<td>0.01</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2022-03-16</td>
<td>0.01</td>
<td>1.55</td>
<td>2.70</td>
<td>4.79</td>
<td>2.79</td>
<td>3.49</td>
<td>1.85</td>
<td>0.78</td>
<td>1.30</td>
<td>0.01</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>That looks good to me. I’m just going to shrink it down to the just the columns I care about, resample it down to monthly frequency, and give them easier to work with names.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb6-2">    base_df</span>
<span id="cb6-3">    .rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prime rate"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prime"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Conventional mortgage 5-year"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fiveyear"</span>})</span>
<span id="cb6-4">    .reindex(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prime"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fiveyear"</span>])</span>
<span id="cb6-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Most early dates don't have values for these series</span></span>
<span id="cb6-6">    .dropna(how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all"</span>)</span>
<span id="cb6-7">    .reset_index()</span>
<span id="cb6-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Group it to the first entry for each month</span></span>
<span id="cb6-9">    .groupby(pd.Grouper(key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>, convention<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>))</span>
<span id="cb6-10">    .first()</span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make it the start rather than end of the month to make date deltas easier</span></span>
<span id="cb6-12">    .reset_index()</span>
<span id="cb6-13">    .assign(d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> df: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>].dt.to_period(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>).dt.to_timestamp())</span>
<span id="cb6-14">    .set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>)</span>
<span id="cb6-15">)</span>
<span id="cb6-16">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">prime</th>
<th data-quarto-table-cell-role="th">fiveyear</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">d</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1975-01-01</td>
<td>11.0</td>
<td>12.00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1975-02-01</td>
<td>9.5</td>
<td>11.50</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1975-03-01</td>
<td>9.0</td>
<td>10.75</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1975-04-01</td>
<td>9.0</td>
<td>10.50</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1975-05-01</td>
<td>9.0</td>
<td>10.75</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="some-quick-exploration" class="level2">
<h2 class="anchored" data-anchor-id="some-quick-exploration">Some quick exploration</h2>
<p>Let’s do some basic charting on this data just to get a sense of what we’re working with.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Would rather use altair but I have lots of data points and I'm not sure how using render server will play with my static site generator</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make my charts a decent size</span></span>
<span id="cb7-5">sns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(rc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figure.figsize'</span>:(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)})</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Seaborn likes data in tidy format</span></span>
<span id="cb8-2">cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.melt(ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).reset_index()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">sns.lineplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cdf, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-03-17-mortgage_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Here’s what prime vs 5 year mortgage rates have looked like for the last 50ish years. The variable rate tends to be below the fixed at any given point in time, but of course the variable rate can go up over your mortgage term while a fixed rate will stay fixed. Let’s start the actual analysis.</p>
</section>
<section id="check-variable-vs-5-year-term" class="level2">
<h2 class="anchored" data-anchor-id="check-variable-vs-5-year-term">Check variable vs 5 year term</h2>
<p>For any starting period I can compare a 5 year fixed rate to what the variable rate would have been over that same period and plot the delta between them. Let’s see what that looks like:</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get all the dates that have at least 5 years of history ahead of them</span></span>
<span id="cb10-2">start_dates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(df.index[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">delta_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>)</span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> start_date <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> start_dates:</span>
<span id="cb11-3">    five_year_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[start_date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fiveyear"</span>]</span>
<span id="cb11-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> delta <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>):</span>
<span id="cb11-5">        variable_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[start_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pd.DateOffset(months<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>delta), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prime"</span>]</span>
<span id="cb11-6">        variable_delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> variable_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> five_year_rate</span>
<span id="cb11-7">        delta_dict[delta][start_date] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> variable_delta</span>
<span id="cb11-8">delta_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(delta_dict).T</span>
<span id="cb11-9">delta_df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1975-01-01</th>
<th data-quarto-table-cell-role="th">1975-02-01</th>
<th data-quarto-table-cell-role="th">1975-03-01</th>
<th data-quarto-table-cell-role="th">1975-04-01</th>
<th data-quarto-table-cell-role="th">1975-05-01</th>
<th data-quarto-table-cell-role="th">1975-06-01</th>
<th data-quarto-table-cell-role="th">1975-07-01</th>
<th data-quarto-table-cell-role="th">1975-08-01</th>
<th data-quarto-table-cell-role="th">1975-09-01</th>
<th data-quarto-table-cell-role="th">1975-10-01</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">2016-06-01</th>
<th data-quarto-table-cell-role="th">2016-07-01</th>
<th data-quarto-table-cell-role="th">2016-08-01</th>
<th data-quarto-table-cell-role="th">2016-09-01</th>
<th data-quarto-table-cell-role="th">2016-10-01</th>
<th data-quarto-table-cell-role="th">2016-11-01</th>
<th data-quarto-table-cell-role="th">2016-12-01</th>
<th data-quarto-table-cell-role="th">2017-01-01</th>
<th data-quarto-table-cell-role="th">2017-02-01</th>
<th data-quarto-table-cell-role="th">2017-03-01</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>-1.0</td>
<td>-2.0</td>
<td>-1.75</td>
<td>-1.5</td>
<td>-1.75</td>
<td>-2.00</td>
<td>-2.00</td>
<td>-2.25</td>
<td>-2.50</td>
<td>-2.25</td>
<td>...</td>
<td>-1.94</td>
<td>-2.04</td>
<td>-2.04</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>-2.5</td>
<td>-2.5</td>
<td>-1.75</td>
<td>-1.5</td>
<td>-1.75</td>
<td>-2.00</td>
<td>-2.00</td>
<td>-2.25</td>
<td>-1.75</td>
<td>-2.25</td>
<td>...</td>
<td>-1.94</td>
<td>-2.04</td>
<td>-2.04</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>-3.0</td>
<td>-2.5</td>
<td>-1.75</td>
<td>-1.5</td>
<td>-1.75</td>
<td>-2.00</td>
<td>-2.00</td>
<td>-1.50</td>
<td>-1.75</td>
<td>-2.25</td>
<td>...</td>
<td>-1.94</td>
<td>-2.04</td>
<td>-2.04</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>-3.0</td>
<td>-2.5</td>
<td>-1.75</td>
<td>-1.5</td>
<td>-1.75</td>
<td>-2.00</td>
<td>-1.25</td>
<td>-1.50</td>
<td>-1.75</td>
<td>-2.25</td>
<td>...</td>
<td>-1.94</td>
<td>-2.04</td>
<td>-2.04</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>-3.0</td>
<td>-2.5</td>
<td>-1.75</td>
<td>-1.5</td>
<td>-1.75</td>
<td>-1.25</td>
<td>-1.25</td>
<td>-1.50</td>
<td>-1.75</td>
<td>-2.25</td>
<td>...</td>
<td>-1.94</td>
<td>-2.04</td>
<td>-2.04</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
<td>-1.94</td>
</tr>
</tbody>
</table>

<p>5 rows × 507 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">delta_cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb12-2">    delta_df</span>
<span id="cb12-3">    .melt(ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb12-4">    .reset_index()</span>
<span id="cb12-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change from a date to a count of months since the first period</span></span>
<span id="cb12-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># makes it easier to add in a colour scale and get a sense of time periods.</span></span>
<span id="cb12-7">    .assign(variable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> df: (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()).dt.days)</span>
<span id="cb12-8">    .rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"period"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start date delta"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable_delta"</span>})</span>
<span id="cb12-9">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">sns.lineplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>delta_cdf, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"period"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable_delta"</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start date delta"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-03-17-mortgage_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>This chart shows the change in the delta between a fixed rate mortgage and the variable rate over a 5 year period. Each line represents a potential start month, with the delta between fixed and variable on the y axis and how many months into the 5 year term that mortgage is on the x axis. The colour corresponds to the number of days after Jan 1 1970 the scenario starts (I just needed a nice linear series to get the colour coding).</p>
<p>That’s way too noisy to make a ton of sense of, but it shows that variable rates can be quite a lot higher or lower than the 5 year fixed. Most of the crazy outliers are lighter in colour, which corresponds to earlier points in history and given the wildly volatile interest rates we saw in the previous chart that seems reasonable. Eyeballing it it definitely looks like the majority of series are below the 0 line throughout the 5 year period.</p>
<p>One could make the argument that including the 1980s is unfair given the crazy stagflation and associated high interest rates used to combat them. If you think more recent history is a better guide we can look at just the scenarios starting since the year 2000:</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">subset_cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> delta_cdf.loc[<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> df: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start date delta"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365</span>]</span>
<span id="cb14-2">sns.lineplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subset_cdf, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"period"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable_delta"</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start date delta"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-03-17-mortgage_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>So since 2000 it looks like your variable rate has almost never gone above the five year fixed rate. Again, recall that the actual fixed or variable rate you’d get at any of these points is not perfectly correlated with the posted rates I’m using, but it’s still a good indicator. Personally since I’m risk averse and we are currently looking at higher inflation than there’s been for 30 years I’m inclined to use the longer term scenarios, but it was an interesting exercise to see what more recent history looks like.</p>
<p>Now, even though these charts are kind of pretty, they’re not very informative, there’s too much going on. What I can do instead is summarize the distribution of those lines. So for any point in the mortgage term I can show the mean delta, or the median, or any other quantile. Let’s take a look at that:</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">full_series <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [delta_df.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>).rename(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)]</span>
<span id="cb15-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> q <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>]:</span>
<span id="cb15-3">    full_series.append(delta_df.quantile(q, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>).rename(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"q</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>q<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb15-4">full_distributions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(full_series, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">fdist_cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb16-2">    full_distributions</span>
<span id="cb16-3">    .melt(ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb16-4">    .reset_index()</span>
<span id="cb16-5">    .rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"period"</span>})</span>
<span id="cb16-6">)</span>
<span id="cb16-7">sns.lineplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fdist_cdf, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"period"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-03-17-mortgage_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>So over the whole observation period the mean gap between fixed and variable rate tends to trend downward, which makes sense given interest rates were declining over most of the observed period. At least 3/4 of the time they stayed below the fixed rate for the entire period, but when we look at the 90th percentile and above they were over the fixed rate throughout the period (this is not saying any one series was consistently that high above throughout the 5 year period, just that at least 10% of them were that much above it at that point.) Let’s try it again, just focusing on since 2000.</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">rdelta_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> delta_df.T.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2000"</span>:].T</span>
<span id="cb17-2">full_series <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [rdelta_df.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>).rename(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)]</span>
<span id="cb17-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> q <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>]:</span>
<span id="cb17-4">    full_series.append(rdelta_df.quantile(q, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>).rename(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"q</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>q<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb17-5">full_distributions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(full_series, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>)</span>
<span id="cb17-6">fdist_cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb17-7">    full_distributions</span>
<span id="cb17-8">    .melt(ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb17-9">    .reset_index()</span>
<span id="cb17-10">    .rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"period"</span>})</span>
<span id="cb17-11">)</span>
<span id="cb17-12">sns.lineplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fdist_cdf, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"period"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-03-17-mortgage_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>So in the more recent period I checked out some of the wider end of the tails. At the 99th percentile we do see a couple spots where it goes above 0, but not by much. Variable rates over the last 20 years have been a pretty sweet deal.</p>
</section>
<section id="model-out-capped-variable-strategy" class="level2">
<h2 class="anchored" data-anchor-id="model-out-capped-variable-strategy">Model out capped variable strategy</h2>
<p>Looking at these trends, it definitely seems like going with the capped variable rate would be the way to go, but let’s model it out a bit and see. The first thing I need to do is write a class that can handle mortgage payments, including variable payments or a capped variable strategy. For that I can leverage some of the code I wrote for my rent or own calculator (with some tweaks).</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OrderedDict</span>
<span id="cb18-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy_financial <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> npf</span>
<span id="cb18-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Mortgage:</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Base mortgage class.</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    delta_series: pd.Series</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The series of rate deltas over the 5 year term. Can pass in a series of 0s to simulate a fixed rate mortgage</span></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    capped_variable: bool</span></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Whether to use the capped variable or regular variable payment strategy</span></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    principal: Int</span></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Value of the mortgage, default $400K to simulate a $500K purchase with 20% down</span></span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    amortize_years: int</span></span>
<span id="cb19-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Amortization period of the mortgage (not term of mortgage), default to standard 25 for a new purchase</span></span>
<span id="cb19-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    fixed_rate: float</span></span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        fixed 5 year APR rate as posted online, will use AER for actual calculations, default to 4.79 since that's the latest value</span></span>
<span id="cb19-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        in the series at the time of this writing.</span></span>
<span id="cb19-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb19-17"></span>
<span id="cb19-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, delta_series: pd.Series, scenario_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, capped_variable: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, principal: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400_000</span> , amortize_years: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, fixed_rate: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.79</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb19-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delta_series <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> delta_series</span>
<span id="cb19-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># So I can label dataframes or other returned objects</span></span>
<span id="cb19-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scenario_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scenario_name</span>
<span id="cb19-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.capped_variable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> capped_variable</span>
<span id="cb19-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.principal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> principal</span>
<span id="cb19-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.amortize_years <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> amortize_years</span>
<span id="cb19-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fixed_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fixed_rate</span>
<span id="cb19-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have to do different compounding period for variable (monthly) vs fixed (semi annual)</span></span>
<span id="cb19-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delta_series.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb19-28">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fixed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb19-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb19-30">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fixed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb19-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fixed_pmt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._calc_fixed_pmt()</span>
<span id="cb19-32">    </span>
<span id="cb19-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> periodic_rate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, period: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb19-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Calculate the periodic interest rate from the posted APR.</span></span>
<span id="cb19-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb19-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters</span></span>
<span id="cb19-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ----------</span></span>
<span id="cb19-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        period: int</span></span>
<span id="cb19-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Which period in the term we're in (used to identify the variable rate delta)</span></span>
<span id="cb19-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb19-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns</span></span>
<span id="cb19-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        -------</span></span>
<span id="cb19-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        float: periodic interest rate</span></span>
<span id="cb19-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb19-45">        apr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fixed_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delta_series[period]</span>
<span id="cb19-46">        apr_dec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> apr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb19-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fixed:</span>
<span id="cb19-48">            compounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb19-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb19-50">            compounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb19-51">        aer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (apr_dec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> compounds)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> compounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> aer) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-53"></span>
<span id="cb19-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _calc_fixed_pmt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb19-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Calculate what a fixed payment would be to compute capped variable payments."""</span></span>
<span id="cb19-56">        apr_dec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fixed_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb19-57">        compounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> </span>
<span id="cb19-58">        aer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (apr_dec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> compounds)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> compounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-59">        periodic_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> aer) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-60">        periods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.amortize_years <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb19-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(npf.pmt(periodic_rate, periods, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.principal), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb19-62">        </span>
<span id="cb19-63">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _amortizegen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb19-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Yield a dictionary of a payment period.</span></span>
<span id="cb19-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb19-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Have to do it incrementally because additional payments can mean recomputing things after every period.</span></span>
<span id="cb19-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb19-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters</span></span>
<span id="cb19-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ----------</span></span>
<span id="cb19-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        period: int</span></span>
<span id="cb19-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Which period of the term we're in</span></span>
<span id="cb19-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb19-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Yields</span></span>
<span id="cb19-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ------</span></span>
<span id="cb19-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Dict</span></span>
<span id="cb19-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            All the data for another period of mortgage paments</span></span>
<span id="cb19-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb19-78">        period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb19-79">        beg_balance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.principal</span>
<span id="cb19-80">        end_balance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.principal</span>
<span id="cb19-81">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Careful here, have to control how often this is called outside the function</span></span>
<span id="cb19-82">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>:</span>
<span id="cb19-83">            periodic_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.periodic_rate(period)</span>
<span id="cb19-84">            amortization_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.amortize_years <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> period</span>
<span id="cb19-85">            interest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>npf.ipmt(rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>periodic_rate, per<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>amortization_left, pv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>beg_balance)</span>
<span id="cb19-86">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.capped_variable:</span>
<span id="cb19-87">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> interest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fixed_pmt:</span>
<span id="cb19-88">                    principal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb19-89">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb19-90">                    principal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fixed_pmt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> interest</span>
<span id="cb19-91">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb19-92">                principal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>npf.ppmt(rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>periodic_rate, per<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>amortization_left, pv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>beg_balance)</span>
<span id="cb19-93">            total_pmt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> principal</span>
<span id="cb19-94">            end_balance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> beg_balance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> principal</span>
<span id="cb19-95">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> OrderedDict(</span>
<span id="cb19-96">                [</span>
<span id="cb19-97">                    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Period"</span>, period),</span>
<span id="cb19-98">                    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Begin_balance"</span>, beg_balance),</span>
<span id="cb19-99">                    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Payment"</span>, total_pmt),</span>
<span id="cb19-100">                    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Principal"</span>, principal),</span>
<span id="cb19-101">                    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Interest"</span>, interest),</span>
<span id="cb19-102">                    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"End_balance"</span>, end_balance),</span>
<span id="cb19-103">                ]</span>
<span id="cb19-104">            )</span>
<span id="cb19-105">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># increment the counter, balance and date</span></span>
<span id="cb19-106">            period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-107">            beg_balance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> end_balance</span>
<span id="cb19-108"></span>
<span id="cb19-109">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> amortize(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pd.DataFrame:</span>
<span id="cb19-110">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Show payments on the mortgage.</span></span>
<span id="cb19-111"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb19-112"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns</span></span>
<span id="cb19-113"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        -------</span></span>
<span id="cb19-114"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pd.DataFrame</span></span>
<span id="cb19-115"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Dataframe of mortgage payments showing principal and interest contributions and amount outstanding</span></span>
<span id="cb19-116"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb19-117">        df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb19-118">            pd.DataFrame(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._amortizegen())</span>
<span id="cb19-119">            .set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Period"</span>)</span>
<span id="cb19-120">        )</span>
<span id="cb19-121">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> df</span>
<span id="cb19-122">    </span>
<span id="cb19-123">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> summarize(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>:</span>
<span id="cb19-124">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Summarize the 5 year term."""</span></span>
<span id="cb19-125">        df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.amortize()</span>
<span id="cb19-126">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {</span>
<span id="cb19-127">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scenario_name"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scenario_name,</span>
<span id="cb19-128">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end_balance"</span>: df.iloc[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"End_balance"</span>],</span>
<span id="cb19-129">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_payments"</span>: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Payment"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(),</span>
<span id="cb19-130">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"average_payment"</span>: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Payment"</span>].mean(),</span>
<span id="cb19-131">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min_payment"</span>: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Payment"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(),</span>
<span id="cb19-132">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_payment"</span>: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Payment"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(),</span>
<span id="cb19-133">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_interest"</span>: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Interest"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(),</span>
<span id="cb19-134">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_principal"</span>: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Principal"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(),</span>
<span id="cb19-135">        }</span>
<span id="cb19-136"></span>
<span id="cb19-137">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pretty_summary(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb19-138">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Print out the summary in pretty format."""</span></span>
<span id="cb19-139">        summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.summarize()</span>
<span id="cb19-140">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb19-141"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            Scenario: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scenario_name"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-142"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            Capped: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>capped_variable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-143"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            Total Payments: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_payments"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">f</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-144"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            Ending mortgage balance: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end_balance"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">f</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-145"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            Total interest payments: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_interest"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">f</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-146"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            Total principal payments: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_principal"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">f</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-147"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            Average payment: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"average_payment"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">f</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-148"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            Minimum payment: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min_payment"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">f</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-149"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            Maximum payment: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_payment"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">f</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-150"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb19-151">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
</div>
<p>Let’s look at the summary of a few of these scenarios</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">fixed_scenario <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mortgage(</span>
<span id="cb20-2">    delta_series<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>),</span>
<span id="cb20-3">    scenario_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fixed payments"</span>,</span>
<span id="cb20-4">    capped_variable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb20-5">)</span>
<span id="cb20-6">fixed_summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fixed_scenario.summarize()</span>
<span id="cb20-7">fixed_scenario.pretty_summary() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
            Scenario: fixed payments
            Capped: False
            Total Payments: $136,730
            Ending mortgage balance: $352,851
            Total interest payments: $89,581
            Total principal payments: $47,149
            Average payment: $2,279
            Minimum payment: $2,279
            Maximum payment: $2,279
        </code></pre>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">Mortgage(</span>
<span id="cb22-2">    delta_series<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>delta_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1975-01-01"</span>],</span>
<span id="cb22-3">    scenario_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1975-01-01"</span>,</span>
<span id="cb22-4">    capped_variable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb22-5">).pretty_summary() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
            Scenario: 1975-01-01
            Capped: False
            Total Payments: $111,026
            Ending mortgage balance: $340,142
            Total interest payments: $51,168
            Total principal payments: $59,858
            Average payment: $1,850
            Minimum payment: $1,536
            Maximum payment: $2,801
        </code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">Mortgage(</span>
<span id="cb24-2">    delta_series<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>delta_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1975-01-01"</span>],</span>
<span id="cb24-3">    scenario_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1975-01-01 capped"</span>,</span>
<span id="cb24-4">    capped_variable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb24-5">).pretty_summary() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
            Scenario: 1975-01-01 capped
            Capped: True
            Total Payments: $136,730
            Ending mortgage balance: $311,809
            Total interest payments: $48,539
            Total principal payments: $88,191
            Average payment: $2,279
            Minimum payment: $2,279
            Maximum payment: $2,279
        </code></pre>
</div>
</div>
<p>Before I run a bunch of scenarios from historical ones, let’s plug in something derived from a forecast. <a href="https://economics.td.com/ca-long-term-forecast">TD forecasts</a> the overnight rate for the BoC will end 2022 at 1.25% (it’s 0.5% as I write this) and climb to 1.75% by the end of 2023 before leveling off for the remainder of the forecast period. Let’s make a scenario where variable rates follow that same hike schedule 1:1</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Current delta based on "special" rates available on RBC site</span></span>
<span id="cb26-2">start_delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.39</span></span>
<span id="cb26-3">delta_series <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.repeat(start_delta, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's do 3 0.25 rate hikes over the next 9 months</span></span>
<span id="cb26-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> cut <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]:</span>
<span id="cb26-6">    delta_series[cut:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Then we need two hikes in 2023</span></span>
<span id="cb26-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> cut <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>]:</span>
<span id="cb26-9">    delta_series[cut:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">Mortgage(</span>
<span id="cb27-2">    delta_series<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>delta_series,</span>
<span id="cb27-3">    scenario_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.25% total hikes, capped"</span>,</span>
<span id="cb27-4">    capped_variable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb27-5">).pretty_summary() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
            Scenario: 1.25% total hikes, capped
            Capped: True
            Total Payments: $136,730
            Ending mortgage balance: $346,032
            Total interest payments: $82,762
            Total principal payments: $53,968
            Average payment: $2,279
            Minimum payment: $2,279
            Maximum payment: $2,279
        </code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">Mortgage(</span>
<span id="cb29-2">    delta_series<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>delta_series,</span>
<span id="cb29-3">    scenario_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.25% total hikes, uncapped"</span>,</span>
<span id="cb29-4">    capped_variable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb29-5">).pretty_summary() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
            Scenario: 1.25% total hikes, uncapped
            Capped: False
            Total Payments: $132,412
            Ending mortgage balance: $351,139
            Total interest payments: $83,552
            Total principal payments: $48,861
            Average payment: $2,207
            Minimum payment: $1,981
            Maximum payment: $2,250
        </code></pre>
</div>
</div>
<p>So in this scenario (which I’m definitely not saying will happen, but it’s plausible) either of the variable strategies beat a fixed strategy since we never get up to the fixed rate. Between capped and full variable you make bigger payments and also pay less interest, so as long as those payments are manageable that seems like a pretty solid deal. Let’s run this against a bunch of historical scenarios now.</p>
<p>First we’ll look at the distribution of outcomes for the capped strategy based on historical rate delta development</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">capped_scenarios <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([</span>
<span id="cb31-2">    Mortgage(</span>
<span id="cb31-3">        delta_series<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>delta_df[col],</span>
<span id="cb31-4">        scenario_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1975-01-01 capped"</span>,</span>
<span id="cb31-5">        capped_variable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb31-6">    ).summarize()</span>
<span id="cb31-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> delta_df.columns</span>
<span id="cb31-8">])</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/ipreston/miniconda3/envs/mortgage/lib/python3.10/site-packages/numpy_financial/_financial.py:130: RuntimeWarning: invalid value encountered in double_scalars
  (1 + rate*when)*(temp - 1)/rate)
/home/ipreston/miniconda3/envs/mortgage/lib/python3.10/site-packages/numpy_financial/_financial.py:130: RuntimeWarning: invalid value encountered in double_scalars
  (1 + rate*when)*(temp - 1)/rate)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_hist(data, col):</span>
<span id="cb33-2">    g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.histplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data,x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>col, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, stat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"percent"</span>)</span>
<span id="cb33-3">    plt.axvline(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fixed_summary[col], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb33-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> g</span></code></pre></div>
</div>
<p>This chart shows the distribution of end balances (the amount still owing on the mortgage at the end of the 5 year term) using the capped variable strategy across all the historical scenarios we outlined above. The red vertical line is the equivalent point for going with a fixed rate. The vast majority of points show a lower ending balance, which is definitely good, although there is some tail risk of ending with a balance of up to about $50k more.</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">plot_hist(capped_scenarios, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end_balance"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-03-17-mortgage_files/figure-html/cell-29-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Similarly, we can look at the distribution of maximum payments made over the whole 5 year term. As long as the cap at least covers your interest payments you never go over it, so unsurprisingly over 70% of the scenarios have a max payment equal to the fixed amount. Again though, there’s a long tail (presumably corresponding to the massive rate hikes we saw in the late 70s and early 80s where you would end up making at least one payment that’s more than double the fixed amount, ouch.</p>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">plot_hist(capped_scenarios, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_payment"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-03-17-mortgage_files/figure-html/cell-30-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Finally, let’s look at the same scenarios, but just paying the variable rate the whole way through. The graphs represent the same things as above, just with the uncapped variable rate mortgage.</p>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">uncapped_scenarios <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([</span>
<span id="cb36-2">    Mortgage(</span>
<span id="cb36-3">        delta_series<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>delta_df[col],</span>
<span id="cb36-4">        scenario_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1975-01-01 capped"</span>,</span>
<span id="cb36-5">        capped_variable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb36-6">    ).summarize()</span>
<span id="cb36-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> delta_df.columns</span>
<span id="cb36-8">])</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/ipreston/miniconda3/envs/mortgage/lib/python3.10/site-packages/numpy_financial/_financial.py:130: RuntimeWarning: invalid value encountered in double_scalars
  (1 + rate*when)*(temp - 1)/rate)
/home/ipreston/miniconda3/envs/mortgage/lib/python3.10/site-packages/numpy_financial/_financial.py:130: RuntimeWarning: invalid value encountered in double_scalars
  (1 + rate*when)*(temp - 1)/rate)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">plot_hist(uncapped_scenarios, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end_balance"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-03-17-mortgage_files/figure-html/cell-32-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">plot_hist(uncapped_scenarios, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_payment"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://blog.ianpreston.ca/posts/2022-03-17-mortgage_files/figure-html/cell-33-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The distribution of end balances looks reasonably similar, although the capped variable definitely has more weight on the lower end of the distribution, which is quite good. Unsurprisingly, the max payment is a much wider distribution than under the capped scenario, with a decent chunk of payments above what you’d do in the fixed rate scenario.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>I’m not sure I want to put a detailed conclusion here, that could sound like giving investment advice. Please keep in mind, that I’m not a mortgage/real estate/investment professional. I’m some guy on the internet who likes making charts and wants to buy a house soon. I found this process informative for my decision making, I think I’ll leave it at that.</p>


</section>

 ]]></description>
  <category>housing</category>
  <category>jupyter</category>
  <category>python</category>
  <guid>https://blog.ianpreston.ca/posts/2022-03-17-mortgage.html</guid>
  <pubDate>Thu, 17 Mar 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Building a where to live app</title>
  <link>https://blog.ianpreston.ca/posts/2021-12-30-wheretolive.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>To start, <a href="https://github.com/ianepreston/wheretolive">here’s the code</a>. I’ll include more specific links to specific parts of the process in detail below.</p>
<p>I have two goals with this project:</p>
<ul>
<li>Figure out a good place to live when I move next</li>
<li>Learn some data engineering and system administration type skills</li>
</ul>
<p>For the first goal, I want to scrape real estate sites in my area and assemble a database of listings. I want to supplement that with open data from the city and other sources. I want all of this data to be collected and updated in an automated and efficient process. Finally, I want to be able to analyze this data in order to find the best place to live based on my personal preferences and requirements.</p>
<p>The second goal should come about as a consequence of the first. I’ve done web scraping before, but mostly for one off tasks where I can babysit if my results look weird. To store the data that I scrape I’ll use a database. I’ve done lots of querying of databases, but I haven’t had much opportunity to design one, so this will be a learning experience in the regard. I’ll also need to have an <a href="https://en.wikipedia.org/wiki/Extract,_transform,_load">ETL</a> pipeline to manage the scheduling, ingestion, and other tasks between the scraper and the database. Finally, I’ll need some way to serve the recommendations.</p>
</section>
<section id="things-i-did-wrong" class="level1">
<h1>Things I did wrong</h1>
<p>Since the purpose of writing this up is largely to document what I learned, let’s start with what I did wrong.</p>
<section id="too-much-upfront-validation" class="level2">
<h2 class="anchored" data-anchor-id="too-much-upfront-validation">Too much upfront validation</h2>
<p>My first instinct when ingesting data from a source I didn’t control (the API endpoints for rentfaster.ca and realtor.ca) was that I should do a bunch of cleaning and validation as early as possible, which would allow all of my downstream data processing steps to remain clean. On the plus side I got to learn a bit about how to use <a href="https://fastapi.tiangolo.com/">fastapi</a> and <a href="https://pydantic-docs.helpmanual.io/">pydantic</a>. On the much larger down side, this approach meant that if I wanted to modify any of the filtering I was applying, or if there were unanticipated parsing errors (people put the weirdest stuff in the square footage field) there was no possible recovery. In the final implementation I downloaded results in the most raw format I could manage. While the uncompressed data was a little larger than I wanted to be dealing with daily, it compressed down to very manageable sizes. Separating extraction from any sort of filtering or processing was definitely the right call.</p>
</section>
<section id="trying-to-learn-this-and-cloud-at-once" class="level2">
<h2 class="anchored" data-anchor-id="trying-to-learn-this-and-cloud-at-once">Trying to learn this and cloud at once</h2>
<p>Since one of the goals of this project was learning, I fairly early on got the idea in my head that I should try doing this whole process “<a href="https://en.wikipedia.org/wiki/Cloud_native_computing">cloud native</a>” on the “<a href="https://towardsdatascience.com/the-beginners-guide-to-the-modern-data-stack-d1c54bd1793e">modern data stack</a>”. I’d read a fair bit about these technologies, but hadn’t had the opportunity to implement much in them. In theory, the cool thing about the cloud is that everything is pay as you go, so for a relatively small data project like I had in mind, the costs should have been manageable and the learning curve shouldn’t have been insurmountable. In practice this turned out to be incorrect. First, trying to learn how to solve a specific problem at the same time as learning to use a general technology really compounds the difficulty of both. I did manage to learn a lot about creating and deploying <a href="https://azure.microsoft.com/en-us/services/functions/#overview">Azure Functions</a> but due to some issue that I still don’t fully understand I also managed to rack up a sizable cloud bill. It had something to do with a queue function getting stuck and reprocessing a message repeatedly rather than failing. I learned a very hard lesson about setting up cost alerts thanks to this. In a future project I’d like to reimplement this or a similar project in the cloud, as it is still a skillset I’d like to develop, but I will definitely do as much locally as I can before migrating to the cloud, rather than trying to prototype something there directly, at least until I get more experience.</p>
</section>
</section>
<section id="what-i-did" class="level1">
<h1>What I did</h1>
<section id="setting-up-my-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-my-environment">Setting up my environment</h2>
<p>One of the most important, but also annoying, aspects of any project is configuring and managing your environment. Most of my custom built logic was in python, so I built a <a href="https://python-poetry.org/">poetry</a> project. On top of python there was a lot of adjacent infrastructure to manage. For one thing, even though I wasn’t using the cloud, I still had information I wanted to leverage but keep private (namely addresses and API keys), as well as other services that I needed to have up and running. To coordinate all of this I used <a href="https://www.ansible.com/">ansible</a>. Specifically I kept my secrets using <a href="https://docs.ansible.com/ansible/latest/user_guide/vault.html">ansible-vault</a>. From the vault I could either use a <code>.env</code> file to load data in with <a href="https://pypi.org/project/python-dotenv/">python-dotenv</a> or use them directly in a playbook (for example, to set my database password). You can see the playbook I used <a href="https://github.com/ianepreston/wheretolive/blob/main/setup.yml">here</a> and there’s some related errata at the root of that repository.</p>
</section>
<section id="scraping-the-listings" class="level2">
<h2 class="anchored" data-anchor-id="scraping-the-listings">Scraping the listings</h2>
<p>There are two listings sources I’m interested in. <a href="http://realtor.ca">realtor.ca</a> for sales listings and <a href="http://rentfaster.ca">rentfaster.ca</a> for rental listings. That’s not going to be 100% comprehensive but in my experience it will cover the vast majority of listings.</p>
<p>The pattern for the initial scrape of both was very similar. Both sites have an endpoint that you can query to get a result back in JSON. There were a few examples online on GitHub that I was able to base mine on. In each case the endpoint has a limit on the number of results that it will return at one time, so I needed to find a way to iterate through. In the case of rentfaster it was easy, since it returned search results with a page number associated. For a given query I could start at page 1 and increment my page number until I had an empty result set. After each query I dumped the JSON to a raw date stamped folder. For realtor.ca it was a little trickier, as there was no automatic chunking. It did allow a price range though, so I picked a very high price ceiling, and then incremented my price floor to be the highest price seen in the previous result until I got an empty result back.</p>
<p>The end result of each of these scrapes was a date stamped folder for each containing zipped JSON files of the raw results from the endpoint. You can find the scraping code for realtor.ca <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/mls/scrape.py">here</a> and for rentfaster <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/rfaster/scrape.py">here</a>.</p>
</section>
<section id="parsing-the-listings" class="level2">
<h2 class="anchored" data-anchor-id="parsing-the-listings">Parsing the listings</h2>
<p>After downloading the raw listings data, the next step was to process and format it into something I’d want to consume. This was pretty tedious, but it’s a critical part of any data project. Lots of validating and transforming of various fields. I won’t go into the details here, but the code for parsing realtor.ca is <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/mls/parse.py">here</a> and for rentfaster <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/rfaster/parse.py">here</a>. As the final stage of parsing any given day I would write a <a href="https://pandas.pydata.org/">pandas</a> DataFrame out to <a href="https://parquet.apache.org/documentation/latest/">parquet</a> in a folder along with the compressed raw files. This setup made it easy to read in cleaned up data, while still giving me the flexibility to go back and modify my data cleaning process as necessary on historical results.</p>
</section>
<section id="storing-all-the-data" class="level2">
<h2 class="anchored" data-anchor-id="storing-all-the-data">Storing all the data</h2>
<p>I probably could have done basically everything I needed to do for this project in pandas, or at least <a href="https://geopandas.org/en/stable/">geopandas</a>, but it didn’t seem like the most elegant solution, and I wanted to learn some stuff. With those two criteria in mind I went with a <a href="https://www.postgresql.org/">PostgreSQL</a> using <a href="https://postgis.net/">PostGIS</a> to handle the geospatial aspects of the data (location being very important in selecting where to live after all). I deployed the database itself in a <a href="https://www.docker.com/">docker</a> container using ansible to manage the deployment. I also wrote a small wrapper script to make it easier to connect to the database from python using <a href="https://www.sqlalchemy.org/">sqlalchemy</a>. The wrapper code is <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/postgis.py">here</a>.</p>
</section>
<section id="ingesting-listings-data-in-postgis" class="level2">
<h2 class="anchored" data-anchor-id="ingesting-listings-data-in-postgis">Ingesting listings data in PostGIS</h2>
<p>The last thing that needed to happen with the listings themselves was getting them into the database. First I created a table for each of rentfaster and realtor.ca in the final format I wanted. <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/postgis/create_mls.sql">Here’s</a> the sql used to create the realtor.ca one for example. With that created I used pandas and sqlalchemy to push the cleaned data into a staging table (no need to predefine this since it’s getting wiped each time and pandas can handle table creation). Once the data was up in staging I would do a few additional calculations, like turning the latitude and longitude records into PostGIS Points before moving the data into the final table. I also would update a materialized view of listing data joined to some other data sets at this point, but I haven’t talked about the other data yet so I’ll cover that later. <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/rfaster/ingest.py">Here’s</a> an example of the ingestion script.</p>
</section>
<section id="adding-in-commute-data" class="level2">
<h2 class="anchored" data-anchor-id="adding-in-commute-data">Adding in commute data</h2>
<p>One of the most critical things in terms of choosing where to live is how easy it is to get places from it. This was one of the key pain points that made me think to develop this project in the first place. Plugging a candidate location into google maps and then interating through commute times to various important locations (downtown, work, family) is quite tedious. To make this easier I wanted to compute <a href="https://en.wikipedia.org/wiki/Isochrone_map">isochrones</a> for various transit modes and locations. I initially looked at <a href="https://azure.microsoft.com/en-ca/services/azure-maps/">Azure maps</a> for this. They have a built in method for isochrones, which I got working. Unfortunately it wasn’t very granular in terms of the isochrones it produced, and it didn’t support public transit data at all.</p>
<p>Fortunately, I learned about an amazing project called <a href="https://docs.opentripplanner.org/en/v1.5.0/">Open Trip Planner</a> that was exactly what I needed. It was definitely more work to set up, but the results were way better than I could get through Azure. Open Trip Planner doesn’t include any maps or transit information out of the box, so I had to set that up. I used <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/download_osm_data.py">this</a> script to grab a map of my region from <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/download_osm_data.py">OpenStreetMap</a>, supplemented it with detailed transit commute information for my city with <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/download_transit_data.py">this script</a> and finally even added in some elevation data so that walking and cycling commute times would be more accurate from <a href="https://maps.canada.ca/czs/index-en.html">This government of Canada page</a>. I couldn’t automate that last part at all as I had to queue up for my data request and then retrieve it from a personalized email link. Oh well.</p>
<p>Once I had OpenTripPlanner up and running (again, in a docker container) I was able to use the API it provided to compute isochrones of various time ranges, transit modes, and locations using <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/make_isochrone.py">this script</a> (it still has the Azure maps code in it even though I didn’t end up using that if you’re curious).</p>
<p>The output of that API was saved to JSON files, and then ingested into PostGIS using <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/isochrone.py">this script</a>.</p>
<p>Finally, I needed some way to associate this isochrone data with all the listings I was saving. I wanted columns that would easily let me filter on things like “Is this more than a 30 minute walk/transit trip from downtown?”. Between the different transit modes (walk, cycle, transit, drive, plus combinations), time ranges (I did 5 minute intervals between 10 and 60 minutes) and finally locations of interest I had a <em>lot</em> of possible ways to slice the data. While I could have hand written a giant SQL statement that would create them all, that would have been very boring to do, error prone, and also required significant rework if I changed any of my criteria. Instead I did some hacky string manipulation in python to construct the various components of my query and then stuck it together to create a view in PostGIS that associated each listing with all the transportation related attributes I might be interested in. <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/postgis/mls_commute_syntax.py">Here’s</a> what that looks like for realtor.ca.</p>
</section>
<section id="adding-in-grocery-store-data" class="level2">
<h2 class="anchored" data-anchor-id="adding-in-grocery-store-data">Adding in grocery store data</h2>
<p>While commute time to various places is certainly important for location, another factor is nearby amenities. Specifically I was asked if I could include the nearest grocery store. For this I used the <a href="https://foursquare.com/">FourSquare</a> API. Similar to the initial scraping above, I had some issues with chunking here. The FourSquare API only returns a maximum of 50 results, and there are (a few) more than 50 grocery stores in all of Calgary. One thing the API lets you specify is a NE and SW corner to define a rectangle to search within. I took advantage of that and <a href="https://numpy.org/doc/stable/reference/generated/numpy.linspace.html">numpy’s linspace method</a> to chunk the city into many boxes, query for grocery stores in each of them, and combine the result. The scraping code is <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/foursquare.py">here</a>. The results are a little messy. There are several locations that FourSquare considers a grocery store that I would disagree with. It hasn’t been enough of an issue to bother with, but between when I save the raw FourSquare results and when I upload the data into PostGIS (<a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/postgis/upload_foursquare.py">here</a>) I could easily (but tediously) add in a step that drops the locations that I don’t want to consider as grocery stores.</p>
<p>Once the grocery store data is in the database I create a table that has a row for each listing, its nearest grocery store, and the distance in meters to that grocery store. This is just straight line distance and doesn’t consider commute time, but it’s fast to compute, gives a good idea, and doesn’t make me run every listing and every grocery store through OpenTripPlanner daily. That seemed like a reasonable tradeoff to me.</p>
</section>
<section id="adding-flood-zone-data" class="level2">
<h2 class="anchored" data-anchor-id="adding-flood-zone-data">Adding flood zone data</h2>
<p>Another thing I want to consider when choosing where to live is climate resiliency. Calgary experienced a very significant <a href="https://www.calgary.ca/uep/water/flood-info/flooding-history-calgary.html">flood</a> less than a decade ago, and I would like to avoid living somewhere likely to be impacted by a similar event in the future. To manage this, I grabbed some flood risk data from the City of Calgary Open Data Portal and ingested it into PostGIS (<a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/postgis/floodzone.py">here</a>). From that I could create a table that checked if any given listing was in the 1 in 20 or 1 in 100 year flood zones as defined by the city (<a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/postgis/floodzonemap.sql">here</a>).</p>
</section>
<section id="combining-the-results" class="level2">
<h2 class="anchored" data-anchor-id="combining-the-results">Combining the results</h2>
<p>At this stage in the write up I have a table with listings and their details, as well as some views that have a foreign key identifying the listing, along with some other specific attributes (closest grocery store, flood zone status, commute details). Creating those views actually takes an appreciable amount of time (not massive, but the commute one for example is a solid 10 seconds). What I want to build off the combination of all these tables is a filtered list of just the listings that match my criteria. Both because I want to be able to iterate on my criteria quickly, and because I’m building similar criteria list for a few other people who are interested in finding a place to live, I don’t want to have to recompute all those queries every time I want to change something or need to find candidates for a new person. To manage this, I created a materialized view of all the data sets joined together (<a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/postgis/mls_wide_table.py">here’s</a> the realtor.ca table for example). After I ingest a new day of listings I can refresh this materialized view, and then have quick access to all my updated criteria for current listings.</p>
</section>
<section id="creating-candidate-lists" class="level2">
<h2 class="anchored" data-anchor-id="creating-candidate-lists">Creating candidate lists</h2>
<p>The next piece is filtering down all of the possible listings to just the ones that I might actually want. I did this by making views on top of the wide table described above that applied whatever filter criteria I wanted, along with only returning a subset of the available columns that I’d want to see in advance before investigating a listing further. <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/postgis/candidate_views.sql">Here’s</a> the code for making candidate views for realtor.ca for example.</p>
</section>
<section id="sharing-the-candidates" class="level2">
<h2 class="anchored" data-anchor-id="sharing-the-candidates">Sharing the candidates</h2>
<p>Now to make the candidate listings accessible. To make it easier for me, and possible for others, I export the listings daily to <a href="https://www.dropbox.com/home">Dropbox</a>. This part of the process was actually delightfully easy. I made some minor modifications to the example code on the Dropbox page and then used pandas to_html method to push up a table of listings. From there I could use regular Dropbox functionality to share personalized folders with people interested in particular listings candidates. If I was trying to do this as an actual application I’d obviously need a more robust solution, but for myself and a couple other people this worked perfect. The basic dropbox export code is <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/dropbox_uploader.py">here</a> and the actual listings upload code is <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/mls/upload_candidates.py">here</a>.</p>
</section>
<section id="scheduling-things" class="level2">
<h2 class="anchored" data-anchor-id="scheduling-things">Scheduling things</h2>
<p>Now that I have all the components of the pipeline set up I need to automate it. I was tempted to go with something cool for this like <a href="https://airflow.apache.org/">airflow</a> or <a href="https://dagster.io/">dagster</a> but it didn’t seem worth the complexity. I ended up adding a task to my ansible playbook to schedule cron jobs for realtor.ca and rentfaster listings. The script cron runs looks like <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/daily_rfaster.py">this</a>.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Overall I’m quite happy with how this project went. I learned a lot (some things the hard way, like to always set up cost alerts in the cloud). I also ended up with a service that I’m finding legitimately useful in locating where I want to live next, that others are finding valuable too.</p>


</section>

 ]]></description>
  <category>data</category>
  <category>python</category>
  <category>yyc</category>
  <guid>https://blog.ianpreston.ca/posts/2021-12-30-wheretolive.html</guid>
  <pubDate>Thu, 30 Dec 2021 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
