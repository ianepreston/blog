<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Ian&#39;s blog</title>
<link>https://blog.ianpreston.ca/</link>
<atom:link href="https://blog.ianpreston.ca/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Sun, 23 Mar 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>My first k8s build log - talhelper</title>
  <link>https://blog.ianpreston.ca/posts/2025-03-23-talhelper.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I’m building out my first kubernetes cluster and in these posts I’m going to do a relatively raw write up on what I’ve done to get it working. These are definitely not authoritative guides, but I think sometimes having someone who’s new write up what they’re doing can be helpful. Hopefully it’s useful to others, or at least me when I need to go back and figure out what I did.</p>
<p>In this post I’m going to discuss using <a href="https://budimanjojo.github.io/talhelper/latest/">talhelper</a> to manage my talos linux install.</p>
</section>
<section id="background" class="level1">
<h1>Background</h1>
<p>I’ve written in the past that I’m running my cluster on <a href="https://www.talos.dev/">Talos Linux</a>, but I haven’t written about how I’ve configured it. That’s mostly because I basically followed <a href="https://mirceanton.com/posts/2023-11-28-the-best-os-for-kubernetes/">this blog</a> post verbatim, so I didn’t have a lot to add personally.</p>
<p>That approach worked great for my initial setup, since all my machines were the same, I wasn’t worrying about upgrades yet, and I was using the base version of Talos without extensions. As I spent more time using Talos though, I started to run into shortcomings and after some research determined that I would be better able to manage my config with talhelper.</p>
<p>As an aside, from the looks of <a href="https://github.com/mirceanton/home-ops/blob/feat/cluster-bootstrap/kubernetes/bootstrap/talconfig.yaml">his repo</a>, the author of the blog I used as a template has made a similar leap.</p>
<section id="specific-issues-i-encountered" class="level2">
<h2 class="anchored" data-anchor-id="specific-issues-i-encountered">Specific issues I encountered</h2>
<section id="upgrade-woes" class="level3">
<h3 class="anchored" data-anchor-id="upgrade-woes">Upgrade woes</h3>
<p>Talos warns that you should use the same version of <code>talosctl</code> as you’re running on your cluster. I learned the hard way why that is.</p>
<p>Because I wasn’t pinning my version of <code>talosctl</code> (that’s a little tricky to do with nix and I didn’t think it was a big deal at the time), when I ran commands like <code>talosctl gen config</code> it created a config that assumed I would have a newer version of kubernetes than what was associated with the version of talos I was running. Talos and Kubernetes versions are normally very tightly coupled and you should be managing them in lockstep.</p>
<p>Because I didn’t understand this, I wound up running an old version of talos with a new version of kubernetes. This put me in a tricky situation. You can’t roll back your kubernetes version in talos (at least I couldn’t figure out how), and I also couldn’t upgrade talos to the next version I needed to get to (major version upgrades are only supported from the latest minor version of the previous major revision). I eventually resolved it by wiping my cluster and reinstalling fresh. Fortunately I didn’t have anything important running, this sort of thing is exactly why I’m going to run a dev version of the cluster for quite a while before I’m comfortable putting workloads I care about on it.</p>
<p>The discussion related to this issue is <a href="https://github.com/siderolabs/talos/discussions/10447">here</a>. I do think there’s some opportunities for Talos to improve how it handles coupling k8s and talos upgrades, but ultimately the issue was still mine.</p>
</section>
<section id="machine-specific-configs" class="level3">
<h3 class="anchored" data-anchor-id="machine-specific-configs">Machine specific configs</h3>
<p>My old approach works fine as long as I treat all my nodes (at least within control planes and workers) as identical. While this is the case for me for now, I can see a time when it won’t be, or where I might want to build up my config by explicitly referencing MAC addresses or other hardware device IDs on nodes rather than just saying “use the only physical NIC in the machine” for example.</p>
</section>
<section id="handling-custom-images" class="level3">
<h3 class="anchored" data-anchor-id="handling-custom-images">Handling custom images</h3>
<p>My initial install of talos was just the vanilla build you can download from their site. As I’m starting to experiment with things like <a href="https://longhorn.io/">longhorn</a> I’m discovering I need to build custom images from <a href="https://factory.talos.dev/">talos factory</a>.</p>
<p>My initial solution to this was to write my own parser script that read in a yaml file with the customizations I needed, called the factory API, and retrieved the unique ID I needed, which I could then feed into install commands.</p>
<p>This worked, but it was custom logic I had to maintain, and it didn’t address my upgrade woes issue above.</p>
</section>
<section id="issues-summary" class="level3">
<h3 class="anchored" data-anchor-id="issues-summary">Issues summary</h3>
<p>All of these issues can be summed up as needing to write or maintain custom logic to generate configs for upgrading or reconfiguring talos. I’m sure I could have come up with my own fixes for the first two and I did for the third, but at this point I’d also read about talhelper, and it seemed like it was handling all the problems I was facing, plus probably some additional ones I hadn’t thought of.</p>
</section>
</section>
</section>
<section id="installing-talhelper-and-having-working-talos-configuration-environment-generally" class="level1">
<h1>Installing talhelper (and having working talos configuration environment generally)</h1>
<p>Talhelper comes with install guides for a variety of package managers, including <a href="https://budimanjojo.github.io/talhelper/latest/installation/#using-nix-flakes">nix flakes</a>, which is my current preferred way of setting up my environments. However, their instructions didn’t play nicely with some other components of my nix setup, so I did have to do things a bit differently. Since I haven’t documented it elsewhere, I might as well explain my setup here in general.</p>
<p>I’ve got one <code>homelab</code> repository (private for now at least because I’m still slightly paranoid about leaking something sensitive even though I’m making efforts not to) with base directories under it for each service it manages. Relevant to this discussion that means there’s a <code>talos</code> directory for managing the nodes and base kubernetes installs themselves, and then a <code>k8s</code> directory for the services I run on those clusters. In the root of <code>talos</code> I have a <code>flake.nix</code> that configures my dependencies:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode nix code-with-copy"><code class="sourceCode nix"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">description</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Setup env for working in my kubernetes clusters"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3"></span>
<span id="cb1-4">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inputs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"github:NixOS/nixpkgs"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">talhelper</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"github:budimanjojo/talhelper"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">outputs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-11">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-12">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-13">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">talhelper</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>:</span>
<span id="cb1-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span></span>
<span id="cb1-16">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">supportedSystems</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb1-17">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x86_64-linux"</span></span>
<span id="cb1-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aarch64-linux"</span></span>
<span id="cb1-19">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x86_64-darwin"</span></span>
<span id="cb1-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aarch64-darwin"</span></span>
<span id="cb1-21">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-22">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">forEachSupportedSystem</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-24">        nixpkgs.lib.genAttrs supportedSystems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb1-25">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">system</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-26">          f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> nixpkgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-28">              <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inherit</span> system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-29">              <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">config</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">allowUnfree</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-30">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-31">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">talhelperPkg</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> talhelper.packages.$<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">system</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>.default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-32">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-33">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb1-35">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-36">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">devShells</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forEachSupportedSystem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb1-37">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">talhelperPkg</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>:</span>
<span id="cb1-38">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-39">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">default</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-40">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pkgs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb1-41">              talosctl</span>
<span id="cb1-42">              talhelperPkg</span>
<span id="cb1-43">              kubectl</span>
<span id="cb1-44">              kubernetes-helm</span>
<span id="cb1-45">              clusterctl</span>
<span id="cb1-46">              cilium-cli</span>
<span id="cb1-47">              bws</span>
<span id="cb1-48">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-49">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-50">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-51">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-52">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-53"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>It’s very similar to how the talhelper docs suggest to install it, but something about my <code>supportedSystems</code> setup didn’t play nicely with the overlay they suggest. Defining <code>talhelperPkg = talhelper.packages.${system}.default;</code> and then including that in my list of packages was the secret sauce to get it working in my case.</p>
<p>Below this directory I have directories for each cluster I want to maintain, for now that’s only <code>dev</code>, but eventually this will include a <code>prod</code> folder as well. In that directory I have another flake that builds upon this parent flake and adds environment specific stuff:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode nix code-with-copy"><code class="sourceCode nix"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">description</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Setup Talos config for my dev cluster"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-3"></span>
<span id="cb2-4">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inputs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://flakehub.com/f/NixOS/nixpkgs/0.1.*.tar.gz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-5"></span>
<span id="cb2-6">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">outputs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb2-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>:</span>
<span id="cb2-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span></span>
<span id="cb2-9">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">supportedSystems</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb2-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x86_64-linux"</span></span>
<span id="cb2-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aarch64-linux"</span></span>
<span id="cb2-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x86_64-darwin"</span></span>
<span id="cb2-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aarch64-darwin"</span></span>
<span id="cb2-14">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb2-15">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">forEachSupportedSystem</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb2-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> nixpkgs.lib.genAttrs supportedSystems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">system</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> nixpkgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inherit</span> system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb2-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb2-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-19">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">devShells</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forEachSupportedSystem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb2-20">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>:</span>
<span id="cb2-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-22">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">default</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-23">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">shellHook</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb2-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">              export TALOSCONFIG="$(pwd)/clusterconfig/talosconfig"</span></span>
<span id="cb2-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-26">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-28">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The <code>.envrc</code> in this directory then applies both flakes:</p>
<pre><code>source_env ../.envrc
use flake</code></pre>
<p>With this all set up when I navigate to the directory for my cluster I have all the tools I need and my environment variables are automatically set to use the correct cluster. I think my envrc could probably just set the one extra environment variable itself rather than use a flake, but I started out with some extra stuff in here and it’s less work to just leave it.</p>
</section>
<section id="setting-up-talconfig" class="level1">
<h1>Setting up talconfig</h1>
<section id="create-secrets" class="level2">
<h2 class="anchored" data-anchor-id="create-secrets">Create secrets</h2>
<p>Talhelper defaults to expecting you to use sops and age for encrypting secrets. Fortunately that’s the approach I was already taking. For some reason my old approach seemed to be ok with having one <code>.sops.yaml</code> file in the base <code>talos</code> folder but talhelper wanted it right in <code>dev</code>. Not a big deal, there’s very little content in it but I did find that odd. Other than that I followed the instructions to retrieve my secrets from my running cluster and put them into the format talhelper expects using <a href="https://budimanjojo.github.io/talhelper/latest/getting-started/#you-already-have-a-talos-cluster-running">their docs</a>.</p>
</section>
<section id="converting-over-configs-from-patch-format-to-talhelper" class="level2">
<h2 class="anchored" data-anchor-id="converting-over-configs-from-patch-format-to-talhelper">Converting over configs from patch format to talhelper</h2>
<p>A lot of the configs are quite straightforward to port, but there were some where I had to do some digging around. The docs for talhelper are quite good, but they don’t cover every scenario. Fortunately there are people braver than me who have open sourced their repos and by looking at their examples I was able to figure out what I needed to do. My config ended up looking like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clusterName</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dk8s</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">talosVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v1.9.5</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kubernetesVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v1.32.3</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">endpoint</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://192.168.40.13:6443</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Talos endpoint, the VIP</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">allowSchedulingOnControlPlanes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cniConfig</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span></span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">patches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">  - </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|-</span></span>
<span id="cb4-10">    cluster:</span>
<span id="cb4-11">      proxy:</span>
<span id="cb4-12">        disabled: true</span>
<span id="cb4-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">controlPlane</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">patches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">    - </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|-</span></span>
<span id="cb4-16">      - op: add</span>
<span id="cb4-17">        path: /machine/kubelet/extraMounts</span>
<span id="cb4-18">        value:</span>
<span id="cb4-19">          - destination: /var/lib/longhorn</span>
<span id="cb4-20">            type: bind</span>
<span id="cb4-21">            source: /var/lib/longhorn</span>
<span id="cb4-22">            options:</span>
<span id="cb4-23">              - bind</span>
<span id="cb4-24">              - rshared</span>
<span id="cb4-25">              - rw</span>
<span id="cb4-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schematic</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">customization</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extraKernelArgs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> net.ifnames=0</span></span>
<span id="cb4-30"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">worker</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">patches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">    - </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|-</span></span>
<span id="cb4-33">      - op: add</span>
<span id="cb4-34">        path: /machine/kubelet/extraMounts</span>
<span id="cb4-35">        value:</span>
<span id="cb4-36">          - destination: /var/lib/longhorn</span>
<span id="cb4-37">            type: bind</span>
<span id="cb4-38">            source: /var/lib/longhorn</span>
<span id="cb4-39">            options:</span>
<span id="cb4-40">              - bind</span>
<span id="cb4-41">              - rshared</span>
<span id="cb4-42">              - rw</span>
<span id="cb4-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schematic</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">customization</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extraKernelArgs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> net.ifnames=0</span></span>
<span id="cb4-47"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nodes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hostname</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d-hpp-1-lab"</span></span>
<span id="cb4-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ipAddress</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">192.168.40.11</span></span>
<span id="cb4-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">networkInterfaces</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-51"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deviceSelector</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-52"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">physical</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-53"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dhcp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-54"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vip</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;vip</span></span>
<span id="cb4-55"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ip</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">192.168.40.13</span></span>
<span id="cb4-56"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">installDisk</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /dev/nvme0n1</span></span>
<span id="cb4-57"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">controlPlane</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-58"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schematic</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-59"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">customization</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-60"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">systemExtensions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-61"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">officialExtensions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-62"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> siderolabs/intel-ucode</span></span>
<span id="cb4-63"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> siderolabs/iscsi-tools</span></span>
<span id="cb4-64"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> siderolabs/util-linux-tools</span></span>
<span id="cb4-65"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hostname</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d-hpp-2-lab"</span></span>
<span id="cb4-66"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ipAddress</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">192.168.40.7</span></span>
<span id="cb4-67"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">networkInterfaces</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-68"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deviceSelector</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-69"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">physical</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-70"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dhcp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-71"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vip</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">*vip</span></span>
<span id="cb4-72"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">installDisk</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /dev/nvme0n1</span></span>
<span id="cb4-73"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">controlPlane</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-74"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schematic</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-75"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">customization</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-76"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">systemExtensions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-77"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">officialExtensions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-78"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> siderolabs/intel-ucode</span></span>
<span id="cb4-79"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> siderolabs/iscsi-tools</span></span>
<span id="cb4-80"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> siderolabs/util-linux-tools</span></span>
<span id="cb4-81"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hostname</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d-hpp-3-lab"</span></span>
<span id="cb4-82"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ipAddress</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">192.168.40.9</span></span>
<span id="cb4-83"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">networkInterfaces</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-84"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deviceSelector</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-85"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">physical</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-86"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dhcp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-87"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vip</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">*vip</span></span>
<span id="cb4-88"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">installDisk</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /dev/nvme0n1</span></span>
<span id="cb4-89"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">controlPlane</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-90"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schematic</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-91"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">customization</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-92"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">systemExtensions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-93"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">officialExtensions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-94"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> siderolabs/intel-ucode</span></span>
<span id="cb4-95"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> siderolabs/iscsi-tools</span></span>
<span id="cb4-96"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> siderolabs/util-linux-tools</span></span></code></pre></div>
<p>I don’t love the <code>patches</code> syntax but I couldn’t find a better way. Maybe future releases will add top level arguments for this.</p>
<p>One of the trickier parts was figuring out what stuff to put in the contol plane/worker layer and what to put in the node layer. Some things like <code>networkInterfaces</code> have to be on the node level even though in my case they’re the same across all devices. Most things if you define them at the control plane/worker level and also at the node level the node argument will override. There are ways to work around this but I didn’t bother since repeating myself a little on the node level is not a big deal. Eventually it would be nice to get this even more modular, but I’ve got a lot of other things I want to do with this cluster so I have to recognize when I’m at a good enough state.</p>
</section>
<section id="applying-the-configuration" class="level2">
<h2 class="anchored" data-anchor-id="applying-the-configuration">Applying the configuration</h2>
<p>Talhelper ships with some nice syntax to turn this configuration back to standard talos config files and commands so this part was straightforward. <code>talhelper genconfig</code> makes a <code>clusterconfig</code> directory and adds its contents to gitignore since it contains unencrypted secrets. After that you can generally run <code>talhelper gencommand &lt;command&gt;</code> to get the associated <code>talosctl</code> commands. You can pipe this directly to bash to immediately run the command (across all your nodes) but for now I’m happy to take the output and run each step manually. One thing I couldn’t figure out was how to have it add flags. My immediate use case is adding the <code>--preserve</code> flag on <code>upgrade</code> commands so it doesn’t wipe out my persistent volumes during upgrades. It’s easy enough to just take the command it generates though and add the flag yourself, just have to remember to do it.</p>
<p>I ran through patching talos and kubernetes as well as applying updated configs and everything ran fine.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Switching from raw (or personally scripted) handling of talos configuration to talhelper took a bit of work, but I’m confident it will be worth it in the long run for maintainability and extensibility.</p>


</section>

 ]]></description>
  <category>kubernetes</category>
  <category>talos</category>
  <guid>https://blog.ianpreston.ca/posts/2025-03-23-talhelper.html</guid>
  <pubDate>Sun, 23 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>My first k8s build log - Argocd</title>
  <link>https://blog.ianpreston.ca/posts/2025-01-04-kubelog-argo.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I’m building out my first kubernetes cluster and in these posts I’m going to do a relatively raw write up on what I’ve done to get it working. These are definitely not authoritative guides, but I think sometimes having someone who’s new write up what they’re doing can be helpful. Hopefully it’s useful to others, or at least me when I need to go back and figure out what I did.</p>
<p>In this post I’ll talk about configuring <a href="https://argo-cd.readthedocs.io/en/stable/">argocd</a> and its <a href="https://argocd-vault-plugin.readthedocs.io/en/stable/">vault plugin</a> for managing my cluster.</p>
</section>
<section id="initial-research" class="level1">
<h1>Initial research</h1>
<p>I’ve been basing a lot of my setup on <a href="https://github.com/acelinkio/argocd-homelab/tree/main">acelinkio’s</a> repo and took quite a bit of inspiration from there. Definitely the basic idea of using argo’s vault plugin for interpolating secrets into my manifests came from there.</p>
<p>I’ve also taken some inspiration from <a href="https://github.com/henrywhitaker3/homelab">henrywhitaker3’s</a> repo.</p>
<p>Plus of course the official docs and github pages of argo and the vault plugin, linked in the intro.</p>
</section>
<section id="bootstrapping" class="level1">
<h1>Bootstrapping</h1>
<p>With argo in particular the bootstrapping process twists my head a bit, as I need to install the thing that will manage other things, and ideally manage itself while it’s at it.</p>
<p>I still follow the basic approach as <a href="../posts/2024-12-27-kubelog-bitwarden-secrets.html">my bitwarden bootstrapping</a> post, with everything I can defined under an app in the services folder to be managed by argo going forward, with just enough code in the bootstrap directory to get me over the line.</p>
<p>Starting with the chart I’m following the same general pattern of defining a helm chart that depends on the upstream app I want to install, so I can drop any additional manifests I want to manage in the <code>templates</code> folder of my local chart.</p>
<section id="helm-chart" class="level2">
<h2 class="anchored" data-anchor-id="helm-chart">Helm Chart</h2>
<p>The <code>Chart.yaml</code> file is pretty vanilla, the relevant section is as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dependencies</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argo-cd</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7.7.11"</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repository</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://argoproj.github.io/argo-helm</span></span></code></pre></div>
<p>Which references the unofficial argo project helm chart.</p>
<p>The <code>values.yaml</code> file actually has quite a bit going on as that’s where all the custom config for the vault plugin goes:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">argo-cd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">redis-ha</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">controller</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicas</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicas</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">applicationSet</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicas</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">configs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plugins</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">avp-helm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">discover</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> sh</span></span>
<span id="cb2-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-c"</span></span>
<span id="cb2-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"find . -name 'Chart.yaml' &amp;&amp; find . -name 'values.yaml'"</span></span>
<span id="cb2-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> sh</span></span>
<span id="cb2-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-c"</span></span>
<span id="cb2-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">              - </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb2-26">                helm template $ARGOCD_APP_NAME --include-crds -n $ARGOCD_APP_NAMESPACE . |</span>
<span id="cb2-27">                argocd-vault-plugin generate -</span>
<span id="cb2-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">avp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">discover</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb2-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> sh</span></span>
<span id="cb2-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-c"</span></span>
<span id="cb2-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"find . -name '*.yaml' ! -name 'Chart.yaml' ! -name 'values.yaml' | xargs -I {} grep </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;path</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|avp</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.kubernetes</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.io</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> {} | grep ."</span></span>
<span id="cb2-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argocd-vault-plugin</span></span>
<span id="cb2-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> generate</span></span>
<span id="cb2-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span></span>
<span id="cb2-40"></span>
<span id="cb2-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repoServer</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbac</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiGroups</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resources</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secrets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"get"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"watch"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicas</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> custom-tools</span></span>
<span id="cb2-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">emptyDir</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{}</span></span>
<span id="cb2-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cmp-plugin</span></span>
<span id="cb2-51"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">configMap</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-52"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argocd-cmp-cm</span></span>
<span id="cb2-53"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumeMounts</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-54"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> custom-tools</span></span>
<span id="cb2-55"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mountPath</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /usr/local/bin/argocd-vault-plugin</span></span>
<span id="cb2-56"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subPath</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argocd-vault-plugin</span></span>
<span id="cb2-57"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extraContainers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-58"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> avp</span></span>
<span id="cb2-59"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/var/run/argocd/argocd-cmp-server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-60"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> quay.io/argoproj/argocd:v2.13.3</span></span>
<span id="cb2-61"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-62"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AVP_TYPE</span></span>
<span id="cb2-63"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">value</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kubernetessecret"</span></span>
<span id="cb2-64"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">securityContext</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-65"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runAsNonRoot</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb2-66"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runAsUser</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span></span>
<span id="cb2-67"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumeMounts</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-68"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mountPath</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /var/run/argocd</span></span>
<span id="cb2-69"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> var-files</span></span>
<span id="cb2-70"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mountPath</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /home/argocd/cmp-server/plugins</span></span>
<span id="cb2-71"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> plugins</span></span>
<span id="cb2-72"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mountPath</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /tmp</span></span>
<span id="cb2-73"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> tmp</span></span>
<span id="cb2-74"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mountPath</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /home/argocd/cmp-server/config/plugin.yaml</span></span>
<span id="cb2-75"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subPath</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> avp.yaml</span></span>
<span id="cb2-76"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cmp-plugin</span></span>
<span id="cb2-77"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> custom-tools</span></span>
<span id="cb2-78"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subPath</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argocd-vault-plugin</span></span>
<span id="cb2-79"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mountPath</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /usr/local/bin/argocd-vault-plugin</span></span>
<span id="cb2-80"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">initContainers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-81"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> download-tools</span></span>
<span id="cb2-82"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> alpine:3.8</span></span>
<span id="cb2-83"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sh</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> -c</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb2-84"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-85"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AVP_VERSION</span></span>
<span id="cb2-86"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">value</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.18.1"</span></span>
<span id="cb2-87"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-88"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">          - </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;-</span></span>
<span id="cb2-89">            wget -O argocd-vault-plugin</span>
<span id="cb2-90">            https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v${AVP_VERSION}/argocd-vault-plugin_${AVP_VERSION}_linux_amd64 &amp;&amp;</span>
<span id="cb2-91">            chmod +x argocd-vault-plugin &amp;&amp;</span>
<span id="cb2-92">            mv argocd-vault-plugin /custom-tools/</span>
<span id="cb2-93"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumeMounts</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-94"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mountPath</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /custom-tools</span></span>
<span id="cb2-95"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> custom-tools</span></span></code></pre></div>
<p>As mentioned above besides a little bit at the top to configure argo to run in high availability mode, most of the config is for the vault plugin. It’s basically taking the guide for the <a href="https://argocd-vault-plugin.readthedocs.io/en/stable/installation/#initcontainer-and-configuration-via-sidecar">InitContainer and configuration via sidecar</a> approach for the vault plugin and modifying how it’s input so that it will fit with the helm template. I got a boost for figuring out how to tie these together from <a href="https://github.com/argoproj/argo-helm/issues/2061">this GitHub issue</a>. Their actual problem was an errant <code>"</code> but seeing how someone else had done it helped me figure things out.</p>
<p>I’m setting the <code>AVP_TYPE</code> environment variable to <code>kubernetessecret</code> because I’m going to sync secret values themselves into my cluster with the external-secrets approach previously described, I just want the vault plugin to be able to interpolate them in in places where you can’t easily just map to a secret object.</p>
<p>Another important part to note is this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbac</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiGroups</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resources</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secrets"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"get"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"watch"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span></code></pre></div>
<p>I didn’t see that in the official configs, maybe I missed it, but it’s required to allow the vault plugin to read secrets in for interpolation.</p>
</section>
<section id="bootstrap-script" class="level2">
<h2 class="anchored" data-anchor-id="bootstrap-script">Bootstrap script</h2>
<p>With that stuff set up we can move back to looking at the bootstrap script:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ARGO_CHART</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> ../services/argocd/chart/Chart.yaml<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">HELM_REPO</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ARGO_CHART</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> eval <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.dependencies[0].repository'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ARGO_VERSION</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ARGO_CHART</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> eval <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.dependencies[0].version'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ARGO_VALS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> ../services/argocd/chart/values.yaml <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.["argo-cd"]'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> eval <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'del(.configs.cm)'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ARGO_NAMESPACE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> ../services/argocd/chart/templates/namespace.yaml <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> eval <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.metadata.name'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>As usual the first piece of bootstrapping is reading in the necessary values from the app spec. Most of this is the same as in previous posts. I’m removing <code>.configs.cm</code> from the bootstrap section mostly at this point because that’s how <code>acelinkio</code> did it in theirs. I think the rationale is that it has configuration for external authentication services and other features that won’t be available at the time of bootstrapping, so we’ll have argo sync those things in after once they’re actually available.</p>
<section id="github-repo" class="level3">
<h3 class="anchored" data-anchor-id="github-repo">GitHub repo</h3>
<p>My repo for my homelab is private, which is part of why I don’t just link to my code in these posts. There’s nothing super secret in there, but I’m worried I’ll accidentally expose a secret as I’m learning all this new stuff and keeping it private reduces the blast radius if that happens.</p>
<p>What this means is that I have to pass in secrets to argo so it can access my repository. Doing it with an ssh key would be fairly straightforward, but that would grant argo access to all my repos. Probably not a big deal, but just for kicks I created a GitHub app key and stored the info in bitwarden to make things a bit more controlled. This next bit gets the secrets back out of bitwarden and interpolates them into my repository spec:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v1</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Secret</span></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotations</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">managed-by</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argocd.argoproj.io</span></span>
<span id="cb5-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">argocd.argoproj.io/secret-type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> repository</span></span>
<span id="cb5-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argo-repo</span></span>
<span id="cb5-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argocd</span></span>
<span id="cb5-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stringData</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> git</span></span>
<span id="cb5-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/ianepreston/homelab</span></span>
<span id="cb5-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">githubAppID</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;path:githubkey#argocd-github-app-id&gt;"</span></span>
<span id="cb5-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">githubAppInstallationID</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;path:githubkey#argocd-github-installation-id&gt;"</span></span>
<span id="cb5-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  githubAppPrivateKey</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb5-17">    &lt;path:githubkey#argocd-github-app-key&gt;</span>
<span id="cb5-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Opaque</span></span></code></pre></div>
<p>The secrets are formatted like they could be managed by argo but right now I’m just leaving this manifest in the bootstrap folder and scripting it out. It’s unlikely to change and having the repo be managed by argo while I was trying to get the vault plugin working caused me a ton of headaches.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the github info so it can be interpolated into the bootstrap script</span></span>
<span id="cb6-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">GITHUB_INSTALLATION_ID</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bws</span> secret list <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.[] | select(.key == "argocd-github-installation-id") | .value'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$GITHUB_INSTALLATION_ID</span></span>
<span id="cb6-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">GITHUB_APP_ID</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bws</span> secret list <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.[] | select(.key == "argocd-github-app-id") | .value'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$GITHUB_APP_ID</span></span>
<span id="cb6-6"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">GITHUB_APP_KEY</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bws</span> secret list <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.[] | select(.key == "argocd-github-app-key") | .value'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$GITHUB_APP_KEY</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install the repo resource with string interpolation</span></span>
<span id="cb6-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">awk</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> INSTALLATION_ID=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$GITHUB_INSTALLATION_ID</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> APP_KEY=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$GITHUB_APP_KEY</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> APP_ID=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$GITHUB_APP_ID</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb6-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    if ($0 ~ /&lt;path:githubkey#argocd-github-installation-id&gt;/) {</span></span>
<span id="cb6-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        gsub("&lt;path:githubkey#argocd-github-installation-id&gt;", INSTALLATION_ID)</span></span>
<span id="cb6-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    }</span></span>
<span id="cb6-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    if ($0 ~ /&lt;path:githubkey#argocd-github-app-key&gt;/) {</span></span>
<span id="cb6-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        sub("&lt;path:githubkey#argocd-github-app-key&gt;", "") # Remove placeholder</span></span>
<span id="cb6-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        print "  githubAppPrivateKey: |" # Add YAML block indicator</span></span>
<span id="cb6-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        n = split(APP_KEY, lines, "\n") # Split APP_KEY into lines</span></span>
<span id="cb6-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        for (i = 1; i &lt;= n; i++) {</span></span>
<span id="cb6-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            print "    " lines[i] # Indent each line</span></span>
<span id="cb6-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        }</span></span>
<span id="cb6-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        next # Skip further processing for this line</span></span>
<span id="cb6-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    }</span></span>
<span id="cb6-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    if ($0 ~ /&lt;path:githubkey#argocd-github-app-id&gt;/) {</span></span>
<span id="cb6-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        gsub("&lt;path:githubkey#argocd-github-app-id&gt;", APP_ID)</span></span>
<span id="cb6-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    }</span></span>
<span id="cb6-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    print</span></span>
<span id="cb6-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}'</span> argo-repository.yaml <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-30"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span></span></code></pre></div>
<p>This beast of a script is because the GitHub key is a multi line string and getting it interpolated into that yaml file with the correct indentation is tricky. Full credit to ChatGPT for coming up with that monster.</p>
</section>
<section id="install-argo" class="level3">
<h3 class="anchored" data-anchor-id="install-argo">Install argo</h3>
<p>Next up we install argo. I should probably logically have this first in my script but it works in this order so whatever:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install argo</span></span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ARGO_VALS</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">helm</span> template argocd argo-cd <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HELM_REPO</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ARGO_VERSION</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--namespace</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ARGO_NAMESPACE</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--values</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--namespace</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ARGO_NAMESPACE</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--filename</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span></span></code></pre></div>
<p>Note that I’m using <code>helm template</code> and piping it to <code>kubectl apply</code> rather than <code>helm install</code>. That seems to be the way you need to do it, I’m honestly not sure why, something about how the chart is designed I imagine.</p>
<p>Finally I just have to add in the resources to spin up my default project and app of apps:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> ../services/argocd/chart/templates/projects.yaml</span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> ../services/argocd/chart/templates/apps.yaml</span></code></pre></div>
<p>Which correspond to these two files:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argoproj.io/v1alpha1</span></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AppProject</span></span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cluster</span></span>
<span id="cb9-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argocd</span></span>
<span id="cb9-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clusterResourceWhitelist</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span></span>
<span id="cb9-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span></span>
<span id="cb9-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">destinations</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span></span>
<span id="cb9-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span></span>
<span id="cb9-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sourceRepos</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span></span></code></pre></div>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argoproj.io/v1alpha1</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Application</span></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cluster</span></span>
<span id="cb10-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argocd</span></span>
<span id="cb10-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">destination</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argocd</span></span>
<span id="cb10-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://kubernetes.default.svc</span></span>
<span id="cb10-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> default</span></span>
<span id="cb10-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> k8s/dev</span></span>
<span id="cb10-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repoURL</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/ianepreston/homelab</span></span>
<span id="cb10-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">targetRevision</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> HEAD</span></span>
<span id="cb10-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">directory</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recurse</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb10-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.app.yaml"</span></span>
<span id="cb10-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">syncPolicy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">automated</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prune</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb10-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selfHeal</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb10-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">syncOptions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> CreateNamespace=true</span></span></code></pre></div>
<p>The second one looks in my repo for any yaml files matching the pattern <code>*.app.yaml</code> and applies them.</p>
<p>In each folder for an app I have an <code>[app-name].app.yaml</code> file that contains the app spec for that app, so once this gets added it will find all my other apps and apply them.</p>
<p>And with that, after a bit of waiting I have a functional argocd instance. But right now I can’t get to it because I haven’t configured any ingress.</p>
</section>
</section>
<section id="accessing-it" class="level2">
<h2 class="anchored" data-anchor-id="accessing-it">Accessing it</h2>
<p>With argo spun up the first thing I have to do is give myself a way to access it.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> port-forward svc/argocd-server <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> argocd 8080:443</span></code></pre></div>
<p>Port forwards to port 8080 on my local machine and opening a browser there will bring up the argo login.</p>
<p>To get the password (with port forwarding running) I can run this in another terminal tab:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">argocd</span> admin initial-password <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> argocd</span></code></pre></div>
<p>From there I can log into the UI, see all my apps (hopefully) syncing properly and move on to the next stage of setting up my cluster.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Writing it out now this doesn’t seem so bad, but getting argo to bootstrap itself, especially combined with trying to figure out the vault plugin and how the helm chart was supposed to work was a huge pain. Hopefully everything is stable now and I won’t really have to worry about this in the future. On the plus side, going through this I ended up wiping my cluster a couple times just to make sure there wasn’t some errant config causing issues, which helped me tidy up and increase confidence in my overall cluster bootstrapping process.</p>


</section>

 ]]></description>
  <category>argocd</category>
  <category>kubernetes</category>
  <category>talos</category>
  <guid>https://blog.ianpreston.ca/posts/2025-01-04-kubelog-argo.html</guid>
  <pubDate>Sat, 04 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>My first k8s build log - Bitwarden Secrets</title>
  <link>https://blog.ianpreston.ca/posts/2024-12-27-kubelog-bitwarden-secrets.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I’m building out my first kubernetes cluster and in these posts I’m going to do a relatively raw write up on what I’ve done to get it working. These are definitely not authoritative guides, but I think sometimes having someone who’s new write up what they’re doing can be helpful. Hopefully it’s useful to others, or at least me when I need to go back and figure out what I did.</p>
<p>In this post I’m going to talk about setting up <a href="https://external-secrets.io/latest/">external secrets</a> with the <a href="https://bitwarden.com/products/secrets-manager/">bitwarden secrets manager</a> backend.</p>
<section id="addendum" class="level2">
<h2 class="anchored" data-anchor-id="addendum">Addendum</h2>
<p>I ran into issues with certificate renewals not being picked up by my bitwarden sdk deployment and causing errors in syncing secrets. I have a possible fix applied that I’ll describe in the relevant sections in this update to the post, but I can’t be totally sure it’s worked until I’ve been running it a while longer. I wanted to get my current attempt documented while it was fresh in my mind though.</p>
</section>
</section>
<section id="background-on-my-setup" class="level1">
<h1>Background on my setup</h1>
<p>For this project I started with a Talos Linux cluster of 3 nodes.</p>
<p>Additionally, while this isn’t implemented yet, I want to use <a href="https://argo-cd.readthedocs.io/en/stable/">argocd</a> to manage my cluster, but there’s a bit of a chicken and egg issue here where I need to be able to pull in secrets to argo to manage things, so I have to bootstrap this capability in, preferably in such a way that argo can easily take over managing it later.</p>
</section>
<section id="initial-research" class="level1">
<h1>Initial research</h1>
<section id="figuring-out-the-bitwarden-secrets-cli" class="level2">
<h2 class="anchored" data-anchor-id="figuring-out-the-bitwarden-secrets-cli">Figuring out the bitwarden secrets CLI</h2>
<p>First I should just figure out how to use the bitwarden secrets cli. I’ll need it to inject the initial access tokens anyway</p>
<p>I grab the access token for the machine account I created (stored as a secure note in bitwarden for now) and run <code>export BWS_ACCESS_TOKEN=[the token]</code> from there I can list projects with <code>bws project list</code> to show that I’m authenticated.</p>
<p>I’m also going to add the machine token as a secret under the key <code>machinetoken</code> in the project. I’ll still have to retrieve it for CLI use, but once I have it I can safely inject it into kubernetes or whatever using that.</p>
<p>I can also access secrets about the way I’d expect to for example <code>bws run 'echo "$testsecret"</code> this works to inject a secret into a command.</p>
</section>
<section id="official-docs" class="level2">
<h2 class="anchored" data-anchor-id="official-docs">Official docs</h2>
<ul>
<li><a href="https://external-secrets.io/latest/provider/bitwarden-secrets-manager/">external-secrets bitwarden provider</a> pretty minimal docs but handy</li>
<li><a href="https://github.com/external-secrets/bitwarden-sdk-server?tab=readme-ov-file#certificates">bitwarden SDK certificates docs</a> external-secrets docs refer to this to configure the self-signed cert to communicate</li>
<li><a href="https://github.com/external-secrets/bitwarden-sdk-server/tree/main/hack">bitwarden SDK hack folder</a> the example files the certificate docs point to</li>
</ul>
</section>
<section id="what-about-bitwarden-secrets-operator" class="level2">
<h2 class="anchored" data-anchor-id="what-about-bitwarden-secrets-operator">What about bitwarden secrets operator?</h2>
<p>In addition to plugging bitwarden secrets into external-secrets they also offer their own operator <a href="https://bitwarden.com/help/secrets-manager-kubernetes-operator/">here</a>.</p>
<p>This is obviously purpose built for bitwarden as opposed to external-secrets and therefore will have an easier setup story than external secrets.</p>
<p>I did mess around with it and probably could have made it work but worried that it would make it harder for me to learn from other example repositories, as most of the ones I’ve found use 1password with external-secrets. From my reviewing of the docs it seems like I’d have to inject a secret for my machine token for bitwarden in every namespace that I wanted to create bitwarden secrets, as opposed to external-secrets letting me create one <code>ClusterSecretStore</code> and then just create the secrets I want in each namespace. There’s probably a way around that but for now I’m happy with putting in more work on initial setup to have a more standard approach going forward. It’s unlikely I’ll swap out my secrets manager but this will also make that easier since external secrets supports many options.</p>
</section>
<section id="helpful-example-repos" class="level2">
<h2 class="anchored" data-anchor-id="helpful-example-repos">Helpful example repos</h2>
<ul>
<li><a href="https://github.com/alexwaibel/home-ops/blob/main/kubernetes/apps/external-secrets/external-secrets/stores/clustersecretstore.yaml">alexwaibel secretstore</a> still figuring my way around this code base but actually uses bitwarden secrets so definitely a good example.</li>
<li><a href="https://github.com/acelinkio/argocd-homelab/blob/main/docs/setup.md">acelinkio setup docs</a> good bootstrapping ideas</li>
<li><a href="https://github.com/acelinkio/argocd-homelab/blob/main/manifest/external-secrets.yaml">acelinkio external secrets manifest</a> not super useful to me since it uses 1password but might be handy to refer to</li>
<li><a href="https://github.com/acelinkio/argocd-homelab/blob/main/manifest/1passwordconnect.yaml">acelinkio 1password connect</a> again not super useful but might have to do some compare and contrast</li>
<li><a href="https://github.com/henrywhitaker3/homelab/blob/main/kubernetes/k3s/bootstrap/manifests/root.yaml">henrywhitaker3 apps</a> not using this for any secrets config but it is how I’m planning to organize my apps so when I build out templates this is handy to have available</li>
</ul>
</section>
<section id="overview-of-requirements" class="level2">
<h2 class="anchored" data-anchor-id="overview-of-requirements">Overview of requirements</h2>
<p>The main thing I need is external-secrets installed with the additional options to load a <code>bitwarden-sdk</code> container, which is how external-secrets actually retrieves secrets from bitwarden. To support that I’ll also need a regular kubernetes secret with the machine access token to connect to bitwarden secrets, as well as a way of providing TLS certs so that external-secrets and the bitwarden SDK can talk to each other over https. Finally, just to up the difficulty, I need all this to be manually applied initially, as it’s a prerequisite for setting up my argo automations, but in such a way that argo can take over managing things once it’s up and running.</p>
</section>
</section>
<section id="file-structure" class="level1">
<h1>File structure</h1>
<p>This wasn’t the first thing I actually figured out, but it’s important to understand the rest of what I’m doing in this post so let’s start here.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> bootstrap</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> ├── cert-manager.sh</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> ├── external-secrets.sh</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> services</span>
<span id="cb1-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> certmanager</span>
<span id="cb1-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> ├── cert-manager.app.yaml</span>
<span id="cb1-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> └── chart</span>
<span id="cb1-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>     ├── Chart.yaml</span>
<span id="cb1-10">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>     ├── templates</span>
<span id="cb1-11">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span>     └── values.yaml</span>
<span id="cb1-12">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> externalsecrets</span>
<span id="cb1-13">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> chart</span>
<span id="cb1-14">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> ├── Chart.yaml</span>
<span id="cb1-15">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> ├── templates</span>
<span id="cb1-16">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> │&nbsp;&nbsp; ├── bitwarden-self-signed-cert.yaml</span>
<span id="cb1-17">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> │&nbsp;&nbsp; └── external-secret-store.yaml</span>
<span id="cb1-18">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> └── values.yaml</span>
<span id="cb1-19">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> external-secrets.app.yaml</span></code></pre></div>
<p>The basic idea is that everything under <code>services</code> has the specifications of what state I’d like the app to be in when my cluster is up and managed by argo, and <code>bootstrap</code> reads in that data along with whatever initial steps I need to get things started.</p>
<p>For all of these apps I’m following what I think is called an umbrella chart pattern, where I create a helm chart that specifies a dependency on some external chart, and then only put manifests under <code>templates</code> that extend that installation with my custom configs. <code>cert-manager</code> at this point is empty but you can get an idea of how that works by looking at <code>external-secrets</code>, I’ll go into more detail on the contents later in the post. Outside the chart folder I have a <code>&lt;app-name&gt;.app.yaml</code> file. This sets the manifest for an argocd app, which I’ll deploy with an app of apps pattern that looks in these folders for all files matching the <code>*.app.yaml</code> pattern.</p>
</section>
<section id="installing-cert-manager" class="level1">
<h1>Installing cert-manager</h1>
<p>Installing cert-manager is a necessary pre-requisite to creating the certificates necessary to have external-secrets working properly, so we’ll start there.</p>
<p>The first thing to set up is the basic installation of cert-manager. In <code>services/cert-manager/chart/Chart.yaml</code> I specify the external dependency:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dependencies</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cert-manager</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v1.16.2"</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repository</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://charts.jetstack.io</span></span></code></pre></div>
<p>And then in <code>values.yaml</code> in the same folder I specify the configuration for the install. I could provide values to my templates in this file as well but in this case I don’t have to.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cert-manager</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">crds</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">keep</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicaCount</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">podDisruptionBudget</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<p>That’s it for the general target setup and what I want argo to manage, now I just have to set up a script that will use that to install cert-manager in advance of argo taking over.</p>
<p>Up in <code>bootstrap</code> I have the script for this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/env bash</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Installing cert-manager"</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Add the Jetstack Helm repository</span></span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">helm</span> repo add jetstack https://charts.jetstack.io <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--force-update</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Figure out what version of cert-manager to install</span></span>
<span id="cb4-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">certManagerVersion</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> ../services/certmanager/chart/Chart.yaml <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> eval <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.dependencies[0].version'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grab the values from the app chart for certmanager and install with helm</span></span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> ../services/certmanager/chart/values.yaml <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.["cert-manager"]'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-9">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">helm</span> install cert-manager <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--create-namespace</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--namespace</span> cert-manager <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$certManagerVersion</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-13">  jetstack/cert-manager <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--values</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span></span></code></pre></div>
<p>For the most part this is a standard helm install, except in a couple places I’m using <code>yq</code> to read in values from the chart I defined in <code>services</code>, First to extract the version of <code>cert-manager</code> to install and then to pipe in the values from <code>values.yaml</code> for cert-manager to the <code>helm install</code> command.</p>
<p>I went back and forth a lot over whether I should do the certificate issuers and certificates for bitwarden-secrets in with cert-manager or external-secrets since you could make a case for them being associated with either, but in the end I went with external-secrets so I’ll discuss that in the following section.</p>
</section>
<section id="installing-external-secrets" class="level1">
<h1>Installing external-secrets</h1>
<p>This one is where all the fun actually happens.</p>
<section id="helm-install" class="level2">
<h2 class="anchored" data-anchor-id="helm-install">helm install</h2>
<p>The actual installation of external-secrets follows a very similar pattern to cert-manager.</p>
<p>In the helm values I put in the arguments I need for the installation:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">external-secrets</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">installCRDs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bitwarden-sdk-server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<p>The first bit of the bootstrap script looks much the same as well:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/env bash</span></span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Installing External Secrets"</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Add the Helm repository</span></span>
<span id="cb6-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">helm</span> repo add external-secrets https://charts.external-secrets.io <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--force-update</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Figure out what version of external-secrets to install</span></span>
<span id="cb6-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">externalsecretsVersion</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> ../services/externalsecrets/chart/Chart.yaml <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> eval <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.dependencies[0].version'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grab the values from the app chart for externalsecrets and install external secrets</span></span>
<span id="cb6-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> ../services/externalsecrets/chart/values.yaml <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.["external-secrets"]'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-9">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">helm</span> install external-secrets <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--create-namespace</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--namespace</span> external-secrets <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$externalsecretsVersion</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-13">  external-secrets/external-secrets <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--values</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span></span></code></pre></div>
</section>
<section id="set-up-certificates" class="level2">
<h2 class="anchored" data-anchor-id="set-up-certificates">set up certificates</h2>
<p>As discussed above, I need a way for the external-secrets and bitwarden SDK containers to talk to each other over https. To be honest I don’t really understand this part as well as I’d like and it’s mostly cobbled together from the links listed in the research session.</p>
<p>All these parts are in the <code>bitwarden-self-signed-cert.yaml</code> file under the template for the external-secrets installer but I’ll break it out into individual manifests here for discussion.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cert-manager.io/v1</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ClusterIssuer</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb7-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-bootstrap-issuer</span></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb7-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selfSigned</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{}</span></span></code></pre></div>
<p>As the name suggests this is the first step of bootstrapping trust between the two containers, creating a certificate issuer which generates self-signed certificates.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cert-manager.io/v1</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Certificate</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-bootstrap-certificate</span></span>
<span id="cb8-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cert-manager</span></span>
<span id="cb8-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # this is discouraged but required by ios</span></span>
<span id="cb8-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">commonName</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cert-manager-bitwarden-tls</span></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isCA</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">secretName</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-tls-certs</span></span>
<span id="cb8-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subject</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">organizations</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> external-secrets.io</span></span>
<span id="cb8-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnsNames</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> external-secrets-bitwarden-sdk-server.external-secrets.svc.cluster.local</span></span>
<span id="cb8-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-sdk-server.external-secrets.svc.cluster.local</span></span>
<span id="cb8-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> localhost</span></span>
<span id="cb8-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ipAddresses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">127.0.0.1</span></span>
<span id="cb8-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ::1</span></span>
<span id="cb8-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">privateKey</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">algorithm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> RSA</span></span>
<span id="cb8-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">encoding</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> PKCS8</span></span>
<span id="cb8-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span></span>
<span id="cb8-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">issuerRef</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-bootstrap-issuer</span></span>
<span id="cb8-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ClusterIssuer</span></span>
<span id="cb8-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cert-manager.io</span></span></code></pre></div>
<p>Next up we make a certificate that’s good for the dns names of both containers issued by the self signed certificate issuer.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cert-manager.io/v1</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ClusterIssuer</span></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-certificate-issuer</span></span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ca</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">secretName</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-tls-certs</span></span></code></pre></div>
<p>Now we make another certificate issuer that’s signed by the previously created certificate. This is where my knowledge really falls down, I’m not sure what this extra step is doing for me and I’m just cargo-culting it in from the other examples I’ve seen.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cert-manager.io/v1</span></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Certificate</span></span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-tls-certs</span></span>
<span id="cb10-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> external-secrets</span></span>
<span id="cb10-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">secretName</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-tls-certs</span></span>
<span id="cb10-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnsNames</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-sdk-server.external-secrets.svc.cluster.local</span></span>
<span id="cb10-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> external-secrets-bitwarden-sdk-server.external-secrets.svc.cluster.local</span></span>
<span id="cb10-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> localhost</span></span>
<span id="cb10-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ipAddresses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">127.0.0.1</span></span>
<span id="cb10-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ::1</span></span>
<span id="cb10-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">privateKey</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">algorithm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> RSA</span></span>
<span id="cb10-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">encoding</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> PKCS8</span></span>
<span id="cb10-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span></span>
<span id="cb10-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rotationPolicy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Always</span></span>
<span id="cb10-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duration</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 168h</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 7d</span></span>
<span id="cb10-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renewBefore</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 24h</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 1d</span></span>
<span id="cb10-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">issuerRef</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-certificate-issuer</span></span>
<span id="cb10-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ClusterIssuer</span></span>
<span id="cb10-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cert-manager.io</span></span>
<span id="cb10-27"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb10-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cert-manager.io/v1</span></span>
<span id="cb10-29"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Certificate</span></span>
<span id="cb10-30"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-css-certs</span></span>
<span id="cb10-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> external-secrets</span></span>
<span id="cb10-33"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">secretName</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-css-certs</span></span>
<span id="cb10-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnsNames</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-secrets-manager.external-secrets.svc.cluster.local</span></span>
<span id="cb10-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">privateKey</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">algorithm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> RSA</span></span>
<span id="cb10-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">encoding</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> PKCS8</span></span>
<span id="cb10-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span></span>
<span id="cb10-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rotationPolicy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Always</span></span>
<span id="cb10-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">usages</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> client auth</span></span>
<span id="cb10-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">issuerRef</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-certificate-issuer</span></span>
<span id="cb10-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ClusterIssuer</span></span>
<span id="cb10-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cert-manager.io</span></span></code></pre></div>
<p>Finally we make two more certificates issued by the signed issuer, one for the bitwarden-sdk and one for external secrets. Again, why I have to do it this way is lost on me for the most part. The one cert is named <code>bitwarden-tls-certs</code> because that’s what the installation of external-secrets is looking for, the other is named <code>bitwarden-css-certs</code> because it’s attached to a <code>ClusterSecretStore</code> object. Most of the other specifications are just copy pasted and I didn’t really look into the particulars of why they’re set the way they are.</p>
<p>Now that I’ve created the spec I need to apply it in my bootstrap script, which is simply done by adding <code>kubectl apply -f ../services/externalsecrets/chart/templates/bitwarden-self-signed-cert.yaml</code> to it.</p>
<section id="handling-certificate-rotation" class="level3">
<h3 class="anchored" data-anchor-id="handling-certificate-rotation">Handling certificate rotation</h3>
<p>Note that in my config above my certificates will expire after a period of time and auto renew. After deploying and leaving it alone for a while I came back to find my apps in a degraded state with all my external secrets showing a <code>SecretSyncError</code>. When I run a describe on one of the secrets I see TLS errors with the bitwarden sdk container suggesting my certificates have expired. Checking the certificates themselves I can see that they’re valid, so it seems likely the deployment that’s attaching them as secrets isn’t picking up the change. Restarting my bitwarden sdk deployment seems to fix the issue but isn’t exactly sustainable.</p>
<p>My current approach is to add <a href="https://github.com/stakater/Reloader">reloader</a> to my stack and update my external secrets install to add some annotations to the sdk server so it will restart if those secrets are restarted like so:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">external-secrets</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">installCRDs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb11-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bitwarden-sdk-server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb11-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">podAnnotations</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">secret.reloader.stakater.com/reload</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bitwarden-css-certs,bitwarden-secrets-manager,bitwarden-secrets-manager-secrets,bitwarden-tls-certs,bitwarden-access-token"</span></span></code></pre></div>
<p>I don’t know if this will work for sure yet, I’m waiting for my certificates to renew again to find out. I don’t think I need to add reloader to my bootstrap scripts, as the certificates will be valid for a little while when I start up a cluster and not long after that argo should handle installing it naturally.</p>
<p>One other odd thing was my external secrets didn’t seem to recover from the TLS error on their own once the deployment was restarted. I had to manually refresh them following <a href="https://external-secrets.io/latest/introduction/faq/#can-i-manually-trigger-a-secret-refresh">this FAQ section</a> I’m hoping that was either just me being impatient or that triggering the reload of the deployment so I don’t get stuck with that issue will resolve that problem but I’ll have to wait and see. If it happens again I’ll have to come up with a more durable solution.</p>
</section>
</section>
<section id="configure-the-secret-store" class="level2">
<h2 class="anchored" data-anchor-id="configure-the-secret-store">Configure the secret store</h2>
<p>Next I need to inject a secret to be used by the <code>ClusterSecretStore</code> to authenticate to bitwarden. As discussed above, I’ve saved the access code for the machine identity I created for this project to the project so I can retrieve it with the bitwarden secrets cli:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bws</span> run <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kubectl create secret generic bitwarden-access-token --namespace bitwarden-secrets --from-literal token="$machinetoken"'</span></span></code></pre></div>
<p>Next I want to grab the organization ID and project ID for configuring the secret store. I’m not totally sure these should be considered sensitive but decided to err on the side of caution.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PROJECT_ID</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bws</span> project list <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jq</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.[0].id'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ORGANIZATION_ID</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bws</span> project list <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jq</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.[0].organizationId'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>Since I’m authenticating to the bitwarden secrets CLI using the machine ID that only has access to this one project I can be confident the first project listed will return the right project and organization IDs.</p>
<p>With these precursors all set up I can set up the manifest for the <code>ClusterSecretStore</code>, which will live in the <code>services</code> folder so it can be managed by argo once bootstrapping is complete:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb14-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> external-secrets.io/v1beta1</span></span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ClusterSecretStore</span></span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-secretsmanager</span></span>
<span id="cb14-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">provider</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bitwardensecretsmanager</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiURL</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://api.bitwarden.com</span></span>
<span id="cb14-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identityURL</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://identity.bitwarden.com</span></span>
<span id="cb14-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">auth</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">secretRef</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">credentials</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> token</span></span>
<span id="cb14-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-access-token</span></span>
<span id="cb14-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-secrets</span></span>
<span id="cb14-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bitwardenServerSDKURL</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://bitwarden-sdk-server.external-secrets.svc.cluster.local:9998</span></span>
<span id="cb14-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">organizationID</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;path:bitwardenids</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#organizationid&gt;</span></span>
<span id="cb14-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">projectID</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> &lt;path:bitwardenids</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#projectid&gt;</span></span>
<span id="cb14-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caProvider</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb14-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Secret</span></span>
<span id="cb14-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-css-certs</span></span>
<span id="cb14-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> external-secrets</span></span>
<span id="cb14-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ca.crt</span></span></code></pre></div>
<p>I’m using a <code>ClusterSecretStore</code> because I don’t want to have to recreate all these self-signed certs and <code>SecretStore</code> objects in every namespace that uses secrets.</p>
<p>Note that the <code>organizationID</code> and <code>projectID</code> keys don’t have the literal IDs. The idea there is that I’m going to eventually use <a href="https://argocd-vault-plugin.readthedocs.io/en/stable/">argocd vault plugin</a> to inject those secrets into the manifests that argo is managing.</p>
<p>For now though I need some way to substitute out those strings with the actual keys so I can apply the manifest before argo is up.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the argo namespace so project id and organization ID can have their string substitution secret added there</span></span>
<span id="cb15-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> create namespace argocd</span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the secrets into the namespace</span></span>
<span id="cb15-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> create secret generic bitwardenids <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--namespace</span> argocd <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--from-literal</span> projectid=<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PROJECT_ID</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--from-literal</span> organizationid=<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ORGANIZATION_ID</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse out the argo vault plugin substitution from the yaml so it can be applied</span></span>
<span id="cb15-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> ../services/externalsecrets/chart/templates/external-secret-store.yaml <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb15-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s|&lt;path:bitwardenids#organizationid&gt;|</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${ORGANIZATION_ID}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|g"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb15-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s|&lt;path:bitwardenids#projectid&gt;|</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${PROJECT_ID}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|g"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb15-9">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span></span></code></pre></div>
<p>I’m not totally sure how argo will handle having that manually created secret in its namespace that it doesn’t manage, but I’ll have a similar issue in the external-secrets deployment since I manually had to deploy the machine ID secret there. I’ll figure that out when I get to argo. For now with a bit of <code>sed</code> magic I’m substituting the placeholders for the actual values and applying the secret.</p>
</section>
</section>
<section id="testing-it-out" class="level1">
<h1>Testing it out</h1>
<p>To do a quick test I made a deployment of <a href="https://github.com/kubernetes-up-and-running/kuard">kuard</a> and injected a test secret in as an environment variable:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb16-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v1</span></span>
<span id="cb16-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Namespace</span></span>
<span id="cb16-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kuard</span></span>
<span id="cb16-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb16-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> external-secrets.io/v1beta1</span></span>
<span id="cb16-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ExternalSecret</span></span>
<span id="cb16-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-kuard-test</span></span>
<span id="cb16-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kuard</span></span>
<span id="cb16-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">refreshInterval</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 1h</span></span>
<span id="cb16-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">secretStoreRef</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # This name must match the metadata.name in the `SecretStore`</span></span>
<span id="cb16-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-secretsmanager</span></span>
<span id="cb16-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ClusterSecretStore</span></span>
<span id="cb16-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">secretKey</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> test</span></span>
<span id="cb16-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remoteRef</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"testsecret"</span></span>
<span id="cb16-22"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb16-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> apps/v1</span></span>
<span id="cb16-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deployment</span></span>
<span id="cb16-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kuard</span></span>
<span id="cb16-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kuard</span></span>
<span id="cb16-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kuard</span></span>
<span id="cb16-30"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selector</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matchLabels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kuard</span></span>
<span id="cb16-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicas</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb16-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kuard</span></span>
<span id="cb16-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">containers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kuard</span></span>
<span id="cb16-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gcr.io/kuar-demo/kuard-amd64:blue</span></span>
<span id="cb16-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> TEST_SECRET</span></span>
<span id="cb16-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">valueFrom</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">secretKeyRef</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb16-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bitwarden-kuard-test</span></span>
<span id="cb16-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> test </span></span></code></pre></div>
<p>I added a test secret to bitwarden secrets with a “hello world” value and then checked the system environment tab on the kuard deployment to make sure it was showing up there correctly. It was!</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Bootstrapping secrets management really hurt my brain. I spent a lot of time figuring out which thing was a prerequisite for which other thing and how to organize all the objects I needed so they’d both make sense to me and (hopefully) be easy to manage going forward with argocd.</p>
<p>I think I did ok on both counts but I guess I’ll find out in the next stage when I actually try and bring argo into this.</p>


</section>

 ]]></description>
  <category>bitwarden</category>
  <category>kubernetes</category>
  <guid>https://blog.ianpreston.ca/posts/2024-12-27-kubelog-bitwarden-secrets.html</guid>
  <pubDate>Fri, 27 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>My first k8s build log - Cilium</title>
  <link>https://blog.ianpreston.ca/posts/2024-12-27-kubelog-cilium.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I’m building out my first kubernetes cluster and in these posts I’m going to do a relatively raw write up on what I’ve done to get it working. These are definitely not authoritative guides, but I think sometimes having someone who’s new write up what they’re doing can be helpful. Hopefully it’s useful to others, or at least me when I need to go back and figure out what I did.</p>
<p>In this inaugural post I’m going to talk about setting up <a href="https://cilium.io/">cilium</a> as my <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/">CNI</a>.</p>
<section id="update" class="level2">
<h2 class="anchored" data-anchor-id="update">Update</h2>
<p>I went back and set this up so that <a href="https://argo-cd.readthedocs.io/en/stable/">argocd</a> can take over managing cilium once it’s loaded up. The main components are the same but the structure of some files is slightly different.</p>
<p>This post has been updated to reflect that.</p>
</section>
</section>
<section id="background-on-my-setup" class="level1">
<h1>Background on my setup</h1>
<p>For this project I started with a Talos Linux cluster of 3 nodes running <a href="https://github.com/flannel-io/flannel">flannel</a>. I got interested in cilium because it allows for more complicated network policies that I thought I’d want in the future, it has a built in load balancer option so I wouldn’t have to bring in <a href="https://metallb.io/">metallb</a>, and finally in looking at a bunch of example homelab repos it seems to be what everyone else is using and they probably have a good reason. PS, no disrespect to metallb, it worked great when I tested it out, I just figure having that capability combined and managed with the rest of my network stack will make my life easier in the future.</p>
<p>Additionally, while this isn’t implemented yet, I want to use <a href="https://argo-cd.readthedocs.io/en/stable/">argocd</a> to manage my cluster, so I don’t want my cilium install to be too tightly coupled with talos.</p>
</section>
<section id="initial-research" class="level1">
<h1>Initial research</h1>
<p>The obvious place to start is the <a href="https://www.talos.dev/v1.9/kubernetes-guides/network/deploying-cilium/">talos docs</a>. Unfortunately, unlike flannel I can’t just set <code>cilium</code> as my CNI in my config and have it stood up when I bootstrap the cluster. Fortunately they give a bunch of options for using cilium.</p>
<p>Since the docs recommend not using the cilium CLI I skipped those options and reviewed the options available through <a href="https://helm.sh/">helm</a>.</p>
<p><a href="https://www.talos.dev/v1.9/kubernetes-guides/network/deploying-cilium/#method-1-helm-install">Method 1</a>, just running the regular <code>helm install</code> command after bootstrapping your cluster but before it reboots because it has no CNI was definitely the most straightforward, but it felt a bit hacky. It ended up being what I did, but not before trying and failing with some other options.</p>
<p><a href="https://www.talos.dev/v1.9/kubernetes-guides/network/deploying-cilium/#method-4-helm-manifests-inline-install">Method 4</a> is more elegant, adding in the full templated manifest to your patch, but it had a few killer drawbacks for my requirements. First, I’d have sensitive information in the templated manifest, which means I couldn’t just dump it in git. I could maybe get around that with SOPs, but it’s extra steps. More importantly, talos would revert any changes to objects created by the manifest whenever a node rebooted. This means if I patched cilium after install it would only last until a node reboot. I’d instead have to update my template and reapply my talos config. That ruled it out.</p>
<p><a href="https://www.talos.dev/v1.9/kubernetes-guides/network/deploying-cilium/#method-5-using-a-job">Method 5</a>, defining a job to run in the manifest which would run the cilium installer seemed great. No timing issues with running commands after cluster bootstrapping, and since it’s only the job object itself directly implemented by talos I should be able to manage cilium outside it after the setup.</p>
</section>
<section id="first-issue" class="level1">
<h1>First issue</h1>
<p>Using the approach from Method 5 I added a file to my patches folder with the CNI configs and the job manifest as specified. After applying the patch to my control plane nodes I checked the state:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl get pods <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> kube-system</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NAME</span>                                  READY   STATUS                       RESTARTS     AGE</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cilium-install-chtmv</span>                  0/1     ContainerCreating            0            13s</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-64b67fc8fd-l7k7j</span>              1/1     Running                      0            69d</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">coredns-64b67fc8fd-nlg55</span>              1/1     Running                      0            69d</span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-apiserver-d-hpp-1-lab</span>            0/1     ContainerCreating            0            69d</span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-apiserver-d-hpp-2-lab</span>            1/1     Running                      0            1s</span>
<span id="cb1-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-apiserver-d-hpp-3-lab</span>            1/1     Running                      0            9s</span>
<span id="cb1-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-controller-manager-d-hpp-1-lab</span>   0/1     ContainerCreating            0            69d</span>
<span id="cb1-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-controller-manager-d-hpp-2-lab</span>   0/1     Running                      0            2s</span>
<span id="cb1-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-controller-manager-d-hpp-3-lab</span>   1/1     Running                      0            8s</span>
<span id="cb1-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-flannel-fzrqv</span>                    0/1     CreateContainerConfigError   0            69d</span>
<span id="cb1-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-flannel-kwl77</span>                    1/1     Running                      1 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1s</span> ago<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">69d</span></span>
<span id="cb1-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-flannel-rj7m7</span>                    0/1     CreateContainerConfigError   0            69d</span>
<span id="cb1-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-proxy-4dtr8</span>                      0/1     CreateContainerConfigError   0            69d</span>
<span id="cb1-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-proxy-5s9zh</span>                      1/1     Running                      1 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2s</span> ago<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">69d</span></span>
<span id="cb1-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-proxy-9lf9b</span>                      0/1     CreateContainerConfigError   0            69d</span>
<span id="cb1-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-scheduler-d-hpp-1-lab</span>            0/1     ContainerCreating            0            69d</span>
<span id="cb1-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-scheduler-d-hpp-2-lab</span>            0/1     Running                      0            1s</span>
<span id="cb1-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kube-scheduler-d-hpp-3-lab</span>            1/1     Running                      0            9s</span>
<span id="cb1-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">metrics-server-d5865ff47-nb7fp</span>        0/1     CreateContainerConfigError   0            28d</span></code></pre></div>
<p>Not ideal. After a little while <code>cilium-install</code> is in <code>CrashLoopBackOff</code>. Also, I still have flannel pods running.</p>
<section id="the-solution" class="level2">
<h2 class="anchored" data-anchor-id="the-solution">The solution</h2>
<p>Fortunately this cluster was in the very early stages of testing so I just wiped everything and did a fresh install. Maybe there’s a cleaner way to handle that but it wasn’t really worth it for what I’d set up on the cluster so far. All I’d really done to date was work through the chapters of <a href="https://www.oreilly.com/library/view/kubernetes-up-and/9781098110192/">kubernetes up and running</a></p>
</section>
</section>
<section id="second-issue" class="level1">
<h1>Second issue</h1>
<p>For whatever reason, the job install just wasn’t working for me. I don’t have amazing logs from the attempt but the one I wrote down was this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl logs <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> kube-system cilium-install-chtmv</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error:</span> Unable to install Cilium: failed parsing <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--set</span> data: key <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KILL"</span> has no value <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cannot</span> end with ,<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span></code></pre></div>
<p>I’m really not sure why that happened, google and ChatGPT both failed me.</p>
<section id="the-solution-1" class="level2">
<h2 class="anchored" data-anchor-id="the-solution-1">The solution</h2>
<p>I just did the helm install approach.</p>
<p>From a fresh set of machines in maintenance mode I just ran:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">talosctl</span> apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> rendered/controlplane.yaml <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> 192.168.40.7 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--insecure</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">talosctl</span> apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> rendered/controlplane.yaml <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> 192.168.40.9 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--insecure</span></span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">talosctl</span> apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> rendered/controlplane.yaml <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> 192.168.40.11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--insecure</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wait until the dashboard starts showing that its waiting on etcd</span></span>
<span id="cb3-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">talosctl</span> dashboard <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> 192.168.40.9</span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is helpful too, should show all systems</span></span>
<span id="cb3-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">talosctl</span> get members <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> 192.168.40.11</span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start the bootstrap</span></span>
<span id="cb3-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">talosctl</span> bootstrap <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> 192.168.40.11</span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install cilium</span></span>
<span id="cb3-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./cilium.sh</span></span></code></pre></div>
<p>Where <code>cilium.sh</code> is:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/env bash</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Installing cilium"</span></span>
<span id="cb4-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">CILIUM_CHART</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> ../../k8s/dev/services/cilium/chart/Chart.yaml<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">CILIUM_REPO</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$CILIUM_CHART</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> eval <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.dependencies[0].repository'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">CILIUM_VERSION</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$CILIUM_CHART</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> eval <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.dependencies[0].version'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cilium repo: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$CILIUM_REPO</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cilium version: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$CILIUM_VERSION</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">helm</span> repo add cilium <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$CILIUM_REPO</span></span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> ../../k8s/dev/services/cilium/chart/values.yaml <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">yq</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.["cilium"]'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-10">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">helm</span> install cilium <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-11">    cilium/cilium <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$CILIUM_VERSION</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--namespace</span> kube-system <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--values</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span></span></code></pre></div>
<p>Why that version of it allows me to set the capabilities and the job approach didn’t is beyond me at this point.</p>
<p>The actual specification of the version of cilium to install and the extra parameters to pass to the helm install are in a separate folder where they can be managed by argo once the cluster is started. The chart part looks like this:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dependencies</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cilium</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.16.5"</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repository</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://helm.cilium.io/</span></span></code></pre></div>
<p>And the values file looks like this:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cilium</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ipam</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kubernetes</span></span>
<span id="cb6-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kubeProxyReplacement</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb6-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">securityContext</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">capabilities</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ciliumAgent</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CHOWN"</span></span>
<span id="cb6-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KILL"</span></span>
<span id="cb6-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NET_ADMIN"</span></span>
<span id="cb6-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NET_RAW"</span></span>
<span id="cb6-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IPC_LOCK"</span></span>
<span id="cb6-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SYS_ADMIN"</span></span>
<span id="cb6-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SYS_RESOURCE"</span></span>
<span id="cb6-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DAC_OVERRIDE"</span></span>
<span id="cb6-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FOWNER"</span></span>
<span id="cb6-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SETGID"</span></span>
<span id="cb6-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SETUID"</span></span>
<span id="cb6-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cleanCiliumState</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NET_ADMIN"</span></span>
<span id="cb6-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SYS_ADMIN"</span></span>
<span id="cb6-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SYS_RESOURCE"</span></span>
<span id="cb6-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cgroup</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoMount</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb6-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hostRoot</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/sys/fs/cgroup/"</span></span>
<span id="cb6-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k8sServiceHost</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> localhost</span></span>
<span id="cb6-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k8sServicePort</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7445</span></span></code></pre></div>
<p>Same content, but now if I need to do patches or update other configuration in the future it will be handled by argo, and if I bootstrap a fresh cluster it will also pick up the latest versions.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I did finally get cilium working on my cluster and so far haven’t encountered any additional issues. We’ll see how it goes when I get around to managing things with argo. I’d love to know why the job install approach didn’t work and I’d also like to know if there’s a clean, practical way to swap out your CNI on a live cluster. But I’ve got a ton of other things to learn about and set up on this cluster and I had to cut my losses somewhere. I don’t think the approach I have is awful. As a future enhancement maybe I’ll have my <code>cilium.sh</code> script parse out what version of cilium I’m managing in argo so I don’t bootstrap clusters with an old version or have to manage patching versions in two places. That’s a bit overengineered for how often I think I’m going to bootstrap clusters though so maybe I won’t</p>
<p><em>Edit</em> I did it anyway, it follows the same pattern as the other stuff I bootstrap in my cluster so it wasn’t a big deal. Besides some dumb issues like figuring out how to correctly format the yaml for values and accidentally installing it into the <code>argocd</code> rather than <code>kube-system</code> namespace (oops) there were no problems getting this going in argo.</p>


</section>

 ]]></description>
  <category>cilium</category>
  <category>kubernetes</category>
  <category>talos</category>
  <guid>https://blog.ianpreston.ca/posts/2024-12-27-kubelog-cilium.html</guid>
  <pubDate>Fri, 27 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>What I learned building a pipeline to deploy terraform in Azure DevOps</title>
  <link>https://blog.ianpreston.ca/posts/2024-12-12-azdo-terraform.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I recently set out to build a pipeline to deploy some resources with Terraform and Azure DevOps. Along the way I learned a fair bit about DevOps so I’m writing it down for future reference.</p>
</section>
<section id="problem-statement" class="level1">
<h1>Problem statement</h1>
<p>I have a <a href="https://www.terraform.io/">terraform</a> code base that stores its state in <a href="https://learn.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction">ADLS</a> and deploys other resources to Azure. I’ve got three environments to deploy to, <code>dev</code>, <code>uat</code>, and <code>prod</code>. Each environment has an associated <a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops">service connection</a> associated with it that should be used to deploy infrastructure. In DevOps I’ve created a corresponding branch for each environment. When I create a PR targeting a particular branch I want the appropriate service connection to run <code>terraform plan</code> and add the output as a comment on the PR. The service connection to use and environment specific <code>tfvars</code> should be determined by the target branch of the PR. When code is merged into the one of the environment’s branches then I want the appropriate service connection and <code>tfvars</code> to be used to run <code>terraform apply</code> based on the source branch.</p>
</section>
<section id="the-initial-plan" class="level1">
<h1>The initial plan</h1>
<p>This is what I first thought of with some details removed for simplicity:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> terraform apply</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trigger</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dev</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> uat</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> prod</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pr</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">job</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> setvars</span></span>
<span id="cb1-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pool</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> linux</span></span>
<span id="cb1-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">      - </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">script</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-18">          if [[ $(Build.Reason) -eq 'PullRequest' ]]; then</span>
<span id="cb1-19">            echo 'Build Reason is PR, setting branch based on target'</span>
<span id="cb1-20">            BRANCH=$(System.pullRequest.targetBranchName)</span>
<span id="cb1-21">            echo '##vso[task.setvariable variable=BRANCH;isOutput=true]$(System.pullRequest.targetBranchName)'</span>
<span id="cb1-22">          else</span>
<span id="cb1-23">            echo 'Not a Pull request, setting branch based on source'</span>
<span id="cb1-24">            echo '##vso[task.setvariable variable=BRANCH;isOutput=true]$(Build.SourceBranchName)'</span>
<span id="cb1-25">            BRANCH=$(Build.SourceBranchName)</span>
<span id="cb1-26">          fi</span>
<span id="cb1-27">          echo "##vso[task.setvariable variable=SERVICE_CONNECTION;isOutput=true]${BRANCH}-service-connection"</span>
<span id="cb1-28">          echo "##vso[task.setvariable variable=TFVARS_FILE]${BRANCH}_vars.tfvars"</span>
<span id="cb1-29">          echo "##vso[task.setvariable variable=TFBACKEND_FILE]${BRANCH}_backend.tf"</span>
<span id="cb1-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">displayName</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Set Variables"</span></span>
<span id="cb1-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setvar"</span></span>
<span id="cb1-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">job</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> terraform</span></span>
<span id="cb1-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pool</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> linux</span></span>
<span id="cb1-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dependsOn</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> setvars</span></span>
<span id="cb1-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">variables</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BRANCH</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $[ dependencies.setvars.outputs['setvar.BRANCH']]</span></span>
<span id="cb1-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SERVICE_CONNECTION</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $[ dependencies.setvars.outputs['setvar.SERVICE_CONNECTION']]</span></span>
<span id="cb1-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TFVARS_FILE</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $[ dependencies.setvars.outputs['setvar.TFVARS_FILE']]</span></span>
<span id="cb1-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TFBACKEND_FILE</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $[ dependencies.setvars.outputs['setvar.TFBACKEND_FILE']]</span></span>
<span id="cb1-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">checkout</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> self</span></span>
<span id="cb1-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">task</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AzureCLI@2</span></span>
<span id="cb1-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">displayName</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> terraform init</span></span>
<span id="cb1-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inputs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb1-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">azureSubscription</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $(SERVICE_CONNECTION)</span></span>
<span id="cb1-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addSpnToEnvironment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb1-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scriptType</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bash</span></span>
<span id="cb1-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scriptLocation</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> inlineScript</span></span>
<span id="cb1-49"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">          inlineScript</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-50">            # Ensure a failure of any line in this script fails the pipeline</span>
<span id="cb1-51">            set -e</span>
<span id="cb1-52">            terraform init -backend-config=$(TFBACKEND_FILE)</span>
<span id="cb1-53"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">task</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AzureCLI@2</span></span>
<span id="cb1-54"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">condition</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> eq(variables['Build.Reason'], 'PullRequest')</span></span>
<span id="cb1-55"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">displayName</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> terraform plan</span></span>
<span id="cb1-56"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inputs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb1-57"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">azureSubscription</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $(SERVICE_CONNECTION)</span></span>
<span id="cb1-58"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addSpnToEnvironment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb1-59"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scriptType</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bash</span></span>
<span id="cb1-60"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scriptLocation</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> inlineScript</span></span>
<span id="cb1-61"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">          inlineScript</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-62">            # Ensure a failure of any line in this script fails the pipeline</span>
<span id="cb1-63">            set -e</span>
<span id="cb1-64">            terraform plan -var-file="$(TFVARS_FILE)" -out=plan.tfplan</span>
<span id="cb1-65">            echo "I'd do the PR comment based on this but removed it for simplicity"</span>
<span id="cb1-66"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">task</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AzureCLI@2</span></span>
<span id="cb1-67"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">condition</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> and(ne(variables['Build.Reason'], 'PullRequest'),or(eq(variables['Build.SourceBranchName'], 'dev'),eq(variables['Build.SourceBranchName'], 'uat'),eq(variables['Build.SourceBranchName'], 'prod')))</span></span>
<span id="cb1-68"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">displayName</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> terraform apply</span></span>
<span id="cb1-69"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inputs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb1-70"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">azureSubscription</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $(SERVICE_CONNECTION)</span></span>
<span id="cb1-71"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addSpnToEnvironment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb1-72"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scriptType</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bash</span></span>
<span id="cb1-73"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scriptLocation</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> inlineScript</span></span>
<span id="cb1-74"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">          inlineScript</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-75">            # Ensure a failure of any line in this script fails the pipeline</span>
<span id="cb1-76">            set -e</span>
<span id="cb1-77">            terraform apply -auto-approve -var-file="$(TFVARS_FILE)"</span></code></pre></div>
<section id="what-are-we-doing-here" class="level2">
<h2 class="anchored" data-anchor-id="what-are-we-doing-here">What are we doing here?</h2>
<p>The first part sets a variable called <code>BRANCH</code> based on the target branch if the pipeline is triggered by a PR or the source branch if it’s triggered by a merge into one of our environment branches. From there we point to the correct <code>tfvars</code> files and service connection name to run the correct plan/apply. The subsequent job retrieves those variables and executes the right command with the right variables.</p>
</section>
<section id="seems-fine-whats-the-problem" class="level2">
<h2 class="anchored" data-anchor-id="seems-fine-whats-the-problem">Seems fine, what’s the problem?</h2>
<p>The tldr is that DevOps needs to know the service connection name at compile time, and since I’m trying to calculate it at run time the job fails. It tries to start the pipeline with the literal <code>$(SERVICE_CONNECTION)</code> instead of <code>dev-service-connection</code> or whatever, which fails since that service connection doesn’t exist.</p>
</section>
</section>
<section id="what-i-learned-troubleshooting-this" class="level1">
<h1>What I learned troubleshooting this</h1>
<p>The main thing is what’s listed in the previous section. You can’t dynamically calculate a service connection name in a pipeline step. If I didn’t have the criteria for different behaviour in PRs I might have been able to get away with something like <code>${{ variables['Build.SourceBranchName'] }}-service-connection</code> but with my PR requirement that wasn’t going to fly.</p>
<p>The DevOps syntax for variables is pretty explicit about what you should use where but until this point I’d just cargo culted in whatever format the closest example I could find had used without really thinking about it.</p>
<p>To learn more I recommend the following docs:</p>
<ul>
<li><a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops">Expressions Docs</a></li>
<li><a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/runtime-parameters?view=azure-devops&amp;tabs=script">Runtime parameters docs</a></li>
<li><a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&amp;tabs=yaml%2Cbatch">Variables docs</a> there’s more on the sidebar, keep reading through</li>
</ul>
<p>Also, for problems like this ChatGPT is a nightmare, it just kept cycling me through different syntax, none of which worked because what I was trying to do wasn’t fundamentally possible. I tried <code>$(SERVICE_CONNECTION)</code>, <code>$[variables.SERVICE_CONNECTION]</code>, <code>$[ dependencies.setvars.outputs['setvar.SERVICE_CONNECTION'] ]</code> and probably some other permutations I’m forgetting. For each of those I had to push up a commit, wait for the pipeline to run and fail and then try something else. I really wish there was a way to locally test the actual pipeline syntax.</p>
</section>
<section id="what-i-ended-up-doing" class="level1">
<h1>What I ended up doing</h1>
<p>Instead of doing a bunch of dynamic stuff on one job, I created a template with some parameters, and then set that template up to be called in the pipeline for each environment with a conditional to only trigger in the circumstance I wanted:</p>
<p>Example template:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parameters</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> name</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">default</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dev_apply'</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> env</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">default</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dev'</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> service_principal</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">default</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dev-service-connection'</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">job</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ parameters.name }}</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pool</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> linux</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">condition</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> eq(variables['Build.SourceBranchName'], '${{ parameters.env }}')</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">task</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AzureCLI@2</span></span>
<span id="cb2-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">displayName</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ parameters.env }} plan</span></span>
<span id="cb2-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inputs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb2-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">azureSubscription</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ parameters.service_principal }}</span></span>
<span id="cb2-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addSpnToEnvironment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb2-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scriptType</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bash</span></span>
<span id="cb2-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scriptLocation</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> inlineScript</span></span>
<span id="cb2-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">          inlineScript</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb2-22">            # Ensure a failure of any line in this script fails the pipeline</span>
<span id="cb2-23">            set -e</span>
<span id="cb2-24">            # Required to allow terraform to auth as SP</span>
<span id="cb2-25">            export ARM_CLIENT_ID="${servicePrincipalId}"</span>
<span id="cb2-26">            export ARM_CLIENT_SECRET="${servicePrincipalKey}"</span>
<span id="cb2-27">            export ARM_TENANT_ID="$(az account show --query 'tenantId' -o tsv)"</span>
<span id="cb2-28">            export ARM_SUBSCRIPTION_ID="$(az account show --query="id" -o tsv)"</span>
<span id="cb2-29">            terraform init -backend-config=${{ parameters.env }}_backend.tfvars</span>
<span id="cb2-30">            terraform apply -auto-approve -var-file=${{ parameters.env }}_vars.tfvars</span></code></pre></div>
<p>Example of the main pipeline:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> my-pipeline</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trigger</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dev</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> uat</span></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> prod</span></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pr</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> templates/terraform-plan.yaml</span></span>
<span id="cb3-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parameters</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dev_plan'</span></span>
<span id="cb3-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dev'</span></span>
<span id="cb3-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">service_principal</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dev-service-connection</span></span>
<span id="cb3-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> templates/terraform-plan.yaml</span></span>
<span id="cb3-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parameters</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uat_plan'</span></span>
<span id="cb3-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uat'</span></span>
<span id="cb3-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">service_principal</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> uat-service-connection</span></span>
<span id="cb3-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> templates/terraform-plan.yaml</span></span>
<span id="cb3-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parameters</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prod_plan'</span></span>
<span id="cb3-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prod'</span></span>
<span id="cb3-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">service_principal</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> prod-service-connection</span></span>
<span id="cb3-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> templates/terraform-apply.yaml</span></span>
<span id="cb3-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parameters</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dev_apply'</span></span>
<span id="cb3-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dev'</span></span>
<span id="cb3-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">service_principal</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dev-service-connection</span></span>
<span id="cb3-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> templates/terraform-apply.yaml</span></span>
<span id="cb3-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parameters</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uat_apply'</span></span>
<span id="cb3-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uat'</span></span>
<span id="cb3-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">service_principal</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> uat-service-connection</span></span>
<span id="cb3-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> templates/terraform-apply.yaml</span></span>
<span id="cb3-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parameters</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prod_apply'</span></span>
<span id="cb3-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prod'</span></span>
<span id="cb3-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">service_principal</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> prod-service-connection</span></span></code></pre></div>
<p>Pretty clean, still minimal repetition. Not bad! Note that the conditional has to be in the template, I originally wanted to set it outside but that’s not permitted.</p>
</section>
<section id="what-about-the-pr-comment" class="level1">
<h1>What about the PR comment?</h1>
<p>I left that out of the examples because it wasn’t relevant to that part. For the most part I just followed <a href="https://thomasthornton.cloud/2024/01/24/displaying-terraform-plan-as-a-comment-in-azure-devops-repo-prs-with-azure-devops-pipelines/">Thomas Thornton’s approach</a> but I do have one minor enhancement that I think is worth calling out. In his approach the raw terminal output is dumped into the PR comment, which turns all the <code>#</code> comments in the terminal output into markdown headers. I added a bit of formatting around it so that it would all show up as a code block in the PR comment. The relevant change looks like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">COMMENT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">printf</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#Terraform </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ parameters.env </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">} Plan\n</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\`\`\`</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">bash\n%s\n</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\`\`\`</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">terraform</span> show <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-no-color</span> plan.tfplan<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>The <code>printf</code> is required so the backticks don’t get escaped in the json message.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>DevOps is not very fun for me. I wouldn’t hate it so much if the feedback loop wasn’t so slow between change, commit, push, pipeline run. If anyone has tips on that I’d love to hear it.</p>


</section>

 ]]></description>
  <category>DevOps</category>
  <category>terraform</category>
  <guid>https://blog.ianpreston.ca/posts/2024-12-12-azdo-terraform.html</guid>
  <pubDate>Thu, 12 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Rubber ducking my Argo CD app of apps issue</title>
  <link>https://blog.ianpreston.ca/posts/2024-12-01-argo-rubberduck.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I’ve recently been trying to set up <a href="https://argo-cd.readthedocs.io/en/stable/">Argo CD</a> in my homelab. I’ve been banging my head against an issue that I can’t seem to solve, presumably due to some combination of not understanding argo, helm, and/or kubernetes as well as I need to. Or maybe just some dumb typo.</p>
<p>Anyway, I’ve been trying to figure this out for a while and despite a lot of reading of docs, googling, and asking ChatGPT I haven’t been able to solve it. My intent here is to write out the problem in as much detail as I can, and either figure out the solution directly, or have something to point to when asking for help.</p>
</section>
<section id="the-plan" class="level1">
<h1>The plan</h1>
<p>I want to be able to take a cluster from having nothing on it to all my services with as few commands as possible. I’ve got the raw install handled pretty well with <a href="https://www.talos.dev/">Talos</a>, and the plan is to use Argo for everything on top of Kubernetes. I’ve only got one cluster right now, but I’m trying to design for the future by building this current one as a dev cluster, and having a production one that I can apply the same setup to with some config tweaks.</p>
<p>For argo bootstrapping I’m following the app of app patterns they outline in their <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/">boostrapping guide</a>.</p>
<p>To that end I’ve created an app of apps that right now just defines one app for <a href="https://metallb.io/">metallb</a>, with configs for my dev cluster and prod cluster, using different IP address ranges for each.</p>
</section>
<section id="the-problem" class="level1">
<h1>The problem</h1>
<p>The problem is that my metallb app isn’t picking up my environment specific configurations, so the address range is just <code>null</code> instead of the IP range I specify.</p>
</section>
<section id="the-setup" class="level1">
<h1>The setup</h1>
<p>My directory structure looks like this (with a few irrelevant entries removed)</p>
<section id="directory-structure" class="level2">
<h2 class="anchored" data-anchor-id="directory-structure">Directory structure</h2>
<pre><code>├── argo
│&nbsp;&nbsp; ├── app-of-apps
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── charts
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Chart.yaml
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── templates
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── apps.yaml
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; └── _helpers.tpl
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── values-dev.yaml
│&nbsp;&nbsp; │&nbsp;&nbsp; └── values.yaml
├── services
│&nbsp;&nbsp; └── metallb
│&nbsp;&nbsp;     ├── charts
│&nbsp;&nbsp;     ├── Chart.yaml
│&nbsp;&nbsp;     ├── templates
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── _helpers.tpl
│&nbsp;&nbsp;     │&nbsp;&nbsp; └── metallb-config.yaml
│&nbsp;&nbsp;     ├── values-dev.yaml
│&nbsp;&nbsp;     └── values.yaml</code></pre>
<p>Within the <code>argo</code> folder I have my app of apps built using <a href="https://helm.sh/">helm</a>.</p>
</section>
<section id="app-of-apps" class="level2">
<h2 class="anchored" data-anchor-id="app-of-apps">App of apps</h2>
<section id="app-of-apps-apps.yaml" class="level3">
<h3 class="anchored" data-anchor-id="app-of-apps-apps.yaml">app of apps apps.yaml</h3>
<p>The <code>apps.yaml</code> looks as follows:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{- range $appName</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $app := .Values.apps </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{- if $app.enabled </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argoproj.io/v1alpha1</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Application</span></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{ $appName </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argocd</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">finalizers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> resources-finalizer.argocd.argoproj.io</span></span>
<span id="cb2-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> default</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repoURL</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/ianepreston/homelab.git</span></span>
<span id="cb2-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">targetRevision</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{ $.Values.targetBranch </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{ $app.path </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # Should let apps change sync policy without app of apps resetting it</span></span>
<span id="cb2-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">syncPolicy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">syncOptions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> RespectIgnoreDifferences=true</span></span>
<span id="cb2-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignoreDifferences</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb2-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Application"</span></span>
<span id="cb2-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb2-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jsonPointers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /spec/syncPolicy/automated</span></span>
<span id="cb2-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /metadata/annotations/argocd.argoproj.io~1refresh</span></span>
<span id="cb2-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /operation</span></span>
<span id="cb2-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{- if eq $app.type </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"helm"</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">helm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">valueFiles</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> values.yaml</span></span>
<span id="cb2-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{ $app.valuesFile </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{- end </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">destination</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://kubernetes.default.svc</span></span>
<span id="cb2-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{ $app.namespace </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">syncPolicy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">automated</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prune</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb2-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selfHeal</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb2-42"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{- end </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{- end </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The idea is to go through my <code>values.yaml</code> and for each app that’s defined there create an argo app spec. Right now I’ve only got the one but this should be extensible.</p>
</section>
<section id="app-of-apps-values.yaml" class="level3">
<h3 class="anchored" data-anchor-id="app-of-apps-values.yaml">app of apps values.yaml</h3>
<p>The corresponding <code>values.yaml</code> is as follows:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">targetBranch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> main</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">targetEnv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> prod</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metallb</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> helm</span></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb-system</span></span>
<span id="cb3-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> k8s/services/metallb</span></span></code></pre></div>
</section>
<section id="app-of-apps-values-dev.yaml" class="level3">
<h3 class="anchored" data-anchor-id="app-of-apps-values-dev.yaml">app of apps values-dev.yaml</h3>
<p>For the deployment to my dev cluster I also applied the <code>values-dev.yaml</code> file in this folder to override the branch and env settings:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">targetBranch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dev</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">targetEnv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dev</span></span></code></pre></div>
</section>
<section id="applied-app-of-apps" class="level3">
<h3 class="anchored" data-anchor-id="applied-app-of-apps">Applied app of apps</h3>
<p>Running <code>helm template app-of-apps . --values values.yaml --values-dev.yaml</code> I can see the app rendering what I think is correctly:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Source: app-of-apps/templates/apps.yaml</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argoproj.io/v1alpha1</span></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Application</span></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb</span></span>
<span id="cb5-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argocd</span></span>
<span id="cb5-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">finalizers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> resources-finalizer.argocd.argoproj.io</span></span>
<span id="cb5-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> default</span></span>
<span id="cb5-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repoURL</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/ianepreston/homelab.git</span></span>
<span id="cb5-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">targetRevision</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dev</span></span>
<span id="cb5-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> k8s/services/metallb</span></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # Should let apps change sync policy without app of apps resetting it</span></span>
<span id="cb5-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">syncPolicy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">syncOptions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> RespectIgnoreDifferences=true</span></span>
<span id="cb5-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignoreDifferences</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb5-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Application"</span></span>
<span id="cb5-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb5-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jsonPointers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /spec/syncPolicy/automated</span></span>
<span id="cb5-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /metadata/annotations/argocd.argoproj.io~1refresh</span></span>
<span id="cb5-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /operation</span></span>
<span id="cb5-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">helm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">valueFiles</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> values.yaml</span></span>
<span id="cb5-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> values-dev.yaml</span></span>
<span id="cb5-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">destination</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://kubernetes.default.svc</span></span>
<span id="cb5-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb-system</span></span>
<span id="cb5-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">syncPolicy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">automated</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prune</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb5-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selfHeal</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</section>
</section>
<section id="metallb" class="level2">
<h2 class="anchored" data-anchor-id="metallb">Metallb</h2>
<p>Meanwhile, my metallb chart (based on <a href="https://github.com/metallb/metallb/issues/2241#issuecomment-1895822116">this umbrella chart</a>) looks like this:</p>
<section id="metallb-metallb-config.yaml" class="level3">
<h3 class="anchored" data-anchor-id="metallb-metallb-config.yaml">metallb metallb-config.yaml</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb.io/v1beta1</span></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> IPAddressPool</span></span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{ .Values.addressPoolName </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb-system</span></span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addresses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{ .Values.addressRange </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">avoidBuggyIPs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb6-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb.io/v1beta2</span></span>
<span id="cb6-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> BGPPeer</span></span>
<span id="cb6-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb-pfsense-bgppeer</span></span>
<span id="cb6-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb-system</span></span>
<span id="cb6-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">myASN</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{ .Values.myASN </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">peerASN</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64501</span></span>
<span id="cb6-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">peerAddress</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{ .Values.peerAddress </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-22"></span>
<span id="cb6-23"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb6-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb.io/v1beta1</span></span>
<span id="cb6-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> BGPAdvertisement</span></span>
<span id="cb6-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb-bgpadvertisement</span></span>
<span id="cb6-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb-system</span></span></code></pre></div>
</section>
<section id="metallb-values.yaml" class="level3">
<h3 class="anchored" data-anchor-id="metallb-values.yaml">metallb values.yaml</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addressPoolName</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb-pool</span></span></code></pre></div>
</section>
<section id="metallb-values-dev.yaml" class="level3">
<h3 class="anchored" data-anchor-id="metallb-values-dev.yaml">metallb values-dev.yaml</h3>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addressRange</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 192.168.40.20-192.168.40.40</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">myASN</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64500</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">peerAddress</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">192.168.40.1</span></span></code></pre></div>
</section>
</section>
</section>
<section id="troubleshooting" class="level1">
<h1>Troubleshooting</h1>
<p>So somewhere in these definitions Argo is missing where it should be setting the parameters for <code>addressRange</code>, <code>myASN</code>, and <code>peerAddress</code>.</p>
<p>If I go into my app of apps in the Argo UI and bring up metallb I get the following desired manifest:</p>
<section id="metallb-app-desired-manifest" class="level2">
<h2 class="anchored" data-anchor-id="metallb-app-desired-manifest">Metallb app desired manifest</h2>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argoproj.io/v1alpha1</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Application</span></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">finalizers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> resources-finalizer.argocd.argoproj.io</span></span>
<span id="cb9-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">app.kubernetes.io/instance</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> apps</span></span>
<span id="cb9-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb</span></span>
<span id="cb9-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> argocd</span></span>
<span id="cb9-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">destination</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb-system</span></span>
<span id="cb9-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://kubernetes.default.svc</span></span>
<span id="cb9-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">helm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">valueFiles</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> values.yaml</span></span>
<span id="cb9-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> values-dev.yaml</span></span>
<span id="cb9-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignoreDifferences</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span></span>
<span id="cb9-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jsonPointers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /spec/syncPolicy/automated</span></span>
<span id="cb9-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /metadata/annotations/argocd.argoproj.io~1refresh</span></span>
<span id="cb9-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /operation</span></span>
<span id="cb9-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Application</span></span>
<span id="cb9-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span></span>
<span id="cb9-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> default</span></span>
<span id="cb9-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> k8s/services/metallb</span></span>
<span id="cb9-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repoURL</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/ianepreston/homelab.git</span></span>
<span id="cb9-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">targetRevision</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dev</span></span>
<span id="cb9-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">syncPolicy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">automated</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb9-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prune</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb9-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selfHeal</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<p>I can see the <code>values-dev.yaml</code> entry there, so the initial templating from my app of apps appears to have picked up the correct environment and applied that part directly.</p>
<p>Heading back to the UI and looking directly at the metallb app and looking at the manifest there’s a lot less stuff:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> default</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repoURL</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/ianepreston/homelab.git</span></span>
<span id="cb10-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> k8s/services/metallb</span></span>
<span id="cb10-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">targetRevision</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dev</span></span>
<span id="cb10-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">destination</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://kubernetes.default.svc</span></span>
<span id="cb10-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> metallb-system</span></span>
<span id="cb10-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">syncPolicy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">automated</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prune</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb10-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selfHeal</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb10-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ignoreDifferences</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span></span>
<span id="cb10-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Application</span></span>
<span id="cb10-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span></span>
<span id="cb10-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jsonPointers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /spec/syncPolicy/automated</span></span>
<span id="cb10-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /metadata/annotations/argocd.argoproj.io~1refresh</span></span>
<span id="cb10-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /operation</span></span></code></pre></div>
<p>I don’t know if this is intended behaviour or what.</p>
<p>If I go to the parameters for the metallb app the only parameter that’s set is <code>addressPoolName</code>. It’s set as a parameter, which I think makes sense from my understanding of argo rendering out helm charts and then managing the rendered manifests rather than directly working with helm. The part that doesn’t make sense of course is my missing dev variables.</p>
<p>I’ve updated the pool name in <code>variables.yaml</code> and it’s synced all the way through so some updating is happening.</p>
<p>I’ve also changed the order in my apps template to have <code>values-dev.yaml</code> listed first but still only the value in <code>values.yaml</code> shows up in the downstream app.</p>
<p>I’ve also rendered the chart locally with <code>helm template metallb . --values values.yaml --values values-dev.yaml</code> and that correctly applied all the values as I’d expect.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I’d hoped that writing all this out would help me identify where I was going wrong, but it hasn’t. I’m going to post this and dump it on some forums and see if anyone can help me. If they do or I figure it out on my own I’ll update this with the solution.</p>
</section>
<section id="update-with-a-fix" class="level1">
<h1>Update with a fix</h1>
<p>The next thing I tried was deleting my app of apps, templating it out, and applying it with <code>kubectl</code>:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> helm template app-of-apps . <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--debug</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--values</span> values.yaml <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--values</span> values-dev.yaml</span>
<span id="cb11-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">install.go:222:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">debug</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> Original chart version: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb11-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">install.go:239:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">debug</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> CHART PATH: /home/ipreston/homelab/k8s/argo/app-of-apps</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Source: app-of-apps/templates/apps.yaml</span></span>
<span id="cb11-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apiVersion:</span> argoproj.io/v1alpha1</span>
<span id="cb11-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kind:</span> Application</span>
<span id="cb11-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">metadata:</span></span>
<span id="cb11-10">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">name:</span> metallb</span>
<span id="cb11-11">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">namespace:</span> argocd</span>
<span id="cb11-12">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">finalizers:</span></span>
<span id="cb11-13">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> resources-finalizer.argocd.argoproj.io</span>
<span id="cb11-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">spec:</span></span>
<span id="cb11-15">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">project:</span> default</span>
<span id="cb11-16">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">source:</span></span>
<span id="cb11-17">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">repoURL:</span> https://github.com/ianepreston/homelab.git</span>
<span id="cb11-18">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">targetRevision:</span> dev</span>
<span id="cb11-19">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">path:</span> k8s/services/metallb</span>
<span id="cb11-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Should let apps change sync policy without app of apps resetting it</span></span>
<span id="cb11-21">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">syncPolicy:</span></span>
<span id="cb11-22">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">syncOptions:</span></span>
<span id="cb11-23">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> RespectIgnoreDifferences=true</span>
<span id="cb11-24">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ignoreDifferences:</span></span>
<span id="cb11-25">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> group: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb11-26">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kind:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Application"</span></span>
<span id="cb11-27">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">namespace:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb11-28">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jsonPointers:</span></span>
<span id="cb11-29">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> /spec/syncPolicy/automated</span>
<span id="cb11-30">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> /metadata/annotations/argocd.argoproj.io~1refresh</span>
<span id="cb11-31">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> /operation</span>
<span id="cb11-32">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">helm:</span></span>
<span id="cb11-33">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">valueFiles:</span></span>
<span id="cb11-34">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> values.yaml</span>
<span id="cb11-35">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> values-dev.yaml</span>
<span id="cb11-36">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">destination:</span></span>
<span id="cb11-37">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">server:</span> https://kubernetes.default.svc</span>
<span id="cb11-38">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">namespace:</span> metallb-system</span>
<span id="cb11-39">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">syncPolicy:</span></span>
<span id="cb11-40">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">automated:</span></span>
<span id="cb11-41">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prune:</span> true</span>
<span id="cb11-42">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">selfHeal:</span> true</span></code></pre></div>
<p>Applying this led to this error:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">❯</span> kubectl apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> metallbtest.yaml</span>
<span id="cb12-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error</span> from server <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">BadRequest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> error when creating <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metallbtest.yaml"</span>: Application in version <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v1alpha1"</span> cannot be handled as a Application: strict decoding error: unknown field <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spec.helm"</span></span></code></pre></div>
<p>Which led me to realize that <code>helm</code> is supposed to be under <code>spec.source</code>, not just <code>spec</code>. So it was an indentation error.</p>
<p>I’m sure that error was somewhere in the error log for my app of apps deploy but I sure didn’t see it.</p>
<p>This was super annoying but I learned some valuable lessons about helm, troubleshooting, and argo, so overall I guess it’s a win.</p>


</section>

 ]]></description>
  <category>argocd</category>
  <category>kubernetes</category>
  <guid>https://blog.ianpreston.ca/posts/2024-12-01-argo-rubberduck.html</guid>
  <pubDate>Sun, 01 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>For each tasks in Databricks asset bundles</title>
  <link>https://blog.ianpreston.ca/posts/2024-08-21-for-each-jobs.html</link>
  <description><![CDATA[ 





<p>This is just a quick post because I couldn’t find good documentation for defining tasks in a loop format in databricks.</p>
<p>Let’s say I have a block in a <a href="https://learn.microsoft.com/en-us/azure/databricks/dev-tools/bundles/">DAB</a> deployment that looks like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tasks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">task_key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task_for_table_a"</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">notebook_task</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_parameters</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table_a"</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">notebook_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../jobs/table_task.py"</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">task_key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task_for_table_b"</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">notebook_task</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_parameters</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table_b"</span></span>
<span id="cb1-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">notebook_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../jobs/table_task.py"</span></span>
<span id="cb1-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">task_key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task_for_table_c"</span></span>
<span id="cb1-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">notebook_task</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_parameters</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table_c"</span></span>
<span id="cb1-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">notebook_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../jobs/table_task.py"</span></span></code></pre></div>
<p>And I want to convert it into a <code>for_each_task</code> The <a href="https://docs.databricks.com/api/azure/workspace/jobs/create#tasks-for_each_task">api docs</a> describe a for_each_task as having an <code>inputs</code> field, a <code>concurrency</code> field, and then a <code>task</code> field that defines the task that will be run for each element of the array.</p>
<p>That’s all good, but they don’t actually show how to structure that <code>inputs</code> field or pass it into the looping task. This snippet below shows how it works.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tasks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">task_key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task_for_tables"</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">for_each_task</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inputs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">table_a</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">table_b</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">table_c</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">concurrency</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # or whatever</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">task</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">task_key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task_for_tables_loop"</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">notebook_task</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_parameters</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{input}}"</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">                    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">notebook_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../jobs/table_task.py"</span></span></code></pre></div>
<p>Note the weird formatting for inputs and the need to define an inner and outer task key. I think the string can be any json style string, so if you wanted more complex inputs you could create a list of maps instead of the list of strings in this example. I think you can pass stuff in from another task to define inputs, but I didn’t have a requirement for that so I haven’t tested it.</p>



 ]]></description>
  <category>databricks</category>
  <guid>https://blog.ianpreston.ca/posts/2024-08-21-for-each-jobs.html</guid>
  <pubDate>Wed, 21 Aug 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Parsing XSD schemas in Databricks</title>
  <link>https://blog.ianpreston.ca/posts/2024-07-12-xsd-databricks.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Databricks recently announced <a href="https://www.databricks.com/blog/announcing-simplified-xml-data-ingestion">enhanced XML parsing</a>. This is great news, as my organization has a ton of XML that I would like to parse and publish in more user friendly structures. Unfortunately for me, most of the example code and docs assume that your XML inputs have a relatively simple and consistent schema that can be parsed out using a single sample record. My requirements are more complicated than that, as our schema varies depending on the particular type of record being read (different type of forms capturing a subset of all possible inputs), so any sample record I provide will not have a complete schema for all possible records.</p>
<p>We do have an XML Schema Definition (XSD) file that describes the complete schema of all possible attributes for these records, and there’s a brief snippet in <a href="https://learn.microsoft.com/en-us/azure/databricks/query/formats/xml#xsd-support">the docs</a> that mentions you can use a file like this to create a schema that can be used in parsing XML. In practice, I found a number of tricky aspects to actually getting this working that I’ll document below in case it’s helpful for anyone else.</p>
</section>
<section id="setting-up-for-schema-parsing" class="level1">
<h1>Setting up for schema parsing</h1>
<p>The first hurdle was figuring out how to actually call the schema parsing method.</p>
<p>From <a href="https://learn.microsoft.com/en-us/azure/databricks/archive/connectors/spark-xml-library#xsd-support">the docs</a> I should be able to run something like this in scala (no python interface) and get a schema object:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>databricks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>spark<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>xml<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>util<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>XSDToSchema</span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> java<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>nio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Paths</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> schema <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> XSDToSchema<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Paths<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/path/to/your.xsd"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>read<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schema</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>schema<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)....</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(...)</span></span></code></pre></div>
<p>Unfortunately when I tried to run that in databricks (under various cluster types and runtime versions) I got an error that <code>XSDToSchema</code> did not actually exist.</p>
<p>After a bunch of searching around I found the <a href="https://github.com/databricks/spark-xml">databricks/spark-xml</a> repo, which did seem to have that functionality. After adding <code>com.databricks:spark-xml_2.12:0.18.0</code> to a cluster I was able to actually call that function.</p>
<p><strong>NOTE</strong> As best I understand it, this library might conflict with the databricks xml parsing libraries, so it should only be used for schema extraction. Use a separate cluster to actually do the xml parsing with the extracted schema.</p>
</section>
<section id="actually-extracting-the-schema" class="level1">
<h1>Actually extracting the schema</h1>
<p>Once you’ve got the schema out, the next thing to do is get it into a format that’s useful for feeding into <code>read_xml</code>. This is relatively straightforward but not well documented at all.</p>
<p>This bit of scala gets you a json representation of your schema:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode scala code-with-copy"><code class="sourceCode scala"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>databricks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>spark<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>xml<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>util<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>XSDToSchema</span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> java<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>nio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Paths</span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> java<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>io<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_</span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> org<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>apache<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>spark<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>sql<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.{</span>StructType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> StructField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> StringType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> schema <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> XSDToSchema<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Paths<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path/to/xsd_file.xsd"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> topField <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schema</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TopLevelName"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>dataType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>asInstanceOf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>StructType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> schemaStr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> topField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>json</span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">File</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/path/to/output/schema.json"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> bw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">BufferedWriter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FileWriter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb2-10">bw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>schemaStr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-11">bw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">close</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span></code></pre></div>
<p>In my case the XSD had a top level struct as if the whole thing was going to be one dataframe. I actually wanted it to be a column, so I had to drill down one level. Depending on your particular use case you’ll have to modify that.</p>
<section id="add-in-a-failed-record-field" class="level2">
<h2 class="anchored" data-anchor-id="add-in-a-failed-record-field">Add in a failed record field</h2>
<p>I don’t want my whole pipeline to fall over if I hit an invalid record, so I’ll want to specify <code>PERMISSIVE</code> mode in my XML parsing code. If I do that it expects there to be a rescue struct to put the failed xml within the target. I’m calling mine <code>corruptxml</code> so I switch over to python, add that in, and write it out as a nicely formatted json. Even if you don’t want to add this in it’s probably still worth making a round trip through python. The json that comes out of the scala step above is valid but it’s one single line. If you put it in python first you get a more readably formatted multi line json at the end.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb3-3">ddl_base_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/path/to/output/schema.json"</span>)</span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(ddl_base_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-5">    ddl_base <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb3-6">ddl_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(ddl_base)</span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have to have this field in the schema to use PERMISSIVE mode when reading</span></span>
<span id="cb3-8">ddl_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fields"</span>].append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"corruptxml"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nullable"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>})</span>
<span id="cb3-9">ddl_clean_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/path/to/output/schema.json"</span>)</span>
<span id="cb3-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(ddl_clean_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-11">    f.write(json.dumps(ddl_dict, indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
</section>
</section>
<section id="use-the-schema-in-a-pipeline" class="level1">
<h1>Use the schema in a pipeline</h1>
<p>In my use case I have an existing DataFrame with a column called <code>RPT_DATA</code> that I want to parse. My code looks something like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">    from_xml_opts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-2">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mode"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PERMISSIVE"</span>,</span>
<span id="cb4-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columnNameOfCorruptRecord"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"corruptxml"</span>,</span>
<span id="cb4-4">    }</span>
<span id="cb4-5">    ddl_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"schema_ddl.json"</span>)</span>
<span id="cb4-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(ddl_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb4-7">        ddl_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb4-8">    parsed_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb4-9">        xml_data_df</span>
<span id="cb4-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># illegal escape character</span></span>
<span id="cb4-11">        .withColumn(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RPT_DATA"</span>, regexp_replace(col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RPT_DATA"</span>), <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\u001a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>))</span>
<span id="cb4-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># illegal escape character</span></span>
<span id="cb4-13">        .withColumn(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RPT_DATA"</span>, regexp_replace(col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RPT_DATA"</span>), <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"&amp;#x1A;"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>))</span>
<span id="cb4-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># illegal escape character</span></span>
<span id="cb4-15">        .withColumn(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RPT_DATA"</span>, regexp_replace(col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RPT_DATA"</span>), <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"&amp;#x\d;"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>))</span>
<span id="cb4-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># emojis</span></span>
<span id="cb4-17">        .withColumn(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RPT_DATA"</span>, regexp_replace(col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RPT_DATA"</span>), <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\&amp;#\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{5}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">;"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>))</span>
<span id="cb4-18">        .withColumn(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"report_xml_dat"</span>, from_xml(xml_data_df.RPT_DATA, ddl_str, from_xml_opts))</span>
<span id="cb4-19">    )</span></code></pre></div>
<p>In my case I had to parse out some illegal characters from the strings before I could get it working. Depending on your inputs those might not be required.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Parsing out a schema from an XSD and using it to turn a string of XML into a valid <code>StructField</code> isn’t too bad and doesn’t take a ton of code - if you can actually find out how to do it. I spent a ton of time googling, trying things that broke, and going back and forth with Databricks support to get this working so I want to preserve it.</p>


</section>

 ]]></description>
  <category>databricks</category>
  <category>spark</category>
  <guid>https://blog.ianpreston.ca/posts/2024-07-12-xsd-databricks.html</guid>
  <pubDate>Fri, 12 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Handling merge conflicts on PRs the nice way</title>
  <link>https://blog.ianpreston.ca/posts/2024-07-01-merging.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is a short post about how I prefer to handle merge conflicts. There are lots of ways to resolve them, but in my opinion this makes for a clean commit log.</p>
</section>
<section id="setup" class="level1">
<h1>Setup</h1>
<p>Let’s say you’re working on a feature branch and you want to merge it back into main, but while you were working, some conflicting commits were introduced:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">%%{init: {'theme': 'base'}}%%
gitGraph
  commit id: "start"
  branch feature
  checkout feature
  commit id: "feature_change"
  checkout main
  commit id: "conflict_change"
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>When you go to submit your PR you’ll see that you have a merge conflict to resolve. What do you do?</p>
</section>
<section id="dont-merge-main-in" class="level1">
<h1>Don’t merge main in</h1>
<p>For whatever reason, the common advice for this (e.g.&nbsp;what you get prompted to do in Azure DevOps) is to merge the target branch into the feature branch, resolve the merge conflict there, and then retry your PR:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">%%{init: {'theme': 'base'}}%%
gitGraph
  commit id: "start"
  branch feature
  checkout feature
  commit id: "feature_change"
  checkout main
  commit id: "conflict_change"
  checkout feature
  merge main id: "resolve"
  checkout main
  merge feature id: "complete_pr"
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>This does work, but it can make reviewing your PR a nightmare if a lot has happened on main since you started the feature branch, since now all those commits are on your branch and your history of changes will look huge.</p>
</section>
<section id="rebase-instead" class="level1">
<h1>Rebase instead</h1>
<p>Instead what I recommend is rebasing your feature branch on <code>main</code> and resolving the merge conflict there. This will make your branch look like what it would have been if you’d started it off of <code>main</code> in it’s current state:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">%%{init: {'theme': 'base'}}%%
gitGraph
  commit id: "start"
  commit id: "conflict_change"
  branch feature
  checkout feature
  commit id: "resolve"
  checkout main
  merge feature id: "complete_pr"
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<section id="note" class="level2">
<h2 class="anchored" data-anchor-id="note">Note</h2>
<p>With this approach you will have to force push as you’ll be rewriting the remote history of your branch. Only do this for branches where you’re the sole author, or at least very carefully coordinate with collaborators before you do this. For feature branches this typically shouldn’t be a problem.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This doesn’t look super different with these toy diagrams, but hopefully you can see how the latter solution would look a lot cleaner in an active project where there could be tens or hundreds of commits between when you start your branch and when you submit your PR.</p>


</section>

 ]]></description>
  <category>git</category>
  <guid>https://blog.ianpreston.ca/posts/2024-07-01-merging.html</guid>
  <pubDate>Mon, 01 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Setting up nix development enviroments</title>
  <link>https://blog.ianpreston.ca/posts/2024-06-30-nix.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>For the past little while now I’ve been changing how I manage my dotfiles and development environments to use <a href="https://nixos.org/">nix</a>. I haven’t gone full bore and switched to NixOS itself, but otherwise I’m pretty into it. This post will go over what problems I was trying to solve by switching, share some resources I found helpful, and document what I did to get my python environment working the way I like, because it took a ton of time and also does the best job of showing some of the different ways you can do things in nix.</p>
</section>
<section id="what-problem-im-trying-to-solve" class="level1">
<h1>What problem I’m trying to solve</h1>
<p>Previously I was deploying my dotfiles with <a href="https://github.com/anishathalye/dotbot">dotbot</a> and setting up my development environment with <a href="https://containers.dev/">devcontainers</a>, specifically through <a href="https://devpod.sh/">devpod</a>. Nothing against either of these projects, they’re great at what they’re for, but I did have some issues that left me wondering if there was a better solution.</p>
<p>First, while my dotfiles contained all the config for my apps, they didn’t have any capability to check for and fix installation of those apps if they weren’t present. So for example I could have my <a href="https://starship.rs/">starship</a> config in my dotfiles, but that wouldn’t do me any good if the environment I was developing in didn’t have it. For actual hosts I could take care of this with ansible, and for devcontainers I built a base image that had the tools I liked that I would then build language or project specific containers on top of. This worked, but it felt disjointed. Ansible feels heavy to just install a couple packages, especially when you have to deal with either setting up connectivity from an existing host to a WSL system or whatever, or you have to bootstrap installing ansible on the machine to run a playbook against a <code>local</code> host. For the devcontainers it meant that whenever I updated my base image I then had to rebuild and repull any child images based on it, which meant if I was working on a project and realized there was a cool tool I wanted to add to my base image I was either going into my devcontainer repo, making changes, pushing up, rebuilding the base image, rebuilding the child image I needed, pulling it down into my environment and resuming what I was actually working on, or I just hacked something into the devcontainer that was lost the next time I restarted and then I had to go through the process above.</p>
<p>Regarding devcontainers, they’re an awesome idea, and I think maybe if my dev environments involved a much larger stack, like if I was standing up a cache and a database and some other tooling along with whatever I was developing then being able to orchestrate all that with docker would appeal. What I generally actually want out of devcontainers though is just for some tools to be available. I can definitely get this from a devcontainer, but at the cost of a lot more isolation than I actually want. Any config files I want to mount in I have to add, <code>ssh-agent</code> seems to hate forwarding into devcontainers for me (I’m pretty sure this is because I have some weird stack with WSL but still), and configuring a <code>Dockerfile</code> is a bit of a hassle. If I realize I need something else in the container do I carefully rewrite the file to keep my layers small and related actions close together? Or do I jam it in at the end of the file so I don’t have to rebuild all those layers I already made so I can get back to work quickly?</p>
<p>To address these issues I decided to try nix. <a href="https://nix-community.github.io/home-manager/">Home Manager</a> lets me bundle common apps along with their config, and then <a href="https://nixos.wiki/wiki/flakes#Super_fast_nix-shell">nix-shell</a> lets me declaratively define a development environment that I can bundle (along with pinned dependencies) with a project. It took a fair bit of work and reading to get my head around the tooling, but in the end I’m quite pleased with my setup.</p>
</section>
<section id="resources-that-were-helpful" class="level1">
<h1>Resources that were helpful</h1>
<p>For the most part I don’t have anything original to add to this discussion. I’m not going to try and reiterate a worse version of the tutorials and guides I followed to configure my setup, that doesn’t seem helpful. Instead in this section I’ll list the links that were most useful for me when trying to figure this out. In the next section I will go through all the things I tried to set up a python environment, since I didn’t see anything that explored all the options I tried while I was searching, so it might actually be useful to others.</p>
<ul>
<li><a href="https://zero-to-nix.com/start/install">zero to nix</a>. Great guide. Covers the basics and gets you set up with an environment where you can actually test other things out. Highly recommend starting here.</li>
<li><a href="https://tonyfinn.com/blog/nix-from-first-principles-flake-edition/">nix from first principles: flake edition</a> Much more comprehensive. Very solid description of nix, how it works, some of the patterns it uses, and some nice example development environments. I referred back to this the most.</li>
<li><a href="https://www.youtube.com/@vimjoyer">vimjoyer channel</a>. Lots of good videos going over things in nix. Includes NixOS specific stuff that isn’t currently relevant to me and video format makes it harder to review, but a very nice way to get an overview of what’s possible in nix. Watched a lot of these while doing dishes.</li>
</ul>
</section>
<section id="python-environment" class="level1">
<h1>Python environment</h1>
<p>For the most part after going through the guides above I was able to get what I wanted working fairly easily. I would have to ask ChatGPT about some particular syntax, or refer to the home-manager appendices to figure out a specific configuration, but as I mentioned above I don’t think I have a lot of wisdom to contribute for those scenarios. Read the guides above, bang your head against the code a bit until it starts making sense and you’ll be good to go.</p>
<p>The exception to this is python environments. I did a <strong>lot</strong> of messing around with setting up my environment and I think describing what I tried will be helpful to others.</p>
<p>In the interest of not burying the lede for those who just want to know what worked I built an environment for each version of python I wanted to test against using <a href="https://github.com/nix-community/poetry2nix?tab=readme-ov-file#mkpoetryenv">poetry2nix</a>.</p>
<p>You can see what I’m currently doing by checking out my <a href="https://github.com/ianepreston/stats_can/blob/master/flake.nix">stats_can project</a>.</p>
<p>I resisted this approach at first because I was thinking of nix in terms of docker as something that should just give me a python runtime, poetry, and nox and then get out of my way. It turns out there are problems with that approach.</p>
<section id="log-of-what-i-tried-before-finally-getting-things-working" class="level2">
<h2 class="anchored" data-anchor-id="log-of-what-i-tried-before-finally-getting-things-working">Log of what I tried before finally getting things working</h2>
<p>I wanted to be able to just tell nix to give me an environment with a python runtime of my choice, poetry, and nox (not to be confused with nix, just an unfortunately very similarly named project). I think I probably could have gotten this working if my projects only used pure python dependencies, but stuff with c bindings like numpy and pandas had all sorts of issues since the c libraries of the nix packages didn’t match my OS, and installing c libraries into nix didn’t fix the fact that the… links? were wrong? To be honest I was pretty confused by all this. Suffice to say, it didn’t work. I also tried out <a href="https://devenv.sh/">devenv</a> and <a href="https://numtide.github.io/devshell/">devshell</a> which are built on top of nix and intended to make things easier, but in the case of python environments I found they ended up adding complexity. The section below is a record of the things I tried, only loosely edited. I’m keeping it in for reference and also so maybe someone else trying these things will find it in google and be able to skip to the setup I actually got working.</p>
<section id="first-official-attempt" class="level3">
<h3 class="anchored" data-anchor-id="first-official-attempt">First official attempt</h3>
<p>I did a lot of fumbling around trying to just drop some flakes off the internet into existing python projects, but that quickly turned out to be too complicated for testing.</p>
<p>Instead I started a fresh git repo with the intent of making a minimum viable package and then extending from there as required.</p>
<p>I’ll start with the development environment described in <a href="https://tonyfinn.com/blog/nix-from-first-principles-flake-edition/nix-8-flakes-and-developer-environments/">nix from first principles</a>. It’s fairly understandable, gives me multiple python versions, and will have a different version of python as the default than I’m using in poetry so I can test that.</p>
<p>It looks like this to start:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode nix code-with-copy"><code class="sourceCode nix"><span id="cb1-1"></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-3">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inputs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"github:NixOS/nixpkgs/nixpkgs-unstable"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4"></span>
<span id="cb1-5">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">outputs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>:</span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span></span>
<span id="cb1-7">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">import</span> nixpkgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">system</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x86_64-linux"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-8">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A list of shell names and their Python versions</span></span>
<span id="cb1-9">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pythonVersions</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">python38</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.python38<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">python39</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.python39<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">python310</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.python310<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">default</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.python310<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-14">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-15">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A function to make a shell with a python version</span></span>
<span id="cb1-16">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">makePythonShell</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">shellName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pythonPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-17">        pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-18">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You could add extra packages you need here too</span></span>
<span id="cb1-19">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pythonPackage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-20">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You can also add commands that run on shell startup with shellHook</span></span>
<span id="cb1-21">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">shellHook</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb1-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            echo "Now entering </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>shellName<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> environment."</span></span>
<span id="cb1-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">          ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-24">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-26">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mapAttrs runs the given function (makePythonShell) against every value</span></span>
<span id="cb1-27">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in the attribute set (pythonVersions) and returns a new set</span></span>
<span id="cb1-28">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">devShells</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x86_64-linux</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">builtins</span>.mapAttrs makePythonShell pythonVersions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>After staging this in my repo I run <code>nix develop</code> to load the default python 3.10 shell. Well, first off, I’m not in my default shell anymore, no fish, no starship. That’s annoying, but I think there’s a fix around that, or maybe I swap this over to devenv later since it handles it well. Put that on the todo for now. It loads pretty fast, I can start up fish and get all my good stuff back, and it’s got me a vanilla python. Not much more to test here to be honest. I’m not trying to add other packages currently so let’s call this step one and see what we can extend it to.</p>
</section>
<section id="try-just-sticking-poetry-in" class="level3">
<h3 class="anchored" data-anchor-id="try-just-sticking-poetry-in">Try just sticking poetry in</h3>
<p>Still not getting fancy with devenv or poetry2nix. Let’s try the suggestion in <a href="https://ayats.org/blog/nix-workflow/">this post</a>. I’m honestly not super optimistic this will work since it has this lovely warning:</p>
<pre><code>Using LD_LIBRARY_PATH may lead to weird errors if the glibc version of the shell doesn’t match the one of the system. For a devshell that uses &lt;nixpkgs&gt; it shouldn’t be an issue, but otherwise I’d recommend using nix-ld.</code></pre>
<p>As briefly mentioned above I can’t use nix-ld since I’m not doing this on NixOS. Well, we can’t know how bad it is until we try.</p>
<p>Let’s see if I can just put the diff in here and have it look reasonable:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode nix code-with-copy"><code class="sourceCode nix"><span id="cb3-1">       makePythonShell = <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">shellName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pythonPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-2">         pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-3">           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You could add extra packages you need here too</span></span>
<span id="cb3-4">-          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pythonPackage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-5">+          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pythonPackage pkgs.poetry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-6">           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You can also add commands that run on shell startup with shellHook</span></span>
<span id="cb3-7">           <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">shellHook</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb3-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">             echo "Now entering </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>shellName<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> environment."</span></span>
<span id="cb3-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">           ''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-10">+          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">env</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-11">+            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">LD_LIBRARY_PATH</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.lib.makeLibraryPath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pkgs.stdenv.cc.cc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-12">+            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">POETRY_VIRTUALENVS_IN_PROJECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"true"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13">+            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">POETRY_VIRTUALENVS_PATH</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{project-dir}/.venv"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-14">+            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">POETRY_VIRTUALENVS_PREFER_ACTIVE_PYTHON</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"true"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-15">+          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-16">         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>;</span>
<span id="cb3-17">     in <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-18">       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mapAttrs runs the given function (makePythonShell) against every value</span></span></code></pre></div>
<p>That’s not so bad. Gives a little context.</p>
<p>Ok, that got so far as installing poetry and I created a project. Let’s try installing some stuff.</p>
<p>Add a basic dependency with <code>poetry add requests</code> and then a dev dependency with <code>poetry add -G ruff</code>.</p>
<p>Running python by default does not see either of these libraries. I guess that’s fair, usually with poetry you have to run <code>poetry shell</code> to activate the environment. Running that gives me some issues with my shell:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Spawning</span> shell within /home/ipreston/nixpy/.venv</span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Unsupported</span> use of <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'='</span>. In fish, please use <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'set VIRTUAL_ENV '</span>/home/ipreston/nixpy/.venv<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.</span>
<span id="cb4-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">VIRTUAL_ENV</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/ipreston/nixpy/.venv'</span></span></code></pre></div>
<p>Ok, I can probably figure out my way around that, although I’m starting to really understand the appeal of using devenv where they’ve figured all this out.</p>
<p>It looks like this happens because I start my nix shell in bash, but when I run <code>poetry shell</code> it wants to activate in fish, but since I’m in bash it uses the bash activate script from the venv? That doesn’t really make sense to me but if I go into my fish shell by running <code>fish</code> and then run <code>poetry shell</code> it seems to work. Weird.</p>
<p>Running poetry install then ran into an error because I hadn’t actually created a package so I made a quick stub README and a <code>src</code> folder with a hello world function.</p>
<p>After doing that I was able to import requests successfully and run ruff on my stub code.</p>
<p>Basics are working, let’s try and deal with weird c dependencies now.</p>
</section>
<section id="ok-sure-but-how-about-with-pandas" class="level3">
<h3 class="anchored" data-anchor-id="ok-sure-but-how-about-with-pandas">Ok sure, but how about with pandas?</h3>
<p>‘poetry add pandas’, ‘python’, ‘import pandas as pd’, ’print(pd.__version__)’ all work? Cool I guess, but why is this working when so many of my other attempts failed miserably? Should I just be happy? I mean this works pretty well.</p>
</section>
<section id="work-on-different-python-versions" class="level3">
<h3 class="anchored" data-anchor-id="work-on-different-python-versions">Work on different python versions</h3>
<p>One thing I noticed is that although I specified my python package to be verion <code>3.10</code> and I set the environment variable to prefer the active python, when I enter <code>poetry shell</code> and call python I end up with <code>3.11</code>, which I assume is what’s bundled with poetry. Why would that be? I do need the ability to specify my python versions so I can test my library against new and old releases.</p>
<p>From <a href="https://python-poetry.org/docs/configuration#virtualenvsprefer-active-python-experimental">the docs</a> it seems like the setting I created should have worked for this.</p>
<p>To double check I hadn’t done something stupid on the initial install I blew away the virtual environment with <code>rm -rf .venv</code>, confirmed that I was in a nix shell with python 3.10 as the active python and then ran <code>poetry install</code>. Same deal, outside the venv I’m on python 3.10, as soon as I activate it I’m in 3.11.</p>
<p>Devenv seemed to handle this really nicely. I wonder if I can couple that <code>LD_LIBRARY_PATH</code> argument and have the best of both worlds?</p>
</section>
<section id="try-to-bring-in-devenv-again" class="level3">
<h3 class="anchored" data-anchor-id="try-to-bring-in-devenv-again">Try to bring in devenv again</h3>
<p>I convert my flake back to a devenv config I was using in earlier testing.</p>
<p>The changes look like this:</p>
<pre class="git"><code>
diff --git a/flake.nix b/flake.nix
index 4fc6451..d3c26c2 100644
--- a/flake.nix
+++ b/flake.nix
@@ -1,31 +1,56 @@
 {
-  inputs.nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";
+  inputs = {
+    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
+    nixpkgs-python.url = "github:cachix/nixpkgs-python";
+    nixpkgs-python.inputs = { nixpkgs.follows = "nixpkgs"; };
+    devenv.url = "github:cachix/devenv";
+  };
 
-  outputs = { self, nixpkgs }:
+  nixConfig = {
+    extra-trusted-public-keys =
+      "devenv.cachix.org-1:w1cLUi8dv3hnoSPGAuibQv+f9TZLr6cv/Hm9XgU50cw=";
+    extra-substituters = "https://devenv.cachix.org";
+  };
+
+  outputs = { self, nixpkgs, devenv, ... }@inputs:
     let
-      pkgs = import nixpkgs { system = "x86_64-linux"; };
+      system = "x86_64-linux";
+      pkgs = import nixpkgs { system = system; };
       # A list of shell names and their Python versions
       pythonVersions = {
-        python38 = pkgs.python38;
-        python39 = pkgs.python39;
-        python310 = pkgs.python310;
-        default = pkgs.python310;
+        python39 = "3.9";
+        python310 = "3.10";
+        python311 = "3.11";
+        default = "3.10";
       };
       # A function to make a shell with a python version
-      makePythonShell = shellName: pythonPackage:
-        pkgs.mkShell {
-          # You could add extra packages you need here too
-          packages = [ pythonPackage pkgs.poetry ];
-          # You can also add commands that run on shell startup with shellHook
-          shellHook = ''
-            echo "Now entering ${shellName} environment."
-          '';
-          env = {
-            LD_LIBRARY_PATH = pkgs.lib.makeLibraryPath [ pkgs.stdenv.cc.cc ];
-            POETRY_VIRTUALENVS_IN_PROJECT = "true";
-            POETRY_VIRTUALENVS_PATH = "{project-dir}/.venv";
-            POETRY_VIRTUALENVS_PREFER_ACTIVE_PYTHON = "true";
-          };
+      makePythonShell = shellName: pythonVersion:
+        devenv.lib.mkShell {
+          inherit inputs pkgs;
+          modules = [
+            ({ pkgs, config, ... }: {
+              languages.python = {
+                version = pythonVersion;
+                enable = true;
+                venv.enable = true;
+                poetry = {
+                  enable = true;
+                  activate.enable = true;
+                  package = pkgs.poetry;
+                  install = {
+                    enable = true;
+                    # compile = true;
+                    installRootPackage = true;
+                  };
+                };
+              };
+              env = {
+                LD_LIBRARY_PATH =
+                  pkgs.lib.makeLibraryPath [ pkgs.stdenv.cc.cc ];
+              };
+
+            })
+          ];
         };
     in {
       # mapAttrs runs the given function (makePythonShell) against every value</code></pre>
<p>The LD_LIBRARY_PATH environment variable is still set and works. When I try and bring up python it does use the 3.10 version I set to be default. However, now I can’t import numpy:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">IMPORTANT:</span> PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Importing</span> the numpy C-extensions failed. This error can happen for</span>
<span id="cb6-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">many</span> reasons, often due to issues with your setup or how NumPy was</span>
<span id="cb6-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">installed.</span></span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">We</span> have compiled some common reasons and troubleshooting tips at:</span>
<span id="cb6-8"></span>
<span id="cb6-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">https://numpy.org/devdocs/user/troubleshooting-importerror.html</span></span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Please</span> note and check the following:</span>
<span id="cb6-12"></span>
<span id="cb6-13">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*</span> The Python version is: Python3.10 from <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/ipreston/nixpy/.venv/bin/python"</span></span>
<span id="cb6-14">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*</span> The NumPy version is: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.26.4"</span></span>
<span id="cb6-15"></span>
<span id="cb6-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">and</span> make sure that they are the versions you expect.</span>
<span id="cb6-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Please</span> carefully study the documentation linked above for further help.</span>
<span id="cb6-18"></span>
<span id="cb6-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Original</span> error was: libz.so.1: cannot open shared object file: No such file or directory</span></code></pre></div>
<p>So we’re back to this?</p>
</section>
<section id="figure-out-where-to-go-next" class="level3">
<h3 class="anchored" data-anchor-id="figure-out-where-to-go-next">Figure out where to go next</h3>
<p>With devenv I get a lot of convenience functions and proper support for specifying a python version. On the other hand I can’t import numpy, and my environment activation is sloooooow. Do I hack my older config until it has the nice parts of devenv but not the bad parts? Do I hack devenv to fix my library linking issues? Do I try another tool altogether?</p>
</section>
<section id="try-fixing-devenv" class="level3">
<h3 class="anchored" data-anchor-id="try-fixing-devenv">Try fixing devenv</h3>
<p>There’s a lot of good stuff in devenv, I feel like my least disruptive path is if I can get it working, so let’s try that first. <a href="https://github.com/cachix/devenv/issues/1095">This issue</a> sounds basically like the one I’m having so let’s see if I can get that working. I’ll comment out the <code>LD_LIBRARY_PATH</code> stuff and add <code>libraries = with pkgs; [zlib];</code> to the flake and try again.</p>
<p>That doesn’t initially work, but the issue does mention needing to blow things away and retry so let’s delete my <code>flake.lock</code>, <code>poetry.lock</code>, <code>.venv</code> and <code>.devenv</code>, give the system a reboot and give <code>nix develop --impure</code> another shot.</p>
<p>It works! Let’s see if I can work with other versions of python now. Leaving that shell I run <code>nix develop --impure .#python311</code> and… get the same import error on numpy. Ok, how about going back to my default shell? Now it doesn’t work there either. What happened?</p>
<section id="try-and-figure-out-switching-python-versions" class="level4">
<h4 class="anchored" data-anchor-id="try-and-figure-out-switching-python-versions">Try and figure out switching python versions</h4>
<p>I can’t really blow away my whole environment and rebuild every time I want to test a different python, let’s see if I can narrow down the issue.</p>
<p>Doing just a restart is not sufficient, so I guess it’s not some environment variable that’s being reset. Let’s try deleting <code>.devenv</code> and see what that does? Still nothing. I notice that I’m actually calling <code>nix develop --impure .#python310</code>, which should be the same as my default, but for completeness let’s see if that makes a difference? Nope.</p>
<p>Ok, one thing at a time is going to be slow, let’s attack this from the other direction and make sure I can reproduce making things work again.</p>
<p>I came back to these notes after a break where I was busy on other things. On the initial run just to make sure I knew where I was at I could import numpy but not pandas. Pandas gave an error about <code>ImportError: libstdc++.so.6: cannot open shared object file: No such file or directory</code></p>
<p>When I switched to python 3.11 I was back to my numpy import error from above, and reverting back to the default I could no longer import numpy. So something in the activation of the 3.11 environment broke my 3.10 one. Even if I fix that I’ll still have to fix pandas.</p>
<p>I do think fixing this is worth looking into though, if for no other reason than it might help me understand nix better.</p>
<p>Now I’m jumping back and forth between environments and it’s only consistently giving the pandas error. On the one hand, hurray, problem solved. On the other, what?</p>
<p>And now I came back to it and found myself with the numpy error again.</p>
<p>I don’t think this is the way to go. There’s too much jankiness.</p>
</section>
</section>
<section id="detour-into-devcontainers" class="level3">
<h3 class="anchored" data-anchor-id="detour-into-devcontainers">Detour into devcontainers</h3>
<p>At this point I was getting really frustrated. It seemed like the mutability of what I wanted to do with python just wasn’t a good fit for nix. So I took a long detour back into devcontainers.</p>
<p>I did manage to get devcontainers working with DevPod. But between fighting to get my ssh keys passed in, to random failures at build, plus super long wait times I (not so) quickly remembered all the reasons I was trying to get away from devcontainers. Even though I found a nix devcontainer feature that allowed me to pass in my home-manager install for dotfile configs into the devcontainer, which was sweet, at the end I decided that I was fighting just as hard to make the devcontainer work as I had been nix, so maybe I should just go back. On a quick sidebar, I did switch out my shell from fish to zsh. I even tried bash again with ble.sh installed on top but it was too slow if I wanted the syntax highlighting. Zsh seems more common than fish, is posix compliant, and I was able to fairly easily get my autocomplete and syntax highlighting preferences configured.</p>
</section>
<section id="back-to-poetry-with-poetry2nix" class="level3">
<h3 class="anchored" data-anchor-id="back-to-poetry-with-poetry2nix">Back to poetry with poetry2nix</h3>
<p>I’ve resisted learning poetry2nix. It seemed like a lot of complication, and I was worried about its ability to handle packages that might not be in the nix library. But after fighting with c bindings a bunch in the previous efforts I think I might have to just suck it up and learn. After copying over the default flake I was basically immediately able to access a working python environment and import numpy as well as my dev dependencies. I now have to figure out how to convert this to handle multiple python versions. There are docs on that, it’s just a matter of figuring out enough nix syntax to know how to do it.</p>
<p>Let’s start with the template:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode nix code-with-copy"><code class="sourceCode nix"><span id="cb7-1"></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-3">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">description</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Application packaged using poetry2nix"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-4"></span>
<span id="cb7-5">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inputs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">flake-utils</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"github:numtide/flake-utils"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"github:NixOS/nixpkgs/nixos-unstable-small"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">poetry2nix</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-9">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"github:nix-community/poetry2nix"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-10">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inputs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">follows</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nixpkgs"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-12">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-13"></span>
<span id="cb7-14">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">outputs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nixpkgs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">flake-utils</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">poetry2nix</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>:</span>
<span id="cb7-15">    flake<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>utils.lib.eachDefaultSystem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">system</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-16">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span></span>
<span id="cb7-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see https://github.com/nix-community/poetry2nix/tree/master#api for more functions and examples.</span></span>
<span id="cb7-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nixpkgs.legacyPackages.$<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">system</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inherit</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">poetry2nix</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lib</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mkPoetry2Nix</span> { <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inherit</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span>; })</span>
<span id="cb7-20">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mkPoetryApplication</span>;</span>
<span id="cb7-21">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-23">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">myapp</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mkPoetryApplication <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">projectDir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-24">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">default</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> self.packages.$<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">system</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>.myapp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-25">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-26"></span>
<span id="cb7-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shell for app dependencies.</span></span>
<span id="cb7-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb7-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     nix develop</span></span>
<span id="cb7-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb7-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use this shell for developing your app.</span></span>
<span id="cb7-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">devShells</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">default</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb7-33">          pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inputsFrom</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> self.packages.$<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">system</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>.myapp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-34"></span>
<span id="cb7-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shell for poetry.</span></span>
<span id="cb7-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb7-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     nix develop .#poetry</span></span>
<span id="cb7-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb7-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use this shell for changes to pyproject.toml and poetry.lock.</span></span>
<span id="cb7-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">devShells</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">poetry</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pkgs.poetry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-41">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb7-42"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This works, I get a nix shell with all my libraries available and I’m able to import numpy. But I don’t really understand how it works and I need to be able to extend it to work with multiple versions of python, so let’s figure that stuff out.</p>
<p>The first thing I haven’t really used yet is this <code>flake-utils.lib.echDefaultSystem</code> thing from <a href="https://github.com/numtide/flake-utils?tab=readme-ov-file#eachdefaultsystem--system---attrs">the docs</a> it’s just a way to ensure you get environments built for mac, linux etc. I don’t really need it for my case but no harm keeping it. It’s wrapping well around everything I’d care about so I’ll just leave it on the outside.</p>
<p>Next we have this big long inherit statement, which is just bringing the <code>mkPoetryApplication</code> function into scope for me. That makes sense, there’s a few other functions there like mkPoetryEnv that I might want to add but for now it’s ok.</p>
<p>At the top of the <code>in</code> block we have the <code>packages</code> attribute, which defines what will get built if I run <code>nix build</code>. I’m not really trying to use nix as my package builder right now, although maybe I will be by the end of this. This is where my poetry application requirements get defined though, so I’ll have to modify this part later to make things work. <code>projectDir = self</code> is just saying the poetry project is in the same directory as the flake, which is fine.</p>
<p>The <code>devShells.default</code> is pretty straightforward, it’s making a development shell with the argument to take the build requirements from the package defined earlier in the flake. I don’t think this is actually the way I want to package things in my case, since the <code>mkPoetryEnv</code> function has options to specify the python version and some other things. I’m also confused how this knows to bring in my development dependency for ruff. According to <a href="https://github.com/nix-community/poetry2nix?tab=readme-ov-file#mkpoetryapplication">the docs</a> the default for <code>groups</code> is empty. Maybe it’s installing it because it’s in <code>dev</code> and that’s included in <code>checkGroups</code>? Is running tests considered part of the build by default? That kind of makes sense. I guess it must be.</p>
<p>Finally the poetry devshell is where I run poetry commands to add, remove, or otherwise manage dependencies. That’s ok for now. I’ll get some more practice working with that if I can get these other pieces working.</p>
<p>As a start I’m just going to try replacing devShells.default with a call to <code>mkPoetryEnv</code>. Not really trying to change any outcomes, just seeing if I can work off that:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode nix code-with-copy"><code class="sourceCode nix"><span id="cb8-1">devShells.default = mkPoetryEnv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-2">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">projectDir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-3">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">python</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.python3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-4">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">groups</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>;</span></code></pre></div>
<p>If I can get this working then I can use some of the function wrapping I did above to make multiple python development environments pretty easily (I think at least).</p>
<p>A quick run of <code>nix develop -c zsh</code> ran almost instantly and took me into an environment, but I couldn’t actually run python or do anything else. That’s weird, what did I actually accomplish?</p>
<p>Well, nothing. When I look into this a bit more I need to pass the output of <code>mkPoetryEnv</code> as an input to <code>pkgs.mkShell</code> under <code>buildInputs</code>. Let’s try this again as follows:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode nix code-with-copy"><code class="sourceCode nix"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span></span>
<span id="cb9-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see https://github.com/nix-community/poetry2nix/tree/master#api for more functions and examples.</span></span>
<span id="cb9-3">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nixpkgs.legacyPackages.$<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">system</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb9-4">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inherit</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">poetry2nix</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lib</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mkPoetry2Nix</span> { <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inherit</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span>; })</span>
<span id="cb9-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mkPoetryApplication</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mkPoetryEnv</span>;</span>
<span id="cb9-6">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">myappEnv</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mkPoetryEnv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">projectDir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">python</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.python3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">groups</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb9-10">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb9-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use this shell for developing your app.</span></span>
<span id="cb9-13">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">devShells</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">default</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">buildInputs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> myappEnv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>Ok, this worked. We haven’t accomplished anything yet, but I have a better foundation for implementing the changes I want. Let’s make some additional changes and see if it still works. The first thing is just going to be adding the argument <code>preferWheels = true;</code> to my env. Building from source worked fine but it was sloooow. It only has to happen once so it’s not the end of the world if I need to do this, but it would be cool to be able to skip it. That seemed to work and my build was quicker so that’s solid. Next let’s try a different python version. I’m still not parameterizing it, which is my long term goal, but let’s just see if we can make it work at all. All I have to change at this point is setting <code>python = pkgs.python310;</code> and re-running. Again it builds quickly (thanks wheels!) and I find myself in a python <code>3.10</code> interpreter and able to import all my dependencies. We’re looking pretty good! Now let’s get cocky and try and reproduce the multiple python versions thing I had going on before.</p>
<p>I got it working but I had to do a few sneaky things to make it work so let’s look at the new code and then discuss:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode nix code-with-copy"><code class="sourceCode nix"><span id="cb10-1">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span></span>
<span id="cb10-2">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see https://github.com/nix-community/poetry2nix/tree/master#api for more functions and examples.</span></span>
<span id="cb10-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nixpkgs.legacyPackages.$<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">system</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb10-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inherit</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">poetry2nix</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lib</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mkPoetry2Nix</span> { <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inherit</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pkgs</span>; })</span>
<span id="cb10-5">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mkPoetryApplication</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mkPoetryEnv</span>;</span>
<span id="cb10-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pythonVersions</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-7">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">python310</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.python310<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-8">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">python311</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.python311<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-9">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">default</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.python310<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb10-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">makePoetryEnvPyVer</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pythonPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-12">          mkPoetryEnv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">projectDir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-14">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">python</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pythonPackage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-15">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">preferWheels</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-16">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">groups</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-17">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb10-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">makePythonShell</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">shellName</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pythonPackage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-19">          pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">buildInputs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>makePoetryEnvPyVer pythonPackage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-21">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb10-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mappedDevShells</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">builtins</span>.mapAttrs makePythonShell pythonVersions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">moreDevShells</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-24">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">poetry</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkgs.mkShell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">packages</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> pkgs.poetry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb10-25">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb10-26">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">devShells</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mappedDevShells <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> moreDevShells<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>);</span>
<span id="cb10-27">}</span></code></pre></div>
<p>Ok, so the <code>pythonVersions</code> set is the same as pre poetry2nix, just a list of python versions mapped to the name of the devShell I want to use them in. python 3.10 is listed twice since it’s the default and can be called explicitly.</p>
<p>I couldn’t figure out how to just dump the <code>mkPoetryEnv</code> call inside the <code>makePythonShell</code> function. When I tried I got errors about extra <code>;</code> or <code>error: Dependency is not of a valid type: element 1 of buildInputs for nix-shell</code> if I didn’t put a <code>;</code> at the end of my <code>mkPoetryEnv{}</code>. After consulting chat GPT it suggested the issue might relate to the context of <code>self</code> within this function. So instead I make a function that creates a poetry env with an argument for the python version to use, and then call taht from my <code>makePythonShell</code> function. This works fine.</p>
<p>The next issue I had was that I couldn’t just call the <code>builtins.mapAttrs</code> method to make most of my <code>devShells</code> and then inject <code>devShells.poetry</code> for the poetry environment after. Instead I define maps for all the mapped devShells and the poetry shell in my <code>let</code> statement and then combine them to make the full <code>devShells</code> map in the <code>in</code> statement. Another shout out to ChatGPT for helping me figure that out.</p>
<p>Now that this is all done I can quickly and painlessly enter a development environment running the version of python I want, or enter a poetry environment to update or otherwise manage my dependencies. Hurray!</p>
</section>
<section id="test-this-on-a-real-project" class="level3">
<h3 class="anchored" data-anchor-id="test-this-on-a-real-project">Test this on a real project</h3>
<p>This all worked well on a toy project, but how about the actual library I want to maintain? I copied the flake over to my <code>stats_can</code> project and tried developing. The dependencies all loaded, but I couldn’t actually import my library. Switching back to the toy I realized I couldn’t do it there either, it just hadn’t really come up so I hadn’t thought to test it. Adding the following line to my <code>mkPoetryEnv</code> call fixed it: <code>editablePackageSources = { my-app = ./src;</code>.</p>
<p>After that I tried to run my tests. I got an error about <code>pytest-vcr</code> conflicting with <code>pytest-recording</code>. I realized I did have both specified in my project and that <code>pytest-vcr</code> should have been removed. I’m not sure why my old setup worked with that, but it was easy enough to correct.</p>
<p>I also had some hassles with my cassettes from testing, but that was probably a one off from converting. After that the tests ran ok.</p>
</section>
<section id="how-about-cicd" class="level3">
<h3 class="anchored" data-anchor-id="how-about-cicd">How about CI/CD?</h3>
<p>At this point it looks like my project is working, but now I’ve got one approach to testing locally and a different one when I run CI/CD. I happen to know from experience that that’s a nightmare scenario and that I should keep my CI/CD as close as possible to my local dev environment.</p>
<p>There was a nice <a href="https://determinate.systems/posts/nix-github-actions/">blog</a> I remember reading on this subject, let’s try it out.</p>
<p>This actually worked great. No notes. I have a <code>Makefile</code> in my project that for tests spins up each python version’s nix shell and runs pytest. This works locally, and after adding the nix setup actions to my CI/CD pipeline I can call it just the same from GitHub actions. This is a surprise bonus for this approach, much more consistent runs between local and CI/CD.</p>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Nix has a pretty solid learning curve. Do not expect to pick it up in an hour. Especially if your development environment is complex/involves python. With that said, I’m super happy with my environment now and think the time I spent was well worth it. It will probably be a couple years at least before I officially break even on time saved with this approach from not having to install packages or rebuild containers, but I’m still glad I did it.</p>


</section>

 ]]></description>
  <category>nix</category>
  <category>linux</category>
  <guid>https://blog.ianpreston.ca/posts/2024-06-30-nix.html</guid>
  <pubDate>Sun, 30 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Unifi Controller setup in docker (across VLANs)</title>
  <link>https://blog.ianpreston.ca/posts/2024-01-18-unifi.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This post is about how I set up a Unifi network controller for my wireless access points in docker, dealing with VLANs along the way.</p>
</section>
<section id="background" class="level1">
<h1>Background</h1>
<p>I have a couple of Unifi Wireless Access points for Wifi in my house. Configuration of all Unifi network devices is done through a web portal. I think if you have one of their routers it’s hosted on the router itself, but I use pfsense for my router. You can also buy a standalone “cloud key” but they’re like $200 and that seems silly. You can also host the controller service in a docker container. I’ve been doing that for quite a while without issue, but some recent changes in my setup led to me modifying how I do that, and also this post.</p>
<p>Previously, my docker host machine was on the same subnet as my access points and I happily ran the <code>unifi-controller</code> container from <a href="https://www.linuxserver.io/">linuxserver</a> with a bunch of ports exposed and everything worked fine. As part of the <a href="../posts/2023-11-12-xcp-ng.html">virtualization</a> and <a href="../posts/2023-04-09-network-rework.html">network segmentation</a> adventure I’ve been on I’ve been rebuilding my container host in a VM, and I’ve moved that VM to a different VLAN than my Access points. This has surfaced some issues.</p>
</section>
<section id="first-issue---outdated-containers" class="level1">
<h1>First issue - outdated containers</h1>
<p>As part of my migration I took a look to see if there were any updates to my controller container. This turns out to have been timely, as it had been <a href="https://info.linuxserver.io/issues/2023-09-06-unifi-controller/">deprecated</a> not too long before I took this project up. The good news is there’s a new <a href="https://github.com/linuxserver/docker-unifi-network-application">unifi-network-application</a> container. The bad news is it’s a real pain to set up, at least for me.</p>
<p>As per the docs I performed a backup from my old <code>unifi-controller</code> and shut it down. That part went fine. When it came to standing up the new container I had a nightmare of a time getting the mongodb container it needs (which is also pinned to a very outdated version thanks to Unifi) to start up with a proper database and credentials. There are a bunch of open and closed <a href="https://github.com/linuxserver/docker-unifi-network-application/issues">issues</a> with people having varying degrees of success getting things working. For the life of me I couldn’t get it stood up in a fully automated way. I attached the correct init scripts to the container, validated they were visible in it etc, but nothing worked. Eventually I stood up the mongo container, remoted into it and just ran <code>mongo unifi /docker-entrypoint-initdb.d/init-mongo.js</code>, which worked. Why it didn’t correctly pick that up and run it at instantiation like it was supposed to is beyond me. Whatever.</p>
<p>After that I got the network application container up and running easily and restored my config. I even remembered to update the <code>inform host</code> setting to my new IP since otherwise it just gives the docker container’s IP, which is not visible to the rest of the network. But at this point I hit my second issue.</p>
</section>
<section id="second-issue---device-discovery-across-networks" class="level1">
<h1>Second issue - device discovery across networks</h1>
<p>Now for the next issue. My APs are on my infra network, but this VM is on my services network. Apparently device discovery does not work across subnets. I looked this up and there are some ways to address this while keeping things on different networks. I could have ssh’d into each of my APs and hard coded the controller IP. That probably would have worked, and I only have a couple APs so it would have been scalable, but I wanted to find a better way.</p>
<p>My first attempt was to create an <a href="https://docs.docker.com/network/drivers/ipvlan/">IPvlan</a> docker network and attach the container to that. Everything ran, but I couldn’t connect to the container at the address I assigned. I’m pretty sure that’s because the network interface I created for the VM running the container in XCP-NG was set with a VLAN tag so it’s automatically stripping all other VLAN tags and adding in the assigned one.</p>
<p>To address that I modified the machine’s config in terraform to add another network interface that was associated with my infra network. After that I was able to create an IPvlan network (without specifying the VLAN tag at the docker level) associated with that interface and give the container an IP. With that working my APs were adopted and I was good to go, happy ending!</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I had a bit of a hassle getting my Unifi access points to talk to my reinstalled Unifi controller. I wanted to document what I went through here as either a reference to myself in the future, or to help others.</p>


</section>

 ]]></description>
  <category>linux</category>
  <category>networking</category>
  <category>docker</category>
  <guid>https://blog.ianpreston.ca/posts/2024-01-18-unifi.html</guid>
  <pubDate>Thu, 18 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Setting up internal name resolution in Windows and WSL (probably Linux too)</title>
  <link>https://blog.ianpreston.ca/posts/2023-12-26-dns.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Previously whenever I wanted to connect to a machine on my network I would create an entry in <code>~/.ssh/config</code> that looked something like this</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Host</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">HostName</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>.mydomain.ca</span></code></pre></div>
<p>I might include key or default user information as well, but a lot of the time all I really needed was that. There were two reasons for doing that:</p>
<ul>
<li>VS code looks in that file for remote development environments</li>
<li>It saves me typing <code>ssh &lt;host&gt;.mydomain.ca</code> and lets me just type <code>ssh &lt;host&gt;</code></li>
</ul>
<p>The first one this post doesn’t do anything about, but there’s a limited number of machines I need that for. The second doesn’t really seem like a big deal, but I’m lazy. In fact, I’m so lazy that I got annoyed with having to add a record in that file for every host I wanted to connect to, so I looked up how to configure DNS on my workstation to default to my domain if I didn’t put in a FQDN. That’s what this post is about. Read on to find out how.</p>
</section>
<section id="on-windows" class="level1">
<h1>On Windows</h1>
<p>This is basically cribbed straight from chatGPT:</p>
<p>To configure your Windows machine so that it can automatically resolve hostnames with a specific domain (like appending <code>mydomain.com</code> to <code>machine1</code> to form <code>machine1.mydomain.com</code>), you need to set up DNS suffix appending. Here’s how to do it:</p>
<ul>
<li>Open Network Connections Settings:
<ul>
<li>Right-click the network icon in the system tray and select “Open Network &amp; Internet settings”.</li>
<li>In the settings window, click on “Change adapter options”.</li>
</ul></li>
<li>Modify Properties of Your Network Adapter:
<ul>
<li>Right-click on the network adapter you are using (it could be Ethernet or Wi-Fi) and select “Properties”. If prompted, provide administrator credentials or confirmation.</li>
</ul></li>
<li>Edit TCP/IP Settings:
<ul>
<li>In the list of items used by the connection, select “Internet Protocol Version 4 (TCP/IPv4)” or “Internet Protocol Version 6 (TCP/IPv6)” depending on your network configuration.</li>
<li>Then click “Properties”.</li>
<li>In the next window, click on the “Advanced” button.</li>
</ul></li>
<li>Set the DNS Suffix:
<ul>
<li>In the Advanced TCP/IP settings window, go to the “DNS” tab.</li>
<li>Check the option “Append these DNS suffixes (in order):”.</li>
<li>Click “Add” and enter your domain name (e.g., mydomain.com).</li>
<li>Click “Add” after typing each domain. You can add multiple domains if necessary.</li>
</ul></li>
<li>Save Your Changes:
<ul>
<li>Click “OK” on all open windows to save your changes.</li>
</ul></li>
<li>Test the Configuration:
<ul>
<li>Open Command Prompt or PowerShell.</li>
<li>Try to ping or connect to a device using only its hostname (e.g., ping machine1).</li>
<li>If everything is configured correctly, Windows will automatically append the DNS suffix and resolve <code>machine1</code> to <code>machine1.mydomain.com</code>.</li>
</ul></li>
<li>Note for Dynamic DNS Environments:
<ul>
<li>If you’re in a dynamic DNS environment, like a corporate network using Active Directory, these settings might be managed by your network administrator via DHCP or Group Policy.</li>
</ul></li>
</ul>
<p>Remember, these settings apply to the network adapter you configure. If you switch between different networks (e.g., from Wi-Fi to Ethernet), you may need to configure each adapter separately.</p>
</section>
<section id="wsl" class="level1">
<h1>WSL</h1>
<p>In theory this part should just work if Windows is configured correctly, but after some reboots and fiddling I couldn’t get it to go. So I did a manual override. There’s two parts to this</p>
<ul>
<li><p>Set <code>/etc/wsl.conf</code> to not auto-generate <code>/etc/resolv.conf</code></p>
<ul>
<li>Put an entry in your <code>/etc/wsl.conf</code> that looks like the following:</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[network]</span></span>
<span id="cb2-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">generateResolvConf</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>false</span></code></pre></div>
<ul>
<li>Restart wsl (or just your whole computer) with <code>wsl --restart</code> from powershell</li>
</ul></li>
<li><p>Update <code>/etc/resolv.conf</code> to look something like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nameserver</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>your DNS IP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">search</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>your.domain<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div></li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This is a small little quality of life hack. It doesn’t save a ton of time, but it also doesn’t take a ton of time to do, and at least for me while I’ve been experimenting with spinning up and tearing down a bunch of VMs it’s been worth the few minutes it took to figure out and set up.</p>


</section>

 ]]></description>
  <category>linux</category>
  <category>WSL</category>
  <category>DNS</category>
  <guid>https://blog.ianpreston.ca/posts/2023-12-26-dns.html</guid>
  <pubDate>Tue, 26 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Deploying and configuring machines in Xen-Orchestra</title>
  <link>https://blog.ianpreston.ca/posts/2023-12-19-xcp-deployment.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Having successfully <a href="../posts/2023-12-11-xcp-templates.html">built some template images</a> it’s time to provision and configure some machines using terraform and ansible. Honestly using terraform is way overkill for the number of machines I’m actually planning to deploy, but it’s a nice way to document what I’m doing, and I’m expecting it to be relatively straightforward to get going.</p>
</section>
<section id="set-up-terraform" class="level1">
<h1>Set up terraform</h1>
<p>Locally I configure the code to run in my IaC devcontainer, which has terraform, ansible etc. preinstalled. For state management in terraform I’m going to try terraform cloud. I’ve only used local and ADLS storage backends before, but for personal use the cloud backend is free. I’ll be doing local execution of course since terraform cloud runners don’t have access to my homelab.</p>
<p>I set up a new <code>homelab</code> project in my account and then go to create a workspace. I go with CLI-Driven workflow since I won’t be doing any automated triggers of this provisioning. I’m just going to name the workspace <code>homelab</code> as well. Even though I will have dev and prod images they’re not going to match closely enough to have actual separate workspaces make sense (I don’t think, again, just using terraform for the handful of VMs I’m making seems excessive). After updating my organization default the workspace is set for local execution, which is what I want.</p>
<p>Next I create a <code>backend.tf</code> file to store the workspace information. The workspace shows a sample block for terraform when I create it so I just add that. In the same block I add the required providers info for the <a href="https://registry.terraform.io/providers/terra-farm/xenorchestra/latest">XO provider</a>.</p>
<p>After that I login with <code>terraform login</code>, I’m not sure if my devcontainer is going to persist the token I added so I may have to mess with this later, but let’s leave it for now.</p>
<p>Next I run <code>terraform init</code>, which creates a local statefile, but it only points to my cloud backend, at least for now, so maybe that’s fine. It’s in <code>.terraform</code> and I’ve got that in <code>.gitignore</code> anyway. (Update, it only ever contained backend info)</p>
<p>After that I need to set up the provider to connect to my specific XO instance. From the provider docs I can set environment variables for the host, username, and password. I’ll use my usual pattern to retrieve those from bitwarden and put them in a script that I can <code>eval $(cat &lt;secrets&gt;)</code> in other scripts. This keeps them out of my repo but means I don’t have to retrieve them every time. I then make a very sparse <code>provider.tf</code> file since I only have one provider and basically everything is set in environment variables. The only thing I have to specify is to not use SSL. At some point I will get around to generating proper certs for all this stuff, but that is not today. The exact way I got the environment vars set was from following <a href="https://xen-orchestra.com/blog/virtops1-xen-orchestra-terraform-provider/">this blog</a>. The way I was doing it before wasn’t making the variables show up for terraform even though I could see them in my shell. I really don’t get environment variable scoping in bash.</p>
<p>As a first step let’s just try getting some data resources. I’ll need those anyway to create VMs, and it’s a nice way to make sure my setup is working. I create a <code>dev-data.tf</code> file and add info for my pools. After that running terraform plan shows no changes, which means that it’s at least connected and read the resources. Great!</p>
</section>
<section id="deploy-a-vm" class="level1">
<h1>Deploy a VM</h1>
<p>There’s a couple things I might eventually add to this, like configuring virtual networks, but let’s not get ahead of ourselves and try just deploying a VM.</p>
<p>Setting up the data blocks felt a little repetitive. I have to create SRs and Network objects for each pool, but that’s on me for managing each host as its own pool. In the end with a little hacking it wasn’t that hard to do. I’ll show the examples of the components I created and describe them a bit below:</p>
<pre class="hcl"><code>data "xenorchestra_pool" "dhpp3" {
  name_label = "d-hpp-3"
}</code></pre>
<p>This is the pool I’m deploying to, it’s a 1:1 mapping between pools and hosts for me, but the VM cares about the pool it’s being deployed to so this is what I need to bring in.</p>
<pre class="hcl"><code>data "xenorchestra_sr" "dhpp3" {
  name_label = "Local storage"
  pool_id    = data.xenorchestra_pool.dhpp3.id
}

data "xenorchestra_network" "dhpp3" {
  name_label = "Pool-wide network associated with eth0"
  pool_id    = data.xenorchestra_pool.dhpp3.id
}

data "xenorchestra_template" "arch-dhpp3" {
  name_label = "archbase_template"
  pool_id    = data.xenorchestra_pool.dhpp3.id
}</code></pre>
<p>Each host has local storage, which is where I want VMs deployed. Terraform needs the local storage for each host to be uniquely identified (it can’t infer it from which pool I’m deploying to) so I need to pass in the pool id and create one for each pool. The same goes for my network and template configs.</p>
<pre class="hcl"><code>resource "xenorchestra_cloud_config" "d-mars" {
  name = "d-mars-cloudconfig"
  # Template the cloudinit if needed
  template = templatefile("arch-cloud.tftpl", {
    hostname = "d-mars"
  })
}</code></pre>
<p>I can’t use the XO templating in my terraform cloud configs, so I have to create a new one for each VM if I want to dynamically assign the hostname. The template file I reference looks basically like the cloud config I created for manual template deployment, just with terraform variable substitution instead:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#cloud-config</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hostname</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${hostname}</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runcmd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sudo /bin/bash /etc/ssh/sign_host.sh"</span></span></code></pre></div>
<pre class="hcl"><code>resource "xenorchestra_vm" "d-mars" {
  memory_max       = 4294967296
  cpus             = 2
  cloud_config     = xenorchestra_cloud_config.d-mars.template
  name_label       = "d-mars"
  name_description = "Dev VM for Docker host machine"
  template         = data.xenorchestra_template.arch-dhpp3.id
  exp_nested_hvm   = false
  auto_poweron     = true
  wait_for_ip      = true


  # Prefer to run the VM on the primary pool instance
  affinity_host = data.xenorchestra_pool.dhpp3.master
  network {
    network_id = data.xenorchestra_network.dhpp3.id
  }

  disk {
    sr_id      = data.xenorchestra_sr.dhpp3.id
    name_label = "d-mars"
    size       = 21474836480
  }

  tags = [
    "dev",
    "arch",
  ]
}</code></pre>
<p>Finally I can create the actual VM. Most of the hard work is done in the data blocks above. Specifying disk and RAM in bytes is a bit of apain, but otherwise it’s quite straightforward. The deploy was actually pretty quick. I definitely remember this step hanging forever when I was messing around with it in proxmox, but this machine got up and running about as fast as if I’d manually provisioned it, so that was great.</p>
</section>
<section id="set-up-ansible" class="level1">
<h1>Set up ansible</h1>
<p>Now that I’ve deployed a VM I need to configure it.</p>
<section id="dynamic-inventory" class="level2">
<h2 class="anchored" data-anchor-id="dynamic-inventory">Dynamic inventory</h2>
<p>I could just hard code in inventory entries for the VMs I create, but where’s the fun in that? There’s a <a href="https://docs.ansible.com/ansible/latest/collections/community/general/xen_orchestra_inventory.html">xen-orchestra-inventory</a> plugin that looks like what I want.</p>
<section id="run-into-issues" class="level3">
<h3 class="anchored" data-anchor-id="run-into-issues">Run into issues</h3>
<p>I create a dynamic inventory file similar to what’s shown in the docs and <a href="https://xen-orchestra.com/blog/virtops3-ansible-with-xen-orchestra/">this blog</a> from xen-orchestra. I get an error about failing to parse it though when I run <code>ansible-inventory -i inventory.xen_orchestra.yml --list</code>. Running again with the <code>-vvv</code> flag for max verbosity I get a slightly more descriptive error about <code>declined parsing /workspaces/homelab/ansible/inventory.xen_orchestra.yml as it did not pass its verify_file() method</code></p>
<p>Reading a little more carefully the issue is actually this part:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[WARNING]:</span>  <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> Failed to parse /workspaces/homelab/ansible/inventory.xen_orchestra.yml with auto plugin: This plugin requires websocket-client 1.0.0 or higher:</span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">https://github.com/websocket-client/websocket-client.</span></span></code></pre></div>
<p>I think maybe this is why the ansible docs recommend installing it with pip. Maybe I’ll rework my devcontainer later. For now I’ll try the following:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt update</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install python3-pip</span>
<span id="cb7-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip3</span> install websocket-client</span></code></pre></div>
<p>Ok, that fixed it. I’ll clean up my devcontainer later to address this.</p>
</section>
<section id="hide-sensitive-info" class="level3">
<h3 class="anchored" data-anchor-id="hide-sensitive-info">Hide sensitive info</h3>
<p>During initial testing while I was figuring out the inventory plugin I just hard coded my username and password into the inventory spec. That clearly won’t cut it long term. I tried creating an ansible-vault encrypted variable with my username and password, setting the plugin variables to pull from there, and then running the inventory command with <code>--extra-vars variables/secrets.yml</code>, but it didn’t like that. Fortunately the plugin will accept environment variables, so I did the same basic approach as I did with terraform to pull the info from Bitwarden, put it in a gitignored shell file, and then export those variables before calling ansible.</p>
</section>
</section>
<section id="ping-hosts" class="level2">
<h2 class="anchored" data-anchor-id="ping-hosts">Ping hosts</h2>
<p>The dynamic inventory also picks up my actual xcp-ng hosts, which I don’t really want to interact with via ansible. I’d like to figure out how to just connect with the VMs I actually care about, so let’s try a few things with a basic playbook that just uses the <code>ping</code> module to establish connectivity. I can add some groups to my inventory selecting based on tags. I can’t figure out how to do it based on hostname for specific stuff though, so I’m going back to terraform to update and just add an actual hostname tag to the machine I provisioned. This also happens to be a nice way to make sure I can modify a VM non-destructively with terraform.</p>
<p>With that set up I make a basic playbook with one ping task for the group that I identified (which only has one member) above. It works!</p>
</section>
<section id="summarize-the-ansible-setup" class="level2">
<h2 class="anchored" data-anchor-id="summarize-the-ansible-setup">Summarize the ansible setup</h2>
<p>Doing actual configuration stuff is out of scope for what I want to cover in this post, so let’s wrap up with the pieces I put together to get this working</p>
<p>I make sure the collection that contains the XO inventory plugin I need is installed by making a file in <code>./collections/requirements.yml</code>:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collections</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> community.general</span></span></code></pre></div>
<p>I can update that later with additional plugins for specific provisioning tasks.</p>
<p>I call it at the top of deployment scripts to be safe with <code>ansible-galaxy collection install -r ./collections/requirements.yml</code> although that should only have to be done once.</p>
<p>The credentials to XO is the same as I documented in terraform so I’ll leave that out.</p>
<p>I have a few pieces in <code>ansible.cfg</code> to set up the environment:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[defaults]</span></span>
<span id="cb9-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">remote_user </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ipreston</span></span>
<span id="cb9-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">interpreter_python </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> /usr/bin/python3</span></span></code></pre></div>
<p>The last line isn’t strictly necessary but it silences a warning I get otherwise.</p>
<p>The dynamic inventory file looks like this:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plugin</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"community.general.xen_orchestra"</span></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_certs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_ssl</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">groups</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arch</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'arch' in tags"</span></span>
<span id="cb10-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'dev' in tags"</span></span>
<span id="cb10-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dmars</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'d-mars' in tags"</span></span></code></pre></div>
<p>Again, gotta set up ssl eventually, but not today.</p>
<p>The actual playbook looks like this:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Playbook for my dev mars box</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Example from an Ansible Playbook</span></span>
<span id="cb11-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hosts</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dmars</span></span>
<span id="cb11-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tasks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb11-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Just ping it</span></span>
<span id="cb11-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.ping</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span></code></pre></div>
<p>Finally, the bash script that ties it all together and is what I actually run to configure the deployed machine is this</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/env bash</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> _requirements.sh</span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> _get_creds.sh</span>
<span id="cb12-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> creds.sh<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ansible-playbook</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> inventory.xen_orchestra.yml d-mars.yml</span></code></pre></div>
</section>
</section>
<section id="look-into-hooking-terraform-and-ansible-together" class="level1">
<h1>Look into hooking terraform and ansible together</h1>
<p>This is definitely overkill but it seems fun to look into, what if I want to have ansible run a playbook on a resource as soon as it’s provisioned by terraform?</p>
<p>There is an <a href="https://registry.terraform.io/providers/ansible/ansible/latest/docs">ansible provider for terraform</a> and a <a href="https://github.com/ansible-collections/cloud.terraform">terraform provider for ansible</a></p>
<p>The ideas seem interesting, but the terraform provider for ansible seems to want to create its inventory from terraform, which conflicts with the XO inventory I just set up, and I don’t really understand how the terraform provider works. I think this is well into overkill territory for now so I’m going to leave it alone.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this post I went over the basics of deploying machines on xen-orchestra using terraform and then configuring those deployed machines with ansible, although not in a 100% end to end integrated fashion.</p>


</section>

 ]]></description>
  <category>linux</category>
  <category>virtualization</category>
  <category>xcp-ng</category>
  <category>terraform</category>
  <category>ansible</category>
  <guid>https://blog.ianpreston.ca/posts/2023-12-19-xcp-deployment.html</guid>
  <pubDate>Tue, 19 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Working Templates in Xen-Orchestra</title>
  <link>https://blog.ianpreston.ca/posts/2023-12-11-xcp-templates.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In my <a href="../posts/2023-11-27-packer.html">last post</a> I spent entirely too long trying to figure out a fancy automated way of building image templates on xcp-ng/xen-orchestra. While I definitely learned a lot, I also spent more time trying to figure out an automation to build templates than I’ll reasonably spend doing it manually for the next few years.</p>
<p>This post is a quick summary of my approach for (manually) building templates for the distros I want to have available in my homelab.</p>
<p>General pro tip: Use the snapshot feature liberally while you’re building your reference images in case you mess up.</p>
</section>
<section id="arch" class="level1">
<h1>Arch</h1>
<p>I’m a big fan of Arch. My main bare metal server runs it, and it’s what I like to run for a personal OS as well, so having a good template for it would definitely be handy.</p>
<p>I basically did this in the last post, but the notes are pretty scattered so this will be a cleaned up version.</p>
<ul>
<li>Create the VM. Base it on the Ubuntu Jammy template, give it 4 cores, 4GB RAM and 10GB disk</li>
<li>Boot into the live environment and set the root password with <code>passwd</code>, check your IP with <code>ip address</code>
<ul>
<li>This is so you can do the rest of the install <a href="https://wiki.archlinux.org/title/Install_Arch_Linux_via_SSH">over ssh</a></li>
</ul></li>
<li>ssh in with <code>ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@ip.address.of.target</code></li>
<li>run <code>archinstall</code>
<ul>
<li>Pick <code>Canada</code>, <code>United States</code> and <code>Worldwide</code> for mirror selection</li>
<li>Leave locales at <code>en_US</code>, we’ll add Canada later and lots of packages seem to need that locale</li>
<li>Use a best effort default partition layout with <code>ext4</code> format</li>
<li>Pick <code>Limine</code> for the bootloader, why not?</li>
<li>Keep the hostname as <code>archlinux</code></li>
<li>Leave root password blank to disable root</li>
<li>Add a user, might as well make it my actual username, one less thing to change and I’m the only one using this template
<ul>
<li>Give them a password and sudo access</li>
</ul></li>
<li>Pick <code>minimal</code> for profile</li>
<li>Don’t add an audio server</li>
<li>Just the <code>linux</code> kernel, no hardened, zen, lts</li>
<li>Install the following additional packages: <code>vim openssh reflector git base-devel nfs-utils</code></li>
<li>Set network configuration “Use NetworkManager”</li>
<li>Update the time zone</li>
<li>Leave NTP on</li>
<li>Install</li>
<li>Don’t <code>chroot</code> in, just reboot</li>
</ul></li>
<li><code>sudo systemctl start sshd.service &amp;&amp; sudo systemctl enable sshd.service</code></li>
<li>ssh back in so you don’t have to use the XO portal anymore.</li>
<li><code>sudo reflector --latest 200 --protocol http,https --sort rate --save /etc/pacman.d/mirrorlist</code> (<a href="https://wiki.archlinux.org/title/Reflector">docs</a>)</li>
<li><code>sudo pacman -R reflector</code> maybe I’ll set it up on a timer but if I do it’ll be with ansible or something</li>
<li>Install yay: <code>git clone https://aur.archlinux.org/yay.git &amp;&amp; cd yay &amp;&amp; makepkg -si</code></li>
<li>Clean up <code>cd .. &amp;&amp; rm -rf yay</code></li>
<li>Install guest agent: <code>yay -S xe-guest-utilities-xcp-ng</code></li>
<li>Enable it <code>sudo systemctl enable xe-linux-distribution.service</code></li>
<li>Setup passwordless sudo <code>sudo EDITOR=vim visudo /etc/sudoers.d/00_ipreston</code>
<ul>
<li>Change the line to <code>ipreston ALL=(ALL:ALL) NOPASSWD: ALL</code></li>
</ul></li>
<li>Install cloud init: <code>yay -S cloud-init cloud-guest-utils</code></li>
<li>Set default user in cloud config, just change the default user line in <code>/etc/cloud/cloud.cfg</code></li>
<li>Add the post install host signing script to <code>/etc/ssh/sign_host.sh</code>. This won’t help anyone else but it’s useful for me</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/env bash</span></span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> /tmp/hostkeys</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mount</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> nfs laconia.ipreston.net:/volume1/keys /tmp/hostkeys</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /tmp/hostkeys/user_ca.pub /etc/ssh/user_ca.pub</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> root /etc/ssh/user_ca.pub</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /etc/ssh/user_ca.pub</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /tmp/hostkeys/host_ca /etc/ssh/host_ca</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> root /etc/ssh/host_ca</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /etc/ssh/host_ca</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /tmp/hostkeys/setup_host.sh /etc/ssh/setup_host.sh</span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">umount</span> /tmp/hostkeys</span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> /etc/ssh/setup_host.sh</span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> /etc/ssh/host_ca</span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> /etc/ssh/setup_host.sh</span></code></pre></div>
<ul>
<li><code>sudo chmod +x /etc/ssh/sign_host.sh</code></li>
<li>Get ready for cloud init:
<ul>
<li><code>sudo systemctl enable cloud-init.service</code></li>
<li><code>sudo systemctl enable cloud-final.service</code></li>
<li><code>sudo cloud-init clean</code></li>
<li><code>sudo poweroff</code></li>
</ul></li>
<li>Make a clone so you can go back to this one after you make the template</li>
<li>Rename the clone to be a template name</li>
<li>Turn it into a template</li>
<li>Make a cloud config:</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#cloud-config</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hostname</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runcmd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sudo /bin/bash /etc/ssh/sign_host.sh</span></span></code></pre></div>
<p>That’s it! Template should work.</p>
</section>
<section id="debian" class="level1">
<h1>Debian</h1>
<ul>
<li>Graphical install</li>
<li>Pick English</li>
<li>Update location</li>
<li>Default keyboard map</li>
<li>Keep hostname <code>debian</code></li>
<li>Set the domain name</li>
<li>Don’t set a root password</li>
<li>Create user name</li>
<li>Set password</li>
<li>Set time zone</li>
<li>Manual, make the whole disk one partition</li>
<li>Tell it not to worry about swap</li>
<li>Don’t scan extra installation media</li>
<li>Pick Canada for a mirror</li>
<li>Pick deb.debian.org</li>
<li>No proxy</li>
<li>participate in package usage or don’t, whatever</li>
<li>Uncheck desktop and GNOME, check SSH server and standard system utilities</li>
<li>Install GRUB</li>
<li>Reboot</li>
<li>Mount the guest utilities ISO</li>
<li><code>mkdir /tmp/xentools</code></li>
<li><code>sudo mount /dev/cdrom /tmp/xentools</code></li>
<li>Run <code>install.sh</code> under the <code>Linux folder</code> as root</li>
<li>Reboot</li>
<li><code>sudo apt install nfs-common</code></li>
<li><code>sudo apt install vim</code></li>
<li><code>sudo EDITOR=vim visudo /etc/sudoers</code>
<ul>
<li>change the <code>%sudo</code> line to have <code>NOPASSWD:ALL</code> at the end instead of just <code>ALL</code></li>
<li>logout and back in to apply</li>
</ul></li>
<li><code>sudo apt install cloud-init cloud-utils</code></li>
<li>Set default user in cloud config, just change the default user line in <code>/etc/cloud/cloud.cfg</code></li>
<li>Add the post install host signing script to <code>/etc/ssh/sign_host.sh</code>. This won’t help anyone else but it’s useful for me</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/env bash</span></span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> /tmp/hostkeys</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mount</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> nfs laconia.ipreston.net:/volume1/keys /tmp/hostkeys</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /tmp/hostkeys/user_ca.pub /etc/ssh/user_ca.pub</span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> root /etc/ssh/user_ca.pub</span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /etc/ssh/user_ca.pub</span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /tmp/hostkeys/host_ca /etc/ssh/host_ca</span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> root /etc/ssh/host_ca</span>
<span id="cb3-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 /etc/ssh/host_ca</span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> /tmp/hostkeys/setup_host.sh /etc/ssh/setup_host.sh</span>
<span id="cb3-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">umount</span> /tmp/hostkeys</span>
<span id="cb3-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> /etc/ssh/setup_host.sh</span>
<span id="cb3-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> /etc/ssh/host_ca</span>
<span id="cb3-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> /etc/ssh/setup_host.sh</span></code></pre></div>
<ul>
<li><code>sudo chmod +x /etc/ssh/sign_host.sh</code></li>
<li>Get ready for cloud init:
<ul>
<li><code>sudo systemctl enable cloud-init.service</code></li>
<li><code>sudo systemctl enable cloud-final.service</code></li>
<li><code>sudo cloud-init clean</code></li>
<li><code>sudo poweroff</code></li>
</ul></li>
<li>Make a clone so you can go back to this one after you make the template</li>
<li>Rename the clone to be a template name</li>
<li>Turn it into a template</li>
<li>Make a cloud config:</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#cloud-config</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hostname</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fqdn</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.ipreston.net</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">manage_etc_hosts</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runcmd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sudo /bin/bash /etc/ssh/sign_host.sh</span></span></code></pre></div>
<p>Note the extra lines about fqdn and etc_hosts from the arch one.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>That was a lot simpler than doing things with packer. Some of it was helped by what I learned from trying to get packer going, but still. I might update this post later with other templates as I need them, but for now I want to move on to actually provisioning and configuring some VMs.</p>


</section>

 ]]></description>
  <category>linux</category>
  <category>virtualization</category>
  <category>xcp-ng</category>
  <guid>https://blog.ianpreston.ca/posts/2023-12-11-xcp-templates.html</guid>
  <pubDate>Mon, 11 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>(Failing to build) Templates in Xen-Orchestra</title>
  <link>https://blog.ianpreston.ca/posts/2023-11-27-packer.html</link>
  <description><![CDATA[ 





<section id="up-front-warning" class="level1">
<h1>Up front warning</h1>
<p>After an absurd amount of hacking I did not find a good way to automate template creation. You can read this to follow my descent into madness and/or to see if I already tried and failed at the approach you were considering trying. Let this be a warning. I’ll make a subsequent post about how I ended up doing this.</p>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When I was <a href="../posts/2023-01-21-proxmox3.html">learning proxmox</a> earlier this year I considered using <a href="https://www.packer.io/">packer</a>. At the time it seemed like a lot of work, and I found some relatively simple scripts I could run to build templates for the operating systems I was interested in. Now I’m testing out <a href="../posts/2023-11-12-xcp-ng.html">xcp-ng</a> and I need to create template images again. In the future if I find myself wanting to deploy any of those images to another environment and I’ve figured out some xcp-ng specific way of doing things I’ll have to relearn again. At this point it’s starting to make more sense to bite the bullet and figure out packer. Plus, I’ve been writing a fair bit of terraform at work so the hashicorp language makes more sense to me. That should help with the learning curve. This post will document my learn by doing attempts to figure out packer. It’s definitely not a how-to guide, more a reference for myself in the future. That said, it might be helpful to others who are considering learning packer to see what they’re in for.</p>
</section>
<section id="installing-packer" class="level1">
<h1>Installing packer</h1>
<p>My initial instinct is to add packer to my IaC devcontainer. However, as a simple learning exercise I’ll probably be building some docker containers, and I don’t feel like troubleshooting whether the errors I’m getting are from packer or something specific to docker-in-docker. So for now I’ll just install it right into my WSL install of Ubuntu on my workstation.</p>
<p>The docs have a pretty easy install guide so that goes fine, except for the part where it was silently prompting me for my <code>sudo</code> password and I thought it froze.</p>
<p>Beyond that I can run <code>packer -v</code> to make sure it’s loaded and determine that I’m running version <code>1.9.4</code>. Cool, let’s build something</p>
</section>
<section id="getting-sidetracked-by-xoa" class="level1">
<h1>Getting sidetracked by XOA</h1>
<p>I kept reading about how Xen had pre-packaged templates and even a full blown kubernetes deployment available in Xen, but I couldn’t see it in my UI. After some <a href="https://xcp-ng.org/forum/topic/7957/question-about-using-hub-as-a-xo-built-from-sources">reading</a> I realized it wasn’t included in the source built version I was running. I can deploy XOA free edition and get the templates, but I’ll still want the source built version to handle my backups and other stuff that’s not included in free tier. A little hacky, but fair enough since I’m not giving them any money. After signing up for an account I got this cool web based deploy link where I pointed it at a host, put in my password (after accepting self-signed certs) and it auto deployed XOA onto the host.</p>
<p>Taking a look at the templates, my options were fairly limited, and the kubernetes auto deploy seemed interesting, but I don’t think I’m ready for that yet. It’s cool that it exists, and I think if I built a cluster again I’d bootstrap something like this instead of going the docker route I did (unless xcp-lite actually works in which case I won’t need either).</p>
<p>I did want to test restoring my metadata backups, but unfortunately that feature is pro tier so I couldn’t do it. I was able to manually export my config and load it into XOA and have all my hosts show up, so that was nice. For now I’ll shut this VM down and go back to doing things with packer.</p>
</section>
<section id="make-a-template-sr" class="level1">
<h1>Make a template SR</h1>
<p>One of the things I found annoying about proxmox was that even if my machines were clustered I had to create the same template on each machine. I think I can get around this with xcp, let’s find out. In my NFS share for XCP stuff I make a new folder called <code>templates</code>.</p>
<p>I then add that as a NFS SR for images on each node. It’s a little annoying that I have to replicate it, but I still think that’s better than worrying about pools at this point. I’ve been trying to use Chat-GPT to help with this sort of work and I asked if I could export SR configs across pools. It hallucinated that there was an export option, which sure would have been nice. Anyway, it’s only a few hosts and my browser remembers all the configs in the boxes so it only took a few minutes to set up all hosts.</p>
</section>
<section id="ubuntu-template" class="level1">
<h1>Ubuntu template</h1>
<p>The <a href="https://github.com/ddelnano/packer-plugin-xenserver">xenserver packer plugin repo</a> has an example section that builds Ubuntu 20.04. That’s a bit old for my taste at this point, but let’s try and get it working and then adapt to it and other OS installs later.</p>
<p>I initially wrote a script that exported my variables for username and passwords in the form <code>PKR_ENV_&lt;variable&gt;</code> but for whatever reason it didn’t seem to like that and claimed that I hadn’t set those variables. I modified the script to export to json instead and that seemed to work. Sort of, I got a new error after that:</p>
<p><code>The iso_checksum_type must be specified.</code></p>
<p>The ISO checksum seems like it should be coming from a data source that pulls it from a page maintained by Ubuntu with hashes for their ISOs. Everything looks ok, and if I hard code in the release version to the URL I can get to a page that shows hashes.</p>
<p>I’m not sure at this point if something is going wrong with my variable interpolation or I missed some other step. Adding <code>PACKER_LOG=1</code> in front of my build command got me a lot more verbose output, but nothing useful.</p>
<p>Running <code>packer inspect</code> instead of <code>packer build</code> showed me some outputs (ChatGPT hallucinated some other terrible ideas about how to get this stuff, I still have mixed feelings about working with it).</p>
<pre><code>local.ubuntu_sha256: "[\n  \"b8f31413336b9393ad5d8ef0282717b2ab19f007df2e9ed5196c13d8f9153c8b\",\n]"</code></pre>
<p>That output appears basically correct since the variable I’m applying it to looks like this <code>iso_checksum      = "sha256:${local.ubuntu_sha256.0}"</code>.</p>
<p>Ugggh, it’s an error in the examples. There’s now an <code>iso_checksum</code> and an <code>iso_checksum_type</code>. I should have looked more closely at the error message. Ok, modifying the spec to break those two parts up and we’re back in business. On to the next error:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">xenserver-iso.ubuntu-2004:</span> output will be in this color.</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Build</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xenserver-iso.ubuntu-2004'</span> errored after 5 milliseconds 434 microseconds: Post <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://xo.&lt;sensitive&gt;.net"</span>: dial tcp 192.168.10.10:443: connect: connection refused</span></code></pre></div>
<p>Oh, I’m not supposed to point this at my xen-orchestra, it’s supposed to go against an xcp-ng host. This is going to be confusing for a while, I’m pretty sure terraform goes against xo. I guess I’ll find out.</p>
<p>This time we get building, but it hangs on <code>Step: Wait for VM's IP to become known to us.</code> Bringing up the console on the machine in XO it’s hung on a prompt for autoinstall that’s expecting user input.</p>
<p>I tried running it again so I could see the console output and this time (after at least half an hour) it seemed to work.</p>
<p>Upon closer inspection it only shows up in one of my pools (we’ll try booting later) and I have a bunch of stuff in the root of my xcp-ng storage location on my NAS, whereas the templates were all supposed to be in a subfolder. Did I mess up my storage location? Hmmm, looks like I did, or it didn’t like my subfolder. Let’s delete this template and try again. Ahhh, yeah after you put in the subfolder when defining a SR path you have to hit the little search icon beside it or it doesn’t actually add the path. Probably there as a validation step but it sure tripped me up. I’ll make it on the local and one other host, I would still like them to share. Ahhh, ok. Each pool is making a UID subfolder, so they won’t be sharing templates unless I pool them. I can probably at least create them in one pool and then replicate them to my others. For how often I will want to create or update templates I probably don’t need to overengineer this. I could even use one host to build all my initial images and then migrate them, but that seems like a pain.</p>
<section id="get-stuck-on-templates" class="level2">
<h2 class="anchored" data-anchor-id="get-stuck-on-templates">Get stuck on templates</h2>
<p>There were a bunch of empty templates along with the provisioned machine I created that I didn’t think I needed, so I deleted them. Now when I try and install Ubuntu with packer it fails. Which is weird, I didn’t realize I was using them. So I either have to figure out how to get them back, or how to have packer build without them. I can always restore a backup of my config, I’ve been meaning to do that anyway, but let’s see if I can restore them some other way first. Allegedly there’s a way to export/import them, but I can’t see anything.</p>
</section>
<section id="get-stuck-on-metadata-restore-while-getting-stuck-on-templates" class="level2">
<h2 class="anchored" data-anchor-id="get-stuck-on-metadata-restore-while-getting-stuck-on-templates">Get stuck on metadata restore while getting stuck on templates</h2>
<p>Trying a restore…. I can’t seem to restore. This is why you test these things I guess. What’s going on here? Maybe it’s something about the pool metadata? I think I should have broken those into two tasks, since it’s asking me to do a pool restore at the same time. Nope that’s not it. Looking at the error it’s trying to find the backup in the wrong path. If I follow the mount point on my XO server I can see the backup file, but it’s trying to load it from a weird subdirectory.</p>
<p>The error is</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ENOENT:</span> no such file or directory, open <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/run/xo-server/mounts/3f885501-70f9-4219-8707-2a6515b0814e/opt/xo/xo-builds/xen-orchestra-202312021218/packages/xo-server/xo-config-backups/9a515773-8912-4677-9e37-9e187341ecb9/20231129T070000Z/data.json</span></span></code></pre></div>
<p>And the actual path is</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/run/xo-server/mounts/3f885501-70f9-4219-8707-2a6515b0814e/xo-config-backups/9a515773-8912-4677-9e37-9e187341ecb9/20231129T070000Z/data.json</span></span></code></pre></div>
<p>I’m not sure why it added all that other stuff in.</p>
<p>Just for kicks let’s head over to my XOA install. Backups are a premium feature so I turn on my trial version. The restore runs fine from there, so it is some issue with the source build. Now what do I want to do with this information? I mean, VM backup and restore worked. It’s not great that this doesn’t, but is it the end of the world? I did that manual backup restore to XOA and it worked ok. I wonder if I can reverse that to get this back in shape? If that works I’ll just have to remind myself to do manual xen-orchestra backups before I start messing with things. Or rely on actual VM backups instead.</p>
</section>
<section id="back-to-templates" class="level2">
<h2 class="anchored" data-anchor-id="back-to-templates">Back to templates</h2>
<p>Having fired up xen in the XOA appliance and the original docker container I was using I can no longer see templates on my hosts when I create a new VM anywhere. So that’s clearly not a xen-orchestra thing, but an xcp-ng thing. Still figuring all that out. That at least helps me figure out where to go for docs and possible solutions.</p>
<p>From reading it seems like I might just have to reinstall. I do want to test a reinstall eventually, but not right now.</p>
</section>
</section>
<section id="maybe-just-do-cloud-images" class="level1">
<h1>Maybe just do cloud images</h1>
<p>I’m starting to feel like packer is just not the tool for me. On proxmox I just used cloud images as a template and then applied some settings in the cloud-init config. XCP-ng has good support for cloud init (allegedly) and it looks like I can save template configs for it at the XO level, so that would be reproducible across hosts. Let’s give it a try. <a href="https://sysmansquad.com/2021/07/07/creating-an-ubuntu-20-04-cloud-template-cloud-init-configuration-in-xen-orchestra/">This blog</a> seems like a fairly straightforward example of what I want to do. Let’s give it a try.</p>
<p>Ok that worked great. I modified the cloud-init slightly and it installed the guest management utilities and everything. I think by just making a couple custom cloud-init configs I can have an easily built template system.</p>
</section>
<section id="try-doing-a-shared-sr-for-templates" class="level1">
<h1>Try doing a shared SR for templates</h1>
<p>When messing around with recreating SRs for the templates it kind of looked like I had the option to attach newly created SRs on hosts to the same path as existing ones I’d created. <a href="https://xcp-ng.org/forum/topic/5336/copy-template-between-hosts">This forum post</a> also makes it sound like I should be able to do that. Let’s give it a try.</p>
<p>To start I delete the old template SRs I created (after deleting the template I made) and clear them out from my NAS.</p>
<p>Next I create one on a single pool using the same config as before. Then I do the same on a second host. When I hit the search button on that folder the “storage usage” section fills in with an ID for the last one I created. I click the “Reattach SR” button, and get an error that it exists. So it doesn’t look like they can share. That’s ok. I can still create templates once and then copy them to any machines I want to provision them to. Not perfect but not terrible either.</p>
</section>
<section id="arch-template-failed-attempt" class="level1">
<h1>Arch template (failed attempt)</h1>
<p>The Ubuntu template was easy enough, and it’s handy to have an Ubuntu template available, but I generally prefer running Arch these days, so let’s build for that to start.</p>
<p>It doesn’t look like there is an OVA cloud image for Arch. There is a way to <a href="https://xcp-ng.org/docs/migratetoxcpng.html#from-kvm-libvirt">convert KVM</a> but it feels like it might be more work than just making my own template.</p>
<p>As I’m doing this I’m realizing something is messed up about my ISO SRs. They should all be pointing to my NAS, which has a debian and an Ubuntu image on it. But on two hosts I see only ubuntu and some packer stuff, on another there’s an Arch ISO. None of which match up with what’s actually happening on my NAS. Ahhh, again, I didn’t actually add the path properly so there’s some overlap going on. That’s sorted now and I can actually see just the ISOs I was expecting. Apparently sharing ISOs across SRs is ok.</p>
<p>I can’t seem to create a VM though, probably because I borked my templates. I can’t seem to add a network or a disk when I go to create a VM. Something in the template setting must handle that in a way I can’t see. I think it’s reinstall time.</p>
</section>
<section id="reinstall" class="level1">
<h1>Reinstall</h1>
<p>Let’s start with a host that’s not running XO. Not that I couldn’t get that back, but I’d rather not have to. The reinstall process is pretty straightforward. I didn’t have to re-enter any of my config, and the host came back up in its same pool, with all its SRs attached. I did need to apply patches again, but that’s to be expected. Once it came back up I could see all the default templates that came with the VM, and creating a new VM seemed to work better, I could see the network options and pick storage.</p>
<section id="migrate-templates" class="level2">
<h2 class="anchored" data-anchor-id="migrate-templates">Migrate templates</h2>
<p>Before I go further, let’s see if I can now migrate all these templates to my other hosts rather than reinstall. That didn’t seem to work, every copy got a <code>no opaque ref found</code> error. I think there must be something fancy about those.</p>
</section>
<section id="keep-reinstalling" class="level2">
<h2 class="anchored" data-anchor-id="keep-reinstalling">Keep reinstalling</h2>
<p>I was going to want to test this anyway, let’s do it now. I’ll bring down another node, this one with my XOA VM on it and to a reinstall there. Install went fine, the VM was still there and booted ok when it came back up. Nice! Ok, in theory I can bring down my last node running XO, reinstall, and power it back on without any migration. let’s test.</p>
<p>Came back up fine. That’s pretty nice.</p>
</section>
</section>
<section id="back-to-arch-installing" class="level1">
<h1>Back to arch installing</h1>
<p>Ok, now that templates are working again and I have my ISO SR sorted, let’s build an arch template. <a href="https://www.driftinginrecursion.com/post/arch_linux_guests_in_xcp-ng/">This blog</a> suggests it won’t be that hard, do a basic Arch install, install yay and xen guest utils. I’ll probably add cloud-init stuff too.</p>
<p>The basic install went ok, but package downloading was super slow. I’m not sure if that’s a driver issue or something with my mirrors. I’ll have to do some more testing before I make a template of it.</p>
<p>As a start let’s try installing and running <a href="https://wiki.archlinux.org/title/Reflector">reflector</a>. It’s probably a good practice to have that anyway. While I’m at it I’ll install <code>ssh</code> and <code>iperf3</code>. Being able to ssh in is definitely handy since it lets me paste commands. I still can’t seem to paste into the command console from xen-orchestra. Maybe I’ll look into that while reflector is running.</p>
</section>
<section id="get-distracted-trying-to-figure-out-how-to-paste-into-xen-orchestra-console" class="level1">
<h1>Get distracted trying to figure out how to paste into xen-orchestra console</h1>
<p><a href="https://xcp-ng.org/forum/topic/7848/copy-paste-not-working-from-xen-orchestra-community-edition-or-xcp-ng-center">Well this is discouraging</a></p>
<p>I did notice that there’s a little box above the console for copying, but it’s barely responsive when I type and doesn’t seem to let me paste. I guess the real solution is to set up SSH or a proper remote desktop ASAP.</p>
</section>
<section id="back-to-arch-installing-1" class="level1">
<h1>Back to arch installing</h1>
<section id="fix-slow-package-downloads" class="level2">
<h2 class="anchored" data-anchor-id="fix-slow-package-downloads">Fix slow package downloads</h2>
<p>So prior to running reflector I decided to try <code>iperf3</code>. Fortunately I’m pulling a solid gigabit between two machines on my network, so it’s not a weird driver thing, I probably just picked terrible mirrors in the installer. Let’s do reflector. Ok, after running reflector my package downloads are way faster. Might as well start and enable the systemd timer for it as well, I’d like that to happen somewhat regularly on all my installs.</p>
</section>
<section id="install-yay" class="level2">
<h2 class="anchored" data-anchor-id="install-yay">Install yay</h2>
<p><code>xen-guest-utilities</code> aren’t in the base package manager, but they are in the AUR. So to get them I’ll need an AUR helper. I’ve generally been happy with <a href="https://github.com/Jguer/yay">yay</a> and it’s still actively developed so why switch? I grabbed the pre-built binary from the releases section so I didn’t have to install a bunch of build tools onto my base template.</p>
</section>
<section id="install-guest-utilities" class="level2">
<h2 class="anchored" data-anchor-id="install-guest-utilities">Install guest utilities</h2>
<p>Looks like the package I want is called <code>xe-guest-utilities-xcp-ng</code>. Sounds right. I chose to remove the make dependencies after installation, since I’m trying to keep this install light. The install completed ok but XO didn’t detect it as having a management agent. When in doubt reboot. Nope. Ahh, here we go, in the notes from the AUR package someone is talking about an issue that’s preventing the <code>xe-linux-distribution.service</code> from starting. Once I start that service the management agent is detected and my IP shows up. Enable the service so it persists across reboots (realized I forgot to do that with ssh when I couldn’t get back in after a reboot.)</p>
</section>
<section id="install-cloud-init" class="level2">
<h2 class="anchored" data-anchor-id="install-cloud-init">Install cloud-init</h2>
<p>I think this is the last thing I want to install on this template. There are a few other things I basically always use, but to start at least I want this template to have just the absolute minimum of a VM so that I can customize it later. I’m even removing <code>iperf3</code>. I guess reflector is a bit of a cheat in that regard, but given how awful the mirrors I picked were maybe that’s ok. I install <code>cloud-init</code> and <code>cloud-guest-utils</code>. According to the <a href="https://wiki.archlinux.org/title/Cloud-init">wiki</a> I need the latter if I want my disk to resize, which I certainly do. Ok, both are installed. I think we’re ready to turn this into a template.</p>
</section>
<section id="make-a-template" class="level2">
<h2 class="anchored" data-anchor-id="make-a-template">Make a template</h2>
<p>Based on <a href="https://sysmansquad.com/2021/07/07/creating-an-ubuntu-20-04-cloud-template-cloud-init-configuration-in-xen-orchestra/">this post</a> I think all I have to do is run <code>cloud-init clean</code> and shutdown the VM before I turn it into a template. I wasn’t sure if I had to do that command as root or not, it didn’t fail on either so I ran both to be safe and then shut down. Back in XO I head over to the advanced tab for my VM and click “convert to template”. That appears to be done.</p>
</section>
<section id="try-building-from-the-template" class="level2">
<h2 class="anchored" data-anchor-id="try-building-from-the-template">Try building from the template</h2>
<p>If/when this works I’ll have to mess around with saving cloud init configs, but for now let’s just hack one together quickly. I go to create a new VM on the host that has my template (I’ll copy it to the others later if I’m happy with it). I pick the template from the list, give the VM the very creative name <code>archtest1</code>.</p>
<p>Here’s the dump of the user cloud config I tried. I left the network one alone:</p>
<pre><code>#cloud-config
hostname: {name}%
ssh_authorized_keys:
  - &lt;My public key spec&gt;
packages:
  - vim
users:
   - default
system_info:
   default_user:
     name: ipreston
     lock_passwd: true
     gecos: arch Cloud User
     groups: [wheel, adm]
     sudo: ["ALL=(ALL) NOPASSWD:ALL"]
     shell: /bin/bash</code></pre>
<p>I had to be careful to create the SR on the local disk for the host instead of my templates SR, which runs on my NAS, I’m sure that wouldn’t have been amazing for performance. I gave it a 20G disk so I could see if the expansion worked properly out of the box.</p>
<p>With that it was time to hit create and see how things went.</p>
<p>Well it started, so that’s great. But my password still worked, which it shouldn’t, and it pulled the exact same IP as the template, which suggests the MAC address hadn’t changed. That will be problematic in the future. Taking a closer look, my ssh key hasn’t been added, vim hasn’t been installed, and my partition hasn’t been expanded. I can see 20G of available space, but I’ve only still got the 10 allocated. No bueno.</p>
</section>
<section id="figure-out-why-the-template-didnt-really-template" class="level2">
<h2 class="anchored" data-anchor-id="figure-out-why-the-template-didnt-really-template">Figure out why the template didn’t really template</h2>
<p>At this point I’m getting dangerously close to going back to packer. Ok, re-reading the <a href="https://wiki.archlinux.org/title/Cloud-init">Arch wiki</a> maybe I was supposed to enable some of those services before shutting down? I can’t find any examples specific to Arch online but <a href="https://xen-orchestra.com/blog/centos-cloud-template-for-xenserver/">this blog</a> doesn’t show anything like that for CentOS. From a bit more careful reading of the Arch wiki it does look like I want <code>cloud-init.service</code> and <code>cloud-final.service</code> enabled. Let’s give that a shot.</p>
<p>I create a new VM from my “template” so I at least don’t have to redo all that work. I enable those services above, run <code>cloud-init clean</code> as my user and root again to be safe and poweroff. Back to the advanced tab on the management interface to create a template.</p>
<p>Ok, new VM based off this updated template. The create button spins for a while after I hit it. That’s either good because cloud-init is doing things upon creation like installing vim, or bad because something is screwed up and stuck in a boot loop. Let’s wait and find out.</p>
<p>Ok, it pulled the same IP address, but I also can’t login with my password, so maybe something happened? Let’s try to ssh in with my key. Oooh, I get a big warning that the remote host key has changed, that’s actually good! It might mean that other stuff is different. Let’s remove that old key and try again. Well I definitely can’t connect via password, but it’s also rejecting my key, so maybe something went wrong with my cloud config? Kind of hard to test if I can’t actually get into the host though. Weirdly this feels like progress. I’ll stop and remove this machine and try creating another one with the easier way of passing just my key in, maybe it was just something dumb about how I did the cloud config file. I’ll have to sort that out eventually, but one thing at a time.</p>
<p>While I’m messing around, let’s make a note of what MAC this machine is given for future attempts to compare against: <code>a6:81:06:16:c3:b5</code>.</p>
<p>Ok, still can’t get in with the key I added, so something else is wrong here.</p>
<p>Let’s create a new VM from the first template, I can’t make anything from the one I just tried since I can’t boot back into it. For reference it gets a MAC of <code>06:31:62:32:8b:59</code></p>
<p>From here I want to take a look at <code>/etc/cloud/cloud.cfg</code> to see if there’s stuff I should be adding to make it pick up my data sources or whatever else I want it to do.</p>
<p>Ok, looking in this file there’s no <a href="https://wiki.archlinux.org/title/Cloud-init#Configuring_data_sources">datasource_list</a> entry. Per the <a href="https://xen-orchestra.com/docs/advanced.html#requirements">XO docs</a> I need the <code>opencloud</code> type to send in my config. Let’s try adding an etry with that.</p>
<pre><code>datasource_list: [ NoCloud, ConfigDrive, OpenNebula, Azure, AltCloud, OVF, MAAS, GCE, OpenStack, CloudSigma, Ec2, CloudStack, None ]</code></pre>
<p>Ok, with that added I think I can enable those two services, run clean and shut down again. Back in the menu convert it to a template, and try to spin up a machine from it. Again I just give it my key for now and set the disk to 20G so we can make sure that works (assuming I can actually get in this time).</p>
<p>First good sign, this one has a new MAC (<code>5a:62:06:7d:c2:e3</code>) and the guest tools seem to be working. I think because I didn’t set a default name here the user should be <code>arch</code>, let’s try and ssh in with that. I’m in! My disk is the full 20G too, so that worked as well! Awesome!</p>
</section>
</section>
<section id="more-fun-with-templates" class="level1">
<h1>More fun with templates</h1>
<p>At this point I am tempted to skip ahead to doing terraform deploys and triggering ansible upon deployment and other fun stuff like that. Before I get too crazy though, let’s clean up and do a bit more testing of what I’ve done. After that I think it might be worth going back to packer and trying again. What I did for arch was pretty manual, and even though I should really only have to have done it that one time, I’d like to have it in code just to be safe, and to possibly extend it.</p>
<section id="cleanup" class="level2">
<h2 class="anchored" data-anchor-id="cleanup">Cleanup</h2>
<p>It’s important to tidy up after yourself before moving on to the next thing:</p>
<ul>
<li>Stop and delete the test VM created from the template.</li>
<li>Delete the broken Arch templates (the one that didn’t have cloud-init enabled and the one it was broken on)</li>
<li>Rename <code>archtemplate2</code> to something more appropriate.</li>
</ul>
</section>
<section id="try-on-different-hosts" class="level2">
<h2 class="anchored" data-anchor-id="try-on-different-hosts">Try on different hosts</h2>
<p>I could just create all my VMs on one host and then migrate them to their destination, but why? Let’s copy that template to another host and try provisioning there. The copy isn’t super fast, but it’s almost certainly faster than re-building the template a second time, even if I had automation around that.</p>
<p>While I’m at this, let’s try creating it with the cloud config I wrote up above this time. If I’ve got that right I should ssh as my usual username instead of <code>arch</code>, and I updated it slightly to install iperf3, since I added <code>vim</code> to the base image to edit the cloud config. There’s basically no machine I wouldn’t want vim on so I’m ok with that.</p>
<p>Ok, that didn’t work. Let’s try again with just the ssh key and I’ll figure out my cloud config later.</p>
<p>Doing it with just my basic ssh key passthrough worked fine. So there’s something weird about what I’m doing with my cloud config.</p>
</section>
<section id="figure-out-actual-cloud-init-config" class="level2">
<h2 class="anchored" data-anchor-id="figure-out-actual-cloud-init-config">Figure out actual cloud-init config</h2>
<p>To be honest I’m not sure how much I’m going to end up caring about this. I don’t really care about the default username, it would be slightly convenient to have it be <code>ipreston</code> instead of <code>arch</code> or whatever. If I really cared I could make a new template and set that as the default in <code>/etc/cloud/cloud.cfg</code> as well. I guess I might want to specify static IPs, although generally I prefer static assignment of DHCP leases. Maybe if I’m making some hosts that need a management network that they just talk on that I’m handling outside of my router. For package installation and other post install stuff, I think I’d generally rather go with ansible. Maybe there’s some one off things like signing my host keys with my CA that would fit there. Generally I think I just want to know how this works because it’s there and I don’t like not being able to understand it.</p>
<p>Rather than starting from the XO template, let’s try creating one based on what’s in the <a href="https://wiki.archlinux.org/title/Cloud-init#Archiso">Arch wiki</a>. From what I’ve read even though the cloud-init spec is supposed to be universal there’s a fair bit of bespoke stuff. I don’t know how valid that is, but this seems like a place to start from.</p>
<p>Ok, with that format I can set the default username and have it authorize my ssh key. If I’ve got that set up off the hop then I can do the rest with ansible. It might still be nicer to do some things with cloud-init, but I’ve got a template saved that I can use for at least arch that will get me a bare bones machine. That’s good enough for now.</p>
</section>
</section>
<section id="try-packer-again" class="level1">
<h1>Try packer again</h1>
<p>Now that I know I can create templates, and I’ve fixed having those default templates available to me, let’s see if I can build that Ubuntu template yet.</p>
<p>Way back near the beginning of this post I have was having flaky issues with completing the template build, that I then exacerbated by not specifying my SRs correctly and deleting the base templates that were required.</p>
<p>I’ve lost track of what exactly I was stuck on before, I think it was just that I broke a bunch of unrelated things after that last flaky attempt. Let’s just try running the packer install again and see what happens:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">xenserver-iso.ubuntu-2004:</span> Unable to get SR: Found more than one SR with the name <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'templates'</span>. The name must be unique</span></code></pre></div>
<p>I guess since they’re not actually shared I might as well name them accordingly.</p>
<p>After fixing that and waiting 22 minutes my build finished! It didn’t delete the VM it built, but I had that as a setting, and it does seem to have created a new template.</p>
<p>Let’s clean up and try creating a VM from that template. I remove the built VM, then start a new VM from the packer template. I’ll use the custom cloud config that worked on Arch, and give it a 15G disk to see if resizing worked. I think there’s going to be other stuff I need to do to get this working the way I want, but we can test at least the basics here. Well, good start, it booted. And the management agent was detected. It didn’t update the hostname as I’d have expected from my cloud config so that’s not a great sign. I can log in with the <code>testuser</code> username and <code>ubuntu</code> password that was hard coded into packer and should have been overwritten. So I guess the cloud-init part didn’t work at all. That’s kind of the whole point of having templates so that’s obviously disappointing.</p>
<p>Interestingly, the cloud-init service appears to be enabled, and the default cloud config should have made an ubuntu user with a disabled password. I wonder if that one works with my key? Or maybe my default user will. If it’s just a matter of disabling this test user that’s one thing. Nope, no luck with any of those. Just for kicks I check <code>/etc/passwd</code> and confirm that’s the only user that exists (besides the system ones).</p>
<p>Taking a closer look at <code>/etc/cloud/cloud.cfg</code> it doesn’t look like I have that <code>datasources_list</code> array that I needed in Arch to make things work. So presumably I need some way to add that line to the file as part of template creation.</p>
<p>From the VM I created from the template I run <code>cloud-id</code> as per <a href="https://cloudinit.readthedocs.io/en/latest/howto/identify_datasource.html">the docs</a> to confirm (or at least support the theory) that the issue is it’s not seeing my no-cloud config format. It just returns <code>none</code>.</p>
<p>From reading up a bit on <a href="https://developer.hashicorp.com/packer/docs/templates/hcl_templates/blocks/build/provisioner">provisioners</a> it looks like I should be able to add some steps to my build block to do the things I want.</p>
<p>There might be better ways than just calling shell commands though, let’s do a bit of reading and look into that first in the <a href="https://developer.hashicorp.com/packer/docs/provisioners">provisioners</a> docs.</p>
<p>From a quick read there’s basically file and shell provisioners. I think if I want to do fancier things the idea is to write a shell script and copy it into the build with the file provisioner and then run it with the shell provisioner. That seems reasonable to me.</p>
<p>Let’s just try a little provisioner block and see what happens:</p>
<pre class="hcl"><code>  provisioner "shell" {
    inline = [
      "echo provisioning all the things",
      "echo 'datasource_list: [ NoCloud, ConfigDrive, OpenNebula, Azure, AltCloud, OVF, MAAS, GCE, OpenStack, CloudSigma, Ec2, CloudStack, None ]' &gt;&gt; /etc/cloud/cloud.cfg",
    ]
  }</code></pre>
<p>It just dumps it to the end of the file, we’re not being fancy here, but let’s see if it even works.</p>
<pre><code>==&gt; xenserver-iso.ubuntu-2004: Provisioning with shell script: /tmp/packer-shell475973010
==&gt; xenserver-iso.ubuntu-2004: /tmp/script_510.sh: 3: cannot create /etc/cloud/cloud.cfg: Permission denied
    xenserver-iso.ubuntu-2004: provisioning all the things</code></pre>
<p>Maybe it’s as simple as needing to put <code>sudo</code> on it. Let’s give that a shot before trying anything super fancy. The feedback loop on this is real slow though so if that doesn’t work I’m going to have to figure out a smarter way to do things.</p>
<p>I’m back to having issues being prompted by the autoinstaller. I’ve put in the change in <a href="https://github.com/ddelnano/packer-plugin-xenserver/issues/47">this issue</a>, but that hasn’t sorted it. There’s also <a href="https://github.com/ddelnano/packer-plugin-xenserver/issues/26">this issue</a> let’s see if I can figure out what to do from it. Ok, it’s still failing arbitrarily. Also my <code>sudo</code> on the cloud config didn’t fix it. Probably because that user isn’t added to the sudo group. Back in my <code>user-data</code> file let’s add some late commands to add that user to sudo, and also just do the cloud config line addition there.</p>
<p>Ok, you can’t add the user to sudo with late commands because it doesn’t exist yet. Let’s at least see if my cloud config update worked. The template built at least. Let’s see if I can create a VM with my cloud config.</p>
<p>It creates but it doesn’t apply my cloud config.</p>
<p>That’s not great. I think I’ll probably create Ubuntu images from cloud templates anyway, so I’m not sure how much time I want to invest in this particular issue. I also noticed that the latest release of the packer plugin allows building templates off other templates, so I could extend cloud images if I had to if that worked.</p>
</section>
<section id="try-arch-with-packer" class="level1">
<h1>Try Arch with packer</h1>
<p>So I know how to build an Ubuntu image with packer (but it doesn’t have the settings I want) and I know how to build a template of Arch (but manually and without packer). Let’s see if I can combine that knowledge to build an Arch template with Packer. If I get that I’ll have pretty quick and repeatable ways of building templates for the main OSs I want templates of. I should be able to extend one or the other pattern to Debian as well. Let’s see how I can do with Arch. There’s not a ton of content for building Arch images with packer, but I did find <a href="https://github.com/elasticdog/packer-arch">this repo</a>. I’m not sure how closely I’m going to follow it since it’s a bunch of bash strung together. I think I’d like to try automating <a href="https://wiki.archlinux.org/title/Archinstall">archinstall</a> since that comes packaged with the installer now. If I can get my json together in the format it wants and copied onto the template machine it should be easy to do.</p>
<p>As a start I take the Ubuntu template and update it to point to Arch ISOs. I pick a random mirror in Canada for download. Normally I’d do torrents as they’re much faster, but I don’t feel like telling packer how to do torrents.</p>
<p>That’s going to take a while, so while it’s going let’s try and get a json template ready.</p>
<p>Ughh, my template installed version has no network connectivity. How am I even going to get the json out of it?</p>
</section>
<section id="give-it-a-shot-with-cloud-images" class="level1">
<h1>Give it a shot with cloud images</h1>
<p>While I was messing around with this, the <a href="https://github.com/ddelnano/packer-plugin-xenserver/releases/tag/v0.6.0">packer plugin</a> I’m using got a new release that claims to fix the XVA template builder. At least for Ubuntu this might mean that I can automate the building of cloud images to include guest-utils etc. For Arch I might still be hosed though, depends on if I can properly convert images to a raw format.</p>
<section id="xo-cli-problems" class="level2">
<h2 class="anchored" data-anchor-id="xo-cli-problems">XO-CLI problems</h2>
<p>To fully automate this there’s a few steps I have to do in advance outside of packer anyway, and honestly if I get them working I might be close enough that I just call it there. At this point I need node and some packages to <code>npm</code> install so we’re going to take a detour on a detour (on a…) and set up a devcontainer for this. Eventually if I get this going the way I like I’ll add it into my IaC devcontainer, but for now we’ll just do the basics. Packer install into the devcontainer goes ok. Figuring out the right way to get <code>npm</code> installed is always a bit of a pain, I just don’t use it enough to remember how I did it last time. Finally got <code>xo-cli</code> installed, but for the life of me I can’t figure out <code>xo-ova-upload</code>, which was going to be how I did the Ubuntu images. I guess we’ll try and be consistent on <code>qcow2</code> format images for everything.</p>
<p>After a lot of messing around with my dockerfile I have a devcontainer with <code>xo-cli</code>, <code>packer</code>, and <code>qemu-utils</code> installed.</p>
<p>First I download the qcow2 version of Ubuntu 20.04LTS, and then use <code>qemu-img</code> to convert it to <code>vhd</code> format.</p>
<p>I log into my XO vm with <code>xo-cli</code>, now I have to figure out how to import this VHD, attach it to a VM, and make it a template. Easy, right? Upon closer inspection the <code>xo-cli</code> does not have an option to import a disk.</p>
</section>
</section>
<section id="start-fresh" class="level1">
<h1>Start fresh</h1>
<p>Ok, we’re just going to solve this piece by piece, systematically. No more jumping around, we’re going to solve things one at a time (he said with great hubris before almost certainly heading down another rabbit hole). I’m going to focus on Ubuntu since I almost had that working before.</p>
<p>Do a re-run, it takes half an hour but finishes. Let’s make a machine.</p>
<p>We’re going to start with just the ssh key option for cloud config. As usual give it 20GB to make sure it’s resizing disks. Ok, it created but it’s still got the <code>testuser</code> user, the disk didn’t resize, and basically nothing about cloud init worked. Let’s see if I can upload the xva and do some post install stuff to fix that.</p>
<section id="first-hurdle-no-cloud-init" class="level2">
<h2 class="anchored" data-anchor-id="first-hurdle-no-cloud-init">First hurdle, no cloud-init</h2>
<p>Packer keeps an XVA of the image locally, so I upload that to XO. Ok, that becomes a template by default so I’m not sure if that’s what I want. Let’s make a new VM from it and try messing around there. Make a new VM, don’t bother adding cloud configs or resizing disk since we know it won’t work.</p>
<p>From within the booted machine I run <code>cloud-id</code> to figure out what cloud it thinks it’s in. I get back <code>none</code> where I want <code>NoCloud</code>. Taking a look at the <a href="https://canonical-cloud-init.readthedocs-hosted.com/en/latest/howto/identify_datasource.html">cloud-init docs</a> I run <code>sudo DEBUG_LEVEL=2 DI_LOG=stderr /usr/lib/cloud-init/ds-identify --force</code> to see what all I can see. There’s a data source list in there that includes <code>NoCloud</code> so I guess my idea from earlier that I had to force that into it somehow was a dead end anyway. The fact that it’s not detecting a cloud source at this stage might just be because I’m booting it as a regular VM though.</p>
</section>
<section id="try-manual" class="level2">
<h2 class="anchored" data-anchor-id="try-manual">Try manual</h2>
<p>At this point I am building a template, but it’s just not accepting cloud init configs, at least it doesn’t seem to be. Let’s try manually building an image and see if I can get it set up with cloud init, maybe that will give me some clues about doing it properly with packer.</p>
<p>I’ve already got the ISO uploaded to my storage repository thanks to packer, so I create a new VM with that ISO attached.</p>
<ul>
<li><p>select my language</p></li>
<li><p>have it update the installer</p></li>
<li><p>standard keyboard layout</p></li>
<li><p>pick just Ubuntu server without third party drivers</p></li>
<li><p>standard dhcp</p></li>
<li><p>no proxy</p></li>
<li><p>default mirror</p></li>
<li><p>custom storage layout, have to make sure the main partition is at the end so it can grow</p></li>
<li><p>just make one flat ext4 partition on the image</p></li>
<li><p>Make a user <code>testuser</code> and give them the password <code>ubuntu</code> (will have to make sure this gets wiped)</p></li>
<li><p>skip Ubuntu pro</p></li>
<li><p>Install ssh server, don’t import keys, allow password auth</p></li>
<li><p>No featured server snaps</p></li>
<li><p>Hit reboot</p></li>
<li><p>have trouble unmounting the CD so unmount it from XO and then reboot</p></li>
<li><p>reboot - cloud init ran, although there was no config</p></li>
<li><p><code>sudo apt update &amp;&amp; sudo apt upgrade -y</code></p></li>
<li><p><code>sudo apt install xe-guest-utilities -y</code> guest agent is detected on host and I can see network</p></li>
<li><p><code>sudo apt install cloud-initramfs-growroot -y</code> we’ll see if this works after template creation</p></li>
<li><p><code>systemctl status cloud-init</code> it’s running</p></li>
<li><p><code>sudo cloud-init clean</code> remove the cache, running without <code>sudo</code> fails</p></li>
<li><p><code>sudo poweroff</code></p></li>
<li><p>Back in XO convert to template</p></li>
<li><p>Create a new VM from the template, use my cloudconfig that I had working with Arch</p></li>
<li><p>Give it 15G of disk to see if it will grow</p></li>
</ul>
<p>It partially worked. It got a new hostname, and the disk grew, but the <code>testuser</code> user was still there. I could ssh in as the new user I made though with my ssh key. So that’s pretty good. Maybe there’s something I can add to the cloud config to remove the test user.</p>
<p>According to my friend ChatGPT, I can add this line to my cloud-init to clean it out:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runcmd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb10-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">userdel</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> -r</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> olduser</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span></code></pre></div>
<p>Feels like there should be a better way to do this, but let’s at least try it first. It works! Ok, that’s pretty neat. From a little more reading around it seems like the trick is to either delete that user or set their shell to <code>nologin</code> or something. I think deleting is fine for my purposes, as long as I’m consistent with that cloud config.</p>
</section>
<section id="run-packer-again" class="level2">
<h2 class="anchored" data-anchor-id="run-packer-again">Run packer again</h2>
<p>There’s really not a lot I’ve done differently (that I can tell) between my packer auto install and the manual one. Maybe running <code>cloud-init clean</code> was required? I could see packer not automagically doing that and it causing a problem. To do that properly I needed <code>sudo</code> so I have to try and modify my autoinstall block to give <code>testuser</code> passwordless sudo, and then put a shell block at the end of the provisionder to run <code>sudo cloud-init clean</code>. It’s worth a shot.</p>
<p>Got most of the way through but it didn’t like my <code>sudo</code> command. After some looking around I found another packer script that had <code>sudo -S -E bash</code> in it and that seemed to work so let’s give it another run with that. Nope, failed on the password prompt</p>
<p>Ok, I found <a href="https://github.com/shantanoo-desai/packer-ubuntu-server-uefi">this post</a> that has a slightly different setup. Let’s give it a shot. This is definitely getting ridiculous. I got the manual prompt during build this time for the first time in a while. I just typed it in from the console to continue, not sure if it’s something I changed or just a coincidence. It’s showed up and disappeared without any code changes before.</p>
<p>Well, something I did this time made it so that I couldn’t ssh in, which made the installer hang.</p>
</section>
</section>
<section id="give-up" class="level1">
<h1>Give up</h1>
<p>I’ve sunk so much time into this it’s ridiculous. I can just build a few templates, document what I did and be done with it. I guess I learned a bit about cloud-init so that’s good? Wow.</p>


</section>

 ]]></description>
  <category>linux</category>
  <category>virtualization</category>
  <category>packer</category>
  <category>xcp-ng</category>
  <guid>https://blog.ianpreston.ca/posts/2023-11-27-packer.html</guid>
  <pubDate>Mon, 27 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Databricks workspace config in terraform</title>
  <link>https://blog.ianpreston.ca/posts/2023-11-19-terraform-workspaceconf.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The <a href="https://www.databricks.com/blog/2022/11/02/announcing-security-analysis-tool-sat.html">Databricks Security Analysis Tool (SAT)</a> is a pretty handy tool developed by databricks to scan your workspaces and produce alerts where your configuration deviates from best practices. To remediate some of these issues you need to modify your workspace configuration. Some things can be done from the UI, others I believe require calling the API. In either case, it would be preferable to automate these configurations as part of workspace provisioning. The <a href="https://registry.terraform.io/providers/databricks/databricks/latest/docs/resources/workspace_conf">databricks_workspace_conf</a> resource in terraform can be used to accomplish this. Unfortunately, similar to the issue I documented trying to <a href="../posts/2023-11-18-terraform-cluster.html">configure cluster policies</a>, the docs are pretty limited and it’s difficult to figure out what the actual config changes should be. After some poking around and following a trail of forum posts to a random <a href="https://www.powershellgallery.com/packages/DatabricksPS/1.11.0.8/Content/Public%5CWorkspaceConfig.ps1">powershell script</a> that happened to document the settings I wanted, I was able to create a config that worked. I’ve reproduced it below as a reference to both myself and anyone else interested in remediating SAT issues with terraform.</p>
</section>
<section id="the-code" class="level1">
<h1>The code</h1>
<pre class="hcl"><code>resource "databricks_workspace_conf" "this" {
  custom_config = {
    "maxTokenLifetimeDays" : "180"
    "enableTokensConfig" : true
    "enableDeprecatedClusterNamedInitScripts" : false
    "enableDeprecatedGlobalInitScripts" : false
    "enforceUserIsolation" : true
    # set at account level, can't be done at workspace level
    # DO NOT UNCOMMENT OR OTHERWISE ADD THIS, IT WILL BREAK YOUR STATE
    # "enableWebTerminal" : true
    "enableNotebookTableClipboard" : false
    "enableResultsDownloading" : false
  }
}</code></pre>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>That’s it, I just spent a lot of time figuring out how to make that little block of code so I wanted to share it. Put something like the above in your workspace provisioning script and you’ll address the SAT issues that are related to your workspace config.</p>


</section>

 ]]></description>
  <category>databricks</category>
  <category>terraform</category>
  <guid>https://blog.ianpreston.ca/posts/2023-11-19-terraform-workspaceconf.html</guid>
  <pubDate>Sun, 19 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Databricks cluster policies in terraform</title>
  <link>https://blog.ianpreston.ca/posts/2023-11-18-terraform-cluster.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Recently I had to define some <a href="https://learn.microsoft.com/en-ca/azure/databricks/administration-guide/clusters/policies">databricks cluster policies</a> at work using <a href="https://registry.terraform.io/providers/databrickslabs/databricks/latest/docs/resources/cluster_policy">terraform</a>. I didn’t have super sophisticated requirements (at least I didn’t think so), but I still struggled to find sample code online that covered my requirements. This post is a brief write up on what I implemented and why, as well as some notes on potential improvements I might make later as my requirements get more detailed.</p>
</section>
<section id="creating-the-policies" class="level1">
<h1>Creating the policies</h1>
<p>All cluster policies are encoded in JSON, which we create from passing a collection of <code>map</code>s that we <code>merge</code> in terraform into the <code>jsonencode</code> method.</p>
<section id="runtimes" class="level2">
<h2 class="anchored" data-anchor-id="runtimes">Runtimes</h2>
<p>One of the first things we want our cluster policy to enforce is using a recent version of the Databricks Runtime (DBR). Depending on the environment we might further restrict this to LTS releases only. Using a series of <code>data</code> blocks I find all the relevant releases. Note that this will change as new releases come out, so we’ll want to schedule running this to ensure we’re always enforcing the latest runtimes. As an example, this block finds the latest LTS release that supports the ML runtime and has GPU drivers installed:</p>
<pre class="hcl"><code>data "databricks_spark_version" "latest_ml_gpu_lts" {
  latest            = true
  long_term_support = true
  ml                = true
  gpu               = true
}</code></pre>
<p>Another bonus on enforcing runtime policies is it provides an easier way to restrict GPU compute without having to find a list of instance types with GPUs. Since you can’t provision a runtime onto a VM with a GPU unless it includes GPU drivers we can limit access to GPU easily with this.</p>
<p>In terms of which runtimes are enabled I made the assumption that we would want consistency across policies in terms of enabled runtimes. That is, the code does not allow for you to enable GPUs on single node compute policies but disable them on multi node.</p>
<p>You’ll see a bit further down that offering multiple runtime limitations across policies within a workspace would be fairly straightforward but introduce a lot of boilerplate code, at least the way I’ve implemented it. Again, I don’t really see this being a requirement. Specific runtimes are enabled or disabled with the module booleans <code>lts_dbr</code>, <code>ml_dbr</code>, and <code>gpu_dbr</code>. So if <code>lts_dbr</code> is true then only LTS runtimes are enabled, if it’s false users are allowed to choose LTS or the most recent runtime. It’s similar for <code>ml_dbr</code> for ML runtimes and <code>gpu_dbr</code> for ML runtimes with GPU enabled (there is no non-ML GPU enabled runtime)</p>
<p>Setting the actual array of allowed runtimes feels kind of hacky, terraform doesn’t seem to support if else blocks, or other cleaner ways I could think of to do this:</p>
<pre class="hcl"><code>  no_lts_no_ml_no_gpu_arr = (!var.lts_dbr &amp;&amp; !var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_lts.id, data.databricks_spark_version.latest.id] : null
  lts_no_ml_no_gpu_arr    = (var.lts_dbr &amp;&amp; !var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_lts.id] : null
  lts_ml_no_gpu_arr       = (var.lts_dbr &amp;&amp; var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_ml_lts.id, data.databricks_spark_version.latest_lts.id] : null
  lts_ml_gpu_arr          = (var.lts_dbr &amp;&amp; var.ml_dbr &amp;&amp; var.gpu_dbr) ? [data.databricks_spark_version.latest_ml_lts.id, data.databricks_spark_version.latest_lts.id, data.databricks_spark_version.latest_ml_gpu_lts.id] : null
  no_lts_ml_no_gpu_arr    = (!var.lts_dbr &amp;&amp; var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_ml_lts.id, data.databricks_spark_version.latest_ml.id, data.databricks_spark_version.latest_lts.id, data.databricks_spark_version.latest.id, ] : null
  no_lts_ml_gpu_arr       = (!var.lts_dbr &amp;&amp; var.ml_dbr &amp;&amp; !var.gpu_dbr) ? [data.databricks_spark_version.latest_ml_lts.id, data.databricks_spark_version.latest_ml.id, data.databricks_spark_version.latest_lts.id, data.databricks_spark_version.latest.id, data.databricks_spark_version.latest_ml_gpu_lts.id, data.databricks_spark_version.latest_ml_gpu.id] : null
  fallback_spark_vers_arr = [data.databricks_spark_version.latest_lts.id]
  runtime_version = {
    "spark_version" : {
      "type" : "allowlist",
      "values" : coalesce(local.no_lts_no_ml_no_gpu_arr, local.lts_no_ml_no_gpu_arr, local.lts_ml_no_gpu_arr, local.no_lts_ml_no_gpu_arr, local.no_lts_ml_gpu_arr, local.fallback_spark_vers_arr),
      "defaultValue" : data.databricks_spark_version.latest_lts.id
    }
  }</code></pre>
<p>basically, whichever of those conditionals is true for the combination of runtime booleans that’s the list of runtimes that will be available to users of that policy. I put just the latest LTS runtime as a fallback just to handle errors, it shouldn’t really come up.</p>
<p>This is honestly more limiting than I’d strictly prefer for the non-LTS releases. As an example, if DBR 14.0 is the latest LTS runtime, and 14.2 is the latest overall runtime, I’d prefer users be able to provision 14.1 as well. To handle that though I think I’d have to do some array sorting and regex inference to find the position of the LTS release in the non-LTS array and return everything up to and including that index, and frankly I didn’t feel like writing that. Maybe I’ll be more motivated in the future.</p>
</section>
<section id="cost-management" class="level2">
<h2 class="anchored" data-anchor-id="cost-management">Cost management</h2>
<p>The next big thing we want to enforce is cost management. One approach would be setting careful limitations on combinations of instance types and number of workers, but databricks also offers a <code>max_dbu</code> parameter which just limits the compute cost. This doesn’t exactly translate to overall cost, as underlying VM costs are not factored in, but they tend to be very closely related to the DBU cost of the instance type, so the simplicity seemed like a worthwhile trade off. Again, I’m assuming that we don’t want to have too many different DBU limits within a given workspace, although I have allowed for interactive and job/DLT compute to have different thresholds. We probably generally want to limit the threshold for exploratory work below what we use to run scheduled jobs. Note that this does introduce a somewhat perverse incentive at the margins to run a larger instance with photon disabled, as enabling photon doubles your DBU cost for any given size of underlying compute.</p>
<p>This is accomplished by passing a line into the compute policy definition that looks something like this:</p>
<pre class="hcl"><code>    { "dbus_per_hour" : { "type" : "range", "maxValue" : var.max_dbu_job } },</code></pre>
</section>
<section id="single-of-multi-node" class="level2">
<h2 class="anchored" data-anchor-id="single-of-multi-node">Single of multi node</h2>
<p>For interactive clusters I’ve created both single node and multi node cluster policies. In theory we shouldn’t really care which a user selects, as long as they’re below their cost threshold, but for less sophisticated users it might reduce complexity to only allow single node clusters.</p>
<pre class="hcl"><code>  single_node = {
    "spark_conf.spark.databricks.cluster.profile" : {
      "type" : "fixed",
      "value" : "singleNode",
      "hidden" : true
    },
    "num_workers" : {
      "type" : "fixed",
      "value" : 0,
      "hidden" : true
    }
  }</code></pre>
<p>This can either be added to or left out of a policy definition to enforce single node</p>
</section>
<section id="auto-termination" class="level2">
<h2 class="anchored" data-anchor-id="auto-termination">Auto termination</h2>
<p>For all interactive policies (it’s not relevant to jobs or DLT) I enforce an auto termination of 10 minutes to minimize cluster idling. We could make that a variable if a need comes up, but I’d personally like to keep it low and consistent for now:</p>
<pre class="hcl"><code>  autotermination = {
    "autotermination_minutes" : {
      "type" : "fixed",
      "value" : 10
      # "hidden" : true
  } }</code></pre>
<p>I took off the <code>hidden</code> flag for now so users can see that it’s been auto set for them. We can remove that later to reduce the complexity of the cluster creation interface.</p>
<p>I have heard some feedback from ML users that it’s not reasonable to expect them to be sitting around ready to pounce on long running tasks when they’re prototyping so I’m going to end up modifying this to a range with a higher maximum value that we can configure for ML workspaces.</p>
</section>
<section id="tags" class="level2">
<h2 class="anchored" data-anchor-id="tags">Tags</h2>
<p>Finally, I added some tags, which right now don’t really do much since I don’t know what additional tags we want to add. A lot gets auto applied that might be sufficient, but I wanted to demonstrate the capability:</p>
<pre class="hcl"><code>  default_tags = {
    "custom_tags.lob" : {
      "type" : "fixed",
      "value" : "${var.lob_name}",
      "hidden" : true
    },
    "custom_tags.TEST" : {
      "type" : "fixed",
      "value" : "testfromterraform"
    }
  }</code></pre>
</section>
<section id="actual-cluster-policies" class="level2">
<h2 class="anchored" data-anchor-id="actual-cluster-policies">Actual cluster policies</h2>
<p>Putting it all together we can define cluster policies like so:</p>
<pre class="hcl"><code>resource "databricks_cluster_policy" "multi-node-personal" {
  count = var.create_multi_node_personal_policy ? 1 : 0
  name  = "Multi Node Personal Compute"
  definition = jsonencode(merge(
    { "dbus_per_hour" : { "type" : "range", "maxValue" : var.max_dbu_interactive } },
    local.runtime_version,
    local.autotermination,
    local.default_tags,
    local.photon
  ))
}</code></pre>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this post I demonstrated how to create a set of databricks cluster policies using a terraform module that can be applied to your workspaces. Nothing particularly earth shattering, and I’m not sure whether to be pleased or horrified with that giant block I wrote to produce the acceptable runtime list, but it works and it at least adds some more example code that others can build off.</p>


</section>

 ]]></description>
  <category>databricks</category>
  <category>terraform</category>
  <guid>https://blog.ianpreston.ca/posts/2023-11-18-terraform-cluster.html</guid>
  <pubDate>Sat, 18 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Checking out XCP-NG</title>
  <link>https://blog.ianpreston.ca/posts/2023-11-12-xcp-ng.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I have enjoyed learning proxmox, and haven’t run into any deal breakers with it, but I also like to see if the grass is greener. After watching some videos from <a href="https://www.youtube.com/watch?v=xB22GKGJkHY">Tom at Lawrence Systems</a> I decided xcp-ng might be more to my liking. This post will document what I did to get it set up and my thoughts on using it.</p>
</section>
<section id="initial-installation-experience" class="level1">
<h1>Initial installation experience</h1>
<p>I did not get off to the best start, as shortly after booting the most recent stable release (8.2 at the time of this writing) I found myself looking at a blank screen and unable to proceed. After a bit of searching I found <a href="https://forums.lawrencesystems.com/t/xcp-ng-installer-fails-to-run/15197">this post</a> which led me to try the 8.3 beta release, which fixed my issue. I can see how that sort of thing would scare someone off, but I decided to press on. With the 8.3 installer I was able to get through the install process, which was quite straightforward. One thing I liked off the hop vs Proxmox was the option to use DHCP rather than static IPs. I prefer to handle IP assignment in pfsense with static leases, as that makes it easier to associate hosts with a DNS entry, persists IPs across reinstalls, and makes all my address information centrally accessible.</p>
</section>
<section id="first-experience" class="level1">
<h1>First experience</h1>
<p>Once the machine booted up I was in a pretty basic looking <a href="https://en.wikipedia.org/wiki/Text-based_user_interface">TUI</a>. In some ways that’s nicer than proxmox, which just drops you into a root prompt with a note to go to the web UI. It did allow some basic admin and provided system info. I didn’t really try to do any of the admin from the terminal, since I know that’s not the approach I really want to take. I know ultimately I’m going to want <a href="https://xen-orchestra.com/#!/xo-home">Xen Orchestra</a> but just for kicks I decided to open up the IP of my machine in a browser. This brought me to a <a href="https://xen-orchestra.com/blog/xen-orchestra-lite/">XO-lite</a> page. It looked sharp, but after a bit of digging around almost all of the functionality just took me to an “Under Construction” page. I assume this is something to do with me running a beta version of XCP-NG. Now I find myself in a bit of a chicken and egg situation. To really configure XCP-NG I want to host a Xen Orchestra server somewhere. The optimal place for it is a VM on XCP-NG, but I can’t figure out how to install VMs without Xen-Orchestra.</p>
<p>It looks like I can launch a docker container of XO, so let’s try that until I can bootstrap a proper server. Obviously not a reliable long term solution, but I grabbed the compose spec from <a href="https://hub.docker.com/r/ronivay/xen-orchestra">here</a> and spun it up on my workstation. That loaded pretty easily and from there I was able to log in with the default credentials the container creates and add a host. Initially there was an issue adding the host but after I allowed it to use a self-signed cert the connection went smoothly.</p>
</section>
<section id="adding-a-vm" class="level1">
<h1>Adding a VM</h1>
<p>Getting meta again, let’s try loading a debian VM that I can load XO onto. Eventually if I decide to stick with this I’ll rebuild it with templates and other fun stuff but for now we’re mostly just testing out the system. The first thing I have to do is get a Debian ISO (most of the guides seem to do XO on Debian and I’m comfortable with that distro so why not?) onto the system. Per <a href="https://xcp-ng.org/docs/storage.html#storage-types">the docs</a> I first need to create an ISO SR (Storage Repository). Eventually I’ll want this to be an NFS share on my NAS, but while I’m just messing around let’s do a local one. I have to create a path on the local storage to contain the ISOs, and as near as I can tell there’s no way to do that from the XO UI. So I ssh into the host and <code>mkdir /isos</code>. Not the most creative name, but whatever. Back at the XO UI I hit “New” on the sidebar, then storage and fill in a local ISO storage setup for the directory I just made (it won’t auto create the directory if it doesn’t exist, I checked). Having created this SR now I have to get an ISO into it. It’s not super intuitive how to do that, but following <a href="https://xcp-ng.org/blog/2022/05/05/how-to-create-a-local-iso-repository-in-xcp-ng/">this post</a> I got it figured out. It does let me load ISOs directly from a URL which saves me downloading to my workstation only to immediately upload to XO, so that’s nice.</p>
<p>With that I think I’m ready to add a VM. On the sidebar I click “New” and then “VM”. I choose Debian 12 as my template (this isn’t a full VM template, it just auto populates some settings). I give it 4 cores, the max this machine has, and 4GB of RAM, which is the minimum advised to run XO. I pick the ISO from the SR I just created for the boot medium. For network interfaces I put it on the pool wide network, at some point in the future I’ll mess around with different network interfaces too, but this is fine for now.</p>
<p>Ahh, oops, I’ve hit another snag. I haven’t created a SR for disks. I think I could just make another folder like I did for the ISO, but this is seeming like an increasingly bad idea. From the terminal in the host I can see it’s made a root partition on my internal NVME drive of 18GB for XCP-NG itself, plus another few small ones like a 4GB logs partition. This leaves me with a 435GB unmounted partition on my NVME drive, plus my SSD. What’s the appropriate way to use the rest of this NVME storage for VMs? From looking at the docs it seems like I can just specify a partition and it will set it up for me. From running <code>lsblk</code> on the host when I was figuring out my storage availability I know the partition name. Let’s try it. Ok, I got an error.</p>
<section id="figuring-out-how-to-add-vm-storage" class="level2">
<h2 class="anchored" data-anchor-id="figuring-out-how-to-add-vm-storage">Figuring out how to add VM storage</h2>
<p>The error that I see in the log is <code>SR_BACKEND_FAILURE_77(, Logical Volume group creation failed, )</code> The first result takes me to a <a href="https://www.reddit.com/r/XenServer/comments/d1nd4c/xcpng_sr_backend_failure_77/">reddit thread</a> that suggests this is an issue because I’d previously used this drive for zfs, which I had when it was running proxmox. Again from the terminal and following <a href="https://linuxconfig.org/wipefs-linux-command-tutorial-with-examples">this guide</a> <code>wipefs /dev/nvme0n1*</code> does return some <code>zfs_member</code> tags.</p>
<p>After a little messing around I did a couple runs of <code>wipefs -o &lt;offset of ZFS tag&gt; /dev/&lt;device or partition of device&gt; -f</code> to get rid of the tags, I ran the command with the <code>-n</code> flag first to make sure it was removing the right tag.</p>
<p>After doing that I got the same error. There’s either more tags I need to remove (the original post just dropped everything, I tried to be more surgical), or I need a reboot. Let’s try the reboot first. Reboot didn’t fix it. Let’s try the full wipe on both the device and its partitions. If that breaks something I’ll do a reinstall anyway, not like I’ve put much on this box at this point. That worked! <code>wipefs -a -f /dev/nvme0n1</code> and <code>wipefs -a -f /dev/nvme01p3</code> allowed me to create a SR for VM images. Well on my way now. <strong>DON’T ACTUALLY JUST DO THIS, SEE BELOW</strong></p>
</section>
<section id="back-to-adding-a-vm" class="level2">
<h2 class="anchored" data-anchor-id="back-to-adding-a-vm">Back to adding a VM</h2>
<p>The rest of the setup is pretty straightforward. I’m able to give the VM a disk in the storage location. There’s a bunch of advanced features that I’m skipping for now, but will definitely have to come back to at some point for future builds.</p>
<p>After that the machine auto started and I was able to walk through the graphical installer from the “Console” tab on the VM. I saw some things in the docs about setting up VNC for a better full screen experience, but that’s definitely a step for a later date as well.</p>
<p>The installation completed and at the end I had a running Debian install.</p>
</section>
<section id="have-to-reinstall" class="level2">
<h2 class="anchored" data-anchor-id="have-to-reinstall">Have to reinstall</h2>
<p>After I got the Debian VM set up I figured this was a good time to update the XCP-NG host to a static lease and give it a reboot. Unfortunately in doing that I discovered that my <code>wipefs</code> exploits had removed the boot flags from my drive as well. I’m sure there would be some clever way to carefully stitch those labels back on but I really don’t feel like it. Reinstall XCP-NG, add it back to the XO that’s still running in a container on my workstation. Interestingly my local VM storage repository showed up on a fresh install, albeit without any disks. Maybe that’s how it’s supposed to work by default if you don’t have any flags on your extra partition that blocks it. I recreate the ISO SR but just put it in <code>/media/</code> this time since that’s what the docs suggest and I don’t have to create a new folder. Still have to make some shared folders on my NAS to support this better eventually. I really don’t like how you add ISOs. I want to be able to add it from the SR page but instead I have to go to “Import” on the sidebar. I’m sure I’ll figure that out eventually but right now I find it quite unintuitive. After getting that going it’s relatively quick to get the VM reinstalled. Let’s try this again.</p>
</section>
<section id="management-tools" class="level2">
<h2 class="anchored" data-anchor-id="management-tools">Management tools</h2>
<p>Maybe not the obvious place to start, but I really like it when VM info is integrated into my UI. Looking at this machine I see “Management agent not detected”. For Ubuntu according to <a href="https://xcp-ng.org/docs/guests.html#linux">the docs</a> I’d install <code>xe-guest-utilities</code>, but I can’t find that in debian. Looking a little further down the docs I see how to mount and install from the guest utilities ISO that comes with my setup. That seems to work fine. After a reboot I can see all my information.</p>
</section>
<section id="paste-to-console" class="level2">
<h2 class="anchored" data-anchor-id="paste-to-console">Paste to console</h2>
<p>As little as I’m planning to use the virtual console in the web ui, I really do want to figure out how to paste into it. <code>ctrl+c</code>, <code>ctrl+shift+ins</code> etc do not seem to be working, nor is just right clicking for paste. From <a href="https://xcp-ng.org/forum/topic/5538/please-add-a-paste-option-into-the-console-in-xoa">this post</a> it’s not likely to be fixed in this version. From a look at the roadmap it’s in development (XO 6 that is) but I don’t see a release date and there’s nothing available for preview. I’ll stick with it for now. I think that was also the case for dark mode.</p>
</section>
</section>
<section id="xen-orchestra-in-an-actual-vm" class="level1">
<h1>Xen Orchestra in an actual VM</h1>
<p>From the guides I’ve seen, the best way to do this is run the script in <a href="https://github.com/ronivay/XenOrchestraInstallerUpdater">this repo</a>. As discussed in the previous section, I can’t paste that URL into the web console. By default I can only ssh into this VM as my user account (root is disabled) and sudo isn’t installed, which is a bummer. From <a href="https://wiki.debian.org/sudo">the debian wiki</a> it looks like their preferred pattern is to run <code>su --login</code> to become root. I guess that’s fine too. At least I can paste into my terminal now that I’m not just in the web console.</p>
<p>Following the instructions: I clone the repository, copy the <code>sample.xo-install.cfg</code> to <code>xo-install.cfg</code>, realize I don’t have <code>vim</code> installed, install <code>vim</code> and then edit my newly copied config. Reading through it I don’t see anything I want to change. There’s some stuff for certificate generation that I might want to deal with at some point, but not right now. By default it seems to install all possible plugins, I don’t see why I’d want to limit myself right now. Let’s give this a go. The script ran for a bit, but failed somewhere around the build/install step. The output points me to a log file so let’s see if I can figure out what went wrong.</p>
<section id="check-the-log-file-for-issues" class="level2">
<h2 class="anchored" data-anchor-id="check-the-log-file-for-issues">Check the log file for issues</h2>
<p>Checking the logs it looks like a URL issue:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">An</span> unexpected error occurred: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://registry.yarnpkg.com/css-parse/-/css-parse-2.0.0.tgz: Request failed </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">502 Bad Gateway</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span></code></pre></div>
<p>I seem to be able to download that fine from my workstation, I wonder if it was just an intermittent failure? Let’s give it one more run before we get too heavy into troubleshooting:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">WARNING:</span> free disk space in /opt seems to be less than 1GB. Install/update will most likely fail</span></code></pre></div>
<p>Did I just not make a big enough virtual disk for this? Let’s take a look. Oh yeah, root is almost entirely full. I didn’t really look at the default partition sizing but it gave almost all the disk to <code>/home</code> and left basically nothing. Do I want to resize or just reinstall? From a bit of reading I can’t resize active volumes, so I guess we’re doing a reinstall. What a fun learning experience! This is why I like having OS templates and automation for everything.</p>
</section>
<section id="have-to-reinstall-1" class="level2">
<h2 class="anchored" data-anchor-id="have-to-reinstall-1">Have to reinstall</h2>
<p>At least I have the presence of mind to manually give this new VM the same MAC as my old one so the static lease for it will persist. I’m only going to give it 10GB this time, but I’m going to be a lot more sensible about my allocation of storage, basically just one giant partition. After the reinstall I mount the guest utils ISO, reinstall guest utils and reboot. Reinstall <code>git</code> and <code>vim</code>. Clone the repo, copy over the template file, don’t bother editing it since I didn’t have to last time. Run the installer. This time it worked, must have just been a disk space problem last time.</p>
</section>
<section id="test-it-out" class="level2">
<h2 class="anchored" data-anchor-id="test-it-out">Test it out</h2>
<p>After a reboot I head to the address of my VM and there it is! I have to re-add my host but that works easily enough and now I can see my VM that’s running the orchestration server I’m looking at it through. How meta.</p>
</section>
</section>
<section id="figure-out-how-to-move-this-machine-back-to-my-rack" class="level1">
<h1>Figure out how to move this machine back to my rack</h1>
<p>I’ve had this node sitting on my desk while I set it up, but now I want it back in my rack. I don’t think I can tell XO to shut down the host until the VMs running it are off, but one of the VMs running on it is XO. Good thing I still have that container version up I guess. From the container XO I shut down the VM XO and then the host. After moving it down to my rack I’m able to wake it with WOL from my router (I could have just hit the button but wanted to make sure I still had that working). From the container XO I see the host come back up, but the VM doesn’t. Looking at the settings I didn’t have it set to auto start. Update the settings to auto power on, but it looks like that maybe only applies when the host itself restarts, manually start it for now. Ok, I’m back up and running XO from my VM on my XCP-NG box!</p>
</section>
<section id="add-a-couple-more-hosts" class="level1">
<h1>Add a couple more hosts</h1>
<p>One hypervisor is cool, but a lot of what I’m going to want to test is going to require at least one more host. Given that I have 3 machines set aside for dev, and I just broke the proxmox cluster that was running on the other two by installing XCP-NG on this host without removing it from the cluster I might as well set up 3 nodes.</p>
<p>There wasn’t much to this runthrough. I was smart and updated my static leases first, and I also hopped into a live boot environment and wiped the partition table on my drives before installing xcp-ng.</p>
</section>
<section id="test-things-with-a-vm" class="level1">
<h1>Test things with a VM</h1>
<p>There are lots of features of this hypervisor I’d like to try out, but there are very few of them I can realistically do without at least one VM to experiment on. I could do it with the XO VM I just created, but that seems excessively risky.</p>
<p>One minor thing I’m going to test out first before I create this VM is setting up a remote storage repository (SR). I’ve created an NFS share on my NAS called xcp, and created an ISO subfolder under that. For each host I want to load ISOs I’m going to have to add that as a SR. For now I’ll only do one. After adding an NFS ISO type SR to my host pointing to the <code>iso</code> folder in that share that had a couple images uploaded to it, I was able to start up an Arch live boot environment and install Arch in a VM. Easy!</p>
<section id="host-migration" class="level2">
<h2 class="anchored" data-anchor-id="host-migration">Host migration</h2>
<p>I don’t want to set up any of my hosts into a pool. I technically could with quite a few of my machines as they’re all the same gen of HP Prodesk. But I’ve got one newer gen Intel and will be adding an AMD machine in a bit. Anything I test I want to at least theoretically work across these hosts, so doing it without pools is more representative.</p>
<p>Once my VM was booted up I made a “hello world” test text file in the home directory and hit the migrate button. I was able to choose the storage and network on the remote host, even though it was on another pool. Over on the tasks tab I could see the migration happening. It took a few minutes since it had to move the whole disk plus RAM over and I only have a gigabit connection at home, but after that time I could see the same VM running exactly as it had been on the new host, so that’s pretty slick!</p>
</section>
<section id="backups-and-snapshots" class="level2">
<h2 class="anchored" data-anchor-id="backups-and-snapshots">Backups and snapshots</h2>
<p>Arguably even more important than migration is a good backup and restore experience. To test this I need to create a “remote” in XO, which is fortunately not associated with a particular pool, so I only have to create it once. On the same shared NFS folder as I put the ISOs I make another for backups. On the XO sidebar I head to settings then Remotes. From there I just need to put in the server and path info and I’ve got a remote created. It even does a little speed test that shows I can write at about 100 MiB/s and read at 1.59 GiB/s. The write seems plausible since it’s a spinning disk setup, the read seems high though. At least I’m connected.</p>
<p>Initially my first thought was to make a backup of my VM, but when I got there I noticed I could set up backups for XO config and my pool metadata. Since I’m actually doing stuff there too I decided to schedule a daily backup of that first.</p>
<p>After that it’s back to doing some backups of the VM itself. I decided to give it a tag <code>test</code> so that I could use <a href="https://xen-orchestra.com/docs/backups.html#smart-backup">smart backup</a> for my configs. It’s overkill when I’m only doing one VM but I want to get in the habit.</p>
<p>As a start I’ll test a snapshot creation. This isn’t a backup since it does it to the same storage that the VM is running on, but it’s still nice to have for rollbacks, so I’d like to learn how it works. I create a snapshot for just the test VM I’m working on and run it. I can see the successful run in the list of backups. Heading over to local storage for the host that’s running my VM I can see the snapshot as well. Next up I need to make a change on my VM and then try rolling back to the snapshot. Heading over to the VM console I create a <code>postsnapshot.txt</code> file and put in some text. Still on the VM page but over at the snapshot tab I hit revert. It prompts me to create a snapshot before I do the revert, which is handy so I accept that. It looks like I can also manually create snapshots from this tab, which is nice. I’m not sure I actually need scheduled snapshots, or if it’s more something I’ll take before I do a tricky operation on a host. Back at the console I’m at the login prompt, since I didn’t do a snapshot with RAM. That’s fine. Logging in I can see my <code>postsnapshot.txt</code> file isn’t there. Let’s revert to the previous one. Again I’m at the login prompt, and when I log back in <code>postsnapshot.txt</code> is there as expected. It’s worth noting that each of these snapshots appear to be full copies, not just deltas of other snapshots. That makes sense, but it something to be aware of, as I could pretty quickly fill up a disk with snapshots if I’m not careful. Let’s delete these two and the associated backup job and try actual backups. One nice little note here is that from the VM page I can connect to the associated backup, that’s a nice little UX feature.</p>
<p>Now let’s try the more traditional backup. I’m going to do <a href="https://xen-orchestra.com/docs/incremental_backups.html">delta backups</a> so that I don’t have to store full snapshots for every backup I want. We still won’t do any scheduling yet, but it looks straightforward to do. I pick my remote as the location for the backup and hit save. Saving seems to take a while so I assume this is triggering a full backup immediately. I’ll just wait a bit to see what happens. Upon completion I’m back at the backup screen. I actually tried to just edit the existing “backup” I’d made of the snapshot job and when I look at the “modes” on the created backup it looks like it’s doing both now. That’s not what I want, let’s see how I can remove the snapshot feature. Ahhh, from the UI it’s hard to tell but clicking on each type of backup enables it and brings up its settings. Snapshots don’t really have settings so it’s not obvious from the window that you’ve enabled them. Let’s save again with snapshots disabled. This again takes a little while, which is a bit surprising, since I’d expect the backup to have been completed already. Looking at the backup page the backup shows as successful, but maybe that’s of the old snapshot type. When I do this for real I’m going to have to be more careful about making new backup jobs and separating them appropriately. Now that I’ve run a backup with the new setting it says by the status that it transferred 2.43GB. That seems realistic for the compressed size of my VM. Let’s make a change and run another backup. Following the pattern from the snapshot I add a <code>postdelta1.txt</code> and save the file. Heading over to the backups page I can see a new job running. After completion it says it transferred 2.43GB as well, which doesn’t seem right. Looking at the job run of the second backup there’s a warning about an “unused VHD”. Heading to that path on my NAS I can see a similarly named vhd file with an incrementally higher file name. The job mentions <code>20231119T190652Z.vhd</code> and the file name in the NAS is <code>20231119T190951Z.vhd</code>. Let’s try running one more backup and seeing if we get a delta this time, I’ll add one more file to be safe. This one is successful and transfers only 16MB. That’s a lot more than the size of the text file I created, but still very small in the scheme of things. Looking in the NAS folder I still only have one <code>.vhd</code> file, but it’s been modified at the time of the most recent backup. I guess I didn’t set a retention? I think to do retention I have to set some schedules. I suppose that makes sense. Let’s try and restore this backup. For the easiest option, that might not work since I still have the machine running I just head to “restore” under the backup sidebar in XO. When it comes to restore I can restore to any storage I have available, so presumably I could restore to a different host, but just to start let’s try restoring to the same host as the original machine. According to the run the restore was successful. Back in my VM list I still only see one copy of the test VM, so presumably it was overwritten. Let’s bring up the console and have a look. It appears to still be running and I see both the <code>postdelta</code> files I created. That’s odd. Ahh, I had my VM filter set to running (which it does by default). If I clear that filter I have my running VM as well as a halted VM named <code>archtest (20231119T191644Z)</code> which must be my restored copy. Let’s destroy the running one and start this one up. I stop and remove the old VM, I note that in addition to the fun name the new one also gets a “restored from backup” tag, which is interesting. This restored copy also has my second post delta text file, but I think that’s because I forgot to create a new one after running that extra delta backup, so that’s probably to be expected. Let’s stop and remove this machine and try restoring to a different host. Ok, with no running VMs I head back to the restore page, pick the same restore point to do, but point it to a different local storage on a different host than where I was originally running the VM. This time I tell it to start the VM on restore since I don’t have any alternative VMs for it to contend with. I’m up and running just fine on the new host now. In this case these hosts have the same CPU type and everything, so I don’t know if a cross environment restore would be more difficult, but the basic restore works just fine. Nice! There’s obviously a lot more to do in backups, but this is good for now.</p>
</section>
</section>
<section id="alerting" class="level1">
<h1>Alerting</h1>
<p>It’s all well and good to have your backups running, but if they fail for whatever reason I want to know about it. On the backup config page there was a status reporting option, for either all or failure notifications, but I need to configure where to send those reports.</p>
<p>We’ll go basic for now with email alerting. In the plugin settings there’s a <code>transport-email</code> plugin that’s installed but disabled by default. Enabling it gives me a “plugin not configured” error, so I guess I have to configure it first then enable it, which is a little counterintuitive, but whatever. In the config I plug in my settings for the GMX email I use for stuff like this (getting proper auth for my gmail is way too big a hassle). and send a test email.</p>
<p>After spinning for a while the test icon comes back, but I don’t see an email. After double checking my spam folder I guess I have to do some troubleshooting. Logging into my GMX account I see a notification that my SMTP settings have been disabled due to inactivity. I suppose I should find a more reliable email provider at some point, but for now maybe I’ll just send myself emails on successful backups to keep things active.</p>
<p>After enabling the setting in my account I get a plugin success message, although I don’t see an email in my inbox. Slightly suspicious. Ok, this time it was marked as spam. That’s fair. GMX emails are sketchy and I’m changing my outbound name to “XO admin”. I’ve marked the email as not spam, let’s send another test. That one worked.</p>
<p>Let’s try running a backup with an email alert set and make sure that all goes ok. In the backup settings I see that <code>backup-reports</code> must be enabled as well as <code>transport-email</code>. The settings under <code>backup-reports</code> are a little weird. Under the config there’s a <code>mails</code> section and a little checkbox by something called “Fill information (optional)”. Once I check that I can add entries for emails to send alerts to, so that’s reasonable, just not the greatest naming. I can also specify report recipients in the backup setting, so maybe I didn’t have to add them in the plugin setting. Odd. The other thing that’s happened is my backup task is no longer pointing at anything, since I recreated my VM from a backup. Another good reason to use smart mode and tags. Having fixed that, added my email, and telling the job to report “Always” I run another backup. And I get an email! Neat.</p>
</section>
<section id="cleanup" class="level1">
<h1>Cleanup</h1>
<p>Let’s make sure I can get rid of this experimental stuff before moving on. Removing the backup job is easy, but I assume that doesn’t automatically delete the backups I’ve created with it. Right, over in the “Restore” tab of the backups section I can see my backups and delete them. For each backup I can select all the iterations to delete, so I just choose all of them. Looking in my NAS I have some empty directories, which is fine, but also one file that’s still there. Maybe that’s the snapshot I still have? I thought that was local to the host, but let’s delete it and see what happens. Hmmm, nope, that file is still there. Well that’s good that my understanding of snapshots is correct, bad that I’ve got this orphan snapshot file sitting on my NAS. I’m just going to manually delete it and assume it was something weird with backing up a backed up image or something.</p>
</section>
<section id="next-steps" class="level1">
<h1>Next steps</h1>
<p>This covered the basics of working with XCP-NG and Xen Orchestra. To do everything I want I still need to look into</p>
<ul>
<li>VM Template creation. Probably going to bite the bullet and learn <a href="https://developer.hashicorp.com/packer">packer</a>
<ul>
<li>Cloud init templates and applying them to VM templates. Looks straightforward, I just don’t have templates yet.</li>
</ul></li>
<li><a href="https://docs.xcp-ng.org/compute/">Hardware passthrough</a> for GPUs and SSDs</li>
<li>Automation of shutdowns when on UPS power <a href="https://voice1.me/automated-shutdown-xenserver-7-x-with-network-ups-tool/">something like this</a></li>
<li><a href="https://xcp-ng.org/docs/guests.html#all-vms">VNC</a> not that I plan to use it much, but it would be cool to have</li>
<li>Actually run some workloads</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This post covered my first look at installing and using <a href="https://xcp-ng.org/">XCP-ng</a> and <a href="https://xen-orchestra.com/#!/">Xen Orchestra</a> to manage VMs across a few hosts.</p>
<p>The configuration and initial setup was definitely more complex than my experience with <a href="https://www.proxmox.com/en/">proxmox</a>, but separating the management interface from the hypervisor, and the much more robust backup experience make me feel like this is a better solution for the work that I want to do. In future posts I’ll work through the next steps I described to really get this setup running the way I want.</p>


</section>

 ]]></description>
  <category>linux</category>
  <category>virtualization</category>
  <category>xcp-ng</category>
  <guid>https://blog.ianpreston.ca/posts/2023-11-12-xcp-ng.html</guid>
  <pubDate>Sun, 12 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Automating my network</title>
  <link>https://blog.ianpreston.ca/posts/2023-07-06-network-automation.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In a <a href="../posts/2023-04-08-managed-switch.html">previous post</a> I set up a managed switch in my network, but I did it all manually through the menus. Realistically that’s fine, I don’t have a super big or complicated network and I don’t move things around enough to justify the investment in learning how to automate it in terms of time savings. But I like automating things, so let’s see what I can figure out.</p>
</section>
<section id="what-id-have-liked-to-do" class="level1">
<h1>What I’d have liked to do</h1>
<p>Ideally I would handle this through Ansible, since that’s what I use to do most of the rest of my home automation. Unfortunately, my switch is not one of the supported devices in Ansible’s networking stack as near as I can tell. The next best thing would have been to use <a href="https://napalm.readthedocs.io/en/latest/">NAPALM</a> for python based automation, but that’s also not supported. So I have to go one level down the stack and use <a href="https://pypi.org/project/netmiko/">netmiko</a>. Let’s see how that goes.</p>
</section>
<section id="connecting-to-the-switch" class="level1">
<h1>Connecting to the switch</h1>
<p>In the previous post I connected using the serial console and then telnet. For netmiko to work I will need SSH. This does not appear to be enabled by default. After checking the manual it looks like enabling this is a command line only operation. From the initial login I’m in the manager level interface and my prompt looks like this: <code>ProCurve Switch 2810-48G#</code> I need to get from there to the Global configuration level by running <code>config</code> so it looks like this <code>ProCurve Switch 2810-48G(config)#</code> and then run <code>crypto key generate ssh</code> to create a host key on the switch, <code>ip ssh</code> to enable ssh, and then <code>show ip ssh</code> to confirm that it worked.</p>
<p>After this I’ll try and connect to the switch and find that it’s got too old a key exchange method to work by default:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Unable</span> to negotiate with 192.168.10.2 port 22: no matching key exchange method found. Their offer: diffie-hellman-group1</span></code></pre></div>
<p>After finding a bunch of other out of date security protocols that my ssh client didn’t support by default (probably a good reason to not have this switch in the enterprise anymore) I was able to get it working with the following ssh config:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Host</span> switch</span>
<span id="cb2-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">User</span> admin</span>
<span id="cb2-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">HostName</span> 192.168.10.2</span>
<span id="cb2-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">KexAlgorithms</span> +diffie-hellman-group1-sha1</span>
<span id="cb2-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PubkeyAcceptedAlgorithms</span> +ssh-rsa</span>
<span id="cb2-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">HostkeyAlgorithms</span> +ssh-rsa</span>
<span id="cb2-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Ciphers</span> +3des-cbc</span></code></pre></div>
<p>With that set I can now ssh into my switch. Let’s try and actually do something with netmiko.</p>
<p>The baby connection test script that I used looks like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> netmiko</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> getpass <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> getpass</span>
<span id="cb3-3"></span>
<span id="cb3-4">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ip"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.10.2"</span>,</span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"device_type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hp_procurve"</span>,</span>
<span id="cb3-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"admin"</span>,</span>
<span id="cb3-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password"</span>: getpass(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter password for the switch:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb3-9">}</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> netmiko.ConnectHandler(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>device) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> connection:</span>
<span id="cb3-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(connection)</span></code></pre></div>
<p>which does print out a signature for a connection object. I don’t have any actual info on the switch itself, but it appears to be working as I was getting a connection error before I configured ssh properly.</p>
<p>We can do something a little more interesting that also validates the connection by modifying the last two lines to:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> netmiko.ConnectHandler(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>device) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> conn:</span>
<span id="cb4-2">    sys_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_command(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show system-information"</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sys_info)</span></code></pre></div>
<p>This indeed prints out the system info, so the connection is working.</p>
</section>
<section id="figuring-out-the-commands-i-need" class="level1">
<h1>Figuring out the commands I need</h1>
<p>Last time I worked on this I just did everything with the menu because I was lazy. If I’m going to automate things I will need to use the CLI, so let’s identify the commands I need and what their outputs look like.</p>
<ul>
<li><code>show vlan</code> will list all my VLANs</li>
<li><code>show vlan &lt;vlan#&gt;</code> will list a specific VLAN as well as any ports that do tagged or untagged traffic for that VLAN</li>
<li><code>show mac-address [&lt;port&gt;]</code> show mac addresses seen by the switch, optionally specify for a particular port. Returns them in format <code>######-######</code></li>
</ul>
</section>
<section id="see-if-i-can-do-some-parsing-on-those-before-i-do-actual-change-based-operations" class="level1">
<h1>See if I can do some parsing on those before I do actual change based operations</h1>
<p>So far I haven’t identified the commands necessary to actually modify my setup, but let’s see if I can do some easy parsing on these to begin with.</p>
<p>I’ll try <code>show vlan</code> to start. With a little bit of string parsing I can get a nice looking output:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_vlans(conn) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]]:</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get VLAN info.</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns a list of dictionaries with keys for</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    vlan_num, vlan_name and vlan_status, all as strings.</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-7">    base_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_command(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show vlan"</span>)</span>
<span id="cb5-8">    output_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> base_output.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> line.strip()]</span>
<span id="cb5-9">    vlan_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.split() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> output_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> re.match(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\d+\ "</span>, line)]</span>
<span id="cb5-10">    vlan_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-11">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vlan_num"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vlan_name"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vlan_status"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]}</span>
<span id="cb5-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vlan_list</span>
<span id="cb5-13">    ]</span>
<span id="cb5-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> vlan_dict</span></code></pre></div>
<p>Which returns something like:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">[</span>
<span id="cb6-2">  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_num'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEFAULT_VLAN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_status'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Port-based'</span>},</span>
<span id="cb6-3">  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_num'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'15'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TRUST'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_status'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Port-based'</span>},</span>
<span id="cb6-4">  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_num'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'30'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Guest'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_status'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Port-based'</span>},</span>
<span id="cb6-5">  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_num'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'40'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LAB'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vlan_status'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Port-based'</span>}</span>
<span id="cb6-6">]</span></code></pre></div>
<p>I can probably do something for showing a particular VLAN:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_vlan_ports(conn, vlan_num):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get the ports associated with a vlan and their tagged or default status."""</span></span>
<span id="cb7-3">    base_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_command(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"show vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-4">    output_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> base_output.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> line.strip()]</span>
<span id="cb7-5">    vlan_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.split() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> output_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> re.match(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\d+\ "</span>, line)]</span>
<span id="cb7-6">    vlan_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"port"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state"</span>: line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vlan_list]</span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> vlan_dict</span></code></pre></div>
<p>Which gets me something like:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'port'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tagged'</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'port'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'7'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tagged'</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'port'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'15'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Untagged'</span>}]</span></code></pre></div>
<p>For the MAC address I’m going to make a little helper function to do some string formatting first, as the formatting for MAC addresses from the switch is different than what I see in most other places. I want to be able to just copy paste from anywhere and have them comparable. This is a one liner: <code>re.sub("[^0-9]", "", mac)</code> in a function that takes <code>mac</code> as an argument. After that we have a similar pattern except in this case I’m going to return a dictionary where each key is a MAC address and each value is its associated port:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_mac_ports(conn):</span>
<span id="cb9-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get MAC addresses seen by the switch and their ports."""</span></span>
<span id="cb9-3">    base_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_command(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show mac-address"</span>)</span>
<span id="cb9-4">    output_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> base_output.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> line.strip()]</span>
<span id="cb9-5">    mac_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-6">        line.split() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> output_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> re.match(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"[\da-fA-F]</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{6}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, line)</span>
<span id="cb9-7">    ]</span>
<span id="cb9-8">    mac_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {mac_parser(line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]): line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mac_list}</span>
<span id="cb9-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> mac_dict</span></code></pre></div>
<p>With this if I have a dictionary with keys being the MAC addresses of my devices and values being the names of those devices, I can find what devices are on what ports in an automated way (if they’re on, the switch only shows current connections).</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> map_devices_to_ports(conn):</span>
<span id="cb10-2">    mac_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_mac_ports(conn)</span>
<span id="cb10-3">    home_ports <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {v: mac_dict.get(k) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> home_macs.items()}</span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> home_ports</span></code></pre></div>
<p>So one last thing in terms of info gathering. I’d like to know the state in terms of VLAN settings for all of my ports, plus the device associated with them if I have that:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> vlan_status(conn):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get the VLAN assignment of each port, along with a name if you can."""</span></span>
<span id="cb11-3">    vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_vlans(conn)</span>
<span id="cb11-4">    vlan_nums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vlan_num"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vlans]</span>
<span id="cb11-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vlan_desc = {x["vlan_num"]: f'{x["vlan_num"]}_{x["vlan_name"]}' for x in vlans}</span></span>
<span id="cb11-6">    all_ports <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb11-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(port): {k: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> vlan_nums} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> port <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span>)</span>
<span id="cb11-8">    }</span>
<span id="cb11-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign names to ports I know</span></span>
<span id="cb11-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> map_devices_to_ports(conn).items():</span>
<span id="cb11-11">        all_ports[v][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k</span>
<span id="cb11-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Associate VLAN tags</span></span>
<span id="cb11-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vlan_nums:</span>
<span id="cb11-14">        port_dicts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_vlan_ports(conn, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(vlan))</span>
<span id="cb11-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> port_dict <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> port_dicts:</span>
<span id="cb11-16">            port <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> port_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"port"</span>]</span>
<span id="cb11-17">            state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> port_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state"</span>]</span>
<span id="cb11-18">            all_ports[port][vlan] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state</span>
<span id="cb11-19"></span>
<span id="cb11-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> all_ports</span></code></pre></div>
<p>I had to do a few hacky things because I haven’t thought through my data structures very well, but I’m ok with this, it does the trick. Now for every port I get a name if I know the device as well as the status of ever VLAN in terms of “tagged”, “untagged” or an empty string for not applied. I start at port 3 because I have the first two trunked to my router and I don’t expect to have to change them and because they’re trunk ports I can’t just show ports 1 and 2.</p>
</section>
<section id="do-actual-modifications-to-the-switch-config" class="level1">
<h1>Do actual modifications to the switch config</h1>
<p>Let’s experiment with configuring an actual port the way I want it. The way the commands work in the HP console is operations are performed on VLANs based on ports, so something like <code>vlan 30 tagged 1-5</code> would allow traffic tagged with VLAN 30 on ports 1-5. I think of things more in terms of how I want ports to behave, so my preferred syntax would be something like <code>port 5 v30 tagged v15 untagged</code> to set port 5 to accept tagged traffic on VLAN 30 and mark untagged traffic as being on VLAN 15. There’s probably clever ways to bundle together my current state and desired state and only execute the commands necessary to reconcile them, but let’s do some building block stuff and figure out how to just change a particular VLAN assignment on a particular port to start.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_port_vlan_state(conn, port: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, vlan: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, state: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb12-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Set VLAN state on a port."""</span></span>
<span id="cb12-3">    command <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb12-4">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.send_config_set(command)</span>
<span id="cb12-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
<p>This “works” but doesn’t account for a lot of edge cases. For one thing, I can only enable VLANs as either tagged or untagged with this. If I want to disable them I need to add a flag that will add a “no” to the command. However, if I do that, I also need to ensure I’m not ending up in an invalid state, as I have to have at least one VLAN enabled either tagged or untagged on any given port. I think based on this it might make more sense to try and do a comprehensive remapping rather than individual steps.</p>
<p>To start I’ll make a constant at the top of the script called <code>DESIRED_STATE</code> in the same format as the output of <code>vlan_status</code>. This should make it easier to reconcile and also lets me copy paste the output of <code>vlan_status</code> to do the initial population.</p>
<p>Let’s write a little helper function to do basic validation on this <code>DESIRED_STATE</code>. I won’t be able to catch everything that could be wrong here, especially not just misconfiguration, but I can get the basics:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> validate_desired_state():</span>
<span id="cb13-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Make sure my desired state will actually work."""</span></span>
<span id="cb13-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We'll catch VLANs actually existing later, just make sure we're consistent</span></span>
<span id="cb13-4">    reference_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(DESIRED_LAYOUT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span>].keys())</span>
<span id="cb13-5">    correct_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Untagged"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tagged"</span>}</span>
<span id="cb13-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> DESIRED_LAYOUT.items():</span>
<span id="cb13-7">        states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(pv <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pk, pv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> v.items() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>)</span>
<span id="cb13-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> correct_states:</span>
<span id="cb13-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(</span>
<span id="cb13-10">                <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unknown VLAN status on port </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> correct_states<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb13-11">            )</span>
<span id="cb13-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(v.keys()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> reference_keys:</span>
<span id="cb13-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Keys for port </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> don't match port 3"</span>)</span>
<span id="cb13-14">        untagged_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> v.values() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Untagged"</span>])</span>
<span id="cb13-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> untagged_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb13-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Port </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> has more than one VLAN set to untagged"</span>)</span>
<span id="cb13-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> untagged_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb13-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Port </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> has no VLAN specified for untagged"</span>)</span></code></pre></div>
<p>Now we can do something to compare the current state and the desired state, and return any ports that don’t reconcile:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_vlan_status(current_state: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb14-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Is the current state the same as the desired state?"""</span></span>
<span id="cb14-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check names first</span></span>
<span id="cb14-4">    mismatch_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb14-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> current_state.keys():</span>
<span id="cb14-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (</span>
<span id="cb14-7">            current_state[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> DESIRED_LAYOUT[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>]</span>
<span id="cb14-8">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Allow for devices to just be turned off</span></span>
<span id="cb14-9">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> current_state[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb14-10">        ):</span>
<span id="cb14-11">            mismatch_names[</span>
<span id="cb14-12">                k</span>
<span id="cb14-13">            ] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Current Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>current_state[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Desired Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DESIRED_LAYOUT[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb14-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mismatch_names:</span>
<span id="cb14-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Names don't match on some ports"</span>)</span>
<span id="cb14-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mismatch_names.items():</span>
<span id="cb14-17">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Port: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Port name mismatch"</span>)</span>
<span id="cb14-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure we're working with the same VLANs</span></span>
<span id="cb14-20">    desired_vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-21">        key</span>
<span id="cb14-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vlans <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> DESIRED_LAYOUT.values()</span>
<span id="cb14-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vlans.keys()</span>
<span id="cb14-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span></span>
<span id="cb14-25">    }</span>
<span id="cb14-26">    current_vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-27">        key <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vlans <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> current_state.values() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vlans.keys() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span></span>
<span id="cb14-28">    }</span>
<span id="cb14-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> desired_vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> current_vlans:</span>
<span id="cb14-30">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb14-31">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"VLANs don't match. Current state: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>current_vlans<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Desired: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>desired_vlans<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb14-32">        )</span>
<span id="cb14-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VLAN selection mismatch"</span>)</span>
<span id="cb14-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If names are all good check ports</span></span>
<span id="cb14-35">    mismatched_ports <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb14-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> DESIRED_LAYOUT.items():</span>
<span id="cb14-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> current_vlans:</span>
<span id="cb14-38">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> DESIRED_LAYOUT[k][vlan] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> current_state[k][vlan]:</span>
<span id="cb14-39">                mismatched_ports[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DESIRED_LAYOUT[k]</span>
<span id="cb14-40">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb14-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> mismatched_ports</span></code></pre></div>
<p>We do a little more runtime checking to make sure that devices I think are in a particular port aren’t showing up elsewhere. Note that I want to be able to run this with some devices powered down, as I may want to only bring them up after reconfiguring their ports, so I allow for the name identified in the current state to be an empty string. Then we make sure I have the right VLANs in my desired state, so I haven’t created or deleted any from my current state that I think I should have. If all that goes well I go through each port and if I find a mismatch in VLAN config I add the desired state to a <code>mismatched_ports</code> dictionary that I can pass into some reconcilliation function later.</p>
<p>While doing some testing for this I got my switch into a weird state where I got intermitent errors running the script, even on functions that had worked fine before. I gave the switch a reboot to see if I could clear things up and that seemed to work, but it does add to how sketchy this whole setup feels. This is probably going to get filed under “learning activity” rather than “thing I use to manage my environment”. We’ll see though.</p>
<p>I did get a function that would update the configuration of a port to match what I want from a desired state dictionary:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_port_vlan_state(conn, port: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, state: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb15-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Set VLAN state on a port."""</span></span>
<span id="cb15-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get rid of the name key</span></span>
<span id="cb15-4">    state.pop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb15-5">    vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(state.keys())</span>
<span id="cb15-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Should only be one untagged VLAN and we validate that elsewhere.</span></span>
<span id="cb15-7">    untagged_vlan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> state.items() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Untagged"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb15-8">    tagged_vlan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> state.items() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tagged"</span>]</span>
<span id="cb15-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the untagged VLAN first so we definitely don't end up orphaned.</span></span>
<span id="cb15-10">    commands <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb15-11">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>untagged_vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> untagged </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb15-12">    ]</span>
<span id="cb15-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn off untagged explicitly for all other VLANs</span></span>
<span id="cb15-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> {untagged_vlan}:</span>
<span id="cb15-15">        commands.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"no vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> untagged </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set tagged vlans</span></span>
<span id="cb15-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tagged_vlan:</span>
<span id="cb15-18">        commands.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> tagged </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn off tags on other VLANs</span></span>
<span id="cb15-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vlan <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vlans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(t <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tagged_vlan):</span>
<span id="cb15-21">        commands.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"no vlan </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vlan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> tagged </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now save the desired config</span></span>
<span id="cb15-23">    commands.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"write memory"</span>)</span>
<span id="cb15-24">    conn.send_config_set(commands)</span></code></pre></div>
<p>I still run into hanging the connection to the switch from time to time with it, but maybe that’s not as big a deal given how infrequently I’ll actually be doing this outside of developing the script. The last thing I have to do is put that together with the list of unreconciled ports that I created into one big function:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reconcile(conn):</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Bring the current state of the switch in line with the desired state."""</span></span>
<span id="cb16-3">    validate_desired_state()</span>
<span id="cb16-4">    current_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vlan_status(conn)</span>
<span id="cb16-5">    mismatches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> check_vlan_status(current_state)</span>
<span id="cb16-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mismatches:</span>
<span id="cb16-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> port, state <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mismatches.items():</span>
<span id="cb16-8">            set_port_vlan_state(conn, port, state)</span></code></pre></div>
<p>And that appears to work!</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I’m pretty sure this is not what most people are talking about when they say “software defined networking”, and there were many hacky parts to the setup. On the other hand, it’s slightly easier for me to modify my switch setup in the future, I learned a bit more about managing my switch, and I got to practice my python. Overall I’d call that a win.</p>


</section>

 ]]></description>
  <category>networking</category>
  <guid>https://blog.ianpreston.ca/posts/2023-07-06-network-automation.html</guid>
  <pubDate>Thu, 06 Jul 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Configuring autofs for CIFS mounts with ansible</title>
  <link>https://blog.ianpreston.ca/posts/2023-06-04-ansible-autofs.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This guide shows how to set up user isolated mounts of CIFS (samba) network shares on a shared linux VM. Each user will get folders under <code>/mnt/&lt;user&gt;</code> that they authenticate to using kerberos. In this document I’m assuming that users are members of a group and that each group all should have access to the same shares. We’ll further assume you’ve got a fact set in your playbook that maps each user to their corresponding group. If you need guidance on that you can see <a href="../posts/2023-06-04-ansible-ad-users.html">this post</a>.</p>
<p>This is a nice way of attaching file shares because it ensures users don’t need elevated privileges to access file shares (although an administrator has to configure it for them) and that creating a share for one user doesn’t inadvertently expose it to others. For a fully user level way of attaching file shares you can use <a href="https://man.archlinux.org/man/gio.1">gio</a> but I found it extremely flaky and annoying to use, so if you can handle having an administrator configure the share mount points for users I would recommend this approach.</p>
</section>
<section id="variable-format" class="level1">
<h1>Variable format</h1>
<p>Somewhere in your playbook (in my case I set it in the variables folder of the role I was using, but putting in as a host variable or somewhere else may be more appropriate for your use case) we need a variable for each group that contains a list of associated shares. Something like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">example_group1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local_share_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> share1</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">full_share_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//fileshare.example.com/share1"</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local_share_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> share2</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">full_share_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//fileshare.example.com/share2"</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">example_group2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local_share_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> share3</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">full_share_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//fileshare.example.com/share3"</span></span></code></pre></div>
</section>
<section id="basic-setup" class="level1">
<h1>Basic setup</h1>
<p>In this stage we will ensure pre-requisite software is installed on the host (assuming Ubuntu here, you will have to modify for other distros), and that the mount point folder for each user has been created:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install autofs</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.apt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> autofs</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cifs-utils</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> keyutils</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Create base file share mount point</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/mnt/{{ item.user }}"</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> directory</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ item.user }}"</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"domain users@example.com"</span></span>
<span id="cb2-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0700"</span></span>
<span id="cb2-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Start and enable the autofs service</span></span>
<span id="cb2-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.systemd</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> autofs</span></span>
<span id="cb2-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">state</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> started</span></span>
<span id="cb2-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enabled</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<p>Where <code>users_dict</code> looks like what I created in <a href="../posts/2023-06-04-ansible-ad-users.html">this post</a>. You will also have to modify the <code>group</code> variable to be appropriate for your environment.</p>
<p>I actually have the autofs service start task at the bottom of this play in my case, but thematically it makes more sense here.</p>
</section>
<section id="populate-auto.master" class="level1">
<h1>Populate auto.master</h1>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> populate auto.master with entries for each users' configs</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">src</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> auto.master.j2</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /etc/auto.master</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0644'</span></span></code></pre></div>
<p>Each user needs an entry in <code>/etc/auto.master</code> that points to a config file (which we’ll set in the next phase) with all their specific mount points. Using the template task and the template below we can accomplish this:</p>
<pre class="jinja"><code># {{ ansible_managed }}
{% for user in users_dict %}
/mnt/{{ user.user }} /etc/auto.sambashares-{{ user.user }} --timeout=30 --ghost
{% endfor %}</code></pre>
<p>Each user gets a point below the <code>/mnt/&lt;user&gt;</code> folder we created in the basic setup, we point to a config file for them, set a timeout so the fileshare will not stay connected if users aren’t using it and then we add the <code>--ghost</code> flag so that all mount points get a directory created, even if they’re not currently attached. See <a href="https://learn.redhat.com/t5/Platform-Linux/Halloween-tip-of-the-day-Using-autofs-with-the-ghost-option/td-p/2326">here</a> for further docs.</p>
</section>
<section id="populate-user-level-share-specs" class="level1">
<h1>Populate user level share specs</h1>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Populate user specific share mounts</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansible.builtin.template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">src</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> auto.sambashares.j2</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dest</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/auto.sambashares-{{ item.user }}"</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">owner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb5-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> root</span></span>
<span id="cb5-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0644'</span></span>
<span id="cb5-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_items</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ users_dict }}"</span></span></code></pre></div>
<p>Again we’re populating a template, but this time we’re doing one for each user. As with above, most of the magic happens in the template itself:</p>
<pre class="jinja"><code># {{ ansible_managed }}
{% set shares = lookup('vars', item.group | replace('-', '_')) %}
{% for share in shares %}
{{ share.local_share_name }} -fstype=cifs,rw,sec=krb5,uid=${UID},cruid=${UID} :{{ share.full_share_path }}
{% endfor %}</code></pre>
<p>The <code>replace</code> step is because a lot of the groups I was using had a <code>-</code> in their name, which you can’t have in an ansible variable so I map the <code>-</code> to an <code>_</code>. We can then use that to refer to the variable described at the top of this post for whichever group the particular user happens to be in. Then we just iterate through all the shares defined and create a folder under <code>/mnt/&lt;user&gt;/&lt;local_share_name&gt;</code> that maps to <code>full_share_path</code> and will be authorized with kerberos.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Autofs and ansible are a pretty nice way to set up a bunch of users with consistent file shares securely on a shared host or multiple hosts.</p>


</section>

 ]]></description>
  <category>ansible</category>
  <category>Linux</category>
  <guid>https://blog.ianpreston.ca/posts/2023-06-04-ansible-autofs.html</guid>
  <pubDate>Sun, 04 Jun 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
