<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Ian&#39;s blog</title>
<link>https://ianepreston.github.io/blog/index.html</link>
<atom:link href="https://ianepreston.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Sat, 21 Jan 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Home cluster part 3 - Setup VM templates on proxmox</title>
  <link>https://ianepreston.github.io/blog/posts/2023-01-21-proxmox3.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is the third post ( <a href="https://blog.ianpreston.ca/configuration/linux/2022/11/21/proxmox.html">part 1</a>, <a href="https://blog.ianpreston.ca/configuration/linux/proxmox/2022/12/31/proxmox2.html">part 2</a>) documenting my adventures setting up a home cluster. In this one I will try a few different methods of getting VMs installed on proxmox. As with the previous posts, this is not intended to be a how to guide from an expert. I haven’t used proxmox before working on this project, so I’m mostly doing this to document what I do for future reference, or maybe provide others with the perspective of what it’s like to work on proxmox as a relative beginner.</p>
</section>
<section id="basic-menu-driven-install" class="level1">
<h1>Basic menu driven install</h1>
<section id="create-the-vm" class="level2">
<h2 class="anchored" data-anchor-id="create-the-vm">Create the VM</h2>
<p>The most obvious way to install a VM is through the UI. I know I won’t want to take this approach indefinitely as it involves manual work and isn’t reproducible (at least not easily), but it seems like the right place to start, both to ensure I don’t have any unforeseen issues with my setup, and also to provide a baseline for comparison when I try other methods later.</p>
<p>Selecting one of my nodes from the web interface I click “Create VM”. In the first tab I pick the node to install to and give it a name, we’ll do <code>ubuntu-test</code> for this. I could also assign it to a <a href="https://pve.proxmox.com/wiki/User_Management#pveum_resource_pools">resource pool</a> if I had any of those created but I don’t so I won’t. The other thing I can assign is a VM ID, which is the unique numeric identifier proxmox uses internally. At this point I’m fine to let proxmox manage that though so I’ll leave it on the default.</p>
<p>Checking the advanced options I can also configure the VM to start at boot so it will come back up if I reboot my cluster. I can also configure the order it starts/stops. The start at boot setting seems like it would be handy for production services, but I’m just testing so I’ll leave it for now.</p>
<p>On the next tab I can configure the OS. I’ve already configured my NAS (set up in part 2) to hold things like ISO images for installing and uploaded an Ubuntu 22.10 server image, so I’ll select that. The guest OS settings are already correctly set on Linux with a modern kernel so I’m all good there.</p>
<p>Next up is the System tab. The first option is Graphic Card. There’s a ton of options under this one, but at this point I don’t have any intention of installing anything that will care so I’ll leave it at default. Maybe at some point I’ll have a system with a GPU that I want to pass through, or will need a Windows server, but not right now. I also have to pick a machine option. Based on <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings">the docs</a> as long as I don’t want to do PCIe passthrough I can stick with the default, so I will for now. Next I pick a SCSI controller. Again, referring to <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_hard_disk">the docs</a> the <code>VirtIO SCSI Single</code> option that it had selected by default seems perfect for me. There’s also a checkbox for <code>Qemu Agent</code>. Reading <a href="https://pve.proxmox.com/wiki/Qemu-guest-agent">the docs</a> this seems like a handy thing to have, so I’ll turn it on (looks like mostly it’s for cleaner shutdown and pausing during disk backups). The last thing on this tab is whether to enable TPM. Since I’m not making a Windows image I don’t need this, so I’ll leave it unchecked.</p>
<p>Following that we’re on to Disks. I can create multiple disks I’m sure, but for now let’s just set up one. First I make sure that the backing storage is my <code>local-zfs</code> storage, which is the NVME drive on the host, rather than my NAS. I haven’t configured the SSD in these hosts yet, I’m planning to set up <a href="https://docs.ceph.com/en/quincy/">ceph</a> on them but that’s for a future post. The other basic thing to set on this page is disk size. I’m not planning to keep this image around, so I’ll stick with the default 32GB for now. The <code>Bus/Device</code> field defaults to the SCSI interface I set up on the last tab so that seems fine. There’s an option for cache mode as well. Right now I’m not really sure what that does, but from <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_hard_disk">the docs</a> the default of no cache seems like it will work for me, so I’ll leave it. Taking a look at <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_hard_disk_discard">the docs</a> it seems like I want to have the <code>Discard</code> option checked so I’ll do that. From <a href="https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings">the docs</a> <code>IO Thread</code> only seems like it really matters if I have multiple disks attached, but I don’t see the harm of turning it on so let’s do that. I’ll check <code>SSD emulation</code> since the underlying disk really is an SSD and the guest OS might as well think so too. I’ll uncheck the <code>backup</code> option on this one, since I’m planning to just destroy this VM shortly after I create it and I don’t need backups hanging around. I want to be able to try replicating this VM to different hosts, and I’d want this disk to be included, so I’ll leave <code>skip replication</code> unchecked. The last thing I have to pick is the <code>Async IO</code> option. From reading <a href="https://kb.blockbridge.com/technote/proxmox-aio-vs-iouring/">this</a> it seems like the default <code>io_uring</code> will work for me, I’m not deep enough on how this sort of thing works to have strong opinions or requirements so I’ll go with the default.</p>
<p>Now we come to CPU. For <code>sockets</code> I’ll leave it at 1, since all my hosts have only 1 physical socket. For cores my hosts have either 4 or 6 cores, so there’s definitely no point going over 6. Since this is just a test machine let’s just give it 2. For CPU type I’m going to leave it on the Default (<code>kvm64</code>). From the docs on CPU type if I set the CPU to <code>host</code> it will exactly match the CPU flags and type of my host system, but I might have migration issues across hosts, since they’re not all the exact same CPU. The default will allow easier migration, but might disable some specific CPU flags that would be beneficial. For now I’ll stick with the easy option. There’s some other stuff for CPU limits and extra CPU flags here that I’m also going to leave alone for now.</p>
<p>Now we’re on to memory. Each of these hosts has <code>32GB</code> of memory, so I don’t really have to be cheap here, at least while I’m testing. Under advanced I can set a memory floor and enable/disable ballooning. From the docs, I want to have <code>ballooning</code> enabled, even if I have the memory floor and ceiling set the same, so that my host can see how much memory the VM is actually using. If I was running a bunch of VMs with dynamic memory requirements I could see overallocating the max across them and setting the floor for each. In this case I’m just going to leave it at the default <code>2GB</code> since I’m not going to actually run anything on this VM.</p>
<p>Almost done, next up is network. I’ve only got one bridge right now so I’ll leave that selected. I’m not currently doing any VLAN stuff in my network so I’ll leave the <code>VLAN tag</code> entry blank. For model I’ll stick with <code>VirtIO</code> as the docs say that’s the one to pick for best performance as long as your host supports it. The <code>firewall</code> option is checked by default. I haven’t looked into the proxmox firewall at all at this point, but let’s leave that on for now. I can also do some rate limiting and other fancy network config here but I’m going to leave those on the default for now.</p>
<p>The only thing to do now is confirm my settings and actually create the VM. I’ll check <code>start after created</code> so it fires up right away.</p>
</section>
<section id="configure-the-vm" class="level2">
<h2 class="anchored" data-anchor-id="configure-the-vm">Configure the VM</h2>
<p>After waiting a little bit I can see my newly created VM listed under the node I set it up on. Clicking into that VM and selecting the <code>Console</code> section I can see that I’m in the Ubuntu server installation wizard. Since this isn’t a post about installing Ubuntu server I’ll work through the menus without writing everything down. Going through the install worked fine until it came time to reboot and it failed to unmount the virtual CD-ROM that had the installation ISO. I went to the hardware tab on the VM in the proxmox interface, removed the CD-ROM and rebooted. After the reboot the VM came up fine, and I was able to ssh into it from my desktop.</p>
</section>
</section>
<section id="create-a-template-image" class="level1">
<h1>Create a template image</h1>
<p>After confirming the manual VM creation process worked, I started looking into automating the process. From what I could see, most automation tools like ansible or terraform require you to have a VM template created that they can use. There are also some tools to automate the creation of templates, but let’s not get ahead of ourselves. There’s tons of docs on getting a template created and I started getting a bit of analysis paralysis going through them all, so let’s try the <a href="https://docs.technotim.live/posts/cloud-init-cloud-image/">Techno Tim</a> guide and see where that leads.</p>
<p>I was able to mostly follow the guide, and other than having to change references from <code>local-lvm</code> to <code>local-zfs</code> for storage of the disk I didn’t encounter any obvious errors. I created a new machine and it started up, but I couldn’t access it over the web interface for the shell, or see info about its IP (no qemu guest agent installed). In the cloud-init config I set the IP to be DHCP, just to see what would happen. I wasn’t able to resolve the host by name to try and ssh in using that. After checking my router I found a host just named <code>ubuntu</code> and was able to ssh into its IP with the username and ssh key I specified in the cloud init template. For a further test I created a second clone from the template. One thing I noticed was that I had to create it on the same node as the template. Presumably I can migrate it later. The second VM came up, got a new ID in proxmox, and pulled a different IP showing a different MAC address in my router. I was able to ssh into it the same way. After confirming that I shut it down and migrated it to another node, just to see how that would go. The migration went fine, the VM came back up, got the same IP, and I was able to ssh back into it.</p>
<section id="thoughts-on-manual-templates" class="level2">
<h2 class="anchored" data-anchor-id="thoughts-on-manual-templates">Thoughts on manual templates</h2>
<p>This wasn’t too bad. There are a few tweaks I’d want to apply, like adding the guest agent into the machine, but overall template creation is pretty easy. I could see wanting to update my templates semi regularly when new versions of base OSs come out though, and I’d like to understand more of the theory behind how this actually works, since a lot of what I did was pretty much copy paste. To do that, I’ll clear these out and look into some other template creation options.</p>
</section>
<section id="cleaning-up" class="level2">
<h2 class="anchored" data-anchor-id="cleaning-up">Cleaning up</h2>
<p>I don’t want lingering stuff from this experiment hanging out on my nodes, so let’s go in and see what I have to get rid of. First is the created VMs - I can stop and remove them from the UI easily enough. Same deal for the template VM. I checked the local storage through the UI as well and it looks like any virtual disks I created were removed when I got rid of the VM. The only other thing to remove was that initially downloaded cloud image, so I went into the shell for the node and just ran <code>rm</code> to get rid of that.</p>
</section>
</section>
<section id="automate-creating-a-template" class="level1">
<h1>Automate creating a template</h1>
<p>Creating templates doesn’t immediately feel like the sort of thing I’ll have to do super often and will therefore want to automate. In researching how I would do it though I found a few use cases, namely to schedule the creation of updated templates to avoid a long running <code>apt update &amp;&amp; apt upgrade</code> cycle on each newly created image. I found a nice looking <a href="https://gtgb.io/2022/07/23/proxmox-vm-templating/">post</a> that had a fairly reasonable looking workflow using a few shell scripts. Further research suggested that the “production” way to do this would be with <a href="https://developer.hashicorp.com/packer">packer</a>. That seems more complicated, but it would help me learn a more broadly applicable skill that I might be able to transfer to other projects. I honestly can’t tell if that’s a good use of my time or just <a href="https://en.wiktionary.org/wiki/yak_shaving">yak shaving</a> so I’ll try and get by without for now.</p>
<p>Following the post linked above, there’s only one pre-requisite on the proxmox nodes to run the scripts, and that’s <code>libguestfs-tools</code> in order to modify the cloud image bases we’ll be building templates from. That’s easy enough to add to the ansible playbook I’ve been using throughout this series to configure my proxmox nodes. After that there’s just four scripts I have to tweak slightly for my own requirements and then get onto at least one node. I can also set these up in ansible with some templates, which should make them easier to modify and otherwise maintain. Plus then I have them stored somewhere if I have to rebuild these nodes in the future. The repository associated with the above post is <a href="https://github.com/geektx/Proxmox-VM-Template">here</a>.</p>
<p>As a starting point I copied in the scripts as templates into an ansible role. I swapped out all the variables that were hard coded in the scripts for ansible variables, and then set what I wanted to initially test on as ansible variables in the defaults for the role. The idea is that this way if I want to build multiple templates I can just call this role with a variables file that overrides the specific things I want to change (image id, cloud image). After a little bit of fiddling I got the files copied over and ran the script, which did create a template for me. So far one advantage over the manual template from before is that this image has <code>qemu-guest-agent</code> installed, so I can see the hosts IP in the summary tab. There’s still some more stuff I’d like to sort out though.</p>
<p>By changing the storage location of the template from local storage of the node to my NAS I was able to clone the template to another node in my cluster. That image then came up in a bootloop though. Even more fun, I couldn’t stop it from the web interface, which meant I couldn’t delete it. I had to ssh into the node it was running on, run <code>ps aux | grep "/usr/bin/kvm -id &lt;VM ID&gt;"</code> and then <code>kill -9</code> that PID. Crazy. I tried creating it on the same node as the template with a target of local storage but got the same issue.</p>
<p>After looking at the docs it seems like if I want to automate building images from templates I’ll be using the template name, rather than a VM ID anyway. So I think I’ll try modifying the script to create a template with the same name but different ID on each of my nodes, which should let me provision VMs to any node. First let’s clean up the template some more though. As a future project maybe I’ll come back and figure out why building the template on my NAS causes it to boot loop, but that’s a problem for future me.</p>
<p>One thing I definitely want to be able to do is scale VMs I create off these templates up or down. 2 cores, 2GB of RAM and 2GB of disk will not always do it. To test this I create a VM from the template without modification and ssh into it. <code>df -h</code> confirms that I have 2GB of disk assigned to the VM by default. <code>lscpu</code> shows 2 cores. <code>free -h</code> confirms I have 2GB of RAM. Let’s turn the VM off and adjust those. From the Hardware tab of the VM from the proxmox UI I adjust the CPU up to 3 cores and RAM up to 4GB. Disk resizing cannot be done from the UI, so from the terminal based on <a href="https://pve.proxmox.com/wiki/Resize_disks#1._Resizing_guest_disk">the docs</a> I run <code>qm resize 100 scsi0 +5G</code> to add 5GB to the disk. Let’s fire the machine back up and see what happened. <code>lscpu</code> indeed now shows 3 cores, that’s cool. <code>free -h</code> shows the updated amount of RAM. Even <code>df -h</code> shows the correct amount of disk. That last one is frankly surprising to me because the docs indicate that only the disks should have been resized, not the logical volumes or anything else, which would have meant some commands being run within the VM to make the space available. That has also been my experience with VMs at work. Maybe it’s something fancy in the Ubuntu image I’m using? Either way, pretty sweet for now.</p>
<p>Another thing to change is how the VM authenticates over SSH. The default way I’ve been doing it is to just put my laptop’s public key in <code>~/.ssh/authorized_keys</code> using cloud-init. This works ok, but it’s not how I manage ssh in the rest of my network. See <a href="https://blog.ianpreston.ca/ssh/linux/bash/2020/05/03/ssh.html">my earlier post</a> for details, but the tldr is I want to us a certificate authority to allow any signed key to authenticate as a user, and all my host keys to authenticate themselves with a CA. The former is a bit of a convenience as I could just add a couple keys for my other devices to my <code>keyfiles</code> file and keep them up to date if I rotated keys. The Host key thing will be super handy though, since otherwise I’ll have to manually verify that I trust the host key of each new VM I start up, and if I ever tear down and replace a VM I’ll get errors on host validation. So let’s fix that. The first step is to copy the host CA key and the user CA public key into a folder on my NAS that’s accessible from proxmox so I can inject those keys into the templates. I could have ansible copy them over and encrypt them in the playbook, but I think having them on the NAS is slightly more convenient and secure, even if I’d have encrypted the keys with <code>ansible-vault</code>. Next I need to modify the template creation script to copy those files in, and modify <code>sshd_config</code> to use them. While I’m at it I can turn off password authentication over SSH for a little more security. This actually went surprisingly smoothly. I updated the <code>build_image</code> script to copy in the public key for the user CA as well as the private host CA key. Then I set it to run a very slightly modified version of the host setup script I created in my earlier post. After re-running the template build script and creating a VM from the new template I was able to ssh in from my laptop without having passed in a key file to the cloud-init template, or being prompted to validate the host key. Magic!</p>
<p>A note on name resolution. I think I remember seeing/reading this somewhere but it didn’t come back to me until I started troubleshooting. When I first create a machine from a template, if I tell it to use DHCP for IP address acquisition it gets a lease from my router with the hostname <code>ubuntu</code>. So if I want to ping/ssh the machine by name I have to use <code>ubuntu.local.ipreston.net</code> instead of <code>&lt;vm-name&gt;.local.ipreston.net</code>. I typically like to use DHCP on my servers and then just do static mappings in my router to pin them to an IP, rather than hard coding the IP itself, mostly so that I can get easy name resolution without having to put manual entries into my DNS. Even my proxmox nodes themselves which do use static IPs, I created a static mapping in my DHCP server to their MAC addresses so that all my IPs would be available in one place. Anyway, after you reboot the VM once it gets a lease with its actual hostname so just reboot it once, or manually alter the hostname when you do your static mapping.</p>
<section id="automate-creating-another-template" class="level2">
<h2 class="anchored" data-anchor-id="automate-creating-another-template">Automate creating another template</h2>
<p>Having a working Ubuntu template is pretty handy, but what if I want to branch out? Can I apply this approach to other distros? I’m pretty sure this approach will work fine with another debian based distro, and probably even another fairly standard Linux like CentOS will be fine (although I should test). But what about weird ones? Specifically I want to see if I can get this working on <a href="https://www.flatcar.org/">flatcar Linux</a> since I want to try using it for my kubernetes nodes. Let’s walk before we try running though and extend to another version of Ubuntu.</p>
<p>The first thing I want to do is tweak how I’m numbering my templates. Right now each template gets a variable set for its whole VM ID. I’d like to break that out into chunks. The first digit should just always be 8 (at least for now) to indicate a template and keep it out of the range of actual VMs I’m deploying. The next one I’m thinking should be the node the template is created on, and then the last two digits can be an identifier for the specific template. This actually wasn’t bad at all. The one variable definition gets a little long, but basically I just go from one line in defaults of <code>build_vm_id: "8000"</code> to</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;">build_vm_start_digit</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"8"</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">build_vm_host_digit</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"{{ ansible_hostname[-1] }}"</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">build_vm_template_num</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"0"</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">build_vm_id</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"{{ build_vm_start_digit }}{{ build_vm_host_digit }}{{ '%02d' | format(build_vm_template_num|int) }"</span></span></code></pre></div>
<p>This relies on all my proxmox nodes having hostnames of the format <code>pve&lt;Num&gt;</code> but I can work with that. The number of digits in my IDs will change if I get more than 9 nodes or 99 templates too, but I’m not really expecting that to happen, and I don’t even think that would necessarily break anything if it did, so I won’t worry about it for now.</p>
<p>With that slight modification to the role complete I set my playbook to call the role twice, modifying the variables from the defaults for just the template name, the template number, and the URL of the cloud image to build from for Ubuntu Jammy and Kinetic.</p>
<p>Around this time I realized it was going to be a little tedious running the template build script each time I added a template, so I added a <a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_handlers.html">handler</a> to the role to execute the template build script whenever it made a change. It took a little bit of tweaking to figure out that I needed the full path of the script I wanted to run, as well as set it as the working directory so I could call the subscript that defines all the build variables. After those changes the handler triggered properly and built my templates whenever the script changed, or I added a new template to build.</p>
<p>At this point the general template creation process is working quite nicely for Ubuntu versions, but what about other distros? Let’s give debian a shot. I grabbed the <code>cloudgeneric</code> version of debian bullseye from their official cloud images page and plugged it into my playbook. No problem at all. The template built, I was able to build an image from it just the same as the Ubuntu ones.</p>
<p>Let’s get a bit braver and branch out to an even more different distro Rocky Linux. This one might come in handy if I want to try out anything enterprisey or just want to see what the Red Hat experience is like. I found their generic cloud images <a href="https://rockylinux.org/alternative-images/">here</a> and plugged the link into my playbook. The template built ok, but trying to run the VM I ran into problems where it got stuck on a line that said <code>Probing EDD (edd=off to disable)... ok</code> and just hung out there. Similar to the weird boot loop I got deploying from my NAS I wasn’t able to shut down the VM from the Web UI and had to go into the terminal on the node and <code>ps aux | grep "/usr/bin/kvm -id &lt;VM ID&gt;"</code> to find its PID and <code>kill -9</code> it before I could remove the VM. I guess I have to do some troubleshooting. A little searching finds that this error is pretty common, although it doesn’t actually relate to the message, but something that’s happening after. There are a few potential kernel configs I might be able to change, but as I’m poking around in the machine I notice something interesting, it’s got way more disk to start than my Ubuntu templates did. I wonder if I’m somehow filling the disk, so I use that command from the previous section and resize the disk on a newly cloned template before starting it up. Disappointingly this did not solve the problem. Another weird thing I noticed during the start up is that CPU usage on the VM is pinned at right around 50%. Since I gave it 2 cores that suggests that one core is working flat out on something. Several of the posts indicated that after about 10 minutes the system would come up. That’s obviously a terrible startup time, but I’d like to give it a while to see if I at least have the same problem. So I go do some reading and let this VM run for a while… and discover that tragically the usually perfect strategy of ignoring a problem and hoping it goes away doesn’t work in this case.</p>
</section>
<section id="examine-the-template-creation-script-and-modify-it" class="level2">
<h2 class="anchored" data-anchor-id="examine-the-template-creation-script-and-modify-it">Examine the template creation script and modify it</h2>
<p>Something about how I have my VM configured is not playing nice with Rocky Linux. It could just be a very specific thing that I only want to modify for that distro, but I also just copy-pasted most of the other template creation parameters from some guy on the internet. So before I assume that my basic parameters are the best and it’s only Rocky that needs to be modified, let’s examine those options that I’m using and see if I want to modify any of them. Maybe while I’m at it I’ll fix my Rocky issue (or introduce new ones to working distros), but at a minimum I’ll have a better understanding of what’s going on.</p>
<p>The first little bit of the script downloads a cloud image, and then uses virt-customize to update packages, install a list of packages (just qemu-guest-agent and cloud-init by default), copy in a build-info file with some metadata about the template build, copy in some ssh related files and have a script to set them up on first boot (note to self, maybe that’s the part that’s breaking in Rocky, I’ve only tested that script in debian and Arch based distros so far). That stuff (except maybe the ssh part) is all straightforward and I understand what it’s trying to do, so let’s skip to the next line:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">qm</span> destroy <span class="va" style="color: #111111;">${build_vm_id}</span></span></code></pre></div>
<p>Remove the old template before you build a new one, makes sense.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">qm</span> create <span class="va" style="color: #111111;">${build_vm_id}</span> <span class="at" style="color: #657422;">--memory</span> <span class="va" style="color: #111111;">${vm_mem}</span> <span class="at" style="color: #657422;">--cores</span> <span class="va" style="color: #111111;">${vm_cores}</span> <span class="at" style="color: #657422;">--net0</span> virtio,bridge=vmbr0 <span class="at" style="color: #657422;">--name</span> <span class="va" style="color: #111111;">${template_name}</span></span></code></pre></div>
<p>Create a new VM (that we’ll turn into a template later) with an ID of <code>build_vm_id</code>, memory and cores set to our variables, and a <code>virtio</code> network adapter, which is what I did in the manual template creation. Finally we give it a name based on the <code>template_name</code> variable. So far so good, but I had a lot more options available when I built a VM manually earlier in this post, anything else I should set? Reading back through my manual config I set basically everything else to defaults so I think I’m good here. Let’s see what’s next.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">qm</span> importdisk <span class="va" style="color: #111111;">${build_vm_id}</span> <span class="va" style="color: #111111;">${image_name}</span> <span class="va" style="color: #111111;">${storage_location}</span></span></code></pre></div>
<p>Ok, this is fine, I’m importing the disk image I downloaded and modified to the VM I created and putting it in the storage location I specify. All seems fine. Maybe I’ll need to revisit this if I take another crack at storing these templates on my NAS, but fine for now.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;">qm</span> set <span class="va" style="color: #111111;">${build_vm_id}</span> <span class="at" style="color: #657422;">--scsihw</span> <span class="va" style="color: #111111;">${scsihw}</span> <span class="at" style="color: #657422;">--scsi0</span> <span class="va" style="color: #111111;">${storage_location}</span>:vm-<span class="va" style="color: #111111;">${build_vm_id}</span>-disk-0</span></code></pre></div>
<p>Ok, here’s where I deviate from what I picked in the manual build. In my defaults (based on the script I copied in) I had <code>scsihw</code> set to <code>virtio-scsi-pci</code>, whereas in my manual build I went with <code>virtio-scsi-single</code>. I’m struggling to find the actual difference between these settings, but let’s change it for kicks for now.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;">qm</span> set <span class="va" style="color: #111111;">${build_vm_id}</span> <span class="at" style="color: #657422;">--ide0</span> <span class="va" style="color: #111111;">${storage_location}</span>:cloudinit</span></code></pre></div>
<p>Add the cloud-init drive, seems fine. It’s emulating a CD drive so ide makes sense.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;">qm</span> set <span class="va" style="color: #111111;">${build_vm_id}</span> <span class="at" style="color: #657422;">--nameserver</span> <span class="va" style="color: #111111;">${nameserver}</span> <span class="at" style="color: #657422;">--ostype</span> l26 <span class="at" style="color: #657422;">--searchdomain</span> <span class="va" style="color: #111111;">${searchdomain}</span> <span class="at" style="color: #657422;">--ciuser</span> <span class="va" style="color: #111111;">${cloud_init_user}</span></span></code></pre></div>
<p>Add a couple defaults to the cloud-init template and set the ostype to linux (l26). No worries there.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;">qm</span> set <span class="va" style="color: #111111;">${build_vm_id}</span> <span class="at" style="color: #657422;">--boot</span> c <span class="at" style="color: #657422;">--bootdisk</span> scsi0</span></code></pre></div>
<p><code>--boot c</code> tells it to boot from hard disk (as opposed to CD or network) and we set the bootdisk to the image that’s been mounted to the VM. Seems fine.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;">qm</span> set <span class="va" style="color: #111111;">${build_vm_id}</span> <span class="at" style="color: #657422;">--agent</span> enabled=1</span></code></pre></div>
<p>This turns on qemu agent, which we want.</p>
<p>One thing I noticed from going through this is I had some lines that set multiple options, even though they weren’t necessarily related. So I cleaned that up to be one option per line. Easier to parse and modify that way.</p>
<p>I took a quick look back at the manual config section and didn’t see anything else that stood out, so I guess I have to get back to fixing Rocky Linux.</p>
</section>
<section id="get-back-to-making-rocky-linux-work" class="level2">
<h2 class="anchored" data-anchor-id="get-back-to-making-rocky-linux-work">Get back to making Rocky Linux work</h2>
<p>Ok, that was a fun side quest, but let’s get back to figuring out Rocky. I re-run my template creation playbook, just in case that storage config changed anything. I also found <a href="https://forum.proxmox.com/threads/getting-probing-edd-edd-off-to-disable-ok-when-booted.97414/">a proxmox forum post</a> where someone was having the same problem with a particular RHEL image, but no solution. That post also said it worked fine with RHEL 7 and the issue was with 6. I’m trying Rocky 9 (I believe they use the same version as RHEL for compatibility) so I don’t know if that’s helpful. <a href="https://leo.leung.xyz/wiki/No_Console_Output">This post</a> suggests the output just means my console output is being redirected somewhere else, so I’m not seeing whatever the actual issue is. I guess I should fix that first regardless. One suggested solution there is to change the default tty from serial. An alternative approach there, is to check out the <a href="https://pve.proxmox.com/wiki/Serial_Terminal">proxmox docs</a> and enable serial out on the VM with <code>qm set &lt;VM ID&gt; -serial0 socket</code>. Let’s add that line to my template and see if I get anything. A little bit of progress in that it doesn’t just tell me I don’t have serial on that machine, but I also only see <code>starting serial terminal on interface serial0 (press Ctrl+O to exit)</code>, which isn’t exactly informative. Let’s ditch my ssh script setup on first boot, just to make sure that’s not what’s hanging the template. Removing it from the template script gives me the same issue, so the problem is elsewhere. Just for kicks, let’s try a different Rocky cloud image. I found <a href="https://medium.com/geekculture/create-a-rocky-linux-virtual-machine-vm-with-terraform-and-proxmox-6692a49f7b43">this blog</a> that’s using the <code>GenericCloud</code> image rather than the <code>GenericCloudBase</code> image I was using. I’m not sure why I picked <code>GenericCloudBase</code> to begin with so let’s swap over and see what happens. Still nothing. Ok, the blog also has a bunch more cloud-init modules installed than I do. Maybe one of them will fix things. Let’s add them to the package list for that template. Still no luck. Ok, back to basics. We have a blog post where someone made a template, and apparently it worked. Let’s try manually working through those instructions and see what happens. Well, first problem their link goes to a pinned daily build of Rocky that’s no longer available on the site. Fine, we’ll do the latest one and hope that there’s not just some daily build issue that’s leading to all of this. So I get the same error following the guide. After a little more digging I find a link in the rocky vault to the exact image that the blog was using. Let’s apply my template to that image. Slightly better luck. It still bootloops, but I can actually see things in the console and by being very speedy I was even able to get a screencap of the kernel panic error it’s throwing.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://ianepreston.github.io/blog/posts/proxmox3/panic.png" title="Rocky Panic" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Nodes</figcaption><p></p>
</figure>
</div>
<p>Finding out that this was the issue led me to a <a href="https://forum.proxmox.com/threads/kernel-panic-installing-rocky-or-almalinux.114885/">proxmox forum</a> post where it turns out lots of people are having this issue with Rocky 9 if they set their CPU to the default <code>kvm64</code>. I reset my VM to use <code>host</code> for the CPU. That fixed the boot loop error but led to another error. At this point I decided I didn’t feel like running Rocky Linux very much.</p>
</section>
<section id="try-arch-linux" class="level2">
<h2 class="anchored" data-anchor-id="try-arch-linux">Try Arch Linux</h2>
<p>Rocky was supposed to be an intermediate difficulty distro to test out my template process. I don’t actually have a use case for it, I just figured it would be more different than debian but less different than flatcar when it comes to testing. I’m really hoping that I just got unlucky and that other distros won’t be so hard. Let’s see if that’s correct. I don’t have an immediate use case for Rocky, but I do like running Arch, it’s what my current server has. Let’s try that. Building the template goes fine, and this one actually boots to a login prompt from the proxmox UI, so we’re on a happier path than with Rocky already. At first it seemed like Arch wasn’t updating my default user. I started up the image and tried to ssh in but got a <code>connection refused</code> error. Trying to ssh in as the default <code>arch</code> user that the image uses got a <code>permission denied</code> error instead. After some testing it turns out that cloud-init just takes longer to complete on first boot in Arch, I think because it has to do more package updating. If I just left the VM running for a bit I was able to ssh right in.</p>
</section>
<section id="try-flatcar-linux" class="level2">
<h2 class="anchored" data-anchor-id="try-flatcar-linux">Try flatcar Linux</h2>
<p>I’ve never used flatcar before, but it sounds interesting and <a href="https://eevans.co/blog/garage/">this blog</a> recommended it for self hosting kubernetes so I’d like to have it available in my environment. I found <a href="https://github.com/Doc-Tiebeau/proxmox-flatcar">this repository</a> which had its own scripts to create a flatcar template. Most of it looks broadly similar to the approach I’ve been taking, so let’s try it out. I notice that flatcar images come in <code>.img.bz2</code> format instead of <code>.img</code> or <code>.qcow2</code> like the other files I’ve downloaded. I may have to add in some logic to the script to extract images in that case. As a first step though I just tried running the whole workflow as is. That got me a template built, but the VM I created off it couldn’t find any bootable media, suggesting the disk creation didn’t work as intended. Probably because I have to extract it first. After adding a little bit of logic to my image building script:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">[</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${image_name</span><span class="op" style="color: #5E5E5E;">##</span><span class="pp" style="color: #AD0000;">*</span>.<span class="va" style="color: #111111;">}</span><span class="st" style="color: #20794D;">"</span> <span class="ot" style="color: #003B4F;">==</span> <span class="st" style="color: #20794D;">"bz2"</span> <span class="bu" style="color: null;">]</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;">bzip2</span> <span class="at" style="color: #657422;">-d</span> <span class="va" style="color: #111111;">${image_name}</span></span>
<span id="cb10-3">    <span class="va" style="color: #111111;">image_name</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${image_name</span><span class="op" style="color: #5E5E5E;">%</span>.<span class="pp" style="color: #AD0000;">*</span><span class="va" style="color: #111111;">}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb10-4"><span class="cf" style="color: #003B4F;">fi</span></span></code></pre></div>
<p>I got the VM to boot. I could auto login as user <code>core</code> over serial, but it looks like none of my other <code>cloud-init</code> config stuff worked. This post is already getting super long though so I’m going to save getting a fully working flatcar image for a separate post and declare victory on my general goal of “be able to make templates automatically”.</p>
</section>
</section>
<section id="automate-deploying-vms-from-templates" class="level1">
<h1>Automate deploying VMs from templates</h1>
<p>I’m not entirely done with templates at this point. I still want to schedule their rebuild so that I can have fresh templates to build VMs, and I need to figure out some way to be able to deploy VMs based off these templates to any node, either by recreating them on each node, or figuring out why creating them off shared storage didn’t work before. How exactly I go about some of that might depend on how I actually want to deploy VMs from these templates though, so let’s figure that out and come back to templates later.</p>
<p>Once again I’m at a decision point. I can keep using <a href="https://docs.ansible.com/ansible/latest/collections/community/general/proxmox_module.html">ansible</a> to deploy VMs, or I can switch to <a href="https://registry.terraform.io/providers/Telmate/proxmox/latest/docs">terraform</a>. While for templates I avoided the hashicorp product and the associated learning curve, I’ve actually used terraform a bit before, and I know that it’s something I’ll want to learn for other applications like deploying cloud resources, so in this case it seems to be worth the extra effor to figure out.</p>
</section>
<section id="take-another-shot-at-cross-node-deployable-templates" class="level1">
<h1>Take another shot at cross node deployable templates</h1>
</section>
<section id="automate-creating-templates-across-nodes" class="level1">
<h1>Automate creating templates across nodes</h1>
</section>
<section id="automate-scheduled-rebuilds-of-the-templates" class="level1">
<h1>Automate scheduled rebuilds of the templates</h1>


</section>

 ]]></description>
  <category>configuration</category>
  <category>linux</category>
  <category>proxmox</category>
  <guid>https://ianepreston.github.io/blog/posts/2023-01-21-proxmox3.html</guid>
  <pubDate>Sat, 21 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://ianepreston.github.io/blog/posts/proxmox3/panic.png " medium="image"/>
</item>
<item>
  <title>Home cluster part 2 - Configuring Proxmox</title>
  <link>https://ianepreston.github.io/blog/posts/2022-12-31-proxmox2.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In <a href="https://blog.ianpreston.ca/configuration/linux/2022/11/21/proxmox.html">part 1</a> of this series I laid out the rationale for building a homelab cluster, walked through my hardware selection, and ran through the proxmox installer. In this post I’ll document the further configuration of the cluster and its nodes. The actual implementation will be done in ansible and tracked in my <a href="https://github.com/ianepreston/recipes">recipes</a> repository, so I will keep it light on code in this post. What I’m going to try and document here is the steps I took, why I took them, and any weird edge cases or other fun learning opportunities I encounter in the process.</p>
</section>
<section id="the-goals-for-this-post" class="level1">
<h1>The goals for this post</h1>
<p>By the end of this post I’d like to have accomplished the following things with my cluster:</p>
<ul>
<li>Set up their entries in ansible and be able to connect to each node individually or address them as a group</li>
<li>Turn off the enterprise repository and add the non-enterprise one</li>
<li>Make each node aware of my UPS state (one directly and the other two as clients)</li>
<li>Set up email alerting</li>
<li>Configure locale settings</li>
<li>Set up my NAS as a storage target</li>
</ul>
</section>
<section id="what-im-working-on" class="level1">
<h1>What I’m working on</h1>
<p>Just for kicks, let’s include an actual picture of these nodes I’m working on in this post:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://ianepreston.github.io/blog/posts/proxmox2/nodes.jpg" title="Proxmox nodes" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Nodes</figcaption><p></p>
</figure>
</div>
<p>Here they are, sitting in my utility room near the rest of my gear. So cute!</p>
</section>
<section id="the-code" class="level1">
<h1>The code</h1>
<p>The playbook I built for this is available <a href="https://github.com/ianepreston/recipes/blob/master/ansible/pve.yml">here</a>. That link points to the main playbook, and the repository more generally has the custom roles and other configs I made to get everything set up.</p>
</section>
<section id="ansible-connectivity" class="level1">
<h1>Ansible connectivity</h1>
<p>I haven’t set up these hosts to use key based authentication yet, and decided to just try password auth. I ended up getting some host key errors, which I didn’t quite understand. At first I thought it was something with the devcontainer config I was using, but I tried the same thing on the host system and got the same error. After that I realized it was because I’d reinstalled that host and the key I had saved in <code>~/.ssh/known_hosts</code> was from the old install. After clearing out that record I was able to ssh to all three hosts from my main system. I then had to refresh the devcontainer so it would copy in an updated copy of my <code>~/.ssh/known_hosts</code> file. I’m not sure how frequently devcontainers normally refresh that, but it’s a config alignment issue I’ll have to keep in mind for future problems. Anyway, beside that little known hosts config issue, adding all three hosts and addressing them in the <code>pve</code> group all worked fine.</p>
</section>
<section id="set-up-the-non-subscription-repository" class="level1">
<h1>Set up the non-subscription repository</h1>
<p>Proxmox has two repositories for package updates, one for Enterprise subscribers, and one for non-subscribers. By default it comes with the enterprise repository enabled, but since I’m not a subscriber I want to switch repos. Ansible comes with a built in <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_repository_module.html">apt repository</a> module so that was an easy way to ensure the enterprise repo was absent from my sources list and that all the recommended ones (including for CEPH) were included. I set that role to also update my repository list and upgrade all installed packages for good measure as well using the <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_module.html">apt</a> module.</p>
</section>
<section id="set-up-ups-state-alerting" class="level1">
<h1>Set up UPS state alerting</h1>
<section id="failed-first-attempt" class="level2">
<h2 class="anchored" data-anchor-id="failed-first-attempt">Failed first attempt</h2>
<p>I made a good amount of progress trying to set this up a certain way, but eventually hit a wall. Some of what I tried originally is still interesting, it just didn’t work. The core issue is that I was dynamically identifying which host had the UPS attached to it based on the output of a locally run command on each host. This worked fine in terms of setting conditionals to only do server setup stuff on the node with the UPS attached, but ran into troubles configuring the clients. The clients need to know the hostname of the server, but I couldn’t figure out any way to dynamically identify that host in an ansible playbook. Registered variables from commands (what I was using to identify which host was connected to the UPS) are host variables only, so the other hosts didn’t have access to it. From the look of it you can’t really make a host variable a global variable based on a condition. There might be a way to concatenate all host variables in a way that would let me get <code>&lt;server host&gt; + '' + '' == &lt;server host&gt;</code> as the output for all hosts, but that felt pretty hacky. Based on this I’m just going to hard code which host is directly connected to the UPS and build my playbook from that.</p>
<section id="borked-attempt-write-up" class="level3">
<h3 class="anchored" data-anchor-id="borked-attempt-write-up">Borked attempt write up</h3>
<p>One node in my cluster is connected via USB to my UPS. In the event of a power failure I want it to be alerted via that USB connection, and then pass that alert on to the other nodes via <a href="https://networkupstools.org/">NUT</a>. I’m largely relying on the <a href="https://wiki.archlinux.org/title/Network_UPS_Tools">Arch wiki</a> to set this up, even though proxmox is Debian based, just because that wiki is amazing. I also found <a href="https://github.com/ykuksenko/ansible.nut">this repository</a> which has a role configured for setting up nut. It’s set up in a different way than I want, and also has a lot more abstraction that’s good for portability but bad for interpretability, so I won’t use it directly.</p>
<p>The first thing I want to do is install the <code>nut</code> utility on all the systems, as with the previous section this is easily accomplished with the apt module in ansible.</p>
<p>Next I need to identify which system has the UPS USB cable connected to it, as this one will be the NUT server, and the others will be NUT clients. Realistically this is not going to change and I could just hard code it, but I thought it would be fun to figure out how to automate it.</p>
<p>The <code>nut</code> package comes with a <code>nut-scanner</code> utility which can be used to identify compatible devices. I can register the output of that command in ansible and then set a <a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_conditionals.html#conditions-based-on-registered-variables">conditional</a> to only perform certain operations if the output of the command listed a USB device. To test this before I actually applied anything with conditionals I used the <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/debug_module.html">debug</a> module to output which host had the UPS attached. I won’t keep that debug in my final playbook, so I’ll reproduce that part here:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Check if USB for UPS is connected to this host</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">ansible.builtin.shell</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> nut-scanner -U -P</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">register</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ups_driver</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Show me which host has the UPS connected</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">ansible.builtin.debug</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">msg</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> System {{ inventory_hostname }} has UPS driver {{ ups_driver }}</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">when</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ups_driver.stdout.find('usbhid-ups') != -1</span></span></code></pre></div>
<p>Next is to configure the driver on connected system. To do this I copy over a <code>ups.conf</code> file based on the output of the <code>nut-scanner</code> command. After copying over the template I test it by sshing into the machine and running <code>upsdrvctl start</code>. Since that looked good I enable the <code>nut-driver</code> service with ansible’s systemd module.</p>
<p>After that it’s time to set up the nut server for clients (both the local machine and the other nodes in the cluster) to connect to. Following the Arch wiki I created a <code>upsd.users</code> file with user configuration for the clients and then tried to enable and start the nut server. I didn’t get an error from ansible for this, but when I tried to check the server I got nothing, and checking the state of the service I saw that it was dead. The relevant lines in the service status seemed to be:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">upsd</span> disabled, please adjust the configuration to your needs</span>
<span id="cb2-2"><span class="ex" style="color: null;">Then</span> set MODE to a suitable value in /etc/nut/nut.conf to enable it</span></code></pre></div>
<p>Taking a look at that file I see this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">##############################################################################</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># The MODE determines which part of the NUT is to be started, and which</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># configuration files must be modified.</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;"># This file try to standardize the various files being found in the field, like</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># /etc/default/nut on Debian based systems, /etc/sysconfig/ups on RedHat based</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;"># systems, ... Distribution's init script should source this file to see which</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;"># component(s) has to be started.</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;"># The values of MODE can be:</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;"># - none: NUT is not configured, or use the Integrated Power Management, or use</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;">#   some external system to startup NUT components. So nothing is to be started.</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;"># - standalone: This mode address a local only configuration, with 1 UPS</span></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;">#   protecting the local system. This implies to start the 3 NUT layers (driver,</span></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;">#   upsd and upsmon) and the matching configuration files. This mode can also</span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;">#   address UPS redundancy.</span></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;"># - netserver: same as for the standalone configuration, but also need</span></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;">#   some more network access controls (firewall, tcp-wrappers) and possibly a</span></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;">#   specific LISTEN directive in upsd.conf.</span></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;">#   Since this MODE is opened to the network, a special care should be applied</span></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;">#   to security concerns.</span></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;"># - netclient: this mode only requires upsmon.</span></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;"># IMPORTANT </span><span class="al" style="color: #AD0000;">NOTE</span><span class="co" style="color: #5E5E5E;">:</span></span>
<span id="cb3-25"><span class="co" style="color: #5E5E5E;">#  This file is intended to be sourced by shell scripts.</span></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;">#  You MUST NOT use spaces around the equal sign!</span></span>
<span id="cb3-27"></span>
<span id="cb3-28"><span class="va" style="color: #111111;">MODE</span><span class="op" style="color: #5E5E5E;">=</span>none</span></code></pre></div>
<p>So based on this I think I need ansible to remove the <code>MODE=none</code> line and change it to <code>MODE=netserver</code> on the server. Probably it will have to be <code>MODE=netclient</code> on the clients, but let’s leave that alone for now. I can handle this using the <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/lineinfile_module.html">lineinfile</a> module. After doing this and restarting the <code>nut-server</code> service I ran <code>upsc pveups</code> and had the state of the UPS returned, indicating the config was good for the directly connected node. <strong>This is where I got stuck, see the write up above</strong></p>
</section>
</section>
<section id="working-second-attempt" class="level2">
<h2 class="anchored" data-anchor-id="working-second-attempt">Working second attempt</h2>
<p>Don’t reinvent the wheel folks. I vendored in <a href="https://github.com/ykuksenko/ansible.nut">this role</a> and got everything working pretty much right away. I did have to hard code which host was attached to the UPS, but that’s a small price to pay. Problem solved!</p>
</section>
</section>
<section id="setup-email-alerting" class="level1">
<h1>Setup email alerting</h1>
<p>The next thing I want is to set up an outbound email configuration, so I can receive email alerts for things like backups or drive issues. The general idea for configuring this comes from <a href="https://docs.technotim.live/posts/proxmox-alerts/">Techno Tim</a>. I’m learning my lesson from NUT and not trying to roll my own ansible role, instead I’m using <a href="https://github.com/Oefenweb/ansible-postfix">this role</a> I found on GitHub.</p>
<p>I set up the playbook to run, ansible indicated it had made some changes, so I tried sending an email from the command line with</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"This is a test message sent from postfix on my Proxmox Server"</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ex" style="color: null;">mail</span> <span class="at" style="color: #657422;">-s</span> <span class="st" style="color: #20794D;">"Test Email from Proxmox"</span> <span class="op" style="color: #5E5E5E;">&lt;</span>my.email@address.com<span class="op" style="color: #5E5E5E;">&gt;</span></span></code></pre></div>
<p>But nothing went out. Ok, time to troubleshoot.</p>
<ul>
<li><p>Check if postfix service is up with <code>systemctl status postfix</code>. It looks fine</p></li>
<li><p>Check if I have a correct looking config in <code>/etc/postfix/sasl_passwd</code>. I do and there’s the <code>sasl_passwd.db</code> file in that folder as well that I’d expect</p></li>
<li><p>Check <code>/etc/postfix/main.cf</code>. Config looks ok</p></li>
<li><p>Check <code>/var/log/mail.log</code>. Pertinent error seems to be around this:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"> <span class="va" style="color: #111111;">status</span><span class="op" style="color: #5E5E5E;">=</span>bounced <span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">host</span> smtp.gmx.com[212.227.17.184] said: 550-Requested action not taken: mailbox unavailable 550 invalid DNS MX or A/AAAA resource record <span class="er" style="color: #AD0000;">(in</span> <span class="ex" style="color: null;">reply</span> to MAIL FROM command<span class="kw" style="color: #003B4F;">))</span></span></code></pre></div></li>
<li><p>Figure I probably set up <code>postfix_aliases</code> wrong in the role variables, so change that and try again. Slightly different error</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="va" style="color: #111111;">status</span><span class="op" style="color: #5E5E5E;">=</span>bounced <span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">host</span> smtp.gmx.com[212.227.17.174] said: 550-Requested action not taken: mailbox unavailable 550 Sender address is not allowed. <span class="er" style="color: #AD0000;">(in</span> <span class="ex" style="color: null;">reply</span> to MAIL FROM command<span class="kw" style="color: #003B4F;">))</span></span></code></pre></div></li>
<li><p>Realize that I was using <code>postfix_aliases</code> the way I should have been using <code>postfix_sender_canonical_maps</code>. Redo that part.</p></li>
</ul>
<p>Email sent! Right now they all show up as just coming from <code>root</code>. Per the Techno Tim docs linked above I know there’s a way to make that a more informative name. This would work, but I’d like it to say which host it’s actually coming from.</p>
<p>I took a guess from the Techno Tim post and figured the config I needed to change in the playbook would be <code>postfix_header_checks</code> and after poking around in the related jinja templates and looking at what the Techno Tim post said to write I got a config together that at least didn’t blow up. Sent a test email again and:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"> <span class="va" style="color: #111111;">status</span><span class="op" style="color: #5E5E5E;">=</span>bounced <span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">host</span> smtp.gmx.com[212.227.17.184] said: 554-Transaction failed 554-Reject due to policy restrictions. 554 For explanation visit https://postmaster.gmx.net/en/error-messages<span class="pp" style="color: #AD0000;">?</span>ip=24.64.146.237<span class="kw" style="color: #003B4F;">&amp;</span><span class="va" style="color: #111111;">c</span><span class="op" style="color: #5E5E5E;">=</span>hi <span class="kw" style="color: #003B4F;">(</span><span class="er" style="color: #AD0000;">in</span> <span class="ex" style="color: null;">reply</span> to end of DATA command<span class="kw" style="color: #003B4F;">))</span></span></code></pre></div>
<p>Ok, this isn’t a critical feature, but I can handle hacking at it for a bit before I give up.</p>
<ul>
<li>Compare what’s in my <code>/etc/postfix/header_checks</code> to what the guide showed: It looks mostly the same, although I’ve got <code>.</code>s in my name since I used the <code>{{ ansible_hostname }}</code> variable to define it. Maybe that’s it? Nope. Same error.</li>
<li>Techno Tim blog installed <code>postfix-pcre</code> to enable this. Playbook didn’t by default. Add that to the <code>postfix_install</code> var and try again: Still bounced.</li>
<li>Notice that in the Techno Tim post he didn’t bother including a real email in the replacement line because it wasn’t supposed to matter. Maybe GMX actually cares ( his example had been for gmail). Update the variable so it keeps my real email for that part and just changes the name: It works!</li>
</ul>
</section>
<section id="configure-locale-settings" class="level1">
<h1>Configure locale settings</h1>
<p>Around this time I noticed I was getting some error messages when I would connect to a shell on the nodes: <code>perl: warning: Please check that your locale settings:</code>. I already had a role created to set up locales for previously configured hosts, so this was an easy fix, I just had to add it to the playbook for these hosts. Not much to say about this, just noting it here for completeness.</p>
</section>
<section id="set-up-nfs-shares" class="level1">
<h1>Set up NFS shares</h1>
<p>I already configured this manually, but now I’d like to make sure it stays configured if I rebuild, so I’ll move it into ansible.</p>
<p>According to the <a href="https://pve.proxmox.com/wiki/Storage:_NFS">proxmox docs</a> the configuration is stored in <code>/etc/pve/storage.cfg</code>.</p>
<p>Taking a look in there I can see that I do have a NFS share configured there, along with my local and zfs storage.</p>
<p>This seems like a great use case for the <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/blockinfile_module.html">blockinfile</a> module in ansible.</p>
<p>Well this is weird. After removing the original block from that file and having ansible add it, I can access the mount point from the terminal on all my hosts, but it no longer shows up as a storage option in the UI.</p>
<p>After doing a reboot and some further testing I confirmed that removing that entry should remove it from the mount point and the UI (and it does). Adding the entry back does not seem to add the storage either to the mount point or the UI. I’m not sure why that would be, so let’s see what else there is to do.</p>
<p>Looking more through the proxmox docs I see there’s a <a href="https://pve.proxmox.com/pve-docs/chapter-pvesm.html">pve storage manager</a> command. Maybe what I should do instead is check if that share is in the config file, and if it’s not run a shell command to add it.</p>
<p>In doing some testing for the shell command, I confirmed that all the shell command does is fill in an entry in the file mentioned above. After some further testing, the issue seems to be related to the <code>#Ansible Managed Block</code> comments the ansible function places around the entry. Something about needing blank lines around entries. By modifying the block marker to have newlines on either side of the comment I was able to use blockinfile to set up the share. Easier than parsing shell output and sending a big long command. I could have set this to be applied to all hosts, but since this is in <code>/etc/pve</code> the cluster manager will handle replication across hosts for me.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this post I covered a bunch of configuration I wanted to have in place on my proxmox nodes before I got into the business of actually deploying anything. Stay tuned for my next post in this series where maybe I’ll actually use the cluster for what it was intended for and spin up some VMs.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <category>linux</category>
  <category>proxmox</category>
  <guid>https://ianepreston.github.io/blog/posts/2022-12-31-proxmox2.html</guid>
  <pubDate>Sat, 31 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://ianepreston.github.io/blog/posts/proxmox2/nodes.jpg " medium="image"/>
</item>
<item>
  <title>Setting up rootless docker</title>
  <link>https://ianepreston.github.io/blog/posts/2022-12-30-rootless-docker.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This post covers something that I did for work that I thought might be of more general interest. We have a number of developers that want to build and work in docker containers. Due to security constraints we can’t install WSL and docker desktop on our laptops, so some remote development solution is required. We don’t have kubernetes or anything fancy in our environment, so the initial solution was to just provision an Ubuntu VM and give everyone a login and access to the docker group. Unfortunately there are some major usability and security issues with this approach. Basically, since giving access to docker is essentially giving root access to the machine, developers can see and access each other’s containers and files. From a security perspective this is obviously no good. Even from a usability perspective it means there’s constant risk of inadvertently tripping over another developer’s work, and cleaning up your old images and containers has to be done with a lot more care. To address this issue I decided to look into <a href="https://docs.docker.com/engine/security/rootless/">rootless docker</a>.</p>
<p>I’m going to try a different approach with this blog. The next section will be a lightly edited transcription of all the things I tried (including failures, dead ends, and dumb mistakes). The following section will be a TLDR summary of what you actually need to do to get this working.</p>
</section>
<section id="live-blogging-step-by-step-discovery" class="level1">
<h1>Live blogging step by step discovery</h1>
<p>This experiment started with a vanilla Ubuntu 22.04.1 VM. I had a user with sudo permission, <code>dockertestian</code> and then created two users without any special credentials, <code>dockertesta</code> and <code>dockertestb</code>.</p>
<p>First I tried installing docker with <code>sudo apt install docker</code>, but that was lacking some of the additional features required for rootless docker. It’s possible that I could have found what I needed in the regular Ubuntu repository, but after being thwarted there, I switched to the <a href="https://docs.docker.com/engine/install/ubuntu/">docker docs</a> method and followed their instructions through.</p>
<p>Following the rootless install docs, I disabled the system level docker daemon, and then as each of my regular users I logged in and ran the rootless install script (described in the docker docs). I had to log out and log back in but beyond that I was able to run <code>docker run hello-world</code> without issue. I noticed that when I ran this for the second user it had to download the <code>hello-world</code> image again, which was a good sign for actual isolation.</p>
<p>After running the rootless install script I was given a notice that I might have to modify my <code>~/.bashrc</code>, but I left that alone for a pure test at first.</p>
<p>The next step was to see if I could use VS Code and <a href="https://code.visualstudio.com/docs/devcontainers/containers">devcontainers</a>. Initially this didn’t work, as VS code didn’t automatically look for the user level docker daemon that I was running. Following the prompt in the previous paragraph I added <code>export DOCKER_HOST=unix:///run/user/$(id -u)/docker.sock</code> to my <code>~/.bashrc</code> file. The original prompt from the user install script had my explicit UID instead of <code>$(id -u)</code> in that line, but I modified it so it would always map to the ID of my user across machines, since I like to reuse my dotfiles. It also makes it easier to instruct other users on setting up their machines.</p>
<p>After making this change I could load devcontainers, but ran into some file permission issues. VS code assumes that docker will be run as root, which means UID 0 in the container will correspond to UID 0 on the host machine. Based on that it uses <a href="https://docs.docker.com/engine/security/userns-remap/">namespace remapping</a> to map the <code>vscode</code> user inside the container to the host user outside the container. Running in rootless mode works differently. UID 0 in the container is whatever your user’s UID is outside the container. This results in the <code>root</code> user inside the container mapping to your user outside it. So if you create a file in your workspace outside the container it will be owned by root inside it. If you create a file inside the container it will be owned by some high unused UID outside the container.</p>
<p>The devcontainer spec has a number of options for changing how user mapping works. Setting <code>remoteUser</code> or <code>containerUser</code> to root in the <code>devcontainer.json</code> would work in the sense that I would be root in the container and have proper user level access to files in my workspace. That wasn’t ideal since the way I’d built the devcontainer there was some customization done with the <code>vscode</code> user (pipx installations and other stuff) that I lost if I was root. <code>updateRemoteUserUID</code> either mapped my host user to root int the container (if set to <code>true</code>) or just didn’t do any ID remapping. Within the container as the <code>vscode</code> user I could <code>sudo chown -R vscode .</code> on the workspace directory so that permissions all looked good inside the devcontainer. Of course this meant that they would break if I was outside the devcontainer. That could lead to a lock out situation if I broke the devcontainer config and was kicked out, since I wouldn’t be able to edit the <code>devcontainer.json</code> file since my host user would no longer be the owner. At the time of this writing I don’t believe there’s a totally clean way to use the <code>vscode</code> user inside a devcontainer that’s running on rootless docker. My current solution is to not do user level customization, so that running the container as root isn’t a problem. Unlike with a regular docker daemon this doesn’t represent a security issue, since the root user in the container shares the permissions of my unprivileged user outside it.</p>
<p>Next up was to figure out network share mounting. The normal way of creating a <code>CIFS</code> volume does not work on rootless docker as it requires root access on the host machine. I believe on the actual root daemon docker there are ways to allow mounting of shares from within the container runtime itself, but in some brief testing I couldn’t get them to work. In the past I had used <a href="https://en.wikipedia.org/wiki/GVfs">gvfs</a> to handle userspace mounting of file shares, but it brings in a ton of gnome dependencies and I found it very finicky to work with so I was hoping for a better option.</p>
<p>To properly test network share mounting it was time to join the host to the domain and use a domain account for testing. While in theory I could hard code my username and password into a credential file, in practice that’s not how I’d want users to do it from an ease of use or security perspective. This also surfaced another challenge with UID remapping within the dev container. I’ll want the network share to be associated with my domain user and its associated user ID, which will be UID 0 in the container. Another reason to just run as root in devcontainers if you’re going to use rootless docker. After getting the host VM joined to the domain and logging in with my domain account (unprivileged on this host) I was ready to start testing network shares.</p>
<p>The approach I took was to use <a href="https://help.ubuntu.com/community/Autofs">Autofs</a>. All the setup for this was done with the privileged account, then tested with the domain joined account. First step was to install <code>autofs</code> and <code>cifs-utils</code> and enable the autofs service. Next I created a folder under <code>/mnt/</code> for my domain user (<code>&lt;EID&gt;</code> in the rest of this) at <code>/mnt/&lt;EID&gt;</code> and locked down permissions for it <code>chmod 700 /mnt/&lt;EID&gt;</code>. I relied on <a href="https://askubuntu.com/questions/1040095/mounting-cifs-share-per-user-using-autofs">these</a> <a href="https://askubuntu.com/questions/1026316/cifs-mounts-and-kerberos-permissions-on-access-or-best-practice">two</a> posts for the most part to figure out my config. I added the following line to <code>/etc/auto.master</code>:</p>
<p><code>/mnt/&lt;EID&gt; /etc/auto.sambashares-&lt;EID&gt; --timeout=30 --ghost</code> see <a href="https://learn.redhat.com/t5/Platform-Linux/Halloween-tip-of-the-day-Using-autofs-with-the-ghost-option/td-p/2326">here</a> for the deal with the <code>--ghost</code> flag.</p>
<p>Next under <code>/etc/auto.sambashares-&lt;EID&gt;</code> I added a line for each fileshare I wanted to be able to access:</p>
<p><code>&lt;share_short_name&gt; -fstype=cifs,rw,sec=krb5,uid=${UID},cruid=${UID} :&lt;share_full_path&gt;</code></p>
<p>which will create a folder in <code>/mnt/&lt;EID&gt;/&lt;share_short_name&gt;</code> that maps to <code>&lt;share_full_path&gt;</code>.</p>
<p>Here is where I went down a long and stupid rabbit hole. When I tried to access this share using my domain user account I got a permission issue. Eventually I figured out my user wasn’t being issued a kerberos ticket. This led to a ton of reading about how kerberos works, fiddling with a bunch of configs, installing and uninstalling a bunch of packages, all to no avail. Embarassingly, eventually I realized that the issue was that I was using an key to authenticate to this host, and you only get a kerberos ticket issued if you do password authentication for ssh. Feeling dumb I switched to password auth and was able to see the network share.</p>
<p>Having a working domain user that is able to access network shares without privilege escalation (assuming some privileged config of autofs is done on their behalf in advance) I was ready to get back to docker testing.</p>
<p>I realized I hadn’t actually installed rootless docker for my domain user, so I ran the install script and got an error that I was missing requirements and to modify <code>/etc/subuid</code> and <code>/etc/subgid</code>. Looking at those files I could see a pattern, they look something like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">user1:10000:65536</span></span>
<span id="cb1-2"><span class="ex" style="color: null;">user2:165536:65536</span></span>
<span id="cb1-3"><span class="ex" style="color: null;">user3:231072:65536</span></span></code></pre></div>
<p>Each user gets an entry giving it a start UID with a very high number, and a range of UID space that it can use within a container. The subsequent entry starts where the previous one ends. While this got created just fine for my local users, it did not exist for my domain user. Using my privileged account I added a record for my domain user to <code>/etc/subuid</code> and <code>/etc/subgid</code> (they look identical) and re-ran the installer. This time it worked fine. I added the <code>DOCKER_HOST</code> argument to my <code>~/.bashrc</code> and fired up VS code. It didn’t work. After some poking around I discovered that this was because VS code looks in <code>/etc/passwd</code> to find your default shell, and similar to <code>/etc/subuid</code>, domain users don’t automatically get an entry there. Because of this it defaulted to running its setup in <code>/bin/sh</code> instead of <code>/bin/bash</code> like in my other accounts, which means it didn’t read the <code>DOCKER_HOST</code> argument, which means it didn’t work. Computers are fun. I tried adding the line to <code>~/.profile</code> because apparently <code>/bin/sh</code> does read that, but it didn’t work either. Following this <a href="https://serverfault.com/questions/736471/how-do-i-change-my-default-shell-on-a-domain-account">stack overflow</a> I figured out how to add an <code>/etc/passwd/</code> entry for my domain account: <code>getent passwd &lt;EID&gt; | sudo tee -a /etc/passwd</code> which obviously also had to be done as my privileged user. Once that was complete the devcontainer fired up as expected.</p>
<p>The last piece was to double check that I could correctly access the autofs mounted network shares from within a container. In my <code>devcontainer.json</code> setting I added an entry like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb2-1"> <span class="er" style="color: #AD0000;">"mounts":</span> <span class="ot" style="color: #003B4F;">[</span></span>
<span id="cb2-2">    <span class="fu" style="color: #4758AB;">{</span></span>
<span id="cb2-3">        <span class="dt" style="color: #AD0000;">"source"</span><span class="fu" style="color: #4758AB;">:</span> <span class="st" style="color: #20794D;">"/mnt/${localEnv:USER}/&lt;share_short_name&gt;"</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb2-4">        <span class="dt" style="color: #AD0000;">"target"</span><span class="fu" style="color: #4758AB;">:</span> <span class="st" style="color: #20794D;">"/&lt;share_short_name&gt;"</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb2-5">        <span class="dt" style="color: #AD0000;">"type"</span><span class="fu" style="color: #4758AB;">:</span> <span class="st" style="color: #20794D;">"bind"</span></span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;">}</span></span>
<span id="cb2-7"><span class="ot" style="color: #003B4F;">]</span></span></code></pre></div>
<p>This worked! I also confirmed that other users on the system couldn’t see any of my volumes, images or containers. What an adventure. All in all this was about 4 days (calendar, not hours) of effort to figure out. What an adventure.</p>
</section>
<section id="cleaned-up-instructions" class="level1">
<h1>Cleaned up instructions</h1>
<section id="host-configuration" class="level2">
<h2 class="anchored" data-anchor-id="host-configuration">Host configuration</h2>
<p>Official documentation on rootless docker config can be found <a href="https://docs.docker.com/engine/security/rootless/">here</a></p>
<p>For further discussion of the user namespace remapping (which explains why users should be root within the devcontainer and what <code>/etc/subuid</code> and <code>/etc/subgid</code> are doing) see the official docs <a href="https://docs.docker.com/engine/security/userns-remap/">here</a></p>
<ul>
<li><p>All testing was done on an Ubuntu VM (specifically 22.04.1 LTS). As most development activity occurs within docker, most of these instructions will hopefully survive a newer Ubuntu release, and could probably even be applied to an entirely different distro if for some reason we wanted to do that. CPU, RAM and disk requirements will largely depend on the size of the team and their activity, but note that docker images tend to take up a fair bit of space, and due to (intentional) isolation of docker runtimes between users there will be no sharing of image layers. Thus 5 users each using a 2GB docker image will take up a total of 10GB of space.</p></li>
<li><p>Join the machine to the domain</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">#Setting up AD Authentication</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">sudo</span> apt install <span class="at" style="color: #657422;">-y</span> realmd libnss-sss libpam-sss sssd sssd-tools adcli samba-common-bin oddjob oddjob-mkhomedir packagekit</span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;">#Discovery</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">sudo</span> realm discover <span class="op" style="color: #5E5E5E;">&lt;</span>domain<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;">#Adding to the domain (enter password when prompted)</span></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;">sudo</span> realm join <span class="at" style="color: #657422;">-U</span> <span class="op" style="color: #5E5E5E;">&lt;</span>privileged domain user<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;">#Adding domain user to allow ssh</span></span>
<span id="cb3-8"><span class="ex" style="color: null;">realm</span> permit <span class="at" style="color: #657422;">-g</span> groupname@domainname</span></code></pre></div></li>
<li><p>Install docker enginer as per <a href="https://docs.docker.com/engine/install/ubuntu/">the official docker docs</a>. Note, do not use the included docker package in the Ubuntu base repository.</p></li>
<li><p>Make sure the system docker daemon is not running and disable it if it is: <code>sudo systemctl disable --now docker.service docker.socket</code></p></li>
<li><p>Install <code>autofs</code> and <code>cifs-utils</code> to allow users to mount network shares with their credentials.</p></li>
<li><p>For each user that will be running docker on this machine, create an entry in <code>/etc/subuid</code> and <code>/etc/subgid</code> (the entry in each file should look the same)</p>
<ul>
<li>each entry in each file has the format <code>&lt;username&gt;:&lt;baseuid&gt;:65536</code>. <code>&lt;baseuid&gt;</code> starts at 100000 for the first entry and increases by 65536 for each subsequent entry. For example, here’s what <code>/etc/subuid</code> looks like on the machine where this guide was tested:</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">admin:100000:65536</span></span>
<span id="cb4-2"><span class="ex" style="color: null;">dockertest:165536:65536</span></span>
<span id="cb4-3"><span class="ex" style="color: null;">dockertesta:231072:65536</span></span>
<span id="cb4-4"><span class="ex" style="color: null;">dockertestb:296608:65536</span></span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;">&lt;</span>EID<span class="op" style="color: #5E5E5E;">&gt;</span>:362144:65536</span></code></pre></div>
<ul>
<li>Local user accounts seem to get their entries auto-generated correctly, but at least in testing, domain joined user accounts had to be manually created.</li>
</ul></li>
<li><p>For each user that will be running docker in this machine, create an entry in <code>/etc/passwd</code> that specifies their default shell as <code>bash</code>. Otherwise VS code will not be able to figure out the user level docker socket it should attach to.</p>
<ul>
<li><code>getent passwd &lt;EID&gt; | sudo tee -a /etc/passwd</code></li>
</ul></li>
<li><p>Create a base user folder to mount network shares for each user in <code>/mnt/&lt;EID&gt;</code>, make that user the owner of that folder and lock down access to that user (<code>chown &lt;EID&gt;</code> and <code>chmod 700 /mnt/&lt;EID&gt;</code>).</p></li>
<li><p>For each user that will be running docker from this machine, create a line in <code>/etc/auto.master</code> in the following format:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;">/mnt/</span><span class="op" style="color: #5E5E5E;">&lt;</span>EID<span class="op" style="color: #5E5E5E;">&gt;</span> /etc/auto.sambashares-<span class="op" style="color: #5E5E5E;">&lt;</span>EID<span class="op" style="color: #5E5E5E;">&gt;</span> --timeout=30 –ghost</span></code></pre></div></li>
<li><p>Populate <code>/etc/auto.sambashares-&lt;EID&gt;</code> with a line for each network share that user has to access as follows:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">&lt;</span>localsharename<span class="op" style="color: #5E5E5E;">&gt;</span> -fstype=cifs,rw,sec=krb5,uid=<span class="va" style="color: #111111;">${UID}</span>,cruid=<span class="va" style="color: #111111;">${UID}</span> <span class="bu" style="color: null;">:</span><span class="op" style="color: #5E5E5E;">&lt;</span>full share path<span class="op" style="color: #5E5E5E;">&gt;</span></span></code></pre></div>
<p>Where <code>&lt;localsharename&gt;</code> is the name of the folder under <code>/mnt/&lt;EID&gt;</code> that the share will be mounted to, and <code>&lt;full share path&gt;</code> is the path to the SMB file share.</p></li>
</ul>
</section>
<section id="user-configuration" class="level2">
<h2 class="anchored" data-anchor-id="user-configuration">User configuration</h2>
<p>Most configuration of the VM should have been completed by its system administrator, but there are a couple user level tasks you will have to run before you can work with docker.</p>
<section id="install-the-rootless-docker-daemon" class="level3">
<h3 class="anchored" data-anchor-id="install-the-rootless-docker-daemon">Install the rootless docker daemon</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;">dockerd-rootless-setuptool.sh</span> install</span></code></pre></div>
</section>
<section id="set-an-environment-variable-for-the-docker-socket" class="level3">
<h3 class="anchored" data-anchor-id="set-an-environment-variable-for-the-docker-socket">Set an environment variable for the Docker socket</h3>
<p>Add the following line to <code>~/.bashrc</code>: <code>DOCKER_HOST=unix:///run/user/$(id -u)/docker.sock</code></p>
</section>
<section id="log-out-and-back-in-and-test" class="level3">
<h3 class="anchored" data-anchor-id="log-out-and-back-in-and-test">Log out and back in and test</h3>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;">docker</span> run hello-world</span></code></pre></div>
</section>
<section id="set-up-network-shares" class="level3">
<h3 class="anchored" data-anchor-id="set-up-network-shares">Set up network shares</h3>
<p>Attaching network shares cannot be done directly by the user. System administrators provision network drives for each user under <code>/mnt/&lt;EID&gt;</code>. If the network share you want is not there, contact your system administrator with its information and they will add it.</p>


</section>
</section>
</section>

 ]]></description>
  <category>configuration</category>
  <category>linux</category>
  <guid>https://ianepreston.github.io/blog/posts/2022-12-30-rootless-docker.html</guid>
  <pubDate>Fri, 30 Dec 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Building my own devcontainers</title>
  <link>https://ianepreston.github.io/blog/posts/2022-12-30-devcontainers.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Microsoft has created the <a href="https://code.visualstudio.com/docs/devcontainers/containers">devcontainer</a> standard for packaging up your development environment into a docker image and I love it.</p>
<p>Even though I have a fairly automated environment setup at home, it’s still a hassle whenever I want to start a new project or pick up an old one to make sure I have all the dependencies in place. It’s even trickier if I’m trying to help another person contribute to a project of mine. Devcontainers solve both these issues. Microsoft publishes a number of out of the box images and templates in their GitHub <a href="https://github.com/devcontainers">devcontainers project</a>.</p>
<p>These work quite well, but I’m picky and want things set up in a certain way. For instance, I want <a href="https://github.com/thoughtbot/rcm">rcm</a> installed for dotfile management, and <a href="https://starship.rs/">starship prompt</a> in any environment I work in. On top of that, for python development I like the <a href="https://cjolowicz.github.io/posts/hypermodern-python-01-setup/">hypermodern</a> suite of tools to be installed. It would be relatively easy to make a dockerfile that has these features installed and put it in every project, but I want to overengineer things. This isn’t entirely just me liking to hack on things. The build time for my python environment is actually quite long thanks to compiling several different versions of python, so while a Dockerfile would work, it would be annoying to maintain and take quite a while to build.</p>
<p>In light of this, I decided to make my own copy of the <a href="https://github.com/devcontainers/images">images repository</a> that Microsoft uses to build their devcontainers and make my own. This post chronicles some of the challenges I had doing that.</p>
</section>
<section id="figuring-out-the-code" class="level1">
<h1>Figuring out the code</h1>
<p>To start I just copied the entire <a href="https://github.com/devcontainers/images">images</a> repository and poked around. It’s a beast of a repo (at least compared to the personal or small organization projects I’m used to working on) so it took quite a while just to get a sense of what was there. At a high level there’s a <code>.github</code> folder which contains the CI/CD workflows, a <code>build</code> folder that contains node scripts that build the images, and a <code>src</code> folder that contains the devcontainer specs. I started by deleting all but the <code>base-ubuntu</code> image from <code>src</code> so I could focus on getting one container built without extensive build times. After that I tried to get the build script working locally. Fortunately there are pretty good README files included in each section of the codebase, so I could get a general sense of what was going on.</p>
<p>The next two difficult parts that went together were figuring out how to navigate and understand the node codebase, since I’ve never written node or any javascript before, and figuring out what I’d need to modify to get things working in my repository. Some things were relatively straightforward, like the GitHub actions were calling for secrets like <code>REPOSITORY_NAME</code> and <code>REPOSITORY_SECRET</code> that I’d have to swap out for my image registry name and credentials. Once I got past that surface level understanding though, it got trickier. One fairly easy example was that the original GitHub action wanted to be run on some custom Microsoft <code>devcontainer-image-builder-ubuntu</code> VM that I didn’t have access to. It seemed to work fine if I changed that to <code>ubuntu-latest</code>, I just had to notice the issue and change it. Other things were more embedded. Microsoft is publishing their images to <a href="https://azure.microsoft.com/en-us/products/container-registry/">Azure container registry</a> whereas I want to use <a href="https://hub.docker.com/">Docker hub</a>. Again, some of this was as simple as switching out <code>az login</code> with <code>docker login</code> in the scripts, but some of it was a little more complicated. Part of the node code queries the registry to see what images are there and what tags they have to make sure published image tags aren’t overwritten accidentally. This is a great feature, but it relied heavily on calling the <code>acr</code> command prompt to retrieve that info. I had to find those sections in the code, figure out what sort of data they’d be returning, figure out what request to send to the docker hub API to get similar data, and then modify the node code to parse it the same way. Since I’d never worked with the docker hub API, or node, or seen the actual output of the <code>acr</code> commands I was trying to reproduce, this took some trial and error.</p>
<p>An additional challenge was separating out the nice features of the Microsoft code base from the stuff that I didn’t want and that just made things more complicated. The two main things in the latter category were the secondary registry logic and the stubs repository logic. In both cases, Microsoft is publishing lots of extra stuff besides the built devcontainer image, either because they have two repositories to publish to (I think this relates to them moving the devcontainer spec outside of VS Code into its own project) or they want to publish stub files that other developers can extend for their own purposes. Neither applies to me, but since that logic is embedded in the GitHub actions and the node code that publishes regular images I had to find and strip out all that logic before I could publish my own images.</p>
</section>
<section id="building-my-own-devcontainers" class="level1">
<h1>Building my own devcontainers</h1>
<p>Prior to going to all the trouble of setting up this build infrastructure, I’d already spent quite a bit of time building devcontainer images, primarily for python. In light of that, once I got the build infrastructure going it wasn’t a huge leap to get my own devcontainers building. There were some growing pains though. The Microsoft image builder builds multiple variants of images, namely basing them off different Ubuntu releases or architectures (x86/64 vs arm). I definitely ran into situations where things seemed to be building fine but then I realized some combo of release and architecture was failing and stopping the whole pipeline from completing. There are ways to test those things locally in the repository, but I didn’t have any comprehensive workflow set up so it was easy to miss things. Some stuff I just didn’t bother fixing and removed the troublesome build. For instance, there were a fair number of issues building images based on Ubuntu 18.04LTS (one of the default variants from Microsoft) and I just decided there was no point spending time fixing issues with a release that was about to be EOL from Ubuntu and just dropped it. Similarly, my Infrastructure as Code image didn’t want to install Terraform on the arm build. I’m not currently planning to run that on an arm system so I just dropped it, maybe I’ll put it back later if I want to run it off a raspberry pi but for now it’s not worth the effort.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This was quite likely more effort than it was objectively worth compared to just building an image and pushing it manually with some tags using the <a href="https://containers.dev/supporting#devcontainer-cli">devcontainer cli</a> at least for my personal projects. I did learn a fair bit going through the exercise though, and since I also intend to adopt devcontainers at work (for myself and other people writing at least python code) knowing how to build images in a more automated and versioned manner will be useful.</p>
<p>My repository is <a href="https://github.com/ianepreston/devcontainers">here</a>, the original Microsoft one is <a href="https://github.com/devcontainers/images">here</a>. My repo is definitely a bit of a mess with ugly commits just testing out CI/CD outcomes and a lot of failed releases since I’d never used GitHub directly to release software before, but that’s all part of the learning experience.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <category>linux</category>
  <guid>https://ianepreston.github.io/blog/posts/2022-12-30-devcontainers.html</guid>
  <pubDate>Fri, 30 Dec 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Home cluster part 1 - Intro and Proxmox install</title>
  <link>https://ianepreston.github.io/blog/posts/2022-11-21-proxmox.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I’ve been running services on my home network for years. It started with running things bare metal on the same machine I used as my desktop for day to day work. That was a nice easy way to get started, but I was constantly running into conflicting updates, or accidentally breaking something when I tried to get some desktop service working. The next step was getting a dedicated machine solely for hosting services. This worked a lot better since my service requirements changed a lot less frequently than my desktop requirements, but I still ran into conflicting services, or breaking one service when I was testing something out on another. The next step was a dedicated machine, but running all my services in docker containers. That really helped with isolation and was also where I got serious about automating my environment with ansible, which generally meant that even a complete system wipeout only took me down for as long as it took to reinstall the base OS and re-run my ansible playbook.</p>
<p>Now it’s time for the next step in making my home server environment fancier - <a href="https://www.proxmox.com/en/">Proxmox</a>.</p>
</section>
<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>Why bother doing this? My current system works pretty well, but it still has a few issues I’d like to address with Proxmox. The first is that my base OS is a single point of failure. I can swap out individual container services with impunity, but swapping out or experimenting with different operating systems means taking my whole stack down. Of course this also means that if any of the physical components of my server fail all of my services are down until I can replace or repair those components / the whole system.</p>
<p>Switching to Proxmox addresses both of these issues. First, even on a single physical host I can run multiple virtual machines to test different operating system configurations without downtime. Second, I can cluster together Proxmox nodes such that even if a single host fails I can fail over to another one.</p>
<p>Realistically, this is way overkill for the importance of the services I’m running currently. My <a href="https://miniflux.app/">miniflux</a> app going down for a while is just not that big a deal. One service that I’m planning to introduce in this environment that I was nervous to set up on my old stack for reliability reasons is <a href="https://www.home-assistant.io/">home assistant</a> but even in this new world I’m not going to have anything that won’t have an analog failback. It’s not like if this server goes down my furnace won’t work.</p>
<p>So honestly my motivation for this is mostly because I find it interesting to learn about clustering and want a freer hand to experiment with some new system administration and operation tools. Eventually I plan to figure out <a href="https://kubernetes.io/">kubernetes</a> on top of this stack, but that’s a whole other level of complexity so we’ll leave it alone for now.</p>
</section>
<section id="hardware-selection" class="level1">
<h1>Hardware selection</h1>
<p>I waffled for a ridiculously long time deciding what hardware I wanted to run this on. For reference, my existing server is a Dell Optiplex 7020. It’s got an i5-4590, 8GB of RAM and has been frankly doing just fine with the services I’ve put on it. I know I’m adding a little overhead by adding virtualization, and eventually k8s to the stack, and I plan to add some more services (particularly on the operations side like logging and alerting tools) but honestly my compute requirements are quite modest. In terms of power budget I’m lucky enough to be in a region with fairly affordable electricity, so after running some scenarios on different hardware I concluded that it wasn’t going to be a major financial factor unless I went with lots of really old inefficient enterprise gear. However, from an environmental perspective I still want to limit my consumption.</p>
<p>I considered four general classes of hardware: single board computers (SBCs) like raspberry pi, off lease/refurbished enterprise desktops, used enterprise servers, and custom built PCs.</p>
<p>SBCs are often promoted in terms of being both affordable and low power consumption. At the time of this writing considering them is something of a non-starter thanks to supply chain issues, but even if that weren’t the case I decided against them. While a base board is definitely quite affordable, once you add on all the additional required components (storage, case, power supply) the price point is pretty comparable to a refurbished enterprise desktop for considerably lower performance, essentially no upgradability (particularly RAM, which is key) and the challenges of ARM (most software has builds for ARM, but there are still some gaps). They’re definitely the lowest in absolute power consumption, but I think the gap narrows quite a bit when considering the electricity to compute power ratio, and besides, power consumption isn’t the most important thing to me in this build.</p>
<p>I didn’t really consider used enterprise servers. The noise, power consumption and physical space requirements just didn’t seem to make sense. Maybe if I was based in the US where the used market seems thicker I could have picked something up for cheap enough to consider, but up in Canada the price performance just didn’t seem to be there. Some people recommend enterprise gear because it more closely approximates an enterprise environment and has some fancy management features that’s missing from the consumer market, not to mention extra reliability features like ECC RAM and redundant power supplies. None of those were compelling enough features for me to overcome the previously mentioned noise, power, and space considerations.</p>
<p>A custom built PC was definitely a serious consideration. I specced out a pretty beefy machine using <a href="https://ca.pcpartpicker.com/">PC partpicker</a> that definitely would have handled whatever I threw at it for about $750 CAD. $2,250 would have gotten me a three node setup with plenty of power and the option to do things like throw in GPUs if I wanted to mess around with GPU accellerated machine learning or do lots of video transcoding. While that was technically within my budget it seemed a lot to commit to what was essentially an experiment.</p>
<p>Finally, after going through all those options I decided to follow the path of <a href="https://www.servethehome.com/introducing-project-tinyminimicro-home-lab-revolution/">tiny mini micro</a> and score some ultra small form factor (USFF) used PCs from eBay. They don’t have quite the low space or power consumption of an SBC but they’re pretty dang small and use mostly laptop components so they’re fairly power efficient. On the other hand, there’s a much better upgrade path for them compared to SBCs and they’re x86 so there’s much greater compatibility. They’re definitely not as high power as a custom build, but as you’ll see below they’re way cheaper, and I can always extend the cluster or swap them out to use as media boxes or something with beefier hardware later.</p>
<section id="what-i-actually-bought" class="level2">
<h2 class="anchored" data-anchor-id="what-i-actually-bought">What I actually bought</h2>
<ul>
<li>HP ProDesk 400 G3
<ul>
<li>i5-7500T</li>
<li>32GB RAM</li>
<li>512 GB nvme SSD</li>
<li>1TB WD Blue SATA SSD (purchased new and installed after)</li>
<li>348.75 CAD total price - 252.75 CAD for the system 96 CAD for the SSD upgrade.</li>
</ul></li>
<li>HP EliteDesk 800 G3
<ul>
<li>i5-7500T</li>
<li>32GB RAM (purchased new and installed after, shipped with 4GB)</li>
<li>512 GB nvme SSD (purchased new, came with 240 GB that I repurposed for a portable drive)</li>
<li>1TB WD Blue SATA SSD (purchased new and installed after)</li>
<li>456.63 CAD total price - 141.34 for the system, 125.15 for the RAM, 96 for the SSD, 94.14 for the nvme SSD</li>
</ul></li>
<li>Dell 3060 Micro
<ul>
<li>i5-8500T</li>
<li>32GB RAM (purchased new and installed after, shipped with 8GB)</li>
<li>512 GB nvme SSD (purchased new, came with 240 GB that I repurposed for a portable drive)</li>
<li>1TB WD Blue SATA SSD (purchased new and installed after)</li>
<li>503.53 CAD total price - 180 for the system, 133.39 for the RAM, 96 for the SSD, 94.14 for the nvme SSD</li>
</ul></li>
</ul>
<p>As you can see the price varied between the nodes. I got lucky with the HP ProDesk because it was in Canada and came equipped with the RAM and nvme I wanted. Making those upgrades after on the other systems and ordering from the US increased the price. With further patience and luck maybe I could have saved a couple hundred bucks, but honestly I’d already been waiting a long time to get this project kicked off and I kind of think that ProDesk was a bit of a unicorn.</p>
</section>
</section>
<section id="installing-proxmox" class="level1">
<h1>Installing Proxmox</h1>
<p>The base proxmox install (should be) dead simple. Grab the <a href="https://www.proxmox.com/en/downloads/category/iso-images-pve">ISO</a>, rip it to a USB drive, boot it in your system and follow a couple prompts. My first issue with booting was that I couldn’t get into the boot menu or BIOS menu. It turned out that there was some weird incompatibility between my monitor and the host when using DisplayPort. Fortunately I had a DisplayPort to HDMI cable kicking around and using that let me get into the menu and select the right boot option. I had to go into the BIOS and turn off secure boot (Advanced -&gt; Secure boot config -&gt; legacy disable and secure boot disable in the HPs). That sounds sketchy, but it’s basically a requirement to boot anything other than Windows. While I was there I made sure that virtualization was enabled. In the HPs that was under Advanced -&gt; System options -&gt; and make sure “Virtualization Technology (VTx)” and “Virtualization Technologyy for directed I/O (VTd)” are checked. For the Dell the config is similar. <code>F2</code> gets you into the BIOS. Under “Security” turn off “TPM 2.0” and under “Secure boot” turn off “secure boot”. There’s also a tab for “virtualization support”. Both configs were alread checked on mine, but that’s where it lives. The next weird thing I had happen was actually booting the Proxmox image. I tried multiple USB drives and image burners (<a href="https://www.balena.io/etcher/">balena</a> and <a href="https://rufus.ie/en/">rufus</a>) but just couldn’t get it working. Ubuntu server and debian both booted fine but Proxmox wouldn’t play ball. After a bunch of searching I saw a recommendation to try <a href="https://www.ventoy.net/en/index.html">ventoy</a>. I’d heard of ventoy before but dismissed it as just another thing that could go wrong when trying to get an installer booting. Ironically it worked right away and now I’m a total convert, since I can just dump ISO images into a folder on the boot drive and pick from any of them when I plug it into a system. As a PS I also switched over from using a regular USB 3.0 flash drive to a USB SSD drive and oh man, if you have one of those available I recommend it, so much faster. Once I got past those initial hiccups it was mostly straightforward. I just gave the node a hostname, set its IP, my password, time zone info and maybe a couple other things. The main sneaky thing to change was on the first menu, where you select the drive to install to. I had to click “Options”, select “ZFS RAID 0” and have it only use my nvme drive. I don’t need most of the ZFS features, but if you want to migrate VMs across your cluster easily they need to be on that sort of storage. For the Kube nodes I won’t care about that, but some VMs I will, and I want to save the SSD for persistent volumes for kubernetes. After that it rebooted, I confirmed I could access the admin portal throught the web interface and stuck it down in my utility room to continue the setup remotely from my workstation.</p>
</section>
<section id="base-proxmox-config" class="level1">
<h1>Base Proxmox config</h1>
<p>I want most of the config for proxmox to be done using ansible, which I’ll cover in a follow up post. The only thing I did manually on the nodes was set them up as a cluster. That was actually ridiculously easy to do. The <a href="https://pve.proxmox.com/wiki/Cluster_Manager">docs</a> cover it well so I won’t go into it here.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>That’s it for this post, I just wanted to introduce the topic and get to the point where I had the nodes set up. Subsequent posts will deal with further node configuration, as well as actually deploying VMs to the nodes.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <category>linux</category>
  <category>proxmox</category>
  <guid>https://ianepreston.github.io/blog/posts/2022-11-21-proxmox.html</guid>
  <pubDate>Mon, 21 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Dunning-Kruger is autocorrelation</title>
  <link>https://ianepreston.github.io/blog/posts/2022-08-01-dunning.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>A while back I read <a href="https://economicsfromthetopdown.com/2022/04/08/the-dunning-kruger-effect-is-autocorrelation/">this interesting post</a> that explained how the Dunning-Kruger effect is an example of autocorrelation. Before proceeding with the rest of this post, I’d highly recommend reading that one. I liked their example of using simulated data to show that the supposed effect can be observed even in completely uncorrelated variables. It got me wondering what it would look like if we had other relationships between predicted and actual performance, and so this post is an opportunity to explore that.</p>
</section>
<section id="setup-all-the-code-is-here" class="level2">
<h2 class="anchored" data-anchor-id="setup-all-the-code-is-here">Setup (all the code is here)</h2>
<p>If you don’t want to read code and just want to see the charts feel free to skip to the next section.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> display</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-7"></span>
<span id="cb1-8">plt.style.use(<span class="st" style="color: #20794D;">"dark_background"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">N_SAMPLES <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1_000</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">class</span> DunningKruger:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, actual_dist: np.ndarray, predicted_dist: np.ndarray) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb3-3">        <span class="co" style="color: #5E5E5E;">"""Build dataframe of actual percentile vs predicted."""</span></span>
<span id="cb3-4">        <span class="va" style="color: #111111;">self</span>.df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb3-5">            pd.DataFrame({<span class="st" style="color: #20794D;">"Actual Distribution"</span>: actual_dist, <span class="st" style="color: #20794D;">"Predicted Distribution"</span>:predicted_dist})</span>
<span id="cb3-6">            <span class="co" style="color: #5E5E5E;"># Handle prediction errors that produce impossible percentiles</span></span>
<span id="cb3-7">            .clip(lower<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>, upper<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">100.0</span>)</span>
<span id="cb3-8">            .assign(predict_error<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[<span class="st" style="color: #20794D;">"Predicted Distribution"</span>] <span class="op" style="color: #5E5E5E;">-</span> df[<span class="st" style="color: #20794D;">"Actual Distribution"</span>])</span>
<span id="cb3-9">            .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"predict_error"</span>: <span class="st" style="color: #20794D;">"Prediction Error"</span>})</span>
<span id="cb3-10">        )</span>
<span id="cb3-11">    </span>
<span id="cb3-12">    <span class="at" style="color: #657422;">@property</span></span>
<span id="cb3-13">    <span class="kw" style="color: #003B4F;">def</span> x_vs_y_chart(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> sns.axisgrid.FacetGrid:</span>
<span id="cb3-14">        <span class="co" style="color: #5E5E5E;">"""Original style chart of actual vs predicted."""</span></span>
<span id="cb3-15">        g <span class="op" style="color: #5E5E5E;">=</span> sns.lmplot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Actual Distribution"</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Predicted Distribution"</span>, data<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.df, scatter_kws<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"alpha"</span>: <span class="fl" style="color: #AD0000;">0.25</span>})</span>
<span id="cb3-16">        g.ax.axline((<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">100</span>,<span class="dv" style="color: #AD0000;">100</span>), linewidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"white"</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"--"</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb3-17">        plt.show()</span>
<span id="cb3-18"></span>
<span id="cb3-19">    <span class="at" style="color: #657422;">@property</span></span>
<span id="cb3-20">    <span class="kw" style="color: #003B4F;">def</span> x_vs_error_chart(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> sns.axisgrid.FacetGrid:</span>
<span id="cb3-21">        <span class="co" style="color: #5E5E5E;">"""Actual vs prediction error (implicit reference in DK paper)."""</span></span>
<span id="cb3-22">        g <span class="op" style="color: #5E5E5E;">=</span> sns.lmplot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Actual Distribution"</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Prediction Error"</span>, data<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.df, scatter_kws<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"alpha"</span>: <span class="fl" style="color: #AD0000;">0.25</span>})<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-23">        g.ax.axline((<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">100</span>,<span class="dv" style="color: #AD0000;">0</span>), linewidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"white"</span>, linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"--"</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb3-24">        plt.show()</span></code></pre></div>
</div>
</section>
<section id="scenarios" class="level2">
<h2 class="anchored" data-anchor-id="scenarios">Scenarios</h2>
<p>In the following sections I’ll simulate some actual vs predicted distributions and see what they look like when you compare them to the Dunning Kruger graph. I’m not going to plot quantile vs percentile as in the original chart, as I think that just obscures what’s actually going on. The percentile vs percentile view shows the same overall pattern if you fit a regression line through it, which is easy enough to do.</p>
<section id="purely-random" class="level3">
<h3 class="anchored" data-anchor-id="purely-random">Purely random</h3>
<p>This was the example in the original blog post that convinced me of the argument. I’ll start by reproducing it here. In this example predicted percentile performance is completely random and independent of actual percentile.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">actual_dist <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(low<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>, high<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">100.0</span>, size<span class="op" style="color: #5E5E5E;">=</span>N_SAMPLES)</span>
<span id="cb4-2">predicted_dist <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(low<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>, high<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">100.0</span>, size<span class="op" style="color: #5E5E5E;">=</span>N_SAMPLES)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">dk <span class="op" style="color: #5E5E5E;">=</span> DunningKruger(actual_dist, predicted_dist)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">dk.x_vs_y_chart</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-08-01-dunning_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The basic format of this <code>x_vs_y_chart</code> will be the same in all scenarios, so I’ll just explain how to interpret it in this first example. The x axis represents someone’s actual place in the percentile distribution, the y axis is their predicted place in that same distribution. Each point in the scatter plot represents a single observation of someone’s actual place in the distribution and their corresponding prediction of where they are in the distribution. The white dotted line moving up at a 45 degree angle represents perfect prediction, where all observations would be if everyone could exactly predict their place in the distribution. The blue-green line is a regression line of the relationship between someone’s actual place in the distribution and their prediction. The fact that it’s pretty much flat suggests no relationship, which is what we’d expect since that’s how the data was generated</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">dk.x_vs_error_chart<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-08-01-dunning_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>As with the previous chart, the basic format of this <code>x_vs_error_chart</code> will be the same in all scenarios, so I’ll just explain how to interpret it in this first example. The x axis again represents someone’s actual place in the percentile distribution, but now the y axis is the difference between their prediction and actual place. Each point in the scatter plot represents a single observation of someone’s actual place in the distribution and their corresponding prediction error. The horizontal white dotted line moving up at a zero again represents perfect prediction, where all observations would be if everyone could exactly predict their place in the distribution. The blue-green line is a regression line of the relationship between someone’s actual place in the distribution and their prediction error. Note that in this randomly generated scenario we’re seeing something that looks like Dunning Kruger, with people on the low endof the distribution tending to overestimate their place, and people on the high end tending to underestimate.</p>
</section>
<section id="unbiased-prediction-error" class="level3">
<h3 class="anchored" data-anchor-id="unbiased-prediction-error">Unbiased prediction error</h3>
<p>In this scenario everyone is equally good at predicting their percentile placement with only a small, unbiased error.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">actual_dist <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(low<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>, high<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">100.0</span>, size<span class="op" style="color: #5E5E5E;">=</span>N_SAMPLES)</span>
<span id="cb8-2">error <span class="op" style="color: #5E5E5E;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>, scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">10.0</span>, size<span class="op" style="color: #5E5E5E;">=</span>N_SAMPLES)</span>
<span id="cb8-3">predicted_dist <span class="op" style="color: #5E5E5E;">=</span> actual_dist <span class="op" style="color: #5E5E5E;">+</span> error</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">dk <span class="op" style="color: #5E5E5E;">=</span> DunningKruger(actual_dist, predicted_dist)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">dk.x_vs_y_chart<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-08-01-dunning_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">dk.x_vs_error_chart<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-08-01-dunning_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Even here we can see a slight appearance of “overconfidence” for lower percentiles and “underconfidence” for higher percentiles simply because prediction errors are truncated at the top and bottom (If I’m actually in the lowest percentile the only errors I can possibly make are to overestimate my performance).</p>
</section>
<section id="actual-dunning-kruger" class="level3">
<h3 class="anchored" data-anchor-id="actual-dunning-kruger">Actual Dunning Kruger</h3>
<p>Let’s see what this would actually look like if we simply had overconfidence in the bottom half of the distribution. I could add in underconfidence among the top half as well, but the message of the original paper focused on the overconfidence so let’s do the same here.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">actual_dist <span class="op" style="color: #5E5E5E;">=</span> np.random.uniform(low<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>, high<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">100.0</span>, size<span class="op" style="color: #5E5E5E;">=</span>N_SAMPLES)</span>
<span id="cb12-2">base_error <span class="op" style="color: #5E5E5E;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>, scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">10.0</span>, size<span class="op" style="color: #5E5E5E;">=</span>N_SAMPLES)</span>
<span id="cb12-3">below_median_indicator <span class="op" style="color: #5E5E5E;">=</span> actual_dist <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">50.0</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;"># The further below the median you are the greater you might overestimate your position</span></span>
<span id="cb12-5">error_scaler <span class="op" style="color: #5E5E5E;">=</span> (<span class="fl" style="color: #AD0000;">50.0</span> <span class="op" style="color: #5E5E5E;">-</span> actual_dist) <span class="op" style="color: #5E5E5E;">*</span> below_median_indicator</span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;"># Scale up how overconfident this makes you</span></span>
<span id="cb12-7">overconfidence_error <span class="op" style="color: #5E5E5E;">=</span> error_scaler <span class="op" style="color: #5E5E5E;">*</span> np.random.uniform(low<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>, high<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">2.0</span>, size<span class="op" style="color: #5E5E5E;">=</span>N_SAMPLES)</span>
<span id="cb12-8">predicted_dist <span class="op" style="color: #5E5E5E;">=</span> actual_dist <span class="op" style="color: #5E5E5E;">+</span> error <span class="op" style="color: #5E5E5E;">+</span> overconfidence_error</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">dk <span class="op" style="color: #5E5E5E;">=</span> DunningKruger(actual_dist, predicted_dist)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">dk.x_vs_y_chart<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-08-01-dunning_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">dk.x_vs_error_chart<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-08-01-dunning_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Honestly I was pretty convinced by the argument in the original post, so nothing earth shattering came out of this exercise for me. But it was interesting to see what the charts looked like under different situations. And it gave me an excuse to write some code and build some charts, which I haven’t had in a while.</p>
<p>If you’d like to try out other scenarios, you can click the binder link near the top of this post to open it in an interactive notebook. If you want to try other distributions for your actual/predicted/error distributions, check out the <a href="https://numpy.org/doc/stable/reference/random/">numpy docs</a> on random sampling.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>statistics</category>
  <guid>https://ianepreston.github.io/blog/posts/2022-08-01-dunning.html</guid>
  <pubDate>Mon, 01 Aug 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Modeling out fixed closed vs capped variable mortgages</title>
  <link>https://ianepreston.github.io/blog/posts/2022-03-17-mortgage.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I’m looking to buy a house in the near future. I’m pretty risk averse, so even though I know that in theory a variable rate mortgage should be better for me financially, I was willing to take a fixed rate mortgage in order to have more certainty. In discussion with a mortgage broker it was suggested that I could get the best of both worlds by taking out a capped variable mortgage and increasing my payment amount to what I would have paid under a fixed rate. In theory this gives me a hedge in that my payments are capped, and as long as my variable rate is below the fixed rate I’m making extra payments against my principle compared to what I’d be doing with a fixed rate. Let’s see what that looks like under some different scenarios using python. Some of these calculations I already implemented in my <a href="https://github.com/ianepreston/rentorown/blob/master/src/rentorown/house.py">rent or own calculator</a> but the scenarios I’m working on are different enough here that I’m only going to use that as a reference rather than importing any of the code.</p>
</section>
<section id="get-some-data" class="level2">
<h2 class="anchored" data-anchor-id="get-some-data">Get some data</h2>
<p>To do any scenario planning it will be helpful to have some historical data on the relevant interest rates. Specifically I want to know 5 year fixed mortgage rates, and the big bank prime rate, as that forms the basis of variable rate mortgages. At the time of this writing RBC is offering variable mortgages at “RBC Prime Rate - 0.750%” but they’re also offering a “special rate” of 3.34% compared to their posted rate of 4.79% for 5 year fixed. The delta there is 1.45%. Their posted variable rate is just their posted prime. I’m less interested in the exact rates than I am the delta. It looks like right now the delta of their offered rates between fixed and closed (3.34 - 1.95 = 1.39) is less than their posted fixed and closed rate (4.79 - 2.70 = 2.09). Because the data set I can work with only has posted rates and I have no way of estimating the “true” delta in historical periods I’ll use it as the basis for this analysis. However, it will be important to remember that at least in this current low interest rate environment there’s less of a gap between fixed and variable rates than my data will suggest. Depending on how close these scenarios play out I can re-run them by adding 2.09 - 1.39 = 0.7 onto my prime rate to simulate that narrower gap.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> collections <span class="im" style="color: #00769E;">import</span> defaultdict</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> requests</span></code></pre></div>
</div>
<p>First we grab some historical rate data in JSON from the Bank of Canada website. I tried to grab it as a CSV but it’s terribly formatted, so we’ll go with this and clean it up.</p>
<div class="cell" data-tags="[]" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">rates_json <span class="op" style="color: #5E5E5E;">=</span> requests.get(<span class="st" style="color: #20794D;">"https://www.bankofcanada.ca/valet/observations/group/chartered_bank_interest/json"</span>).json()</span></code></pre></div>
</div>
<p>Next I have to clean it up into a dataframe for analysis.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">renamer <span class="op" style="color: #5E5E5E;">=</span> {k: <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>v[<span class="st" style="color: #20794D;">'description'</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> </span><span class="sc" style="color: #5E5E5E;">{</span>v[<span class="st" style="color: #20794D;">'label'</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>.strip() <span class="cf" style="color: #003B4F;">for</span> k, v <span class="kw" style="color: #003B4F;">in</span> rates_json[<span class="st" style="color: #20794D;">"seriesDetail"</span>].items()}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">base_df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb4-2">    pd.DataFrame(rates_json[<span class="st" style="color: #20794D;">"observations"</span>])</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;"># convert date series from string to datetime</span></span>
<span id="cb4-4">    .assign(d<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: pd.to_datetime(df[<span class="st" style="color: #20794D;">"d"</span>]))</span>
<span id="cb4-5">    .set_index(<span class="st" style="color: #20794D;">"d"</span>)</span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;"># Get the actual rate value out of the dictionary it's in</span></span>
<span id="cb4-7">    .applymap(<span class="kw" style="color: #003B4F;">lambda</span> x: <span class="bu" style="color: null;">float</span>(x[<span class="st" style="color: #20794D;">"v"</span>]), na_action<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ignore'</span>)</span>
<span id="cb4-8">    .rename(columns<span class="op" style="color: #5E5E5E;">=</span>renamer)</span>
<span id="cb4-9">)</span></code></pre></div>
</div>
<p>Let’s take a quick look at it to make sure it’s sensible.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">base_df.tail()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Non-Chequable Savings Deposits</th>
      <th>5-year personal fixed term</th>
      <th>Prime rate</th>
      <th>Conventional mortgage 5-year</th>
      <th>Conventional mortgage 1-year</th>
      <th>Conventional mortgage 3-year</th>
      <th>Guaranteed investment certificates 5-year</th>
      <th>Guaranteed investment certificates 1-year</th>
      <th>Guaranteed investment certificates 3-year</th>
      <th>Daily Interest Savings (balances over $100,000)</th>
    </tr>
    <tr>
      <th>d</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2022-02-16</th>
      <td>0.01</td>
      <td>1.15</td>
      <td>2.45</td>
      <td>4.79</td>
      <td>2.79</td>
      <td>3.49</td>
      <td>1.65</td>
      <td>0.60</td>
      <td>1.25</td>
      <td>0.01</td>
    </tr>
    <tr>
      <th>2022-02-23</th>
      <td>0.01</td>
      <td>1.45</td>
      <td>2.45</td>
      <td>4.79</td>
      <td>2.79</td>
      <td>3.49</td>
      <td>1.75</td>
      <td>0.60</td>
      <td>1.35</td>
      <td>0.01</td>
    </tr>
    <tr>
      <th>2022-03-02</th>
      <td>0.01</td>
      <td>1.45</td>
      <td>2.45</td>
      <td>4.79</td>
      <td>2.79</td>
      <td>3.49</td>
      <td>1.75</td>
      <td>0.60</td>
      <td>1.35</td>
      <td>0.01</td>
    </tr>
    <tr>
      <th>2022-03-09</th>
      <td>0.01</td>
      <td>1.55</td>
      <td>2.70</td>
      <td>4.79</td>
      <td>2.79</td>
      <td>3.49</td>
      <td>1.85</td>
      <td>0.65</td>
      <td>1.28</td>
      <td>0.01</td>
    </tr>
    <tr>
      <th>2022-03-16</th>
      <td>0.01</td>
      <td>1.55</td>
      <td>2.70</td>
      <td>4.79</td>
      <td>2.79</td>
      <td>3.49</td>
      <td>1.85</td>
      <td>0.78</td>
      <td>1.30</td>
      <td>0.01</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>That looks good to me. I’m just going to shrink it down to the just the columns I care about, resample it down to monthly frequency, and give them easier to work with names.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb6-2">    base_df</span>
<span id="cb6-3">    .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"Prime rate"</span>: <span class="st" style="color: #20794D;">"prime"</span>, <span class="st" style="color: #20794D;">"Conventional mortgage 5-year"</span>: <span class="st" style="color: #20794D;">"fiveyear"</span>})</span>
<span id="cb6-4">    .reindex(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"prime"</span>, <span class="st" style="color: #20794D;">"fiveyear"</span>])</span>
<span id="cb6-5">    <span class="co" style="color: #5E5E5E;"># Most early dates don't have values for these series</span></span>
<span id="cb6-6">    .dropna(how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"all"</span>)</span>
<span id="cb6-7">    .reset_index()</span>
<span id="cb6-8">    <span class="co" style="color: #5E5E5E;"># Group it to the first entry for each month</span></span>
<span id="cb6-9">    .groupby(pd.Grouper(key<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"d"</span>, freq<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"M"</span>, convention<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"start"</span>))</span>
<span id="cb6-10">    .first()</span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;"># Make it the start rather than end of the month to make date deltas easier</span></span>
<span id="cb6-12">    .reset_index()</span>
<span id="cb6-13">    .assign(d<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[<span class="st" style="color: #20794D;">"d"</span>].dt.to_period(<span class="st" style="color: #20794D;">'M'</span>).dt.to_timestamp())</span>
<span id="cb6-14">    .set_index(<span class="st" style="color: #20794D;">"d"</span>)</span>
<span id="cb6-15">)</span>
<span id="cb6-16">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>prime</th>
      <th>fiveyear</th>
    </tr>
    <tr>
      <th>d</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1975-01-01</th>
      <td>11.0</td>
      <td>12.00</td>
    </tr>
    <tr>
      <th>1975-02-01</th>
      <td>9.5</td>
      <td>11.50</td>
    </tr>
    <tr>
      <th>1975-03-01</th>
      <td>9.0</td>
      <td>10.75</td>
    </tr>
    <tr>
      <th>1975-04-01</th>
      <td>9.0</td>
      <td>10.50</td>
    </tr>
    <tr>
      <th>1975-05-01</th>
      <td>9.0</td>
      <td>10.75</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="some-quick-exploration" class="level2">
<h2 class="anchored" data-anchor-id="some-quick-exploration">Some quick exploration</h2>
<p>Let’s do some basic charting on this data just to get a sense of what we’re working with.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Would rather use altair but I have lots of data points and I'm not sure how using render server will play with my static site generator</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb7-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># Make my charts a decent size</span></span>
<span id="cb7-5">sns.<span class="bu" style="color: null;">set</span>(rc <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'figure.figsize'</span>:(<span class="dv" style="color: #AD0000;">15</span>,<span class="dv" style="color: #AD0000;">8</span>)})</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Seaborn likes data in tidy format</span></span>
<span id="cb8-2">cdf <span class="op" style="color: #5E5E5E;">=</span> df.melt(ignore_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>).reset_index()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">sns.lineplot(data<span class="op" style="color: #5E5E5E;">=</span>cdf, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"d"</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"value"</span>, hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"variable"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-03-17-mortgage_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Here’s what prime vs 5 year mortgage rates have looked like for the last 50ish years. The variable rate tends to be below the fixed at any given point in time, but of course the variable rate can go up over your mortgage term while a fixed rate will stay fixed. Let’s start the actual analysis.</p>
</section>
<section id="check-variable-vs-5-year-term" class="level2">
<h2 class="anchored" data-anchor-id="check-variable-vs-5-year-term">Check variable vs 5 year term</h2>
<p>For any starting period I can compare a 5 year fixed rate to what the variable rate would have been over that same period and plot the delta between them. Let’s see what that looks like:</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Get all the dates that have at least 5 years of history ahead of them</span></span>
<span id="cb10-2">start_dates <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(df.index[:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">60</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">delta_dict <span class="op" style="color: #5E5E5E;">=</span> defaultdict(<span class="bu" style="color: null;">dict</span>)</span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;">for</span> start_date <span class="kw" style="color: #003B4F;">in</span> start_dates:</span>
<span id="cb11-3">    five_year_rate <span class="op" style="color: #5E5E5E;">=</span> df.loc[start_date, <span class="st" style="color: #20794D;">"fiveyear"</span>]</span>
<span id="cb11-4">    <span class="cf" style="color: #003B4F;">for</span> delta <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">60</span>):</span>
<span id="cb11-5">        variable_rate <span class="op" style="color: #5E5E5E;">=</span> df.loc[start_date <span class="op" style="color: #5E5E5E;">+</span> pd.DateOffset(months<span class="op" style="color: #5E5E5E;">=</span>delta), <span class="st" style="color: #20794D;">"prime"</span>]</span>
<span id="cb11-6">        variable_delta <span class="op" style="color: #5E5E5E;">=</span> variable_rate <span class="op" style="color: #5E5E5E;">-</span> five_year_rate</span>
<span id="cb11-7">        delta_dict[delta][start_date] <span class="op" style="color: #5E5E5E;">=</span> variable_delta</span>
<span id="cb11-8">delta_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(delta_dict).T</span>
<span id="cb11-9">delta_df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>1975-01-01</th>
      <th>1975-02-01</th>
      <th>1975-03-01</th>
      <th>1975-04-01</th>
      <th>1975-05-01</th>
      <th>1975-06-01</th>
      <th>1975-07-01</th>
      <th>1975-08-01</th>
      <th>1975-09-01</th>
      <th>1975-10-01</th>
      <th>...</th>
      <th>2016-06-01</th>
      <th>2016-07-01</th>
      <th>2016-08-01</th>
      <th>2016-09-01</th>
      <th>2016-10-01</th>
      <th>2016-11-01</th>
      <th>2016-12-01</th>
      <th>2017-01-01</th>
      <th>2017-02-01</th>
      <th>2017-03-01</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>-1.0</td>
      <td>-2.0</td>
      <td>-1.75</td>
      <td>-1.5</td>
      <td>-1.75</td>
      <td>-2.00</td>
      <td>-2.00</td>
      <td>-2.25</td>
      <td>-2.50</td>
      <td>-2.25</td>
      <td>...</td>
      <td>-1.94</td>
      <td>-2.04</td>
      <td>-2.04</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-2.5</td>
      <td>-2.5</td>
      <td>-1.75</td>
      <td>-1.5</td>
      <td>-1.75</td>
      <td>-2.00</td>
      <td>-2.00</td>
      <td>-2.25</td>
      <td>-1.75</td>
      <td>-2.25</td>
      <td>...</td>
      <td>-1.94</td>
      <td>-2.04</td>
      <td>-2.04</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
    </tr>
    <tr>
      <th>2</th>
      <td>-3.0</td>
      <td>-2.5</td>
      <td>-1.75</td>
      <td>-1.5</td>
      <td>-1.75</td>
      <td>-2.00</td>
      <td>-2.00</td>
      <td>-1.50</td>
      <td>-1.75</td>
      <td>-2.25</td>
      <td>...</td>
      <td>-1.94</td>
      <td>-2.04</td>
      <td>-2.04</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-3.0</td>
      <td>-2.5</td>
      <td>-1.75</td>
      <td>-1.5</td>
      <td>-1.75</td>
      <td>-2.00</td>
      <td>-1.25</td>
      <td>-1.50</td>
      <td>-1.75</td>
      <td>-2.25</td>
      <td>...</td>
      <td>-1.94</td>
      <td>-2.04</td>
      <td>-2.04</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
    </tr>
    <tr>
      <th>4</th>
      <td>-3.0</td>
      <td>-2.5</td>
      <td>-1.75</td>
      <td>-1.5</td>
      <td>-1.75</td>
      <td>-1.25</td>
      <td>-1.25</td>
      <td>-1.50</td>
      <td>-1.75</td>
      <td>-2.25</td>
      <td>...</td>
      <td>-1.94</td>
      <td>-2.04</td>
      <td>-2.04</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
      <td>-1.94</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 507 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">delta_cdf <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb12-2">    delta_df</span>
<span id="cb12-3">    .melt(ignore_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb12-4">    .reset_index()</span>
<span id="cb12-5">    <span class="co" style="color: #5E5E5E;"># change from a date to a count of months since the first period</span></span>
<span id="cb12-6">    <span class="co" style="color: #5E5E5E;"># makes it easier to add in a colour scale and get a sense of time periods.</span></span>
<span id="cb12-7">    .assign(variable<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: (df[<span class="st" style="color: #20794D;">"variable"</span>] <span class="op" style="color: #5E5E5E;">-</span> df[<span class="st" style="color: #20794D;">"variable"</span>].<span class="bu" style="color: null;">min</span>()).dt.days)</span>
<span id="cb12-8">    .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"index"</span>: <span class="st" style="color: #20794D;">"period"</span>, <span class="st" style="color: #20794D;">"variable"</span>: <span class="st" style="color: #20794D;">"start date delta"</span>, <span class="st" style="color: #20794D;">"value"</span>: <span class="st" style="color: #20794D;">"variable_delta"</span>})</span>
<span id="cb12-9">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">sns.lineplot(data<span class="op" style="color: #5E5E5E;">=</span>delta_cdf, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"period"</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"variable_delta"</span>, hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"start date delta"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-03-17-mortgage_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>This chart shows the change in the delta between a fixed rate mortgage and the variable rate over a 5 year period. Each line represents a potential start month, with the delta between fixed and variable on the y axis and how many months into the 5 year term that mortgage is on the x axis. The colour corresponds to the number of days after Jan 1 1970 the scenario starts (I just needed a nice linear series to get the colour coding).</p>
<p>That’s way too noisy to make a ton of sense of, but it shows that variable rates can be quite a lot higher or lower than the 5 year fixed. Most of the crazy outliers are lighter in colour, which corresponds to earlier points in history and given the wildly volatile interest rates we saw in the previous chart that seems reasonable. Eyeballing it it definitely looks like the majority of series are below the 0 line throughout the 5 year period.</p>
<p>One could make the argument that including the 1980s is unfair given the crazy stagflation and associated high interest rates used to combat them. If you think more recent history is a better guide we can look at just the scenarios starting since the year 2000:</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">subset_cdf <span class="op" style="color: #5E5E5E;">=</span> delta_cdf.loc[<span class="kw" style="color: #003B4F;">lambda</span> df: df[<span class="st" style="color: #20794D;">"start date delta"</span>] <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">25</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">365</span>]</span>
<span id="cb14-2">sns.lineplot(data<span class="op" style="color: #5E5E5E;">=</span>subset_cdf, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"period"</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"variable_delta"</span>, hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"start date delta"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-03-17-mortgage_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>So since 2000 it looks like your variable rate has almost never gone above the five year fixed rate. Again, recall that the actual fixed or variable rate you’d get at any of these points is not perfectly correlated with the posted rates I’m using, but it’s still a good indicator. Personally since I’m risk averse and we are currently looking at higher inflation than there’s been for 30 years I’m inclined to use the longer term scenarios, but it was an interesting exercise to see what more recent history looks like.</p>
<p>Now, even though these charts are kind of pretty, they’re not very informative, there’s too much going on. What I can do instead is summarize the distribution of those lines. So for any point in the mortgage term I can show the mean delta, or the median, or any other quantile. Let’s take a look at that:</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">full_series <span class="op" style="color: #5E5E5E;">=</span> [delta_df.mean(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"columns"</span>).rename(<span class="st" style="color: #20794D;">"mean"</span>)]</span>
<span id="cb15-2"><span class="cf" style="color: #003B4F;">for</span> q <span class="kw" style="color: #003B4F;">in</span> [<span class="fl" style="color: #AD0000;">0.05</span>, <span class="fl" style="color: #AD0000;">0.10</span>, <span class="fl" style="color: #AD0000;">0.25</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.75</span>, <span class="fl" style="color: #AD0000;">0.9</span>, <span class="fl" style="color: #AD0000;">0.95</span>]:</span>
<span id="cb15-3">    full_series.append(delta_df.quantile(q, axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"columns"</span>).rename(<span class="ss" style="color: #20794D;">f"q</span><span class="sc" style="color: #5E5E5E;">{</span>q<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>))</span>
<span id="cb15-4">full_distributions <span class="op" style="color: #5E5E5E;">=</span> pd.concat(full_series, axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"columns"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">fdist_cdf <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb16-2">    full_distributions</span>
<span id="cb16-3">    .melt(ignore_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb16-4">    .reset_index()</span>
<span id="cb16-5">    .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"index"</span>: <span class="st" style="color: #20794D;">"period"</span>})</span>
<span id="cb16-6">)</span>
<span id="cb16-7">sns.lineplot(data<span class="op" style="color: #5E5E5E;">=</span>fdist_cdf, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"period"</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"value"</span>, hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"variable"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-03-17-mortgage_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>So over the whole observation period the mean gap between fixed and variable rate tends to trend downward, which makes sense given interest rates were declining over most of the observed period. At least 3/4 of the time they stayed below the fixed rate for the entire period, but when we look at the 90th percentile and above they were over the fixed rate throughout the period (this is not saying any one series was consistently that high above throughout the 5 year period, just that at least 10% of them were that much above it at that point.) Let’s try it again, just focusing on since 2000.</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">rdelta_df <span class="op" style="color: #5E5E5E;">=</span> delta_df.T.loc[<span class="st" style="color: #20794D;">"2000"</span>:].T</span>
<span id="cb17-2">full_series <span class="op" style="color: #5E5E5E;">=</span> [rdelta_df.mean(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"columns"</span>).rename(<span class="st" style="color: #20794D;">"mean"</span>)]</span>
<span id="cb17-3"><span class="cf" style="color: #003B4F;">for</span> q <span class="kw" style="color: #003B4F;">in</span> [<span class="fl" style="color: #AD0000;">0.01</span>, <span class="fl" style="color: #AD0000;">0.05</span>, <span class="fl" style="color: #AD0000;">0.10</span>, <span class="fl" style="color: #AD0000;">0.25</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.75</span>, <span class="fl" style="color: #AD0000;">0.9</span>, <span class="fl" style="color: #AD0000;">0.95</span>, <span class="fl" style="color: #AD0000;">0.99</span>]:</span>
<span id="cb17-4">    full_series.append(rdelta_df.quantile(q, axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"columns"</span>).rename(<span class="ss" style="color: #20794D;">f"q</span><span class="sc" style="color: #5E5E5E;">{</span>q<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>))</span>
<span id="cb17-5">full_distributions <span class="op" style="color: #5E5E5E;">=</span> pd.concat(full_series, axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"columns"</span>)</span>
<span id="cb17-6">fdist_cdf <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb17-7">    full_distributions</span>
<span id="cb17-8">    .melt(ignore_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb17-9">    .reset_index()</span>
<span id="cb17-10">    .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"index"</span>: <span class="st" style="color: #20794D;">"period"</span>})</span>
<span id="cb17-11">)</span>
<span id="cb17-12">sns.lineplot(data<span class="op" style="color: #5E5E5E;">=</span>fdist_cdf, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"period"</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"value"</span>, hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"variable"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-03-17-mortgage_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>So in the more recent period I checked out some of the wider end of the tails. At the 99th percentile we do see a couple spots where it goes above 0, but not by much. Variable rates over the last 20 years have been a pretty sweet deal.</p>
</section>
<section id="model-out-capped-variable-strategy" class="level2">
<h2 class="anchored" data-anchor-id="model-out-capped-variable-strategy">Model out capped variable strategy</h2>
<p>Looking at these trends, it definitely seems like going with the capped variable rate would be the way to go, but let’s model it out a bit and see. The first thing I need to do is write a class that can handle mortgage payments, including variable payments or a capped variable strategy. For that I can leverage some of the code I wrote for my rent or own calculator (with some tweaks).</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;">import</span> math</span>
<span id="cb18-2"><span class="im" style="color: #00769E;">from</span> collections <span class="im" style="color: #00769E;">import</span> OrderedDict</span>
<span id="cb18-3"><span class="im" style="color: #00769E;">import</span> numpy_financial <span class="im" style="color: #00769E;">as</span> npf</span>
<span id="cb18-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span></code></pre></div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;">class</span> Mortgage:</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;">"""Base mortgage class.</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;">    delta_series: pd.Series</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;">        The series of rate deltas over the 5 year term. Can pass in a series of 0s to simulate a fixed rate mortgage</span></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;">    capped_variable: bool</span></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;">        Whether to use the capped variable or regular variable payment strategy</span></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;">    principal: Int</span></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;">        Value of the mortgage, default $400K to simulate a $500K purchase with 20% down</span></span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;">    amortize_years: int</span></span>
<span id="cb19-12"><span class="co" style="color: #5E5E5E;">        Amortization period of the mortgage (not term of mortgage), default to standard 25 for a new purchase</span></span>
<span id="cb19-13"><span class="co" style="color: #5E5E5E;">    fixed_rate: float</span></span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;">        fixed 5 year APR rate as posted online, will use AER for actual calculations, default to 4.79 since that's the latest value</span></span>
<span id="cb19-15"><span class="co" style="color: #5E5E5E;">        in the series at the time of this writing.</span></span>
<span id="cb19-16"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb19-17"></span>
<span id="cb19-18">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, delta_series: pd.Series, scenario_name: <span class="bu" style="color: null;">str</span>, capped_variable: <span class="bu" style="color: null;">bool</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>, principal: <span class="bu" style="color: null;">int</span><span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">400_000</span> , amortize_years: <span class="bu" style="color: null;">int</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">25</span>, fixed_rate: <span class="bu" style="color: null;">float</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">4.79</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb19-19">        <span class="va" style="color: #111111;">self</span>.delta_series <span class="op" style="color: #5E5E5E;">=</span> delta_series</span>
<span id="cb19-20">        <span class="co" style="color: #5E5E5E;"># So I can label dataframes or other returned objects</span></span>
<span id="cb19-21">        <span class="va" style="color: #111111;">self</span>.scenario_name <span class="op" style="color: #5E5E5E;">=</span> scenario_name</span>
<span id="cb19-22">        <span class="va" style="color: #111111;">self</span>.capped_variable <span class="op" style="color: #5E5E5E;">=</span> capped_variable</span>
<span id="cb19-23">        <span class="va" style="color: #111111;">self</span>.principal <span class="op" style="color: #5E5E5E;">=</span> principal</span>
<span id="cb19-24">        <span class="va" style="color: #111111;">self</span>.amortize_years <span class="op" style="color: #5E5E5E;">=</span> amortize_years</span>
<span id="cb19-25">        <span class="va" style="color: #111111;">self</span>.fixed_rate <span class="op" style="color: #5E5E5E;">=</span> fixed_rate</span>
<span id="cb19-26">        <span class="co" style="color: #5E5E5E;"># Have to do different compounding period for variable (monthly) vs fixed (semi annual)</span></span>
<span id="cb19-27">        <span class="cf" style="color: #003B4F;">if</span> delta_series.<span class="bu" style="color: null;">sum</span>() <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb19-28">            <span class="va" style="color: #111111;">self</span>.fixed <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb19-29">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb19-30">            <span class="va" style="color: #111111;">self</span>.fixed <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb19-31">        <span class="va" style="color: #111111;">self</span>.fixed_pmt <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>._calc_fixed_pmt()</span>
<span id="cb19-32">    </span>
<span id="cb19-33">    <span class="kw" style="color: #003B4F;">def</span> periodic_rate(<span class="va" style="color: #111111;">self</span>, period: <span class="bu" style="color: null;">int</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">float</span>:</span>
<span id="cb19-34">        <span class="co" style="color: #5E5E5E;">"""Calculate the periodic interest rate from the posted APR.</span></span>
<span id="cb19-35"><span class="co" style="color: #5E5E5E;">        </span></span>
<span id="cb19-36"><span class="co" style="color: #5E5E5E;">        Parameters</span></span>
<span id="cb19-37"><span class="co" style="color: #5E5E5E;">        ----------</span></span>
<span id="cb19-38"><span class="co" style="color: #5E5E5E;">        period: int</span></span>
<span id="cb19-39"><span class="co" style="color: #5E5E5E;">            Which period in the term we're in (used to identify the variable rate delta)</span></span>
<span id="cb19-40"><span class="co" style="color: #5E5E5E;">        </span></span>
<span id="cb19-41"><span class="co" style="color: #5E5E5E;">        Returns</span></span>
<span id="cb19-42"><span class="co" style="color: #5E5E5E;">        -------</span></span>
<span id="cb19-43"><span class="co" style="color: #5E5E5E;">        float: periodic interest rate</span></span>
<span id="cb19-44"><span class="co" style="color: #5E5E5E;">        """</span></span>
<span id="cb19-45">        apr <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fixed_rate <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.delta_series[period]</span>
<span id="cb19-46">        apr_dec <span class="op" style="color: #5E5E5E;">=</span> apr <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb19-47">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.fixed:</span>
<span id="cb19-48">            compounds <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb19-49">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb19-50">            compounds <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">12</span></span>
<span id="cb19-51">        aer <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> (apr_dec <span class="op" style="color: #5E5E5E;">/</span> compounds)) <span class="op" style="color: #5E5E5E;">**</span> compounds <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb19-52">        <span class="cf" style="color: #003B4F;">return</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> aer) <span class="op" style="color: #5E5E5E;">**</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">12</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb19-53"></span>
<span id="cb19-54">    <span class="kw" style="color: #003B4F;">def</span> _calc_fixed_pmt(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">float</span>:</span>
<span id="cb19-55">        <span class="co" style="color: #5E5E5E;">"""Calculate what a fixed payment would be to compute capped variable payments."""</span></span>
<span id="cb19-56">        apr_dec <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fixed_rate <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb19-57">        compounds <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span> </span>
<span id="cb19-58">        aer <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> (apr_dec <span class="op" style="color: #5E5E5E;">/</span> compounds)) <span class="op" style="color: #5E5E5E;">**</span> compounds <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb19-59">        periodic_rate <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> aer) <span class="op" style="color: #5E5E5E;">**</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">12</span>) <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb19-60">        periods <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.amortize_years <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">12</span></span>
<span id="cb19-61">        <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">-</span><span class="bu" style="color: null;">round</span>(npf.pmt(periodic_rate, periods, <span class="va" style="color: #111111;">self</span>.principal), <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb19-62">        </span>
<span id="cb19-63">    <span class="kw" style="color: #003B4F;">def</span> _amortizegen(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb19-64">        <span class="co" style="color: #5E5E5E;">"""Yield a dictionary of a payment period.</span></span>
<span id="cb19-65"><span class="co" style="color: #5E5E5E;">        </span></span>
<span id="cb19-66"><span class="co" style="color: #5E5E5E;">        Have to do it incrementally because additional payments can mean recomputing things after every period.</span></span>
<span id="cb19-67"><span class="co" style="color: #5E5E5E;">        </span></span>
<span id="cb19-68"><span class="co" style="color: #5E5E5E;">        Parameters</span></span>
<span id="cb19-69"><span class="co" style="color: #5E5E5E;">        ----------</span></span>
<span id="cb19-70"><span class="co" style="color: #5E5E5E;">        period: int</span></span>
<span id="cb19-71"><span class="co" style="color: #5E5E5E;">            Which period of the term we're in</span></span>
<span id="cb19-72"><span class="co" style="color: #5E5E5E;">        </span></span>
<span id="cb19-73"><span class="co" style="color: #5E5E5E;">        Yields</span></span>
<span id="cb19-74"><span class="co" style="color: #5E5E5E;">        ------</span></span>
<span id="cb19-75"><span class="co" style="color: #5E5E5E;">        Dict</span></span>
<span id="cb19-76"><span class="co" style="color: #5E5E5E;">            All the data for another period of mortgage paments</span></span>
<span id="cb19-77"><span class="co" style="color: #5E5E5E;">        """</span></span>
<span id="cb19-78">        period <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb19-79">        beg_balance <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.principal</span>
<span id="cb19-80">        end_balance <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.principal</span>
<span id="cb19-81">        <span class="co" style="color: #5E5E5E;"># Careful here, have to control how often this is called outside the function</span></span>
<span id="cb19-82">        <span class="cf" style="color: #003B4F;">while</span> period <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">60</span>:</span>
<span id="cb19-83">            periodic_rate <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.periodic_rate(period)</span>
<span id="cb19-84">            amortization_left <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.amortize_years <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">12</span>) <span class="op" style="color: #5E5E5E;">-</span> period</span>
<span id="cb19-85">            interest <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span>npf.ipmt(rate<span class="op" style="color: #5E5E5E;">=</span>periodic_rate, per<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, nper<span class="op" style="color: #5E5E5E;">=</span>amortization_left, pv<span class="op" style="color: #5E5E5E;">=</span>beg_balance)</span>
<span id="cb19-86">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.capped_variable:</span>
<span id="cb19-87">                <span class="cf" style="color: #003B4F;">if</span> interest <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="va" style="color: #111111;">self</span>.fixed_pmt:</span>
<span id="cb19-88">                    principal <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb19-89">                <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb19-90">                    principal <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.fixed_pmt <span class="op" style="color: #5E5E5E;">-</span> interest</span>
<span id="cb19-91">            <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb19-92">                principal <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span>npf.ppmt(rate<span class="op" style="color: #5E5E5E;">=</span>periodic_rate, per<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, nper<span class="op" style="color: #5E5E5E;">=</span>amortization_left, pv<span class="op" style="color: #5E5E5E;">=</span>beg_balance)</span>
<span id="cb19-93">            total_pmt <span class="op" style="color: #5E5E5E;">=</span> interest <span class="op" style="color: #5E5E5E;">+</span> principal</span>
<span id="cb19-94">            end_balance <span class="op" style="color: #5E5E5E;">=</span> beg_balance <span class="op" style="color: #5E5E5E;">-</span> principal</span>
<span id="cb19-95">            <span class="cf" style="color: #003B4F;">yield</span> OrderedDict(</span>
<span id="cb19-96">                [</span>
<span id="cb19-97">                    (<span class="st" style="color: #20794D;">"Period"</span>, period),</span>
<span id="cb19-98">                    (<span class="st" style="color: #20794D;">"Begin_balance"</span>, beg_balance),</span>
<span id="cb19-99">                    (<span class="st" style="color: #20794D;">"Payment"</span>, total_pmt),</span>
<span id="cb19-100">                    (<span class="st" style="color: #20794D;">"Principal"</span>, principal),</span>
<span id="cb19-101">                    (<span class="st" style="color: #20794D;">"Interest"</span>, interest),</span>
<span id="cb19-102">                    (<span class="st" style="color: #20794D;">"End_balance"</span>, end_balance),</span>
<span id="cb19-103">                ]</span>
<span id="cb19-104">            )</span>
<span id="cb19-105">            <span class="co" style="color: #5E5E5E;"># increment the counter, balance and date</span></span>
<span id="cb19-106">            period <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb19-107">            beg_balance <span class="op" style="color: #5E5E5E;">=</span> end_balance</span>
<span id="cb19-108"></span>
<span id="cb19-109">    <span class="kw" style="color: #003B4F;">def</span> amortize(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb19-110">        <span class="co" style="color: #5E5E5E;">"""Show payments on the mortgage.</span></span>
<span id="cb19-111"><span class="co" style="color: #5E5E5E;">        </span></span>
<span id="cb19-112"><span class="co" style="color: #5E5E5E;">        Returns</span></span>
<span id="cb19-113"><span class="co" style="color: #5E5E5E;">        -------</span></span>
<span id="cb19-114"><span class="co" style="color: #5E5E5E;">        pd.DataFrame</span></span>
<span id="cb19-115"><span class="co" style="color: #5E5E5E;">            Dataframe of mortgage payments showing principal and interest contributions and amount outstanding</span></span>
<span id="cb19-116"><span class="co" style="color: #5E5E5E;">        """</span></span>
<span id="cb19-117">        df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb19-118">            pd.DataFrame(<span class="va" style="color: #111111;">self</span>._amortizegen())</span>
<span id="cb19-119">            .set_index(<span class="st" style="color: #20794D;">"Period"</span>)</span>
<span id="cb19-120">        )</span>
<span id="cb19-121">        <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb19-122">    </span>
<span id="cb19-123">    <span class="kw" style="color: #003B4F;">def</span> summarize(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">dict</span>:</span>
<span id="cb19-124">        <span class="co" style="color: #5E5E5E;">"""Summarize the 5 year term."""</span></span>
<span id="cb19-125">        df <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.amortize()</span>
<span id="cb19-126">        <span class="cf" style="color: #003B4F;">return</span> {</span>
<span id="cb19-127">            <span class="st" style="color: #20794D;">"scenario_name"</span>: <span class="va" style="color: #111111;">self</span>.scenario_name,</span>
<span id="cb19-128">            <span class="st" style="color: #20794D;">"end_balance"</span>: df.iloc[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>][<span class="st" style="color: #20794D;">"End_balance"</span>],</span>
<span id="cb19-129">            <span class="st" style="color: #20794D;">"total_payments"</span>: df[<span class="st" style="color: #20794D;">"Payment"</span>].<span class="bu" style="color: null;">sum</span>(),</span>
<span id="cb19-130">            <span class="st" style="color: #20794D;">"average_payment"</span>: df[<span class="st" style="color: #20794D;">"Payment"</span>].mean(),</span>
<span id="cb19-131">            <span class="st" style="color: #20794D;">"min_payment"</span>: df[<span class="st" style="color: #20794D;">"Payment"</span>].<span class="bu" style="color: null;">min</span>(),</span>
<span id="cb19-132">            <span class="st" style="color: #20794D;">"max_payment"</span>: df[<span class="st" style="color: #20794D;">"Payment"</span>].<span class="bu" style="color: null;">max</span>(),</span>
<span id="cb19-133">            <span class="st" style="color: #20794D;">"total_interest"</span>: df[<span class="st" style="color: #20794D;">"Interest"</span>].<span class="bu" style="color: null;">sum</span>(),</span>
<span id="cb19-134">            <span class="st" style="color: #20794D;">"total_principal"</span>: df[<span class="st" style="color: #20794D;">"Principal"</span>].<span class="bu" style="color: null;">sum</span>(),</span>
<span id="cb19-135">        }</span>
<span id="cb19-136"></span>
<span id="cb19-137">    <span class="kw" style="color: #003B4F;">def</span> pretty_summary(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb19-138">        <span class="co" style="color: #5E5E5E;">"""Print out the summary in pretty format."""</span></span>
<span id="cb19-139">        summary <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.summarize()</span>
<span id="cb19-140">        result <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"""</span></span>
<span id="cb19-141"><span class="ss" style="color: #20794D;">            Scenario: </span><span class="sc" style="color: #5E5E5E;">{</span>summary[<span class="st" style="color: #20794D;">"scenario_name"</span>]<span class="sc" style="color: #5E5E5E;">}</span></span>
<span id="cb19-142"><span class="ss" style="color: #20794D;">            Capped: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>capped_variable<span class="sc" style="color: #5E5E5E;">}</span></span>
<span id="cb19-143"><span class="ss" style="color: #20794D;">            Total Payments: $</span><span class="sc" style="color: #5E5E5E;">{</span>summary[<span class="st" style="color: #20794D;">"total_payments"</span>]<span class="sc" style="color: #5E5E5E;">:,</span><span class="fl" style="color: #AD0000;">.0</span><span class="er" style="color: #AD0000;">f</span><span class="sc" style="color: #5E5E5E;">}</span></span>
<span id="cb19-144"><span class="ss" style="color: #20794D;">            Ending mortgage balance: $</span><span class="sc" style="color: #5E5E5E;">{</span>summary[<span class="st" style="color: #20794D;">"end_balance"</span>]<span class="sc" style="color: #5E5E5E;">:,</span><span class="fl" style="color: #AD0000;">.0</span><span class="er" style="color: #AD0000;">f</span><span class="sc" style="color: #5E5E5E;">}</span></span>
<span id="cb19-145"><span class="ss" style="color: #20794D;">            Total interest payments: $</span><span class="sc" style="color: #5E5E5E;">{</span>summary[<span class="st" style="color: #20794D;">"total_interest"</span>]<span class="sc" style="color: #5E5E5E;">:,</span><span class="fl" style="color: #AD0000;">.0</span><span class="er" style="color: #AD0000;">f</span><span class="sc" style="color: #5E5E5E;">}</span></span>
<span id="cb19-146"><span class="ss" style="color: #20794D;">            Total principal payments: $</span><span class="sc" style="color: #5E5E5E;">{</span>summary[<span class="st" style="color: #20794D;">"total_principal"</span>]<span class="sc" style="color: #5E5E5E;">:,</span><span class="fl" style="color: #AD0000;">.0</span><span class="er" style="color: #AD0000;">f</span><span class="sc" style="color: #5E5E5E;">}</span></span>
<span id="cb19-147"><span class="ss" style="color: #20794D;">            Average payment: $</span><span class="sc" style="color: #5E5E5E;">{</span>summary[<span class="st" style="color: #20794D;">"average_payment"</span>]<span class="sc" style="color: #5E5E5E;">:,</span><span class="fl" style="color: #AD0000;">.0</span><span class="er" style="color: #AD0000;">f</span><span class="sc" style="color: #5E5E5E;">}</span></span>
<span id="cb19-148"><span class="ss" style="color: #20794D;">            Minimum payment: $</span><span class="sc" style="color: #5E5E5E;">{</span>summary[<span class="st" style="color: #20794D;">"min_payment"</span>]<span class="sc" style="color: #5E5E5E;">:,</span><span class="fl" style="color: #AD0000;">.0</span><span class="er" style="color: #AD0000;">f</span><span class="sc" style="color: #5E5E5E;">}</span></span>
<span id="cb19-149"><span class="ss" style="color: #20794D;">            Maximum payment: $</span><span class="sc" style="color: #5E5E5E;">{</span>summary[<span class="st" style="color: #20794D;">"max_payment"</span>]<span class="sc" style="color: #5E5E5E;">:,</span><span class="fl" style="color: #AD0000;">.0</span><span class="er" style="color: #AD0000;">f</span><span class="sc" style="color: #5E5E5E;">}</span></span>
<span id="cb19-150"><span class="ss" style="color: #20794D;">        """</span></span>
<span id="cb19-151">        <span class="bu" style="color: null;">print</span>(result)</span></code></pre></div>
</div>
<p>Let’s look at the summary of a few of these scenarios</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">fixed_scenario <span class="op" style="color: #5E5E5E;">=</span> Mortgage(</span>
<span id="cb20-2">    delta_series<span class="op" style="color: #5E5E5E;">=</span>np.zeros(<span class="dv" style="color: #AD0000;">60</span>),</span>
<span id="cb20-3">    scenario_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"fixed payments"</span>,</span>
<span id="cb20-4">    capped_variable<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb20-5">)</span>
<span id="cb20-6">fixed_summary <span class="op" style="color: #5E5E5E;">=</span> fixed_scenario.summarize()</span>
<span id="cb20-7">fixed_scenario.pretty_summary() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
            Scenario: fixed payments
            Capped: False
            Total Payments: $136,730
            Ending mortgage balance: $352,851
            Total interest payments: $89,581
            Total principal payments: $47,149
            Average payment: $2,279
            Minimum payment: $2,279
            Maximum payment: $2,279
        </code></pre>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">Mortgage(</span>
<span id="cb22-2">    delta_series<span class="op" style="color: #5E5E5E;">=</span>delta_df[<span class="st" style="color: #20794D;">"1975-01-01"</span>],</span>
<span id="cb22-3">    scenario_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"1975-01-01"</span>,</span>
<span id="cb22-4">    capped_variable<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb22-5">).pretty_summary() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
            Scenario: 1975-01-01
            Capped: False
            Total Payments: $111,026
            Ending mortgage balance: $340,142
            Total interest payments: $51,168
            Total principal payments: $59,858
            Average payment: $1,850
            Minimum payment: $1,536
            Maximum payment: $2,801
        </code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">Mortgage(</span>
<span id="cb24-2">    delta_series<span class="op" style="color: #5E5E5E;">=</span>delta_df[<span class="st" style="color: #20794D;">"1975-01-01"</span>],</span>
<span id="cb24-3">    scenario_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"1975-01-01 capped"</span>,</span>
<span id="cb24-4">    capped_variable<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb24-5">).pretty_summary() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
            Scenario: 1975-01-01 capped
            Capped: True
            Total Payments: $136,730
            Ending mortgage balance: $311,809
            Total interest payments: $48,539
            Total principal payments: $88,191
            Average payment: $2,279
            Minimum payment: $2,279
            Maximum payment: $2,279
        </code></pre>
</div>
</div>
<p>Before I run a bunch of scenarios from historical ones, let’s plug in something derived from a forecast. <a href="https://economics.td.com/ca-long-term-forecast">TD forecasts</a> the overnight rate for the BoC will end 2022 at 1.25% (it’s 0.5% as I write this) and climb to 1.75% by the end of 2023 before leveling off for the remainder of the forecast period. Let’s make a scenario where variable rates follow that same hike schedule 1:1</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># Current delta based on "special" rates available on RBC site</span></span>
<span id="cb26-2">start_delta <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.39</span></span>
<span id="cb26-3">delta_series <span class="op" style="color: #5E5E5E;">=</span> np.repeat(start_delta, <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;"># let's do 3 0.25 rate hikes over the next 9 months</span></span>
<span id="cb26-5"><span class="cf" style="color: #003B4F;">for</span> cut <span class="kw" style="color: #003B4F;">in</span> [<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">9</span>]:</span>
<span id="cb26-6">    delta_series[cut:] <span class="op" style="color: #5E5E5E;">+=</span> <span class="fl" style="color: #AD0000;">0.25</span></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;">#Then we need two hikes in 2023</span></span>
<span id="cb26-8"><span class="cf" style="color: #003B4F;">for</span> cut <span class="kw" style="color: #003B4F;">in</span> [<span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">18</span>]:</span>
<span id="cb26-9">    delta_series[cut:] <span class="op" style="color: #5E5E5E;">+=</span> <span class="fl" style="color: #AD0000;">0.25</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">Mortgage(</span>
<span id="cb27-2">    delta_series<span class="op" style="color: #5E5E5E;">=</span>delta_series,</span>
<span id="cb27-3">    scenario_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"1.25% total hikes, capped"</span>,</span>
<span id="cb27-4">    capped_variable<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb27-5">).pretty_summary() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
            Scenario: 1.25% total hikes, capped
            Capped: True
            Total Payments: $136,730
            Ending mortgage balance: $346,032
            Total interest payments: $82,762
            Total principal payments: $53,968
            Average payment: $2,279
            Minimum payment: $2,279
            Maximum payment: $2,279
        </code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">Mortgage(</span>
<span id="cb29-2">    delta_series<span class="op" style="color: #5E5E5E;">=</span>delta_series,</span>
<span id="cb29-3">    scenario_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"1.25% total hikes, uncapped"</span>,</span>
<span id="cb29-4">    capped_variable<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb29-5">).pretty_summary() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
            Scenario: 1.25% total hikes, uncapped
            Capped: False
            Total Payments: $132,412
            Ending mortgage balance: $351,139
            Total interest payments: $83,552
            Total principal payments: $48,861
            Average payment: $2,207
            Minimum payment: $1,981
            Maximum payment: $2,250
        </code></pre>
</div>
</div>
<p>So in this scenario (which I’m definitely not saying will happen, but it’s plausible) either of the variable strategies beat a fixed strategy since we never get up to the fixed rate. Between capped and full variable you make bigger payments and also pay less interest, so as long as those payments are manageable that seems like a pretty solid deal. Let’s run this against a bunch of historical scenarios now.</p>
<p>First we’ll look at the distribution of outcomes for the capped strategy based on historical rate delta development</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">capped_scenarios <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame([</span>
<span id="cb31-2">    Mortgage(</span>
<span id="cb31-3">        delta_series<span class="op" style="color: #5E5E5E;">=</span>delta_df[col],</span>
<span id="cb31-4">        scenario_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"1975-01-01 capped"</span>,</span>
<span id="cb31-5">        capped_variable<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb31-6">    ).summarize()</span>
<span id="cb31-7">    <span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> delta_df.columns</span>
<span id="cb31-8">])</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/ipreston/miniconda3/envs/mortgage/lib/python3.10/site-packages/numpy_financial/_financial.py:130: RuntimeWarning: invalid value encountered in double_scalars
  (1 + rate*when)*(temp - 1)/rate)
/home/ipreston/miniconda3/envs/mortgage/lib/python3.10/site-packages/numpy_financial/_financial.py:130: RuntimeWarning: invalid value encountered in double_scalars
  (1 + rate*when)*(temp - 1)/rate)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;">def</span> plot_hist(data, col):</span>
<span id="cb33-2">    g <span class="op" style="color: #5E5E5E;">=</span> sns.histplot(data<span class="op" style="color: #5E5E5E;">=</span>data,x<span class="op" style="color: #5E5E5E;">=</span>col, bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>, stat<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"percent"</span>)</span>
<span id="cb33-3">    plt.axvline(x<span class="op" style="color: #5E5E5E;">=</span>fixed_summary[col], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"red"</span>)</span>
<span id="cb33-4">    <span class="cf" style="color: #003B4F;">return</span> g</span></code></pre></div>
</div>
<p>This chart shows the distribution of end balances (the amount still owing on the mortgage at the end of the 5 year term) using the capped variable strategy across all the historical scenarios we outlined above. The red vertical line is the equivalent point for going with a fixed rate. The vast majority of points show a lower ending balance, which is definitely good, although there is some tail risk of ending with a balance of up to about $50k more.</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">plot_hist(capped_scenarios, <span class="st" style="color: #20794D;">"end_balance"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-03-17-mortgage_files/figure-html/cell-29-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Similarly, we can look at the distribution of maximum payments made over the whole 5 year term. As long as the cap at least covers your interest payments you never go over it, so unsurprisingly over 70% of the scenarios have a max payment equal to the fixed amount. Again though, there’s a long tail (presumably corresponding to the massive rate hikes we saw in the late 70s and early 80s where you would end up making at least one payment that’s more than double the fixed amount, ouch.</p>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">plot_hist(capped_scenarios, <span class="st" style="color: #20794D;">"max_payment"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-03-17-mortgage_files/figure-html/cell-30-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Finally, let’s look at the same scenarios, but just paying the variable rate the whole way through. The graphs represent the same things as above, just with the uncapped variable rate mortgage.</p>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">uncapped_scenarios <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame([</span>
<span id="cb36-2">    Mortgage(</span>
<span id="cb36-3">        delta_series<span class="op" style="color: #5E5E5E;">=</span>delta_df[col],</span>
<span id="cb36-4">        scenario_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"1975-01-01 capped"</span>,</span>
<span id="cb36-5">        capped_variable<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb36-6">    ).summarize()</span>
<span id="cb36-7">    <span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> delta_df.columns</span>
<span id="cb36-8">])</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/ipreston/miniconda3/envs/mortgage/lib/python3.10/site-packages/numpy_financial/_financial.py:130: RuntimeWarning: invalid value encountered in double_scalars
  (1 + rate*when)*(temp - 1)/rate)
/home/ipreston/miniconda3/envs/mortgage/lib/python3.10/site-packages/numpy_financial/_financial.py:130: RuntimeWarning: invalid value encountered in double_scalars
  (1 + rate*when)*(temp - 1)/rate)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">plot_hist(uncapped_scenarios, <span class="st" style="color: #20794D;">"end_balance"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-03-17-mortgage_files/figure-html/cell-32-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">plot_hist(uncapped_scenarios, <span class="st" style="color: #20794D;">"max_payment"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2022-03-17-mortgage_files/figure-html/cell-33-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The distribution of end balances looks reasonably similar, although the capped variable definitely has more weight on the lower end of the distribution, which is quite good. Unsurprisingly, the max payment is a much wider distribution than under the capped scenario, with a decent chunk of payments above what you’d do in the fixed rate scenario.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>I’m not sure I want to put a detailed conclusion here, that could sound like giving investment advice. Please keep in mind, that I’m not a mortgage/real estate/investment professional. I’m some guy on the internet who likes making charts and wants to buy a house soon. I found this process informative for my decision making, I think I’ll leave it at that.</p>


</section>

 ]]></description>
  <category>housing</category>
  <category>jupyter</category>
  <category>python</category>
  <guid>https://ianepreston.github.io/blog/posts/2022-03-17-mortgage.html</guid>
  <pubDate>Thu, 17 Mar 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Building a where to live app</title>
  <link>https://ianepreston.github.io/blog/posts/2021-12-30-wheretolive.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>To start, <a href="https://github.com/ianepreston/wheretolive">here’s the code</a>. I’ll include more specific links to specific parts of the process in detail below.</p>
<p>I have two goals with this project:</p>
<ul>
<li>Figure out a good place to live when I move next</li>
<li>Learn some data engineering and system administration type skills</li>
</ul>
<p>For the first goal, I want to scrape real estate sites in my area and assemble a database of listings. I want to supplement that with open data from the city and other sources. I want all of this data to be collected and updated in an automated and efficient process. Finally, I want to be able to analyze this data in order to find the best place to live based on my personal preferences and requirements.</p>
<p>The second goal should come about as a consequence of the first. I’ve done web scraping before, but mostly for one off tasks where I can babysit if my results look weird. To store the data that I scrape I’ll use a database. I’ve done lots of querying of databases, but I haven’t had much opportunity to design one, so this will be a learning experience in the regard. I’ll also need to have an <a href="https://en.wikipedia.org/wiki/Extract,_transform,_load">ETL</a> pipeline to manage the scheduling, ingestion, and other tasks between the scraper and the database. Finally, I’ll need some way to serve the recommendations.</p>
</section>
<section id="things-i-did-wrong" class="level1">
<h1>Things I did wrong</h1>
<p>Since the purpose of writing this up is largely to document what I learned, let’s start with what I did wrong.</p>
<section id="too-much-upfront-validation" class="level2">
<h2 class="anchored" data-anchor-id="too-much-upfront-validation">Too much upfront validation</h2>
<p>My first instinct when ingesting data from a source I didn’t control (the API endpoints for rentfaster.ca and realtor.ca) was that I should do a bunch of cleaning and validation as early as possible, which would allow all of my downstream data processing steps to remain clean. On the plus side I got to learn a bit about how to use <a href="https://fastapi.tiangolo.com/">fastapi</a> and <a href="https://pydantic-docs.helpmanual.io/">pydantic</a>. On the much larger down side, this approach meant that if I wanted to modify any of the filtering I was applying, or if there were unanticipated parsing errors (people put the weirdest stuff in the square footage field) there was no possible recovery. In the final implementation I downloaded results in the most raw format I could manage. While the uncompressed data was a little larger than I wanted to be dealing with daily, it compressed down to very manageable sizes. Separating extraction from any sort of filtering or processing was definitely the right call.</p>
</section>
<section id="trying-to-learn-this-and-cloud-at-once" class="level2">
<h2 class="anchored" data-anchor-id="trying-to-learn-this-and-cloud-at-once">Trying to learn this and cloud at once</h2>
<p>Since one of the goals of this project was learning, I fairly early on got the idea in my head that I should try doing this whole process “<a href="https://en.wikipedia.org/wiki/Cloud_native_computing">cloud native</a>” on the “<a href="https://towardsdatascience.com/the-beginners-guide-to-the-modern-data-stack-d1c54bd1793e">modern data stack</a>”. I’d read a fair bit about these technologies, but hadn’t had the opportunity to implement much in them. In theory, the cool thing about the cloud is that everything is pay as you go, so for a relatively small data project like I had in mind, the costs should have been manageable and the learning curve shouldn’t have been insurmountable. In practice this turned out to be incorrect. First, trying to learn how to solve a specific problem at the same time as learning to use a general technology really compounds the difficulty of both. I did manage to learn a lot about creating and deploying <a href="https://azure.microsoft.com/en-us/services/functions/#overview">Azure Functions</a> but due to some issue that I still don’t fully understand I also managed to rack up a sizable cloud bill. It had something to do with a queue function getting stuck and reprocessing a message repeatedly rather than failing. I learned a very hard lesson about setting up cost alerts thanks to this. In a future project I’d like to reimplement this or a similar project in the cloud, as it is still a skillset I’d like to develop, but I will definitely do as much locally as I can before migrating to the cloud, rather than trying to prototype something there directly, at least until I get more experience.</p>
</section>
</section>
<section id="what-i-did" class="level1">
<h1>What I did</h1>
<section id="setting-up-my-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-my-environment">Setting up my environment</h2>
<p>One of the most important, but also annoying, aspects of any project is configuring and managing your environment. Most of my custom built logic was in python, so I built a <a href="https://python-poetry.org/">poetry</a> project. On top of python there was a lot of adjacent infrastructure to manage. For one thing, even though I wasn’t using the cloud, I still had information I wanted to leverage but keep private (namely addresses and API keys), as well as other services that I needed to have up and running. To coordinate all of this I used <a href="https://www.ansible.com/">ansible</a>. Specifically I kept my secrets using <a href="https://docs.ansible.com/ansible/latest/user_guide/vault.html">ansible-vault</a>. From the vault I could either use a <code>.env</code> file to load data in with <a href="https://pypi.org/project/python-dotenv/">python-dotenv</a> or use them directly in a playbook (for example, to set my database password). You can see the playbook I used <a href="https://github.com/ianepreston/wheretolive/blob/main/setup.yml">here</a> and there’s some related errata at the root of that repository.</p>
</section>
<section id="scraping-the-listings" class="level2">
<h2 class="anchored" data-anchor-id="scraping-the-listings">Scraping the listings</h2>
<p>There are two listings sources I’m interested in. <a href="http://realtor.ca">realtor.ca</a> for sales listings and <a href="http://rentfaster.ca">rentfaster.ca</a> for rental listings. That’s not going to be 100% comprehensive but in my experience it will cover the vast majority of listings.</p>
<p>The pattern for the initial scrape of both was very similar. Both sites have an endpoint that you can query to get a result back in JSON. There were a few examples online on GitHub that I was able to base mine on. In each case the endpoint has a limit on the number of results that it will return at one time, so I needed to find a way to iterate through. In the case of rentfaster it was easy, since it returned search results with a page number associated. For a given query I could start at page 1 and increment my page number until I had an empty result set. After each query I dumped the JSON to a raw date stamped folder. For realtor.ca it was a little trickier, as there was no automatic chunking. It did allow a price range though, so I picked a very high price ceiling, and then incremented my price floor to be the highest price seen in the previous result until I got an empty result back.</p>
<p>The end result of each of these scrapes was a date stamped folder for each containing zipped JSON files of the raw results from the endpoint. You can find the scraping code for realtor.ca <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/mls/scrape.py">here</a> and for rentfaster <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/rfaster/scrape.py">here</a>.</p>
</section>
<section id="parsing-the-listings" class="level2">
<h2 class="anchored" data-anchor-id="parsing-the-listings">Parsing the listings</h2>
<p>After downloading the raw listings data, the next step was to process and format it into something I’d want to consume. This was pretty tedious, but it’s a critical part of any data project. Lots of validating and transforming of various fields. I won’t go into the details here, but the code for parsing realtor.ca is <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/mls/parse.py">here</a> and for rentfaster <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/rfaster/parse.py">here</a>. As the final stage of parsing any given day I would write a <a href="https://pandas.pydata.org/">pandas</a> DataFrame out to <a href="https://parquet.apache.org/documentation/latest/">parquet</a> in a folder along with the compressed raw files. This setup made it easy to read in cleaned up data, while still giving me the flexibility to go back and modify my data cleaning process as necessary on historical results.</p>
</section>
<section id="storing-all-the-data" class="level2">
<h2 class="anchored" data-anchor-id="storing-all-the-data">Storing all the data</h2>
<p>I probably could have done basically everything I needed to do for this project in pandas, or at least <a href="https://geopandas.org/en/stable/">geopandas</a>, but it didn’t seem like the most elegant solution, and I wanted to learn some stuff. With those two criteria in mind I went with a <a href="https://www.postgresql.org/">PostgreSQL</a> using <a href="https://postgis.net/">PostGIS</a> to handle the geospatial aspects of the data (location being very important in selecting where to live after all). I deployed the database itself in a <a href="https://www.docker.com/">docker</a> container using ansible to manage the deployment. I also wrote a small wrapper script to make it easier to connect to the database from python using <a href="https://www.sqlalchemy.org/">sqlalchemy</a>. The wrapper code is <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/postgis.py">here</a>.</p>
</section>
<section id="ingesting-listings-data-in-postgis" class="level2">
<h2 class="anchored" data-anchor-id="ingesting-listings-data-in-postgis">Ingesting listings data in PostGIS</h2>
<p>The last thing that needed to happen with the listings themselves was getting them into the database. First I created a table for each of rentfaster and realtor.ca in the final format I wanted. <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/postgis/create_mls.sql">Here’s</a> the sql used to create the realtor.ca one for example. With that created I used pandas and sqlalchemy to push the cleaned data into a staging table (no need to predefine this since it’s getting wiped each time and pandas can handle table creation). Once the data was up in staging I would do a few additional calculations, like turning the latitude and longitude records into PostGIS Points before moving the data into the final table. I also would update a materialized view of listing data joined to some other data sets at this point, but I haven’t talked about the other data yet so I’ll cover that later. <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/rfaster/ingest.py">Here’s</a> an example of the ingestion script.</p>
</section>
<section id="adding-in-commute-data" class="level2">
<h2 class="anchored" data-anchor-id="adding-in-commute-data">Adding in commute data</h2>
<p>One of the most critical things in terms of choosing where to live is how easy it is to get places from it. This was one of the key pain points that made me think to develop this project in the first place. Plugging a candidate location into google maps and then interating through commute times to various important locations (downtown, work, family) is quite tedious. To make this easier I wanted to compute <a href="https://en.wikipedia.org/wiki/Isochrone_map">isochrones</a> for various transit modes and locations. I initially looked at <a href="https://azure.microsoft.com/en-ca/services/azure-maps/">Azure maps</a> for this. They have a built in method for isochrones, which I got working. Unfortunately it wasn’t very granular in terms of the isochrones it produced, and it didn’t support public transit data at all.</p>
<p>Fortunately, I learned about an amazing project called <a href="https://docs.opentripplanner.org/en/v1.5.0/">Open Trip Planner</a> that was exactly what I needed. It was definitely more work to set up, but the results were way better than I could get through Azure. Open Trip Planner doesn’t include any maps or transit information out of the box, so I had to set that up. I used <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/download_osm_data.py">this</a> script to grab a map of my region from <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/download_osm_data.py">OpenStreetMap</a>, supplemented it with detailed transit commute information for my city with <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/download_transit_data.py">this script</a> and finally even added in some elevation data so that walking and cycling commute times would be more accurate from <a href="https://maps.canada.ca/czs/index-en.html">This government of Canada page</a>. I couldn’t automate that last part at all as I had to queue up for my data request and then retrieve it from a personalized email link. Oh well.</p>
<p>Once I had OpenTripPlanner up and running (again, in a docker container) I was able to use the API it provided to compute isochrones of various time ranges, transit modes, and locations using <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/make_isochrone.py">this script</a> (it still has the Azure maps code in it even though I didn’t end up using that if you’re curious).</p>
<p>The output of that API was saved to JSON files, and then ingested into PostGIS using <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/isochrone.py">this script</a>.</p>
<p>Finally, I needed some way to associate this isochrone data with all the listings I was saving. I wanted columns that would easily let me filter on things like “Is this more than a 30 minute walk/transit trip from downtown?”. Between the different transit modes (walk, cycle, transit, drive, plus combinations), time ranges (I did 5 minute intervals between 10 and 60 minutes) and finally locations of interest I had a <em>lot</em> of possible ways to slice the data. While I could have hand written a giant SQL statement that would create them all, that would have been very boring to do, error prone, and also required significant rework if I changed any of my criteria. Instead I did some hacky string manipulation in python to construct the various components of my query and then stuck it together to create a view in PostGIS that associated each listing with all the transportation related attributes I might be interested in. <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/postgis/mls_commute_syntax.py">Here’s</a> what that looks like for realtor.ca.</p>
</section>
<section id="adding-in-grocery-store-data" class="level2">
<h2 class="anchored" data-anchor-id="adding-in-grocery-store-data">Adding in grocery store data</h2>
<p>While commute time to various places is certainly important for location, another factor is nearby amenities. Specifically I was asked if I could include the nearest grocery store. For this I used the <a href="https://foursquare.com/">FourSquare</a> API. Similar to the initial scraping above, I had some issues with chunking here. The FourSquare API only returns a maximum of 50 results, and there are (a few) more than 50 grocery stores in all of Calgary. One thing the API lets you specify is a NE and SW corner to define a rectangle to search within. I took advantage of that and <a href="https://numpy.org/doc/stable/reference/generated/numpy.linspace.html">numpy’s linspace method</a> to chunk the city into many boxes, query for grocery stores in each of them, and combine the result. The scraping code is <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/foursquare.py">here</a>. The results are a little messy. There are several locations that FourSquare considers a grocery store that I would disagree with. It hasn’t been enough of an issue to bother with, but between when I save the raw FourSquare results and when I upload the data into PostGIS (<a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/postgis/upload_foursquare.py">here</a>) I could easily (but tediously) add in a step that drops the locations that I don’t want to consider as grocery stores.</p>
<p>Once the grocery store data is in the database I create a table that has a row for each listing, its nearest grocery store, and the distance in meters to that grocery store. This is just straight line distance and doesn’t consider commute time, but it’s fast to compute, gives a good idea, and doesn’t make me run every listing and every grocery store through OpenTripPlanner daily. That seemed like a reasonable tradeoff to me.</p>
</section>
<section id="adding-flood-zone-data" class="level2">
<h2 class="anchored" data-anchor-id="adding-flood-zone-data">Adding flood zone data</h2>
<p>Another thing I want to consider when choosing where to live is climate resiliency. Calgary experienced a very significant <a href="https://www.calgary.ca/uep/water/flood-info/flooding-history-calgary.html">flood</a> less than a decade ago, and I would like to avoid living somewhere likely to be impacted by a similar event in the future. To manage this, I grabbed some flood risk data from the City of Calgary Open Data Portal and ingested it into PostGIS (<a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/postgis/floodzone.py">here</a>). From that I could create a table that checked if any given listing was in the 1 in 20 or 1 in 100 year flood zones as defined by the city (<a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/postgis/floodzonemap.sql">here</a>).</p>
</section>
<section id="combining-the-results" class="level2">
<h2 class="anchored" data-anchor-id="combining-the-results">Combining the results</h2>
<p>At this stage in the write up I have a table with listings and their details, as well as some views that have a foreign key identifying the listing, along with some other specific attributes (closest grocery store, flood zone status, commute details). Creating those views actually takes an appreciable amount of time (not massive, but the commute one for example is a solid 10 seconds). What I want to build off the combination of all these tables is a filtered list of just the listings that match my criteria. Both because I want to be able to iterate on my criteria quickly, and because I’m building similar criteria list for a few other people who are interested in finding a place to live, I don’t want to have to recompute all those queries every time I want to change something or need to find candidates for a new person. To manage this, I created a materialized view of all the data sets joined together (<a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/postgis/mls_wide_table.py">here’s</a> the realtor.ca table for example). After I ingest a new day of listings I can refresh this materialized view, and then have quick access to all my updated criteria for current listings.</p>
</section>
<section id="creating-candidate-lists" class="level2">
<h2 class="anchored" data-anchor-id="creating-candidate-lists">Creating candidate lists</h2>
<p>The next piece is filtering down all of the possible listings to just the ones that I might actually want. I did this by making views on top of the wide table described above that applied whatever filter criteria I wanted, along with only returning a subset of the available columns that I’d want to see in advance before investigating a listing further. <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/postgis/candidate_views.sql">Here’s</a> the code for making candidate views for realtor.ca for example.</p>
</section>
<section id="sharing-the-candidates" class="level2">
<h2 class="anchored" data-anchor-id="sharing-the-candidates">Sharing the candidates</h2>
<p>Now to make the candidate listings accessible. To make it easier for me, and possible for others, I export the listings daily to <a href="https://www.dropbox.com/home">Dropbox</a>. This part of the process was actually delightfully easy. I made some minor modifications to the example code on the Dropbox page and then used pandas to_html method to push up a table of listings. From there I could use regular Dropbox functionality to share personalized folders with people interested in particular listings candidates. If I was trying to do this as an actual application I’d obviously need a more robust solution, but for myself and a couple other people this worked perfect. The basic dropbox export code is <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/dropbox_uploader.py">here</a> and the actual listings upload code is <a href="https://github.com/ianepreston/wheretolive/blob/main/src/wheretolive/mls/upload_candidates.py">here</a>.</p>
</section>
<section id="scheduling-things" class="level2">
<h2 class="anchored" data-anchor-id="scheduling-things">Scheduling things</h2>
<p>Now that I have all the components of the pipeline set up I need to automate it. I was tempted to go with something cool for this like <a href="https://airflow.apache.org/">airflow</a> or <a href="https://dagster.io/">dagster</a> but it didn’t seem worth the complexity. I ended up adding a task to my ansible playbook to schedule cron jobs for realtor.ca and rentfaster listings. The script cron runs looks like <a href="https://github.com/ianepreston/wheretolive/blob/main/scripts/daily_rfaster.py">this</a>.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Overall I’m quite happy with how this project went. I learned a lot (some things the hard way, like to always set up cost alerts in the cloud). I also ended up with a service that I’m finding legitimately useful in locating where I want to live next, that others are finding valuable too.</p>


</section>

 ]]></description>
  <category>data</category>
  <category>python</category>
  <category>yyc</category>
  <guid>https://ianepreston.github.io/blog/posts/2021-12-30-wheretolive.html</guid>
  <pubDate>Thu, 30 Dec 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>My Portfolio</title>
  <link>https://ianepreston.github.io/blog/posts/2021-04-10-portfolio.html</link>
  <description><![CDATA[ 




<section id="intro" class="level1">
<h1>Intro</h1>
<p>Some of the posts on this blog are pretty big guides or documents that I like to reference and refer others to regularly. In addition, I have a few other projects that I haven’t written about, but would still be nice to share. This post will compile all the bigger posts and projects I’ve worked on as one easy to reference article.</p>
</section>
<section id="stats_can-package" class="level1">
<h1>stats_can package</h1>
<p>I am the creator and maintainer of an open source package called stats_can. It provides a python interface to data and metadata from <a href="https://www.statcan.gc.ca/eng/start">Statistics Canada</a>. You can read the documentation for it <a href="https://stats-can.readthedocs.io/en/latest/">here</a>, the code is available <a href="https://github.com/ianepreston/stats_can">here</a>. You can also see a talk I gave on what goes into building and maintaining the library <a href="https://www.youtube.com/watch?v=SJzg7HnISxw">here</a>. Unfortunately the first few minutes of the talk were not recorded, but the full slide deck is available <a href="https://docs.google.com/presentation/d/1ijCHBcqwYRbm3ZuHEJajwq5q89HPCu25UzUV2m-dx7Q/edit?usp=drivesdk">here</a>.</p>
</section>
<section id="terra-mystica-faction-selection-model" class="level1">
<h1>Terra Mystica faction selection model</h1>
<p>This is a project I worked on for a friend that’s really into the board game <a href="https://boardgamegeek.com/boardgame/120677/terra-mystica">Terra Mystica</a>. It scrapes a few hundred thousand games off of an <a href="https://terra.snellman.net/">online Terra Mystica gaming site</a>, ingests and cleans the game data, and then trains a model to help determine which faction you should play, based on the starting layout of the game. Right now the model is a pretty simple linear regression. At some point I’d like to come back to this and try some bayesian methods, both to learn more about them, and to see if I can improve performance. You can see the code for the project <a href="https://github.com/ianepreston/terra-mystica-models">here</a>. The notebooks folder in that repository walks through the development process and was used to provide status updates to the friend I was building the app for. I also built a very rudimentary webapp that will let you plug in the starting conditions for the game, and then return a ranked list of all the factions based on those inputs. It’s hosted on the free tier of Azure, so it’s quite slow, but it’s available <a href="https://tmmodel.azurewebsites.net/">here</a>. You can also pull down and deploy the docker container the webapp and model are stored in <a href="https://hub.docker.com/repository/docker/ianepreston/terra_mystica">here</a>.</p>
</section>
<section id="rent-or-own-model" class="level1">
<h1>Rent or Own model</h1>
<p>This package is designed to help me understand the financial trade offs between renting or owning a home. Other online calculators exist, but they’re typically designed for the US, and even the Canadian ones I could find were meant for Ontario. Since I live in Alberta, and I like this sort of thing, I thought it would be fun to build my own. You can check out the code <a href="https://github.com/ianepreston/rentorown">here</a>. From the readme on that page, or at <a href="https://mybinder.org/v2/gh/ianepreston/rentorown/HEAD?urlpath=lab/tree/index.ipynb">this link</a> you can open a <a href="https://mybinder.org/">binder</a> container that will let you play around with it in a Jupyter notebook. At some point in the future I might turn it into a full fledged web app, but for now the notebook suits my needs.</p>
</section>
<section id="data-structures-and-algorithms" class="level1">
<h1>Data Structures and Algorithms</h1>
<p>My job and interests are both more directly related to data science/engineering than classic software engineering. With that said, I do still like to code, and I think having a solid grasps of at least the basics of CS is handy for anyone who spends a lot of time writing code. To that end, in addition to completing a <a href="https://www.athabascau.ca/syllabi/comp/comp272.php">Data Structures and Algorithms course at Athabasca University</a> I like to do the <a href="https://adventofcode.com/">Advent of Code</a> challenges every year:</p>
<ul>
<li>Here’s my <a href="https://github.com/ianepreston/advent_2020">2020 advent code</a>. This year I was also learning package development and type hinting, so the repository and code are really overengineered for what should be a daily coding kata. It was fun to work on though and I learned a lot</li>
<li>I didn’t fully complete the <a href="https://github.com/ianepreston/advent_2019">2019 advent</a>. That was the year you implemented an assembly language emulator and built on it through the course of the project. Between that (not really my area of interest) and a whole lot of really tedious maze problems near the end (maybe I should come back to those) I didn’t really have the motivation to complete the last few days. That was the first year I coded along live though, so that was a good challenge.</li>
<li>My <a href="https://github.com/ianepreston/advent_2018">2018 advent</a> is a bit of a weird one. I used the advent challenges as the material for a weekly coding tutorial I ran at work. To facilitate that format some of the code is done in jupyter, and a lot of the solutions are less efficient/elegant than I might have done in another context, but they worked to illustrate whatever concept I was covering at the time.</li>
</ul>
</section>
<section id="bigger-posts" class="level1">
<h1>Bigger posts</h1>
<p>This section will include links to the larger and more involved blog posts I’ve made.</p>
<section id="where-to-live-app" class="level2">
<h2 class="anchored" data-anchor-id="where-to-live-app">Where to live app</h2>
<p>This post documents the process I went through to build a where to live app. It scrapes listings from rental and sales sites daily, and then combines them with other data sets like commute times, grocery store locations, and flood risk to produce personalized lists of candidate listings. The blog describes the implementation in more detail, along with some important lessons I learned and links to the code. The blog post is <a href="https://blog.ianpreston.ca/data/python/yyc/2021/12/30/wheretolive.html">here</a>.</p>
</section>
<section id="paper-reproduction---albertas-fiscal-responses-to-fluctuations-in-non-renewable-resource-revenue-in-python" class="level2">
<h2 class="anchored" data-anchor-id="paper-reproduction---albertas-fiscal-responses-to-fluctuations-in-non-renewable-resource-revenue-in-python">Paper Reproduction - “Alberta’s Fiscal Responses To Fluctuations In Non-Renewable-Resource Revenue” in python</h2>
<p>This is a paper reproduction I did of a paper that was published by the University of Calgary’s school of public policy. In the course of reproducing the paper I actually found a data error in the original paper. After correcting the error the conclusions of the paper do not appear to be supported. An interesting exercise in coding, and reproducibility in science. The blog post is <a href="https://blog.ianpreston.ca/econometrics/jupyter/python/alberta/2021/02/26/ferede.html">here</a>.</p>
</section>
<section id="automating-provisioning-arch" class="level2">
<h2 class="anchored" data-anchor-id="automating-provisioning-arch">Automating provisioning Arch</h2>
<p>I use Arch Linux btw. <a href="https://blog.ianpreston.ca/configuration/linux/arch/2020/11/26/arch-tldr.html">This post</a> links to a 3 part post series I did about automating the setup of my workstations and servers. It goes from a detailed breakdown of the bash script that’s used to get a bare bones arch install, through to using <a href="https://www.ansible.com/">ansible</a> to do all the system configuration, software install, and server setup (mostly a bunch of docker containers), followed by setting up a user profile using <a href="https://github.com/thoughtbot/rcm">rcm</a>.</p>
</section>
<section id="python-packaging-guide" class="level2">
<h2 class="anchored" data-anchor-id="python-packaging-guide">Python packaging guide</h2>
<p>There are lots of great guides on how to build a python package. I’m personally a big fan of <a href="https://cjolowicz.github.io/posts/hypermodern-python-01-setup/">hypermodern python</a> and use its accompanying <a href="https://cookiecutter.readthedocs.io/en/1.7.2/">cookiecutter</a> whenever I’m setting up a new project. But there’s not much out there that walks you through all the phases between just having a script that you can run up to building a full blown package. Also, most guides don’t cover conda, and I find the conda docs are really tuned towards people who are bundling C code or something else with their package, not just making a pure python package. To bridge this gap, and to help cement my own understanding of packaging, I wrote <a href="https://blog.ianpreston.ca/python/poetry/conda/2020/07/09/pypack.html">this guide</a>.</p>
</section>
<section id="setting-up-a-data-science-environment-in-windows" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-a-data-science-environment-in-windows">Setting up a data science environment in Windows</h2>
<p><a href="https://blog.ianpreston.ca/data/python/configuration/2020/02/15/windows-ds-software.html">This guide</a> is for everyone out there that only has a locked down Windows machine, but still wants to work with data in python. Almost all the guides I could find online assumed you had a Mac or Linux machine, and even the Windows ones often assumed you had administrative rights. This guide gets you set up with conda, git, and vs code, all without elevated privilege. The only thing I haven’t managed to do in a Windows environment is build a python package. I’m sure it’s doable, but this guide is for those writing scripts/notebooks.</p>


</section>
</section>

 ]]></description>
  <guid>https://ianepreston.github.io/blog/posts/2021-04-10-portfolio.html</guid>
  <pubDate>Sat, 10 Apr 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Alberta’s Fiscal Responses To Fluctuations In Non-Renewable-Resource Revenue</title>
  <link>https://ianepreston.github.io/blog/posts/2021-02-26-ferede.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>This is my replication of the empirical results, tables, and figures produced in a paper by Dr.&nbsp;Ergete Ferede, published by the University of Calgary school of public policy in Volume 11:24, September 2018.</p>
<p>The original paper is here: <a href="https://www.policyschool.ca/wp-content/uploads/2018/09/NRR-Ferede.pdf">https://www.policyschool.ca/wp-content/uploads/2018/09/NRR-Ferede.pdf</a></p>
<p>I chose this paper to reproduce for two reasons. The first is pragmatic; the data it uses is all publicly available, so I actually can. The second is that it describes a topic of importance in the province of Alberta, where I live.</p>
<p>You can read the details of what the paper sets out to show in the paper itself, but in brief the idea is to show that provincial government spending increases in the year following an increase in non-renewable resource revenue, but it does not decrease accordingly in the year following declines in the same revenue source. This has a ratcheting effect on public finance that is a contributor to the “royalty rollercoaster” that is Alberta’s public finance.</p>
<p>In the following sections I’ll go through the code necessary to extract and transform the data set used in the paper, as well as reproduce its key empirical results. Since most economists don’t use python, and they make up a key part of my intended audience for this, I’ll be adding comments to my code that explicitly describe what some of the functions and methods I’m calling do.</p>
<p>I’m including all of the code necessary to produce this reproduction, since that’s a big part of why I’m doing this exercise, but if you’re just interested in seeing how my reproduced results compare to the original paper you can skip all the code blocks. You can find the code for this notebook on <a href="https://github.com/ianepreston/ferede_1124_reproduction">my github</a></p>
<p>A surprising result of this reproduction is that I’ve identified a single data point error in the original paper that negates its results. Read on to find out what the error was and the impact it had on the results.</p>
</section>
<section id="setup-and-data-acquisition" class="level2">
<h2 class="anchored" data-anchor-id="setup-and-data-acquisition">Setup and data acquisition</h2>
<p>This section of the code loads required modules, downloads the required data sets, and reads them into DataFrames.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> datetime <span class="im" style="color: #00769E;">as</span> dt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> itertools <span class="im" style="color: #00769E;">import</span> chain</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> pathlib <span class="im" style="color: #00769E;">import</span> Path</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> altair <span class="im" style="color: #00769E;">as</span> alt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> arch.unitroot <span class="im" style="color: #00769E;">import</span> DFGLS, ADF, PhillipsPerron</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> Image</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">import</span> pandas_datareader <span class="im" style="color: #00769E;">as</span> pdr</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> requests</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-12"><span class="im" style="color: #00769E;">import</span> stats_can</span>
<span id="cb1-13"><span class="im" style="color: #00769E;">import</span> statsmodels</span>
<span id="cb1-14"><span class="im" style="color: #00769E;">from</span> statsmodels.tsa.api <span class="im" style="color: #00769E;">import</span> VAR</span>
<span id="cb1-15"></span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-18">alt.renderers.enable(<span class="st" style="color: #20794D;">"jupyterlab"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<p>We start by loading the required libraries that will be used to support the analysis. For reference here are links to the libraries that are being used:</p>
<ul>
<li><a href="https://docs.python.org/3/library/pathlib.html">Pathlib</a></li>
<li><a href="https://docs.python.org/3/library/datetime.html">datetime</a></li>
<li><a href="https://requests.readthedocs.io/en/master/">requests</a></li>
<li><a href="https://pandas.pydata.org/">pandas</a></li>
<li><a href="https://pandas-datareader.readthedocs.io/en/latest/">pandas_datareader</a></li>
<li><a href="https://numpy.org/">numpy</a></li>
<li><a href="https://stats-can.readthedocs.io/en/latest/">stats_can</a></li>
<li><a href="https://altair-viz.github.io/">altair</a></li>
<li><a href="https://seaborn.pydata.org/">seaborn</a></li>
<li><a href="https://arch.readthedocs.io/en/latest/index.html">arch</a></li>
<li><a href="https://www.statsmodels.org/stable/index.html">statsmodels</a></li>
<li><a href="https://matplotlib.org/stable/index.html">matplotlib</a></li>
</ul>
<section id="historical-budget-data" class="level3">
<h3 class="anchored" data-anchor-id="historical-budget-data">Historical budget data</h3>
<p>Functions in this section are concerned with acquiring historical Alberta budget data and reading it into a DataFrame</p>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">def</span> download_budget_data() <span class="op" style="color: #5E5E5E;">-&gt;</span> Path:</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;">"""Download the excel file for the analysis from the policy school page.</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">    Note the readme sheet on the first file. Credit to Kneebone and Wilkins for</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">    assembling it, and policy school for hosting it.</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;">    Originally used this URL, but found it was missing some later heritage</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;">    contributions. After discussion with Dr. Kneebone an updated set has been provided</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;">    https://www.policyschool.ca/wp-content/uploads/2019/01/Provincial-Government-Budget-Data-January-2019FINAL-USE.xlsx</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;">    pathlib.Path</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;">        A path object with the location and name of the data</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb2-16">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Downloading data set'</span>)</span>
<span id="cb2-17"></span>
<span id="cb2-18">    url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'https://www.policyschool.ca/wp-content/uploads/2019/03/Provincial-Government-Budget-Data-March-2019.xlsx'</span></span>
<span id="cb2-19">    <span class="co" style="color: #5E5E5E;"># send a request to the url for the file</span></span>
<span id="cb2-20">    response <span class="op" style="color: #5E5E5E;">=</span> requests.get(</span>
<span id="cb2-21">        url,</span>
<span id="cb2-22">        stream<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb2-23">        headers<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'user-agent'</span>: <span class="va" style="color: #111111;">None</span>}</span>
<span id="cb2-24">    )</span>
<span id="cb2-25">    <span class="co" style="color: #5E5E5E;"># create a path object for the file in the data folder above</span></span>
<span id="cb2-26">    <span class="co" style="color: #5E5E5E;"># where this notebook is saved with the file named</span></span>
<span id="cb2-27">    <span class="co" style="color: #5E5E5E;"># budget.xlsx for easy later access.</span></span>
<span id="cb2-28">    fname <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'.'</span>).joinpath(<span class="st" style="color: #20794D;">'data'</span>).joinpath(<span class="st" style="color: #20794D;">'budgets.xlsx'</span>)</span>
<span id="cb2-29">    <span class="co" style="color: #5E5E5E;"># write the response from the request to the file in the path specified above</span></span>
<span id="cb2-30">    <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span> (fname, <span class="st" style="color: #20794D;">'wb'</span>) <span class="im" style="color: #00769E;">as</span> outfile:</span>
<span id="cb2-31">        <span class="cf" style="color: #003B4F;">for</span> chunk <span class="kw" style="color: #003B4F;">in</span> response.iter_content(chunk_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">512</span>):</span>
<span id="cb2-32">            <span class="cf" style="color: #003B4F;">if</span> chunk: <span class="co" style="color: #5E5E5E;"># filter out keep-alive new chunks</span></span>
<span id="cb2-33">                outfile.write(chunk)</span>
<span id="cb2-34">    <span class="co" style="color: #5E5E5E;"># Return the location of the file so we can load it later easily</span></span>
<span id="cb2-35">    <span class="cf" style="color: #003B4F;">return</span> fname</span>
<span id="cb2-36"></span>
<span id="cb2-37"></span>
<span id="cb2-38"><span class="kw" style="color: #003B4F;">def</span> get_budget_file(force_update: <span class="bu" style="color: null;">bool</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> Path:</span>
<span id="cb2-39">    <span class="co" style="color: #5E5E5E;">"""Get the budget file, downloading if required.</span></span>
<span id="cb2-40"></span>
<span id="cb2-41"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb2-42"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb2-43"><span class="co" style="color: #5E5E5E;">    force_update: bool</span></span>
<span id="cb2-44"><span class="co" style="color: #5E5E5E;">        Download the data file even if you already have it</span></span>
<span id="cb2-45"></span>
<span id="cb2-46"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb2-47"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb2-48"><span class="co" style="color: #5E5E5E;">    pathlib.Path</span></span>
<span id="cb2-49"><span class="co" style="color: #5E5E5E;">        A path object with the location and name of the data</span></span>
<span id="cb2-50"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb2-51">    <span class="co" style="color: #5E5E5E;"># This is where we're expecting the file to be saved if it exists</span></span>
<span id="cb2-52">    fname <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'.'</span>).joinpath(<span class="st" style="color: #20794D;">'data'</span>).joinpath(<span class="st" style="color: #20794D;">'budgets.xlsx'</span>)</span>
<span id="cb2-53">    <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> fname.exists() <span class="kw" style="color: #003B4F;">or</span> force_update:</span>
<span id="cb2-54">        download_budget_data()</span>
<span id="cb2-55">    <span class="cf" style="color: #003B4F;">return</span> fname</span>
<span id="cb2-56"></span>
<span id="cb2-57"></span>
<span id="cb2-58"><span class="kw" style="color: #003B4F;">def</span> get_date_index(df: pd.DataFrame) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DatetimeIndex:</span>
<span id="cb2-59">    <span class="co" style="color: #5E5E5E;">"""Helper function to turn budget year strings into datetimes.</span></span>
<span id="cb2-60"></span>
<span id="cb2-61"><span class="co" style="color: #5E5E5E;">    The Fiscal year columns span across years, e.g. 1965-66. In order</span></span>
<span id="cb2-62"><span class="co" style="color: #5E5E5E;">    to use all the date indexed functionality I want to convert them into</span></span>
<span id="cb2-63"><span class="co" style="color: #5E5E5E;">    an actual datetime format. This function accomplishes that</span></span>
<span id="cb2-64"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb2-65"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb2-66"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb2-67"><span class="co" style="color: #5E5E5E;">    df: pd.DataFrame</span></span>
<span id="cb2-68"><span class="co" style="color: #5E5E5E;">        The budget dataframe with the fiscal year style columns</span></span>
<span id="cb2-69"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb2-70"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb2-71"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb2-72"><span class="co" style="color: #5E5E5E;">    pd.DatetimeIndex</span></span>
<span id="cb2-73"><span class="co" style="color: #5E5E5E;">        A datetime index showing January 1 of the beginning of each</span></span>
<span id="cb2-74"><span class="co" style="color: #5E5E5E;">        fiscal year for each period.    </span></span>
<span id="cb2-75"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb2-76">    date_index <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(</span>
<span id="cb2-77">        df</span>
<span id="cb2-78">        .assign(year<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[<span class="st" style="color: #20794D;">'budget_yr'</span>].<span class="bu" style="color: null;">str</span>[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">4</span>].astype(<span class="bu" style="color: null;">int</span>))</span>
<span id="cb2-79">        .assign(month<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-80">        .assign(day<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-81">        [[<span class="st" style="color: #20794D;">'year'</span>, <span class="st" style="color: #20794D;">'month'</span>, <span class="st" style="color: #20794D;">'day'</span>]]</span>
<span id="cb2-82">    )</span>
<span id="cb2-83">    <span class="cf" style="color: #003B4F;">return</span> date_index</span>
<span id="cb2-84"></span>
<span id="cb2-85"></span>
<span id="cb2-86"><span class="kw" style="color: #003B4F;">def</span> read_ab_budget() <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb2-87">    <span class="co" style="color: #5E5E5E;">"""Read Alberta budget data.</span></span>
<span id="cb2-88"></span>
<span id="cb2-89"><span class="co" style="color: #5E5E5E;">    Downloads the data if necessary, reads it in and gives</span></span>
<span id="cb2-90"><span class="co" style="color: #5E5E5E;">    the variables easier to work with names</span></span>
<span id="cb2-91"></span>
<span id="cb2-92"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb2-93"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb2-94"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb2-95"><span class="co" style="color: #5E5E5E;">        Alberta's revenue and expenditure tables</span></span>
<span id="cb2-96"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb2-97">    <span class="co" style="color: #5E5E5E;"># Get the budget file, download if necessary  using functions</span></span>
<span id="cb2-98">    <span class="co" style="color: #5E5E5E;"># defined above</span></span>
<span id="cb2-99">    fname <span class="op" style="color: #5E5E5E;">=</span> get_budget_file()</span>
<span id="cb2-100">    df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb2-101">        pd.read_excel(</span>
<span id="cb2-102">            fname,</span>
<span id="cb2-103">            sheet_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Alberta'</span>,</span>
<span id="cb2-104">            <span class="co" style="color: #5E5E5E;"># column titles are spaced over 3 rows</span></span>
<span id="cb2-105">            header<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb2-106">            <span class="co" style="color: #5E5E5E;"># first column of data is B</span></span>
<span id="cb2-107">            index_col<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb2-108">            <span class="co" style="color: #5E5E5E;"># there's a big footnote at the bottom we want to skip</span></span>
<span id="cb2-109">            skipfooter<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">21</span></span>
<span id="cb2-110">        )</span>
<span id="cb2-111">        <span class="co" style="color: #5E5E5E;"># Because of the merged cells we get an empty first row</span></span>
<span id="cb2-112">        .loc[<span class="kw" style="color: #003B4F;">lambda</span> x: x.index.notnull()]</span>
<span id="cb2-113">        <span class="co" style="color: #5E5E5E;"># Not sure where the empty first column comes from but drop it</span></span>
<span id="cb2-114">        .drop(columns<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Unnamed: 0'</span>)</span>
<span id="cb2-115">        .reset_index()</span>
<span id="cb2-116">        .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb2-117">            <span class="st" style="color: #20794D;">'index'</span>: <span class="st" style="color: #20794D;">'budget_yr'</span>,</span>
<span id="cb2-118">            <span class="st" style="color: #20794D;">'Personal Income Tax'</span>: <span class="st" style="color: #20794D;">'personal_income_tax'</span>,</span>
<span id="cb2-119">            <span class="st" style="color: #20794D;">'Corporation Income Tax'</span>: <span class="st" style="color: #20794D;">'corporate_income_tax'</span>,</span>
<span id="cb2-120">            <span class="st" style="color: #20794D;">'Retail Sales Tax'</span>: <span class="st" style="color: #20794D;">'retail_sales_tax'</span>,</span>
<span id="cb2-121">            <span class="st" style="color: #20794D;">'Federal Cash Transfers'</span>: <span class="st" style="color: #20794D;">'federal_cash_transfers'</span>,</span>
<span id="cb2-122">            <span class="st" style="color: #20794D;">'Natural Resource Revenue'</span>: <span class="st" style="color: #20794D;">'natural_resource_revenue'</span>,</span>
<span id="cb2-123">            <span class="st" style="color: #20794D;">'Other Own-Source Revenue'</span>: <span class="st" style="color: #20794D;">'other_own_source_revenue'</span>,</span>
<span id="cb2-124">            <span class="st" style="color: #20794D;">'Total Revenue'</span>: <span class="st" style="color: #20794D;">'total_revenue'</span>,</span>
<span id="cb2-125">            <span class="st" style="color: #20794D;">'Health'</span>: <span class="st" style="color: #20794D;">'health_exp'</span>,</span>
<span id="cb2-126">            <span class="st" style="color: #20794D;">'Social Services'</span>: <span class="st" style="color: #20794D;">'social_services_exp'</span>,</span>
<span id="cb2-127">            <span class="st" style="color: #20794D;">'Education'</span>: <span class="st" style="color: #20794D;">'education_exp'</span>,</span>
<span id="cb2-128">            <span class="st" style="color: #20794D;">'Other Program Expenditures'</span>: <span class="st" style="color: #20794D;">'other_program_exp'</span>,</span>
<span id="cb2-129">            <span class="st" style="color: #20794D;">'Total Program Expenditures'</span>: <span class="st" style="color: #20794D;">'total_prog_exp'</span>,</span>
<span id="cb2-130">            <span class="st" style="color: #20794D;">'Debt Service'</span>: <span class="st" style="color: #20794D;">'debt_service'</span>,</span>
<span id="cb2-131">            <span class="st" style="color: #20794D;">'Total  Expenditures'</span>: <span class="st" style="color: #20794D;">'total_exp'</span>,</span>
<span id="cb2-132">            <span class="st" style="color: #20794D;">'Unnamed: 16'</span>: <span class="st" style="color: #20794D;">'annual_deficit'</span></span>
<span id="cb2-133">        })</span>
<span id="cb2-134">        <span class="co" style="color: #5E5E5E;"># Turn the fiscal year string into a datetime object</span></span>
<span id="cb2-135">        .assign(budget_dt<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: get_date_index(df))</span>
<span id="cb2-136">        .set_index(<span class="st" style="color: #20794D;">'budget_dt'</span>)</span>
<span id="cb2-137">    )</span>
<span id="cb2-138">    <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb2-139"></span>
<span id="cb2-140"></span>
<span id="cb2-141"><span class="kw" style="color: #003B4F;">def</span> read_heritage() <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb2-142">    <span class="co" style="color: #5E5E5E;">"""Read deposits to the heritage trust fund from a separate table.</span></span>
<span id="cb2-143"></span>
<span id="cb2-144"><span class="co" style="color: #5E5E5E;">    The paper nets out contributions to the heritage trust fund when they are</span></span>
<span id="cb2-145"><span class="co" style="color: #5E5E5E;">    made, so we have to read them in to be able to net them out of resource revenue.</span></span>
<span id="cb2-146"></span>
<span id="cb2-147"><span class="co" style="color: #5E5E5E;">    They're stored in the same sheet of the workbook, just down below the big table we</span></span>
<span id="cb2-148"><span class="co" style="color: #5E5E5E;">    read in with the function above.</span></span>
<span id="cb2-149"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb2-150">    fname <span class="op" style="color: #5E5E5E;">=</span> get_budget_file()</span>
<span id="cb2-151">    df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb2-152">        pd.read_excel(</span>
<span id="cb2-153">            fname,</span>
<span id="cb2-154">            sheet_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Alberta'</span>,</span>
<span id="cb2-155">            <span class="co" style="color: #5E5E5E;"># Have to manually specify column names because of</span></span>
<span id="cb2-156">            <span class="co" style="color: #5E5E5E;"># how the table is laid out</span></span>
<span id="cb2-157">            header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>,</span>
<span id="cb2-158">            usecols<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'D:G'</span>,</span>
<span id="cb2-159">            names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'budget_yr'</span>, <span class="st" style="color: #20794D;">'resource_allocation'</span>, <span class="st" style="color: #20794D;">'deposits'</span>, <span class="st" style="color: #20794D;">'advance_edu'</span>],</span>
<span id="cb2-160">            skiprows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">71</span>,</span>
<span id="cb2-161">            skipfooter<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-162">        )</span>
<span id="cb2-163">        <span class="co" style="color: #5E5E5E;"># more fiddly cleaning because of how the table is set up</span></span>
<span id="cb2-164">        <span class="co" style="color: #5E5E5E;"># there's a blank row between 1986-87 and when</span></span>
<span id="cb2-165">        <span class="co" style="color: #5E5E5E;"># contributions resume in 2005-06</span></span>
<span id="cb2-166">        .loc[<span class="kw" style="color: #003B4F;">lambda</span> df: <span class="op" style="color: #5E5E5E;">~</span>df[<span class="st" style="color: #20794D;">'budget_yr'</span>].isna()]</span>
<span id="cb2-167">        .set_index(<span class="st" style="color: #20794D;">'budget_yr'</span>)</span>
<span id="cb2-168">        <span class="co" style="color: #5E5E5E;"># missing entries have 0 contributions for that</span></span>
<span id="cb2-169">        <span class="co" style="color: #5E5E5E;"># category in that year</span></span>
<span id="cb2-170">        .fillna(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb2-171">        <span class="co" style="color: #5E5E5E;"># The three columns are all counted the same</span></span>
<span id="cb2-172">        <span class="co" style="color: #5E5E5E;"># for the purposes of this analysis, they just have</span></span>
<span id="cb2-173">        <span class="co" style="color: #5E5E5E;"># different labels/classifications depending on the year</span></span>
<span id="cb2-174">        .assign(total_heritage<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df.<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'columns'</span>))</span>
<span id="cb2-175">        <span class="co" style="color: #5E5E5E;"># Add a dummy variable to indicate heritage fund deposit years</span></span>
<span id="cb2-176">        .assign(heritage_dummy<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-177">        .reset_index()</span>
<span id="cb2-178">        <span class="co" style="color: #5E5E5E;"># convert the fiscal year column to a datetime index</span></span>
<span id="cb2-179">        .assign(budget_dt<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: get_date_index(df))</span>
<span id="cb2-180">        .drop(columns<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'budget_yr'</span>)</span>
<span id="cb2-181">        .set_index(<span class="st" style="color: #20794D;">'budget_dt'</span>)</span>
<span id="cb2-182">    )</span>
<span id="cb2-183">    <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb2-184"></span>
<span id="cb2-185"></span>
<span id="cb2-186"><span class="kw" style="color: #003B4F;">def</span> clean_budget() <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb2-187">    <span class="co" style="color: #5E5E5E;">"""Combine base budget with heritage deposits.</span></span>
<span id="cb2-188"></span>
<span id="cb2-189"><span class="co" style="color: #5E5E5E;">    Pull all the logic together to create one dataframe with all the</span></span>
<span id="cb2-190"><span class="co" style="color: #5E5E5E;">    fiscal data for the period of interest.</span></span>
<span id="cb2-191"></span>
<span id="cb2-192"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb2-193"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb2-194"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb2-195"><span class="co" style="color: #5E5E5E;">        The full nominal budget data set.</span></span>
<span id="cb2-196"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb2-197">    budg <span class="op" style="color: #5E5E5E;">=</span> read_ab_budget()</span>
<span id="cb2-198">    heritage <span class="op" style="color: #5E5E5E;">=</span> read_heritage()</span>
<span id="cb2-199">    budg_clean <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb2-200">        <span class="co" style="color: #5E5E5E;"># Start with the budget dataframe</span></span>
<span id="cb2-201">        budg</span>
<span id="cb2-202">        <span class="co" style="color: #5E5E5E;"># consolidate some revenue categories</span></span>
<span id="cb2-203">        .assign(other_revenue<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[[<span class="st" style="color: #20794D;">'retail_sales_tax'</span>, <span class="st" style="color: #20794D;">'federal_cash_transfers'</span>, <span class="st" style="color: #20794D;">'other_own_source_revenue'</span>]].<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'columns'</span>))</span>
<span id="cb2-204">        <span class="co" style="color: #5E5E5E;"># Just keep the columns we still need</span></span>
<span id="cb2-205">        .reindex(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'personal_income_tax'</span>, <span class="st" style="color: #20794D;">'corporate_income_tax'</span>, <span class="st" style="color: #20794D;">'natural_resource_revenue'</span>, <span class="st" style="color: #20794D;">'other_revenue'</span>, <span class="st" style="color: #20794D;">'total_prog_exp'</span>, <span class="st" style="color: #20794D;">'debt_service'</span>])</span>
<span id="cb2-206">        <span class="co" style="color: #5E5E5E;"># add in the heritage contributions data</span></span>
<span id="cb2-207">        .merge(heritage[[<span class="st" style="color: #20794D;">'total_heritage'</span>, <span class="st" style="color: #20794D;">'heritage_dummy'</span>]], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'left'</span>, left_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, right_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb2-208">        <span class="co" style="color: #5E5E5E;"># Set contributions and the heritage dummy to 0 for years where there were no contributions</span></span>
<span id="cb2-209">        .fillna(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb2-210">        <span class="co" style="color: #5E5E5E;"># Net out heritage contributions from natural resources revenue</span></span>
<span id="cb2-211">        .assign(natural_resource_revenue_before_heritage<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[<span class="st" style="color: #20794D;">'natural_resource_revenue'</span>])</span>
<span id="cb2-212">        .assign(natural_resource_revenue<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[<span class="st" style="color: #20794D;">'natural_resource_revenue'</span>] <span class="op" style="color: #5E5E5E;">-</span> df[<span class="st" style="color: #20794D;">'total_heritage'</span>])</span>
<span id="cb2-213">        <span class="co" style="color: #5E5E5E;"># consolidate revenue</span></span>
<span id="cb2-214">        .assign(total_revenue<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[[<span class="st" style="color: #20794D;">'personal_income_tax'</span>, <span class="st" style="color: #20794D;">'corporate_income_tax'</span>, <span class="st" style="color: #20794D;">'natural_resource_revenue'</span>, <span class="st" style="color: #20794D;">'other_revenue'</span>]].<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'columns'</span>))</span>
<span id="cb2-215">        <span class="co" style="color: #5E5E5E;"># consolidate expenditure</span></span>
<span id="cb2-216">        .assign(total_expenditure<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[[<span class="st" style="color: #20794D;">'total_prog_exp'</span>, <span class="st" style="color: #20794D;">'debt_service'</span>]].<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'columns'</span>))</span>
<span id="cb2-217">        <span class="co" style="color: #5E5E5E;"># calculate the deficit</span></span>
<span id="cb2-218">        .assign(deficit<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[<span class="st" style="color: #20794D;">'total_expenditure'</span>] <span class="op" style="color: #5E5E5E;">-</span> df[<span class="st" style="color: #20794D;">'total_revenue'</span>])</span>
<span id="cb2-219">        <span class="co" style="color: #5E5E5E;"># make all the budget numbers floating point</span></span>
<span id="cb2-220">        .astype(<span class="st" style="color: #20794D;">'float64'</span>)</span>
<span id="cb2-221">    )</span>
<span id="cb2-222">    <span class="cf" style="color: #003B4F;">return</span> budg_clean</span></code></pre></div>
</details>
</div>
</section>
<section id="real-per-capita-budget" class="level3">
<h3 class="anchored" data-anchor-id="real-per-capita-budget">Real Per Capita budget</h3>
<p>All of the analysis in the paper is done in terms of real per-capita data. Functions in this section transform the nominal total budget numbers acquired in the previous section into real per-capita figures.</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">def</span> periodic_to_budget_annual(df: pd.DataFrame, index_name: <span class="bu" style="color: null;">str</span>, year_periods: <span class="bu" style="color: null;">int</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;">"""Take a monthly or quarterly indexed dataframe and annualize it by budget period.</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;">    The inflation and population data we need to convert the budget into</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;">    real per-capita figures are monthly series. We need to get the average</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;">    population and price level for each fiscal year in the data set.</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;">    Rolling mean indexed on January year N+1 is the March to March</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;">    average population for fiscal year N</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;">    Applying a date offset of -1 year and taking only</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;">    January data of these rolling means gives us an average on the</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;">    same basis as the budget dates.</span></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;">    df: pandas.DataFrame</span></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;">        DataFrame to be piped into this function</span></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;">    index_name: str</span></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;">        The name of the date index</span></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;">    year_periods: int, default 4</span></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;">        4 for quarterly data (population), 12 for monthly (inflation)</span></span>
<span id="cb3-22"></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb3-25"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;">        An annualized dataframe on a fiscal year basis for comparison</span></span>
<span id="cb3-27"><span class="co" style="color: #5E5E5E;">        to annual budget figures.</span></span>
<span id="cb3-28"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb3-29">    df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb3-30">        df</span>
<span id="cb3-31">        .copy()</span>
<span id="cb3-32">        .rolling(year_periods, closed<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'left'</span>)</span>
<span id="cb3-33">        .mean()</span>
<span id="cb3-34">        .reset_index()</span>
<span id="cb3-35">        .assign(budget_dt<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[index_name] <span class="op" style="color: #5E5E5E;">-</span> pd.DateOffset(years<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb3-36">        .loc[<span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="st" style="color: #20794D;">'budget_dt'</span>].dt.year <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">1965</span>]</span>
<span id="cb3-37">        .loc[<span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="st" style="color: #20794D;">'budget_dt'</span>].dt.month <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb3-38">        .drop(columns<span class="op" style="color: #5E5E5E;">=</span>index_name)</span>
<span id="cb3-39">        .set_index(<span class="st" style="color: #20794D;">'budget_dt'</span>)</span>
<span id="cb3-40">        .copy()</span>
<span id="cb3-41">    )</span>
<span id="cb3-42">    <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb3-43"></span>
<span id="cb3-44"></span>
<span id="cb3-45"><span class="kw" style="color: #003B4F;">def</span> per_capita_data() <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb3-46">    <span class="co" style="color: #5E5E5E;">"""Read in population data to calculate per capita estimates.</span></span>
<span id="cb3-47"></span>
<span id="cb3-48"><span class="co" style="color: #5E5E5E;">    Quarterly population estimates for Alberta from Statistics Canada</span></span>
<span id="cb3-49"></span>
<span id="cb3-50"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb3-51"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb3-52"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb3-53"><span class="co" style="color: #5E5E5E;">        Fiscal year annualized population estimates for Alberta over the</span></span>
<span id="cb3-54"><span class="co" style="color: #5E5E5E;">        reference period.</span></span>
<span id="cb3-55"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb3-56">    table <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'17-10-0009-01'</span></span>
<span id="cb3-57">    df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb3-58">        stats_can.table_to_df(table, path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'data'</span>)</span>
<span id="cb3-59">        .loc[<span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="st" style="color: #20794D;">'GEO'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Alberta'</span>]</span>
<span id="cb3-60">        .loc[<span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="st" style="color: #20794D;">'REF_DATE'</span>] <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="st" style="color: #20794D;">'1965'</span>]</span>
<span id="cb3-61">        .set_index(<span class="st" style="color: #20794D;">'REF_DATE'</span>)</span>
<span id="cb3-62">        [[<span class="st" style="color: #20794D;">'VALUE'</span>]]</span>
<span id="cb3-63">        .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'VALUE'</span> : <span class="st" style="color: #20794D;">'population'</span>})</span>
<span id="cb3-64">        .pipe(periodic_to_budget_annual, <span class="st" style="color: #20794D;">'REF_DATE'</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb3-65">    )</span>
<span id="cb3-66">    <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb3-67"></span>
<span id="cb3-68"></span>
<span id="cb3-69"><span class="kw" style="color: #003B4F;">def</span> inflation_data() <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb3-70">    <span class="co" style="color: #5E5E5E;">"""Read in inflation data to calculate real dollar estimates.</span></span>
<span id="cb3-71"></span>
<span id="cb3-72"><span class="co" style="color: #5E5E5E;">    The whole series is scaled so 2017 budget year is = 1</span></span>
<span id="cb3-73"></span>
<span id="cb3-74"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb3-75"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb3-76"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb3-77"><span class="co" style="color: #5E5E5E;">        Fiscal year annualized inflation data for Alberta over</span></span>
<span id="cb3-78"><span class="co" style="color: #5E5E5E;">        the reference period. Normalized to 2017 = 1</span></span>
<span id="cb3-79"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb3-80">    <span class="co" style="color: #5E5E5E;"># Alberta inflation doesn't go back far enough, use Canada for earlier dates</span></span>
<span id="cb3-81">    vecs <span class="op" style="color: #5E5E5E;">=</span> (<span class="st" style="color: #20794D;">'v41692327'</span>, <span class="st" style="color: #20794D;">'v41690973'</span>)</span>
<span id="cb3-82">    df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb3-83">        stats_can.vectors_to_df_local(vecs, path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'data'</span>, start_date<span class="op" style="color: #5E5E5E;">=</span>dt.date(<span class="dv" style="color: #AD0000;">1965</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb3-84">        .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'v41692327'</span>: <span class="st" style="color: #20794D;">'ab_inflation'</span>, <span class="st" style="color: #20794D;">'v41690973'</span>: <span class="st" style="color: #20794D;">'ca_inflation'</span>})</span>
<span id="cb3-85">    )</span>
<span id="cb3-86">    <span class="co" style="color: #5E5E5E;"># fill in with Canadian inflation data where (early) Alberta inflation data is missing.</span></span>
<span id="cb3-87">    mask <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'ab_inflation'</span>].isna()</span>
<span id="cb3-88">    <span class="co" style="color: #5E5E5E;"># Could probably do some interpolation or scaling before this, but I looked</span></span>
<span id="cb3-89">    <span class="co" style="color: #5E5E5E;"># at the raw series and they were pretty comparable</span></span>
<span id="cb3-90">    df.loc[mask, <span class="st" style="color: #20794D;">'ab_inflation'</span>] <span class="op" style="color: #5E5E5E;">=</span> df.loc[mask, <span class="st" style="color: #20794D;">'ca_inflation'</span>]</span>
<span id="cb3-91">    df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb3-92">        df</span>
<span id="cb3-93">        .drop(columns<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ca_inflation'</span>)</span>
<span id="cb3-94">        .pipe(periodic_to_budget_annual, <span class="st" style="color: #20794D;">'REF_DATE'</span>, <span class="dv" style="color: #AD0000;">12</span>)</span>
<span id="cb3-95">    )</span>
<span id="cb3-96">    <span class="co" style="color: #5E5E5E;"># Rescale to 2017 = 100 (this is fiscal year 2017,</span></span>
<span id="cb3-97">    <span class="co" style="color: #5E5E5E;"># original may have done calendar year)</span></span>
<span id="cb3-98">    inf_2017 <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">float</span>(df.loc[<span class="st" style="color: #20794D;">'2017'</span>, <span class="st" style="color: #20794D;">'ab_inflation'</span>])</span>
<span id="cb3-99">    df <span class="op" style="color: #5E5E5E;">=</span> df <span class="op" style="color: #5E5E5E;">/</span> inf_2017</span>
<span id="cb3-100">    <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb3-101"></span>
<span id="cb3-102"></span>
<span id="cb3-103"><span class="kw" style="color: #003B4F;">def</span> budget_real_per_capita() <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb3-104">    <span class="co" style="color: #5E5E5E;">"""Get budget data in real per-capita terms.</span></span>
<span id="cb3-105"></span>
<span id="cb3-106"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb3-107"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb3-108"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb3-109"><span class="co" style="color: #5E5E5E;">        Budget data in real per-capita terms.</span></span>
<span id="cb3-110"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb3-111">    <span class="co" style="color: #5E5E5E;"># Read in budget data using the function defined in the </span></span>
<span id="cb3-112">    <span class="co" style="color: #5E5E5E;"># previous section</span></span>
<span id="cb3-113">    clean_budget_df <span class="op" style="color: #5E5E5E;">=</span> clean_budget()</span>
<span id="cb3-114">    <span class="co" style="color: #5E5E5E;"># Everything except the dummy variable gets turned into</span></span>
<span id="cb3-115">    <span class="co" style="color: #5E5E5E;"># real per-capita terms</span></span>
<span id="cb3-116">    scale_cols <span class="op" style="color: #5E5E5E;">=</span> clean_budget_df.columns.drop(<span class="st" style="color: #20794D;">'heritage_dummy'</span>).tolist()</span>
<span id="cb3-117">    <span class="co" style="color: #5E5E5E;"># Get population</span></span>
<span id="cb3-118">    per_capita <span class="op" style="color: #5E5E5E;">=</span> per_capita_data()</span>
<span id="cb3-119">    <span class="co" style="color: #5E5E5E;"># Get inflation</span></span>
<span id="cb3-120">    inflation <span class="op" style="color: #5E5E5E;">=</span> inflation_data()</span>
<span id="cb3-121">    <span class="co" style="color: #5E5E5E;"># Combine the datasets, can just use assign because they all</span></span>
<span id="cb3-122">    <span class="co" style="color: #5E5E5E;"># have a datetime index</span></span>
<span id="cb3-123">    dfpc <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb3-124">        clean_budget_df</span>
<span id="cb3-125">        .assign(pop<span class="op" style="color: #5E5E5E;">=</span>per_capita)</span>
<span id="cb3-126">        .assign(cpi<span class="op" style="color: #5E5E5E;">=</span>inflation)</span>
<span id="cb3-127">    )</span>
<span id="cb3-128">    <span class="co" style="color: #5E5E5E;"># rescale to real per capita</span></span>
<span id="cb3-129">    dfpc[scale_cols] <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb3-130">        dfpc[scale_cols]</span>
<span id="cb3-131">        <span class="co" style="color: #5E5E5E;"># original data was in millions of dollars</span></span>
<span id="cb3-132">        .mul(<span class="dv" style="color: #AD0000;">1_000_000</span>)</span>
<span id="cb3-133">        <span class="co" style="color: #5E5E5E;"># divide by population and inflation for</span></span>
<span id="cb3-134">        <span class="co" style="color: #5E5E5E;"># real per-capita</span></span>
<span id="cb3-135">        .div(dfpc[<span class="st" style="color: #20794D;">'pop'</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span>
<span id="cb3-136">        .div(dfpc[<span class="st" style="color: #20794D;">'cpi'</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span>
<span id="cb3-137">    )</span>
<span id="cb3-138">    <span class="cf" style="color: #003B4F;">return</span> dfpc</span></code></pre></div>
</details>
</div>
</section>
<section id="exogenous-factors" class="level3">
<h3 class="anchored" data-anchor-id="exogenous-factors">Exogenous factors</h3>
<p>The paper lists the Alberta employment rate, the Alberta unemployment rate, and the CAD/USD exchange rate as exogenous factors included in the model. Functions in this section acquire that data. I had to do some fiddling to get long enough historical series for some of the factors as you’ll note in the code. It’s hard to say for sure how the original author sourced this data. I’ll just have to compare my tables and charts to his to see if I got close enough.</p>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> download_historical_cad_usd() <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;">"""Get exchange rates from before 1971.</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;">    FRED live data only goes back to 1971, I need a longer series</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;">    This was what I could find. It's annual only, so I can't do it on a budget</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;">    year basis, but hopefully it will be close enough</span></span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;">    This whole function is just some gross munging to read in a table from a web page.</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;">    Once it's called we save it to the data folder so I don't have to re-call it every</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;">    time I run this notebook.</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb4-12">    url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'https://fxtop.com/en/historical-exchange-rates.php?YA=1&amp;C1=USD&amp;C2=CAD&amp;A=1&amp;YYYY1=1953&amp;MM1=01&amp;DD1=01&amp;YYYY2=2019&amp;MM2=04&amp;DD2=01&amp;LANG=en'</span></span>
<span id="cb4-13">    df <span class="op" style="color: #5E5E5E;">=</span> pd.read_html(url)[<span class="dv" style="color: #AD0000;">29</span>]</span>
<span id="cb4-14">    headers <span class="op" style="color: #5E5E5E;">=</span> df.iloc[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb4-15">    new_df  <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb4-16">        pd.DataFrame(df.values[<span class="dv" style="color: #AD0000;">1</span>:], columns<span class="op" style="color: #5E5E5E;">=</span>headers)</span>
<span id="cb4-17">        .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'Year'</span>: <span class="st" style="color: #20794D;">'year'</span>, <span class="st" style="color: #20794D;">'Average USD/CAD'</span>: <span class="st" style="color: #20794D;">'EXCAUS'</span>})</span>
<span id="cb4-18">        .assign(month<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-19">        .assign(day<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-20">        .assign(budget_dt<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: pd.to_datetime(df[[<span class="st" style="color: #20794D;">'year'</span>, <span class="st" style="color: #20794D;">'month'</span>, <span class="st" style="color: #20794D;">'day'</span>]]))</span>
<span id="cb4-21">        .set_index(<span class="st" style="color: #20794D;">'budget_dt'</span>)</span>
<span id="cb4-22">        .reindex(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'EXCAUS'</span>])</span>
<span id="cb4-23">    )</span>
<span id="cb4-24">    new_df.to_csv(<span class="st" style="color: #20794D;">'./data/early_cad_usd.csv'</span>)</span>
<span id="cb4-25">    <span class="cf" style="color: #003B4F;">return</span> new_df</span>
<span id="cb4-26"></span>
<span id="cb4-27"></span>
<span id="cb4-28"><span class="kw" style="color: #003B4F;">def</span> read_historical_cad_usd(force_update: <span class="bu" style="color: null;">bool</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb4-29">    <span class="co" style="color: #5E5E5E;">"""Get exchange rates before 1971.</span></span>
<span id="cb4-30"></span>
<span id="cb4-31"><span class="co" style="color: #5E5E5E;">    This wraps the above function to read in the downloaded data</span></span>
<span id="cb4-32"><span class="co" style="color: #5E5E5E;">    if it's available and download and then read it if required.</span></span>
<span id="cb4-33"></span>
<span id="cb4-34"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb4-35"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb4-36"><span class="co" style="color: #5E5E5E;">    force_update: bool</span></span>
<span id="cb4-37"><span class="co" style="color: #5E5E5E;">        Download the data set even if you already have it</span></span>
<span id="cb4-38"></span>
<span id="cb4-39"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb4-40"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb4-41"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb4-42"><span class="co" style="color: #5E5E5E;">        Exchange rates from 1965 to 1971</span></span>
<span id="cb4-43"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb4-44">    fname <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'.'</span>).joinpath(<span class="st" style="color: #20794D;">'data'</span>).joinpath(<span class="st" style="color: #20794D;">'early_cad_usd.csv'</span>)</span>
<span id="cb4-45">    <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> fname.exists() <span class="kw" style="color: #003B4F;">or</span> force_update:</span>
<span id="cb4-46">        <span class="cf" style="color: #003B4F;">return</span> download_historical_cad_usd()</span>
<span id="cb4-47">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb4-48">        <span class="cf" style="color: #003B4F;">return</span> pd.read_csv(fname).set_index(<span class="st" style="color: #20794D;">'budget_dt'</span>)</span>
<span id="cb4-49"></span>
<span id="cb4-50"></span>
<span id="cb4-51"><span class="kw" style="color: #003B4F;">def</span> download_cad_usd() <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb4-52">    <span class="co" style="color: #5E5E5E;">"""Download monthly exchange data from FRED.</span></span>
<span id="cb4-53"></span>
<span id="cb4-54"><span class="co" style="color: #5E5E5E;">    For most of the period of interest I can get monthly</span></span>
<span id="cb4-55"><span class="co" style="color: #5E5E5E;">    data from FRED, so I'll do that where possible.</span></span>
<span id="cb4-56"></span>
<span id="cb4-57"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb4-58"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb4-59"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb4-60"><span class="co" style="color: #5E5E5E;">        Most of the CAD/USD exchange data I need for this analysis.</span></span>
<span id="cb4-61"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb4-62">    df <span class="op" style="color: #5E5E5E;">=</span> pdr.get_data_fred(<span class="st" style="color: #20794D;">'EXCAUS'</span>, start<span class="op" style="color: #5E5E5E;">=</span>dt.date(<span class="dv" style="color: #AD0000;">1970</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb4-63">    df.to_csv(<span class="st" style="color: #20794D;">'./data/cad_usd.csv'</span>)</span>
<span id="cb4-64">    <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb4-65"></span>
<span id="cb4-66"></span>
<span id="cb4-67"><span class="kw" style="color: #003B4F;">def</span> read_cad_usd(force_update<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>):</span>
<span id="cb4-68">    <span class="co" style="color: #5E5E5E;">"""Get monthly exchange data from FRED.</span></span>
<span id="cb4-69"></span>
<span id="cb4-70"><span class="co" style="color: #5E5E5E;">    This wraps the above function to read in the downloaded data</span></span>
<span id="cb4-71"><span class="co" style="color: #5E5E5E;">    if it's available and download and then read it if required.</span></span>
<span id="cb4-72"></span>
<span id="cb4-73"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb4-74"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb4-75"><span class="co" style="color: #5E5E5E;">    force_update: bool</span></span>
<span id="cb4-76"><span class="co" style="color: #5E5E5E;">        Download the data set even if you already have it</span></span>
<span id="cb4-77"></span>
<span id="cb4-78"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb4-79"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb4-80"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb4-81"><span class="co" style="color: #5E5E5E;">        Exchange rate data</span></span>
<span id="cb4-82"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb4-83">    fname <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'.'</span>).joinpath(<span class="st" style="color: #20794D;">'data'</span>).joinpath(<span class="st" style="color: #20794D;">'cad_usd.csv'</span>)</span>
<span id="cb4-84">    <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> fname.exists() <span class="kw" style="color: #003B4F;">or</span> force_update:</span>
<span id="cb4-85">        <span class="cf" style="color: #003B4F;">return</span> download_cad_usd()</span>
<span id="cb4-86">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb4-87">        <span class="cf" style="color: #003B4F;">return</span> pd.read_csv(fname, parse_dates<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'DATE'</span>]).set_index(<span class="st" style="color: #20794D;">'DATE'</span>)</span>
<span id="cb4-88"></span>
<span id="cb4-89"></span>
<span id="cb4-90"><span class="kw" style="color: #003B4F;">def</span> annual_cad_usd() <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb4-91">    <span class="co" style="color: #5E5E5E;">"""Full series of CAD/USD in fiscal year format.</span></span>
<span id="cb4-92"></span>
<span id="cb4-93"><span class="co" style="color: #5E5E5E;">    Get FRED data and turn the monthly values into annualized on a budget</span></span>
<span id="cb4-94"><span class="co" style="color: #5E5E5E;">    basis for as much as possible. Fill in the remainder with calendar annual</span></span>
<span id="cb4-95"><span class="co" style="color: #5E5E5E;">    data from fxtop</span></span>
<span id="cb4-96"></span>
<span id="cb4-97"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb4-98"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb4-99"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb4-100"><span class="co" style="color: #5E5E5E;">        Exchange data on an annualized basis.</span></span>
<span id="cb4-101"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb4-102">    <span class="co" style="color: #5E5E5E;"># Create a datetime index of all the points we need</span></span>
<span id="cb4-103">    annual_date_range <span class="op" style="color: #5E5E5E;">=</span> pd.date_range(<span class="st" style="color: #20794D;">'1964-01-01'</span>, <span class="st" style="color: #20794D;">'2018-01-01'</span>, freq<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'AS'</span>, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'budget_dt'</span>)</span>
<span id="cb4-104">    <span class="co" style="color: #5E5E5E;"># Get the old annual stuff to fill in later</span></span>
<span id="cb4-105">    old_df <span class="op" style="color: #5E5E5E;">=</span> read_historical_cad_usd()</span>
<span id="cb4-106">    df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb4-107">        <span class="co" style="color: #5E5E5E;"># get the monthly series</span></span>
<span id="cb4-108">        read_cad_usd()</span>
<span id="cb4-109">        <span class="co" style="color: #5E5E5E;"># annualize it</span></span>
<span id="cb4-110">        .pipe(periodic_to_budget_annual, <span class="st" style="color: #20794D;">'DATE'</span>, <span class="dv" style="color: #AD0000;">12</span>)</span>
<span id="cb4-111">        <span class="co" style="color: #5E5E5E;"># add in all the missing dates we need</span></span>
<span id="cb4-112">        .reindex(annual_date_range)</span>
<span id="cb4-113">        <span class="co" style="color: #5E5E5E;"># fill those missing dates from the old annual data set.</span></span>
<span id="cb4-114">        .fillna(old_df)</span>
<span id="cb4-115">    )</span>
<span id="cb4-116">    <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb4-117"></span>
<span id="cb4-118"></span>
<span id="cb4-119"><span class="kw" style="color: #003B4F;">def</span> stats_can_exog() <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb4-120">    <span class="co" style="color: #5E5E5E;">"""Bring in exogenous StatsCan data. Employment and Unemployment rates.</span></span>
<span id="cb4-121"></span>
<span id="cb4-122"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb4-123"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb4-124"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb4-125"><span class="co" style="color: #5E5E5E;">        Exogenous data required from StatsCan</span></span>
<span id="cb4-126"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb4-127">    <span class="co" style="color: #5E5E5E;"># Vectors for monthly series where available</span></span>
<span id="cb4-128">    ur_vec <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"v2064516"</span></span>
<span id="cb4-129">    er_vec <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"v2064518"</span></span>
<span id="cb4-130">    annual_date_range <span class="op" style="color: #5E5E5E;">=</span> pd.date_range(<span class="st" style="color: #20794D;">'1964-01-01'</span>, <span class="st" style="color: #20794D;">'2018-01-01'</span>, freq<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'AS'</span>, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'budget_dt'</span>)</span>
<span id="cb4-131">    <span class="co" style="color: #5E5E5E;"># for the earlier periods we only have annual data</span></span>
<span id="cb4-132">    old_df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb4-133">        stats_can.table_to_df(<span class="st" style="color: #20794D;">'36-10-0345-01'</span>, path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'data'</span>)</span>
<span id="cb4-134">        <span class="co" style="color: #5E5E5E;"># Get Alberta data only</span></span>
<span id="cb4-135">        .loc[<span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="st" style="color: #20794D;">'GEO'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Alberta'</span>]</span>
<span id="cb4-136">        <span class="co" style="color: #5E5E5E;"># Keep only the categories we care about</span></span>
<span id="cb4-137">        .loc[<span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="st" style="color: #20794D;">'Economic indicators'</span>].isin([<span class="st" style="color: #20794D;">'Population'</span>, <span class="st" style="color: #20794D;">'Total employment'</span>, <span class="st" style="color: #20794D;">'Unemployment rate'</span>])]</span>
<span id="cb4-138">        <span class="co" style="color: #5E5E5E;"># pivot so the year is the row and the variables are the columns</span></span>
<span id="cb4-139">        .pivot_table(index<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'REF_DATE'</span>, columns<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Economic indicators'</span>, values<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'VALUE'</span>)</span>
<span id="cb4-140">        .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'Unemployment rate'</span>: <span class="st" style="color: #20794D;">'unemployment_rate'</span>})</span>
<span id="cb4-141">        <span class="co" style="color: #5E5E5E;"># calculate the employment rate</span></span>
<span id="cb4-142">        .assign(employment_rate<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> x: (x[<span class="st" style="color: #20794D;">'Total employment'</span>] <span class="op" style="color: #5E5E5E;">/</span> x[<span class="st" style="color: #20794D;">'Population'</span>]) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb4-143">        <span class="co" style="color: #5E5E5E;"># drop the population, just used for calculating employment rate</span></span>
<span id="cb4-144">        .reindex(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'unemployment_rate'</span>, <span class="st" style="color: #20794D;">'employment_rate'</span>])</span>
<span id="cb4-145">        .rename_axis(<span class="st" style="color: #20794D;">'budget_dt'</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>)</span>
<span id="cb4-146">        .rename_axis(<span class="va" style="color: #111111;">None</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'columns'</span>)</span>
<span id="cb4-147">    )</span>
<span id="cb4-148">    <span class="co" style="color: #5E5E5E;"># Get monthly data where available</span></span>
<span id="cb4-149">    df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb4-150">        stats_can.vectors_to_df_local([ur_vec, er_vec], path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'data'</span>, start_date<span class="op" style="color: #5E5E5E;">=</span>dt.date(<span class="dv" style="color: #AD0000;">1964</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb4-151">        .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{ur_vec: <span class="st" style="color: #20794D;">'unemployment_rate'</span>, er_vec: <span class="st" style="color: #20794D;">'employment_rate'</span>})</span>
<span id="cb4-152">        <span class="co" style="color: #5E5E5E;"># annualize</span></span>
<span id="cb4-153">        .pipe(periodic_to_budget_annual, <span class="st" style="color: #20794D;">'REF_DATE'</span>, <span class="dv" style="color: #AD0000;">12</span>)</span>
<span id="cb4-154">        <span class="co" style="color: #5E5E5E;"># get the full range of data we want</span></span>
<span id="cb4-155">        .reindex(annual_date_range)</span>
<span id="cb4-156">        <span class="co" style="color: #5E5E5E;"># fill in the gaps with the old annual series</span></span>
<span id="cb4-157">        .fillna(old_df)</span>
<span id="cb4-158">        <span class="co" style="color: #5E5E5E;"># Not ideal but even the annual series doesn't go quite back</span></span>
<span id="cb4-159">        <span class="co" style="color: #5E5E5E;"># far enough so we have to backfill the earliest available</span></span>
<span id="cb4-160">        <span class="co" style="color: #5E5E5E;"># data point</span></span>
<span id="cb4-161">        .fillna(method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bfill'</span>)</span>
<span id="cb4-162">    )</span>
<span id="cb4-163">    <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb4-164"></span>
<span id="cb4-165"></span>
<span id="cb4-166"><span class="kw" style="color: #003B4F;">def</span> exogenous_variables() <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb4-167">    <span class="co" style="color: #5E5E5E;">"""Bring in exogenous parameters together.</span></span>
<span id="cb4-168"></span>
<span id="cb4-169"><span class="co" style="color: #5E5E5E;">    From the paper:</span></span>
<span id="cb4-170"><span class="co" style="color: #5E5E5E;">    We also include other exogenous variables that are likely to affect</span></span>
<span id="cb4-171"><span class="co" style="color: #5E5E5E;">    the province’s budget. It is known that the various components of the</span></span>
<span id="cb4-172"><span class="co" style="color: #5E5E5E;">    provincial budget can be influenced by the business cycle. Thus, following</span></span>
<span id="cb4-173"><span class="co" style="color: #5E5E5E;">    Buettner and Wildsain (2006), we account for the potential effects of the</span></span>
<span id="cb4-174"><span class="co" style="color: #5E5E5E;">    business cycle by including one-period lagged changes in the provincial</span></span>
<span id="cb4-175"><span class="co" style="color: #5E5E5E;">    employment and unemployment rates. Another important exogenous factor</span></span>
<span id="cb4-176"><span class="co" style="color: #5E5E5E;">    that is often cited in provincial budget documents as being important in</span></span>
<span id="cb4-177"><span class="co" style="color: #5E5E5E;">    influencing the provincial government’s oil royalty revenue is the Canadian-U.S.</span></span>
<span id="cb4-178"><span class="co" style="color: #5E5E5E;">    dollar exchange rate. For this reason, we control for this factor by</span></span>
<span id="cb4-179"><span class="co" style="color: #5E5E5E;">    including one period lagged changes in the Canadian-U.S. dollar exchange rate</span></span>
<span id="cb4-180"></span>
<span id="cb4-181"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb4-182"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb4-183"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb4-184"><span class="co" style="color: #5E5E5E;">        All the necessary exogenous factors for reproducing the paper.</span></span>
<span id="cb4-185"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb4-186">    cadusd <span class="op" style="color: #5E5E5E;">=</span> annual_cad_usd()</span>
<span id="cb4-187">    ur_er <span class="op" style="color: #5E5E5E;">=</span> stats_can_exog()</span>
<span id="cb4-188">    df <span class="op" style="color: #5E5E5E;">=</span> pd.concat([cadusd, ur_er], axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'columns'</span>)</span>
<span id="cb4-189">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="exploratory-figures" class="level2">
<h2 class="anchored" data-anchor-id="exploratory-figures">Exploratory Figures</h2>
<section id="figure-1" class="level3">
<h3 class="anchored" data-anchor-id="figure-1">Figure 1</h3>
<p>Page 5 of the report charts Non-renewable Resource Revenue, Total Expenditure, and Total Revenue. All are in per-capita 2017 dollars. Reproducing this chart will be a good starting check that my data extraction and transformation matches the original author’s strategy.</p>
<div class="cell" data-execution_count="5">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">def</span> fig1(df: pd.DataFrame) <span class="op" style="color: #5E5E5E;">-&gt;</span> alt.Chart:</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;">"""Reproduce Figure 1 from the paper.</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;">    df: pd.DataFrame</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;">        A dataframe with non-renewable resource revenue, total expenditure, and total revenue time series</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb5-9">    chart_df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb5-10">        df</span>
<span id="cb5-11">        .loc[<span class="st" style="color: #20794D;">'1970'</span>:<span class="st" style="color: #20794D;">'2016'</span>, [<span class="st" style="color: #20794D;">'natural_resource_revenue'</span>, <span class="st" style="color: #20794D;">'total_revenue'</span>, <span class="st" style="color: #20794D;">'total_expenditure'</span>]]</span>
<span id="cb5-12">        .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb5-13">            <span class="st" style="color: #20794D;">'natural_resource_revenue'</span>: <span class="st" style="color: #20794D;">'Non-renewable Resource Revenue'</span>,</span>
<span id="cb5-14">            <span class="st" style="color: #20794D;">'total_revenue'</span>: <span class="st" style="color: #20794D;">'Total Revenue'</span>,</span>
<span id="cb5-15">            <span class="st" style="color: #20794D;">'total_expenditure'</span>: <span class="st" style="color: #20794D;">'Total Expenditure'</span></span>
<span id="cb5-16">        })</span>
<span id="cb5-17">        .reset_index()</span>
<span id="cb5-18">        .melt(id_vars<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'budget_dt'</span>)</span>
<span id="cb5-19">    )</span>
<span id="cb5-20">    c_domain <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Non-renewable Resource Revenue"</span>, <span class="st" style="color: #20794D;">"Total Expenditure"</span>, <span class="st" style="color: #20794D;">"Total Revenue"</span>]</span>
<span id="cb5-21">    c_range <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"green"</span>, <span class="st" style="color: #20794D;">"red"</span>, <span class="st" style="color: #20794D;">"blue"</span>]</span>
<span id="cb5-22">    chart <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb5-23">        alt.Chart(chart_df)</span>
<span id="cb5-24">        .mark_line()</span>
<span id="cb5-25">        .encode(</span>
<span id="cb5-26">            x<span class="op" style="color: #5E5E5E;">=</span>alt.X(<span class="st" style="color: #20794D;">'budget_dt:T'</span>, axis<span class="op" style="color: #5E5E5E;">=</span>alt.Axis(title<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>)),</span>
<span id="cb5-27">            y<span class="op" style="color: #5E5E5E;">=</span>alt.Y(<span class="st" style="color: #20794D;">'value:Q'</span>, axis<span class="op" style="color: #5E5E5E;">=</span>alt.Axis(title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Per capita in 2017 dollars'</span>), scale<span class="op" style="color: #5E5E5E;">=</span>alt.Scale(domain<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">14_000</span>))),</span>
<span id="cb5-28">            color<span class="op" style="color: #5E5E5E;">=</span>alt.Color(<span class="st" style="color: #20794D;">'variable:N'</span>, legend<span class="op" style="color: #5E5E5E;">=</span>alt.Legend(title<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bottom'</span>), scale<span class="op" style="color: #5E5E5E;">=</span>alt.Scale(domain<span class="op" style="color: #5E5E5E;">=</span>c_domain, <span class="bu" style="color: null;">range</span><span class="op" style="color: #5E5E5E;">=</span>c_range))</span>
<span id="cb5-29">        )</span>
<span id="cb5-30">        .properties(width<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1250</span>, height<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">500</span>)</span>
<span id="cb5-31">    )</span>
<span id="cb5-32">    <span class="cf" style="color: #003B4F;">return</span> chart</span></code></pre></div>
</details>
</div>
<p>Here’s the original chart from the paper:</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">Image(filename<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"img/ferede_fig_1.png"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>And here’s mine:</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df <span class="op" style="color: #5E5E5E;">=</span> budget_real_per_capita()</span>
<span id="cb7-2">fig1(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>This graph looks very similar to the chart in the paper, with a notable exception of the 1976/1977 budget year. My chart shows Non-renewable Resource Revenue as slightly negative, whereas the original chart has it largely in line with 1975/1976 and 1977/1978. NRR is negative in my chart because I have netted out contributions to the Alberta Heritage Savings Trust Fund (AHSTF). To the best of my understanding, the original paper does the same, and the consistent values between the two in all other years supports that. Quoting the original paper:</p>
<blockquote class="blockquote">
<p>The part of resource revenue that is saved in the AHSTF is not expected to influence the provincial government’s spending and revenue-raising choices. For this reason, in our analysis, we exclude the part of the resource revenue that is saved in the AHSTF from the non-renewable-resource revenue data.</p>
</blockquote>
<p>For comparison, here is the same chart, but without netting AHSTF contributions from revenue:</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">no_net_df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb8-2">    df</span>
<span id="cb8-3">    .assign(total_revenue<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[<span class="st" style="color: #20794D;">"total_revenue"</span>] <span class="op" style="color: #5E5E5E;">+</span> df[<span class="st" style="color: #20794D;">"total_heritage"</span>])</span>
<span id="cb8-4">    .assign(natural_resource_revenue<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[<span class="st" style="color: #20794D;">"natural_resource_revenue"</span>] <span class="op" style="color: #5E5E5E;">+</span> df[<span class="st" style="color: #20794D;">"total_heritage"</span>])</span>
<span id="cb8-5">    .assign(deficit<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[<span class="st" style="color: #20794D;">"total_expenditure"</span>] <span class="op" style="color: #5E5E5E;">-</span> df[<span class="st" style="color: #20794D;">"total_revenue"</span>])</span>
<span id="cb8-6">)</span>
<span id="cb8-7">fig1(no_net_df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>1976/1977 more closely matches the original chart in the paper, but the remaining years in the period of mid 70s to mid 80s when there were significant contributions clearly do not match. Let’s try one more where I just substitute that one year.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">error_df <span class="op" style="color: #5E5E5E;">=</span> df.copy()</span>
<span id="cb9-2">heritage_76 <span class="op" style="color: #5E5E5E;">=</span> error_df.loc[<span class="st" style="color: #20794D;">"1976"</span>, <span class="st" style="color: #20794D;">"total_heritage"</span>]</span>
<span id="cb9-3">error_df.loc[<span class="st" style="color: #20794D;">"1976"</span>, <span class="st" style="color: #20794D;">"natural_resource_revenue"</span>] <span class="op" style="color: #5E5E5E;">+=</span> heritage_76</span>
<span id="cb9-4">error_df.loc[<span class="st" style="color: #20794D;">"1976"</span>, <span class="st" style="color: #20794D;">"total_revenue"</span>] <span class="op" style="color: #5E5E5E;">+=</span> heritage_76</span>
<span id="cb9-5">error_df.loc[<span class="st" style="color: #20794D;">"1976"</span>, <span class="st" style="color: #20794D;">"deficit"</span>] <span class="op" style="color: #5E5E5E;">-=</span> heritage_76</span>
<span id="cb9-6">fig1(error_df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Here’s the original figure again for easier comparison</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">Image(filename<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"img/ferede_fig_1.png"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>From eyeballing it that looks exactly like Figure 1 in the paper. It appears there’s a data error in the original paper. For the rest of this analysis I’ll compare both my base implementation of the data, as well as the one with the data error.</p>
</section>
<section id="figure-2" class="level3">
<h3 class="anchored" data-anchor-id="figure-2">Figure 2</h3>
<p>Page 6 of the paper produces a scatter plot of Real per capita non-renewable resource revenue on the X axis vs.&nbsp;Real per capita budget balance on the Y, along with a linear trend fit.</p>
<div class="cell" data-execution_count="12">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;">def</span> fig2(df: pd.DataFrame) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;">"""Reproduce Figure 2 from the paper.</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;">    df: pd.DataFrame</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;">        The table with historical revenue and expenditure data.</span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb11-9">    sns.<span class="bu" style="color: null;">set</span>(rc<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'figure.figsize'</span>:(<span class="fl" style="color: #AD0000;">11.7</span>,<span class="fl" style="color: #AD0000;">8.27</span>)})</span>
<span id="cb11-10">    chart_df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb11-11">        df</span>
<span id="cb11-12">        .loc[<span class="st" style="color: #20794D;">'1970'</span>:<span class="st" style="color: #20794D;">'2016'</span>, [<span class="st" style="color: #20794D;">'natural_resource_revenue'</span>, <span class="st" style="color: #20794D;">'deficit'</span>]]</span>
<span id="cb11-13">        .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb11-14">            <span class="st" style="color: #20794D;">'natural_resource_revenue'</span>: <span class="st" style="color: #20794D;">'Non-renewable Resource Revenue'</span>,</span>
<span id="cb11-15">            <span class="st" style="color: #20794D;">'deficit'</span>: <span class="st" style="color: #20794D;">'Deficit'</span></span>
<span id="cb11-16">        })</span>
<span id="cb11-17">        .assign(balance<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[<span class="st" style="color: #20794D;">'Deficit'</span>] <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb11-18">        .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'balance'</span>: <span class="st" style="color: #20794D;">'Budget Balance'</span>})</span>
<span id="cb11-19">        .copy()</span>
<span id="cb11-20">    )</span>
<span id="cb11-21">    sns.regplot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Non-renewable Resource Revenue'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Budget Balance'</span>, data<span class="op" style="color: #5E5E5E;">=</span>chart_df)</span></code></pre></div>
</details>
</div>
<p>Here’s the original figure</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">Image(filename<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"img/ferede_fig_2.png"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Here’s the figure using my original data:</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">fig2(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>And here’s the figure using the version with a data error:</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">fig2(error_df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Again, this chart is more consistent with the dataframe where I don’t net heritage fund contributions out of 1976 but do for all other years</p>
</section>
</section>
<section id="model-specification-and-estimation" class="level2">
<h2 class="anchored" data-anchor-id="model-specification-and-estimation">Model Specification and estimation</h2>
<p>This section combines the previously specified data extraction with transformations necessary to produce summary statistics, statistical tests, and the VAR model itself.</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;">def</span> model_df_levels(budg: pd.DataFrame) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb15-2">    <span class="co" style="color: #5E5E5E;">"""Combine real per capita budget data to get model data in levels.</span></span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;">    lag exogenous variables (unemployment and employment rates, CAD/USD exchange)</span></span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;">    budg: pd.DataFrame</span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;">        Budget data, either with or without data error</span></span>
<span id="cb15-10"></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb15-12"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb15-13"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb15-14"><span class="co" style="color: #5E5E5E;">        Budget data combined with exogenous factors</span></span>
<span id="cb15-15"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb15-16">    exog <span class="op" style="color: #5E5E5E;">=</span> exogenous_variables()</span>
<span id="cb15-17">    df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb15-18">        pd.concat([budg, exog], axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'columns'</span>)</span>
<span id="cb15-19">        .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'total_prog_exp'</span>: <span class="st" style="color: #20794D;">'program_expenditure'</span>, <span class="st" style="color: #20794D;">'EXCAUS'</span>: <span class="st" style="color: #20794D;">'cad_usd'</span>})</span>
<span id="cb15-20">        .assign(ur_lag<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[<span class="st" style="color: #20794D;">'unemployment_rate'</span>].shift(periods<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb15-21">        .assign(er_lag<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[<span class="st" style="color: #20794D;">'employment_rate'</span>].shift(periods<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb15-22">        .assign(cad_usd_lag<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[<span class="st" style="color: #20794D;">'cad_usd'</span>].shift(periods<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb15-23">        .reindex(columns<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb15-24">            <span class="st" style="color: #20794D;">'program_expenditure'</span>, <span class="st" style="color: #20794D;">'debt_service'</span>, <span class="st" style="color: #20794D;">'corporate_income_tax'</span>,</span>
<span id="cb15-25">            <span class="st" style="color: #20794D;">'personal_income_tax'</span>, <span class="st" style="color: #20794D;">'other_revenue'</span>, <span class="st" style="color: #20794D;">'natural_resource_revenue'</span>,</span>
<span id="cb15-26">            <span class="st" style="color: #20794D;">'deficit'</span>, <span class="st" style="color: #20794D;">'heritage_dummy'</span>, <span class="st" style="color: #20794D;">'ur_lag'</span>, <span class="st" style="color: #20794D;">'er_lag'</span>, <span class="st" style="color: #20794D;">'cad_usd_lag'</span></span>
<span id="cb15-27">        ])</span>
<span id="cb15-28">    )</span>
<span id="cb15-29">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">mdfl <span class="op" style="color: #5E5E5E;">=</span> model_df_levels(df)</span>
<span id="cb16-2">mdfl_err <span class="op" style="color: #5E5E5E;">=</span> model_df_levels(error_df)</span></code></pre></div>
</div>
<section id="sumary-statistics-for-key-variables-1970-71-2016-17-in-levels" class="level3">
<h3 class="anchored" data-anchor-id="sumary-statistics-for-key-variables-1970-71-2016-17-in-levels">Sumary statistics for key variables, 1970-71, 2016-17 in levels</h3>
<p>Prior to any modeling, let’s compare the summary statistics for the data sets I’ve created against those in the paper:</p>
<div class="cell" data-execution_count="18">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">number <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"{:0&lt;4,.1f}"</span></span>
<span id="cb17-2">percent <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{:.1%}</span><span class="st" style="color: #20794D;">'</span></span>
<span id="cb17-3">count <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">{:0.0f}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb17-4"></span>
<span id="cb17-5"></span>
<span id="cb17-6"><span class="kw" style="color: #003B4F;">def</span> tbl1_level(model_df: pd.DataFrame):</span>
<span id="cb17-7">    <span class="co" style="color: #5E5E5E;">"""Produce summary statistics of the input data in levels.</span></span>
<span id="cb17-8"></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb17-11"><span class="co" style="color: #5E5E5E;">    model_df: pd.DataFrame</span></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;">        Input data set</span></span>
<span id="cb17-13"></span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;">    pd.io.formats.style.Styler:</span></span>
<span id="cb17-17"><span class="co" style="color: #5E5E5E;">        Nicely formatted summary statistics</span></span>
<span id="cb17-18"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb17-19">    df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb17-20">        model_df</span>
<span id="cb17-21">        .loc[<span class="st" style="color: #20794D;">'1970'</span>:<span class="st" style="color: #20794D;">'2016'</span>]</span>
<span id="cb17-22">        .copy()</span>
<span id="cb17-23">        .drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'heritage_dummy'</span>])</span>
<span id="cb17-24">        .reindex(columns<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb17-25">            <span class="st" style="color: #20794D;">'natural_resource_revenue'</span>, <span class="st" style="color: #20794D;">'corporate_income_tax'</span>, <span class="st" style="color: #20794D;">'personal_income_tax'</span>,</span>
<span id="cb17-26">            <span class="st" style="color: #20794D;">'other_revenue'</span>, <span class="st" style="color: #20794D;">'debt_service'</span>, <span class="st" style="color: #20794D;">'program_expenditure'</span>, <span class="st" style="color: #20794D;">'deficit'</span>, <span class="st" style="color: #20794D;">'ur_lag'</span>,</span>
<span id="cb17-27">            <span class="st" style="color: #20794D;">'er_lag'</span>, <span class="st" style="color: #20794D;">'cad_usd_lag'</span></span>
<span id="cb17-28">        ])</span>
<span id="cb17-29">        .describe()</span>
<span id="cb17-30">        .T</span>
<span id="cb17-31">        .style.<span class="bu" style="color: null;">format</span>({</span>
<span id="cb17-32">            <span class="st" style="color: #20794D;">'count'</span>: count,</span>
<span id="cb17-33">            <span class="st" style="color: #20794D;">'mean'</span>: number,</span>
<span id="cb17-34">            <span class="st" style="color: #20794D;">'std'</span>: number,</span>
<span id="cb17-35">            <span class="st" style="color: #20794D;">'min'</span>: number,</span>
<span id="cb17-36">            <span class="st" style="color: #20794D;">'25%'</span>: number,</span>
<span id="cb17-37">            <span class="st" style="color: #20794D;">'50%'</span>: number,</span>
<span id="cb17-38">            <span class="st" style="color: #20794D;">'75%'</span>: number,</span>
<span id="cb17-39">            <span class="st" style="color: #20794D;">'max'</span>: number</span>
<span id="cb17-40">        })</span>
<span id="cb17-41">    )</span>
<span id="cb17-42">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</details>
</div>
<p>Here’s Table 1 from the paper:</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">Image(filename<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"img/ferede_tbl_1.png"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Here’s my summary of the top half</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">tbl1_level(mdfl)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">

<style type="text/css">
</style><table id="T_16831_"><thead>    <tr>        <th class="blank level0"></th>        <th class="col_heading level0 col0">count</th>        <th class="col_heading level0 col1">mean</th>        <th class="col_heading level0 col2">std</th>        <th class="col_heading level0 col3">min</th>        <th class="col_heading level0 col4">25%</th>        <th class="col_heading level0 col5">50%</th>        <th class="col_heading level0 col6">75%</th>        <th class="col_heading level0 col7">max</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_16831_level0_row0" class="row_heading level0 row0">natural_resource_revenue</th>
                        <td id="T_16831_row0_col0" class="data row0 col0">47</td>
                        <td id="T_16831_row0_col1" class="data row0 col1">2,737.2</td>
                        <td id="T_16831_row0_col2" class="data row0 col2">1,358.9</td>
                        <td id="T_16831_row0_col3" class="data row0 col3">-125.3</td>
                        <td id="T_16831_row0_col4" class="data row0 col4">1,726.4</td>
                        <td id="T_16831_row0_col5" class="data row0 col5">2,371.7</td>
                        <td id="T_16831_row0_col6" class="data row0 col6">3,941.6</td>
                        <td id="T_16831_row0_col7" class="data row0 col7">5,181.6</td>
            </tr>
            <tr>
                        <th id="T_16831_level0_row1" class="row_heading level0 row1">corporate_income_tax</th>
                        <td id="T_16831_row1_col0" class="data row1 col0">47</td>
                        <td id="T_16831_row1_col1" class="data row1 col1">792.1</td>
                        <td id="T_16831_row1_col2" class="data row1 col2">349.6</td>
                        <td id="T_16831_row1_col3" class="data row1 col3">245.8</td>
                        <td id="T_16831_row1_col4" class="data row1 col4">544.6</td>
                        <td id="T_16831_row1_col5" class="data row1 col5">723.6</td>
                        <td id="T_16831_row1_col6" class="data row1 col6">1,010.9</td>
                        <td id="T_16831_row1_col7" class="data row1 col7">1,560.6</td>
            </tr>
            <tr>
                        <th id="T_16831_level0_row2" class="row_heading level0 row2">personal_income_tax</th>
                        <td id="T_16831_row2_col0" class="data row2 col0">47</td>
                        <td id="T_16831_row2_col1" class="data row2 col1">1,862.1</td>
                        <td id="T_16831_row2_col2" class="data row2 col2">607.8</td>
                        <td id="T_16831_row2_col3" class="data row2 col3">767.1</td>
                        <td id="T_16831_row2_col4" class="data row2 col4">1,403.8</td>
                        <td id="T_16831_row2_col5" class="data row2 col5">1,889.6</td>
                        <td id="T_16831_row2_col6" class="data row2 col6">2,359.8</td>
                        <td id="T_16831_row2_col7" class="data row2 col7">2,830.0</td>
            </tr>
            <tr>
                        <th id="T_16831_level0_row3" class="row_heading level0 row3">other_revenue</th>
                        <td id="T_16831_row3_col0" class="data row3 col0">47</td>
                        <td id="T_16831_row3_col1" class="data row3 col1">4,394.6</td>
                        <td id="T_16831_row3_col2" class="data row3 col2">1,084.9</td>
                        <td id="T_16831_row3_col3" class="data row3 col3">2,352.8</td>
                        <td id="T_16831_row3_col4" class="data row3 col4">3,632.2</td>
                        <td id="T_16831_row3_col5" class="data row3 col5">4,699.2</td>
                        <td id="T_16831_row3_col6" class="data row3 col6">5,209.2</td>
                        <td id="T_16831_row3_col7" class="data row3 col7">5,818.2</td>
            </tr>
            <tr>
                        <th id="T_16831_level0_row4" class="row_heading level0 row4">debt_service</th>
                        <td id="T_16831_row4_col0" class="data row4 col0">47</td>
                        <td id="T_16831_row4_col1" class="data row4 col1">322.8</td>
                        <td id="T_16831_row4_col2" class="data row4 col2">334.9</td>
                        <td id="T_16831_row4_col3" class="data row4 col3">31.4</td>
                        <td id="T_16831_row4_col4" class="data row4 col4">82.7</td>
                        <td id="T_16831_row4_col5" class="data row4 col5">158.5</td>
                        <td id="T_16831_row4_col6" class="data row4 col6">486.9</td>
                        <td id="T_16831_row4_col7" class="data row4 col7">1,075.6</td>
            </tr>
            <tr>
                        <th id="T_16831_level0_row5" class="row_heading level0 row5">program_expenditure</th>
                        <td id="T_16831_row5_col0" class="data row5 col0">47</td>
                        <td id="T_16831_row5_col1" class="data row5 col1">9,399.1</td>
                        <td id="T_16831_row5_col2" class="data row5 col2">2,161.2</td>
                        <td id="T_16831_row5_col3" class="data row5 col3">4,745.8</td>
                        <td id="T_16831_row5_col4" class="data row5 col4">7,623.0</td>
                        <td id="T_16831_row5_col5" class="data row5 col5">10,060.9</td>
                        <td id="T_16831_row5_col6" class="data row5 col6">11,142.6</td>
                        <td id="T_16831_row5_col7" class="data row5 col7">12,869.2</td>
            </tr>
            <tr>
                        <th id="T_16831_level0_row6" class="row_heading level0 row6">deficit</th>
                        <td id="T_16831_row6_col0" class="data row6 col0">47</td>
                        <td id="T_16831_row6_col1" class="data row6 col1">-64.0</td>
                        <td id="T_16831_row6_col2" class="data row6 col2">1,618.0</td>
                        <td id="T_16831_row6_col3" class="data row6 col3">-3,184.0</td>
                        <td id="T_16831_row6_col4" class="data row6 col4">-1,320.5</td>
                        <td id="T_16831_row6_col5" class="data row6 col5">-140.6</td>
                        <td id="T_16831_row6_col6" class="data row6 col6">1,092.3</td>
                        <td id="T_16831_row6_col7" class="data row6 col7">3,775.8</td>
            </tr>
            <tr>
                        <th id="T_16831_level0_row7" class="row_heading level0 row7">ur_lag</th>
                        <td id="T_16831_row7_col0" class="data row7 col0">47</td>
                        <td id="T_16831_row7_col1" class="data row7 col1">6.10</td>
                        <td id="T_16831_row7_col2" class="data row7 col2">2.20</td>
                        <td id="T_16831_row7_col3" class="data row7 col3">3.40</td>
                        <td id="T_16831_row7_col4" class="data row7 col4">4.50</td>
                        <td id="T_16831_row7_col5" class="data row7 col5">5.40</td>
                        <td id="T_16831_row7_col6" class="data row7 col6">7.50</td>
                        <td id="T_16831_row7_col7" class="data row7 col7">11.4</td>
            </tr>
            <tr>
                        <th id="T_16831_level0_row8" class="row_heading level0 row8">er_lag</th>
                        <td id="T_16831_row8_col0" class="data row8 col0">47</td>
                        <td id="T_16831_row8_col1" class="data row8 col1">63.7</td>
                        <td id="T_16831_row8_col2" class="data row8 col2">9.90</td>
                        <td id="T_16831_row8_col3" class="data row8 col3">38.5</td>
                        <td id="T_16831_row8_col4" class="data row8 col4">65.1</td>
                        <td id="T_16831_row8_col5" class="data row8 col5">67.3</td>
                        <td id="T_16831_row8_col6" class="data row8 col6">69.0</td>
                        <td id="T_16831_row8_col7" class="data row8 col7">71.8</td>
            </tr>
            <tr>
                        <th id="T_16831_level0_row9" class="row_heading level0 row9">cad_usd_lag</th>
                        <td id="T_16831_row9_col0" class="data row9 col0">45</td>
                        <td id="T_16831_row9_col1" class="data row9 col1">1.20</td>
                        <td id="T_16831_row9_col2" class="data row9 col2">0.20</td>
                        <td id="T_16831_row9_col3" class="data row9 col3">1.00</td>
                        <td id="T_16831_row9_col4" class="data row9 col4">1.10</td>
                        <td id="T_16831_row9_col5" class="data row9 col5">1.20</td>
                        <td id="T_16831_row9_col6" class="data row9 col6">1.40</td>
                        <td id="T_16831_row9_col7" class="data row9 col7">1.60</td>
            </tr>
    </tbody></table>
</div>
</div>
<p>And the same summary on the data with the introduced error</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">tbl1_level(mdfl_err)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">

<style type="text/css">
</style><table id="T_a9fa3_"><thead>    <tr>        <th class="blank level0"></th>        <th class="col_heading level0 col0">count</th>        <th class="col_heading level0 col1">mean</th>        <th class="col_heading level0 col2">std</th>        <th class="col_heading level0 col3">min</th>        <th class="col_heading level0 col4">25%</th>        <th class="col_heading level0 col5">50%</th>        <th class="col_heading level0 col6">75%</th>        <th class="col_heading level0 col7">max</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_a9fa3_level0_row0" class="row_heading level0 row0">natural_resource_revenue</th>
                        <td id="T_a9fa3_row0_col0" class="data row0 col0">47</td>
                        <td id="T_a9fa3_row0_col1" class="data row0 col1">2,843.8</td>
                        <td id="T_a9fa3_row0_col2" class="data row0 col2">1,325.6</td>
                        <td id="T_a9fa3_row0_col3" class="data row0 col3">691.9</td>
                        <td id="T_a9fa3_row0_col4" class="data row0 col4">1,760.7</td>
                        <td id="T_a9fa3_row0_col5" class="data row0 col5">2,532.1</td>
                        <td id="T_a9fa3_row0_col6" class="data row0 col6">3,972.6</td>
                        <td id="T_a9fa3_row0_col7" class="data row0 col7">5,181.6</td>
            </tr>
            <tr>
                        <th id="T_a9fa3_level0_row1" class="row_heading level0 row1">corporate_income_tax</th>
                        <td id="T_a9fa3_row1_col0" class="data row1 col0">47</td>
                        <td id="T_a9fa3_row1_col1" class="data row1 col1">792.1</td>
                        <td id="T_a9fa3_row1_col2" class="data row1 col2">349.6</td>
                        <td id="T_a9fa3_row1_col3" class="data row1 col3">245.8</td>
                        <td id="T_a9fa3_row1_col4" class="data row1 col4">544.6</td>
                        <td id="T_a9fa3_row1_col5" class="data row1 col5">723.6</td>
                        <td id="T_a9fa3_row1_col6" class="data row1 col6">1,010.9</td>
                        <td id="T_a9fa3_row1_col7" class="data row1 col7">1,560.6</td>
            </tr>
            <tr>
                        <th id="T_a9fa3_level0_row2" class="row_heading level0 row2">personal_income_tax</th>
                        <td id="T_a9fa3_row2_col0" class="data row2 col0">47</td>
                        <td id="T_a9fa3_row2_col1" class="data row2 col1">1,862.1</td>
                        <td id="T_a9fa3_row2_col2" class="data row2 col2">607.8</td>
                        <td id="T_a9fa3_row2_col3" class="data row2 col3">767.1</td>
                        <td id="T_a9fa3_row2_col4" class="data row2 col4">1,403.8</td>
                        <td id="T_a9fa3_row2_col5" class="data row2 col5">1,889.6</td>
                        <td id="T_a9fa3_row2_col6" class="data row2 col6">2,359.8</td>
                        <td id="T_a9fa3_row2_col7" class="data row2 col7">2,830.0</td>
            </tr>
            <tr>
                        <th id="T_a9fa3_level0_row3" class="row_heading level0 row3">other_revenue</th>
                        <td id="T_a9fa3_row3_col0" class="data row3 col0">47</td>
                        <td id="T_a9fa3_row3_col1" class="data row3 col1">4,394.6</td>
                        <td id="T_a9fa3_row3_col2" class="data row3 col2">1,084.9</td>
                        <td id="T_a9fa3_row3_col3" class="data row3 col3">2,352.8</td>
                        <td id="T_a9fa3_row3_col4" class="data row3 col4">3,632.2</td>
                        <td id="T_a9fa3_row3_col5" class="data row3 col5">4,699.2</td>
                        <td id="T_a9fa3_row3_col6" class="data row3 col6">5,209.2</td>
                        <td id="T_a9fa3_row3_col7" class="data row3 col7">5,818.2</td>
            </tr>
            <tr>
                        <th id="T_a9fa3_level0_row4" class="row_heading level0 row4">debt_service</th>
                        <td id="T_a9fa3_row4_col0" class="data row4 col0">47</td>
                        <td id="T_a9fa3_row4_col1" class="data row4 col1">322.8</td>
                        <td id="T_a9fa3_row4_col2" class="data row4 col2">334.9</td>
                        <td id="T_a9fa3_row4_col3" class="data row4 col3">31.4</td>
                        <td id="T_a9fa3_row4_col4" class="data row4 col4">82.7</td>
                        <td id="T_a9fa3_row4_col5" class="data row4 col5">158.5</td>
                        <td id="T_a9fa3_row4_col6" class="data row4 col6">486.9</td>
                        <td id="T_a9fa3_row4_col7" class="data row4 col7">1,075.6</td>
            </tr>
            <tr>
                        <th id="T_a9fa3_level0_row5" class="row_heading level0 row5">program_expenditure</th>
                        <td id="T_a9fa3_row5_col0" class="data row5 col0">47</td>
                        <td id="T_a9fa3_row5_col1" class="data row5 col1">9,399.1</td>
                        <td id="T_a9fa3_row5_col2" class="data row5 col2">2,161.2</td>
                        <td id="T_a9fa3_row5_col3" class="data row5 col3">4,745.8</td>
                        <td id="T_a9fa3_row5_col4" class="data row5 col4">7,623.0</td>
                        <td id="T_a9fa3_row5_col5" class="data row5 col5">10,060.9</td>
                        <td id="T_a9fa3_row5_col6" class="data row5 col6">11,142.6</td>
                        <td id="T_a9fa3_row5_col7" class="data row5 col7">12,869.2</td>
            </tr>
            <tr>
                        <th id="T_a9fa3_level0_row6" class="row_heading level0 row6">deficit</th>
                        <td id="T_a9fa3_row6_col0" class="data row6 col0">47</td>
                        <td id="T_a9fa3_row6_col1" class="data row6 col1">-170.7</td>
                        <td id="T_a9fa3_row6_col2" class="data row6 col2">1,587.7</td>
                        <td id="T_a9fa3_row6_col3" class="data row6 col3">-3,184.0</td>
                        <td id="T_a9fa3_row6_col4" class="data row6 col4">-1,425.7</td>
                        <td id="T_a9fa3_row6_col5" class="data row6 col5">-202.8</td>
                        <td id="T_a9fa3_row6_col6" class="data row6 col6">945.9</td>
                        <td id="T_a9fa3_row6_col7" class="data row6 col7">3,775.8</td>
            </tr>
            <tr>
                        <th id="T_a9fa3_level0_row7" class="row_heading level0 row7">ur_lag</th>
                        <td id="T_a9fa3_row7_col0" class="data row7 col0">47</td>
                        <td id="T_a9fa3_row7_col1" class="data row7 col1">6.10</td>
                        <td id="T_a9fa3_row7_col2" class="data row7 col2">2.20</td>
                        <td id="T_a9fa3_row7_col3" class="data row7 col3">3.40</td>
                        <td id="T_a9fa3_row7_col4" class="data row7 col4">4.50</td>
                        <td id="T_a9fa3_row7_col5" class="data row7 col5">5.40</td>
                        <td id="T_a9fa3_row7_col6" class="data row7 col6">7.50</td>
                        <td id="T_a9fa3_row7_col7" class="data row7 col7">11.4</td>
            </tr>
            <tr>
                        <th id="T_a9fa3_level0_row8" class="row_heading level0 row8">er_lag</th>
                        <td id="T_a9fa3_row8_col0" class="data row8 col0">47</td>
                        <td id="T_a9fa3_row8_col1" class="data row8 col1">63.7</td>
                        <td id="T_a9fa3_row8_col2" class="data row8 col2">9.90</td>
                        <td id="T_a9fa3_row8_col3" class="data row8 col3">38.5</td>
                        <td id="T_a9fa3_row8_col4" class="data row8 col4">65.1</td>
                        <td id="T_a9fa3_row8_col5" class="data row8 col5">67.3</td>
                        <td id="T_a9fa3_row8_col6" class="data row8 col6">69.0</td>
                        <td id="T_a9fa3_row8_col7" class="data row8 col7">71.8</td>
            </tr>
            <tr>
                        <th id="T_a9fa3_level0_row9" class="row_heading level0 row9">cad_usd_lag</th>
                        <td id="T_a9fa3_row9_col0" class="data row9 col0">45</td>
                        <td id="T_a9fa3_row9_col1" class="data row9 col1">1.20</td>
                        <td id="T_a9fa3_row9_col2" class="data row9 col2">0.20</td>
                        <td id="T_a9fa3_row9_col3" class="data row9 col3">1.00</td>
                        <td id="T_a9fa3_row9_col4" class="data row9 col4">1.10</td>
                        <td id="T_a9fa3_row9_col5" class="data row9 col5">1.20</td>
                        <td id="T_a9fa3_row9_col6" class="data row9 col6">1.40</td>
                        <td id="T_a9fa3_row9_col7" class="data row9 col7">1.60</td>
            </tr>
    </tbody></table>
</div>
</div>
<p>All the figures that I can validate against (exogenous variables aren’t reported in the paper) are reasonably close. The one noted difference is the previously described outlier in natural resource revenue which leads to my minimum for that variable being significantly lower than in the paper. That large one goes away again if I introduce the same data error described above. My guess for the remaining small discrepancies are differences in calculating population or CPI.</p>
</section>
<section id="sumary-statistics-for-key-variables-1970-71-2016-17-first-difference" class="level3">
<h3 class="anchored" data-anchor-id="sumary-statistics-for-key-variables-1970-71-2016-17-first-difference">Sumary statistics for key variables, 1970-71, 2016-17, first difference</h3>
<p>Reproduce the bottom half of table 1 from the paper</p>
<div class="cell" data-execution_count="22">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;">def</span> model_df_first_diff(mdfl: pd.DataFrame) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb21-2">    <span class="co" style="color: #5E5E5E;">"""Produce the first difference of the level model df.</span></span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;">    mdfl: pd.DataFrame</span></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;">        The model dataframe in levels</span></span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb21-12"><span class="co" style="color: #5E5E5E;">        The first differenced model dataframe</span></span>
<span id="cb21-13"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb21-14">    df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb21-15">        mdfl</span>
<span id="cb21-16">        .diff()</span>
<span id="cb21-17">        .loc[<span class="st" style="color: #20794D;">'1970'</span>:<span class="st" style="color: #20794D;">'2016'</span>]</span>
<span id="cb21-18">        .copy()</span>
<span id="cb21-19">        .assign(heritage_dummy<span class="op" style="color: #5E5E5E;">=</span>mdfl[<span class="st" style="color: #20794D;">'heritage_dummy'</span>]) <span class="co" style="color: #5E5E5E;"># don't want to lag diff this</span></span>
<span id="cb21-20">        .assign(constant<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb21-21">        .assign(zero<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb21-22">        .assign(nrrd<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[[<span class="st" style="color: #20794D;">'natural_resource_revenue'</span>, <span class="st" style="color: #20794D;">'zero'</span>]].<span class="bu" style="color: null;">min</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'columns'</span>))</span>
<span id="cb21-23">        .assign(nrri<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df: df[[<span class="st" style="color: #20794D;">'natural_resource_revenue'</span>, <span class="st" style="color: #20794D;">'zero'</span>]].<span class="bu" style="color: null;">max</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'columns'</span>))</span>
<span id="cb21-24">        .reindex(columns<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb21-25">            <span class="st" style="color: #20794D;">'natural_resource_revenue'</span>, <span class="st" style="color: #20794D;">'nrri'</span>, <span class="st" style="color: #20794D;">'nrrd'</span>, <span class="st" style="color: #20794D;">'corporate_income_tax'</span>, <span class="st" style="color: #20794D;">'personal_income_tax'</span>,</span>
<span id="cb21-26">            <span class="st" style="color: #20794D;">'other_revenue'</span>, <span class="st" style="color: #20794D;">'debt_service'</span>, <span class="st" style="color: #20794D;">'program_expenditure'</span>, <span class="st" style="color: #20794D;">'deficit'</span>, <span class="st" style="color: #20794D;">'ur_lag'</span>,</span>
<span id="cb21-27">            <span class="st" style="color: #20794D;">'er_lag'</span>, <span class="st" style="color: #20794D;">'cad_usd_lag'</span>, <span class="st" style="color: #20794D;">'heritage_dummy'</span>, <span class="st" style="color: #20794D;">'constant'</span></span>
<span id="cb21-28">        ])</span>
<span id="cb21-29">    )</span>
<span id="cb21-30">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="23">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;">def</span> tbl1_diff(model_df: pd.DataFrame) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.io.formats.style.Styler:</span>
<span id="cb22-2">    <span class="co" style="color: #5E5E5E;">"""Produce summary statistics of the first differenced data set.</span></span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb22-6"><span class="co" style="color: #5E5E5E;">    model_df: pd.DataFrame</span></span>
<span id="cb22-7"><span class="co" style="color: #5E5E5E;">        Input data set</span></span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb22-10"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb22-11"><span class="co" style="color: #5E5E5E;">    pd.io.formats.style.Styler:</span></span>
<span id="cb22-12"><span class="co" style="color: #5E5E5E;">        Nicely styled summary statistics</span></span>
<span id="cb22-13"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb22-14"></span>
<span id="cb22-15">    df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb22-16">        model_df_first_diff(model_df)</span>
<span id="cb22-17">        .drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'heritage_dummy'</span>, <span class="st" style="color: #20794D;">'constant'</span>])</span>
<span id="cb22-18">        .describe()</span>
<span id="cb22-19">        .T</span>
<span id="cb22-20">        .style.<span class="bu" style="color: null;">format</span>({</span>
<span id="cb22-21">            <span class="st" style="color: #20794D;">'count'</span>: count,</span>
<span id="cb22-22">            <span class="st" style="color: #20794D;">'mean'</span>: number,</span>
<span id="cb22-23">            <span class="st" style="color: #20794D;">'std'</span>: number,</span>
<span id="cb22-24">            <span class="st" style="color: #20794D;">'min'</span>: number,</span>
<span id="cb22-25">            <span class="st" style="color: #20794D;">'25%'</span>: number,</span>
<span id="cb22-26">            <span class="st" style="color: #20794D;">'50%'</span>: number,</span>
<span id="cb22-27">            <span class="st" style="color: #20794D;">'75%'</span>: number,</span>
<span id="cb22-28">            <span class="st" style="color: #20794D;">'max'</span>: number</span>
<span id="cb22-29">        })</span>
<span id="cb22-30">    )</span>
<span id="cb22-31">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</details>
</div>
<p>Here’s Table 1 from the paper again:</p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">Image(filename<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"img/ferede_tbl_1.png"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-24-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Here’s mine:</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">tbl1_diff(mdfl)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">

<style type="text/css">
</style><table id="T_dfab2_"><thead>    <tr>        <th class="blank level0"></th>        <th class="col_heading level0 col0">count</th>        <th class="col_heading level0 col1">mean</th>        <th class="col_heading level0 col2">std</th>        <th class="col_heading level0 col3">min</th>        <th class="col_heading level0 col4">25%</th>        <th class="col_heading level0 col5">50%</th>        <th class="col_heading level0 col6">75%</th>        <th class="col_heading level0 col7">max</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_dfab2_level0_row0" class="row_heading level0 row0">natural_resource_revenue</th>
                        <td id="T_dfab2_row0_col0" class="data row0 col0">47</td>
                        <td id="T_dfab2_row0_col1" class="data row0 col1">-8.3</td>
                        <td id="T_dfab2_row0_col2" class="data row0 col2">1,365.3</td>
                        <td id="T_dfab2_row0_col3" class="data row0 col3">-4,543.2</td>
                        <td id="T_dfab2_row0_col4" class="data row0 col4">-551.3</td>
                        <td id="T_dfab2_row0_col5" class="data row0 col5">64.2</td>
                        <td id="T_dfab2_row0_col6" class="data row0 col6">463.5</td>
                        <td id="T_dfab2_row0_col7" class="data row0 col7">4,638.7</td>
            </tr>
            <tr>
                        <th id="T_dfab2_level0_row1" class="row_heading level0 row1">nrri</th>
                        <td id="T_dfab2_row1_col0" class="data row1 col0">47</td>
                        <td id="T_dfab2_row1_col1" class="data row1 col1">437.8</td>
                        <td id="T_dfab2_row1_col2" class="data row1 col2">852.9</td>
                        <td id="T_dfab2_row1_col3" class="data row1 col3">0.00</td>
                        <td id="T_dfab2_row1_col4" class="data row1 col4">0.00</td>
                        <td id="T_dfab2_row1_col5" class="data row1 col5">64.2</td>
                        <td id="T_dfab2_row1_col6" class="data row1 col6">463.5</td>
                        <td id="T_dfab2_row1_col7" class="data row1 col7">4,638.7</td>
            </tr>
            <tr>
                        <th id="T_dfab2_level0_row2" class="row_heading level0 row2">nrrd</th>
                        <td id="T_dfab2_row2_col0" class="data row2 col0">47</td>
                        <td id="T_dfab2_row2_col1" class="data row2 col1">-446.1</td>
                        <td id="T_dfab2_row2_col2" class="data row2 col2">858.9</td>
                        <td id="T_dfab2_row2_col3" class="data row2 col3">-4,543.2</td>
                        <td id="T_dfab2_row2_col4" class="data row2 col4">-551.3</td>
                        <td id="T_dfab2_row2_col5" class="data row2 col5">0.00</td>
                        <td id="T_dfab2_row2_col6" class="data row2 col6">0.00</td>
                        <td id="T_dfab2_row2_col7" class="data row2 col7">0.00</td>
            </tr>
            <tr>
                        <th id="T_dfab2_level0_row3" class="row_heading level0 row3">corporate_income_tax</th>
                        <td id="T_dfab2_row3_col0" class="data row3 col0">47</td>
                        <td id="T_dfab2_row3_col1" class="data row3 col1">13.3</td>
                        <td id="T_dfab2_row3_col2" class="data row3 col2">201.2</td>
                        <td id="T_dfab2_row3_col3" class="data row3 col3">-463.0</td>
                        <td id="T_dfab2_row3_col4" class="data row3 col4">-108.5</td>
                        <td id="T_dfab2_row3_col5" class="data row3 col5">25.9</td>
                        <td id="T_dfab2_row3_col6" class="data row3 col6">137.8</td>
                        <td id="T_dfab2_row3_col7" class="data row3 col7">447.1</td>
            </tr>
            <tr>
                        <th id="T_dfab2_level0_row4" class="row_heading level0 row4">personal_income_tax</th>
                        <td id="T_dfab2_row4_col0" class="data row4 col0">47</td>
                        <td id="T_dfab2_row4_col1" class="data row4 col1">42.7</td>
                        <td id="T_dfab2_row4_col2" class="data row4 col2">227.2</td>
                        <td id="T_dfab2_row4_col3" class="data row4 col3">-690.7</td>
                        <td id="T_dfab2_row4_col4" class="data row4 col4">-28.7</td>
                        <td id="T_dfab2_row4_col5" class="data row4 col5">40.0</td>
                        <td id="T_dfab2_row4_col6" class="data row4 col6">154.2</td>
                        <td id="T_dfab2_row4_col7" class="data row4 col7">936.9</td>
            </tr>
            <tr>
                        <th id="T_dfab2_level0_row5" class="row_heading level0 row5">other_revenue</th>
                        <td id="T_dfab2_row5_col0" class="data row5 col0">47</td>
                        <td id="T_dfab2_row5_col1" class="data row5 col1">41.8</td>
                        <td id="T_dfab2_row5_col2" class="data row5 col2">577.2</td>
                        <td id="T_dfab2_row5_col3" class="data row5 col3">-1,268.7</td>
                        <td id="T_dfab2_row5_col4" class="data row5 col4">-288.9</td>
                        <td id="T_dfab2_row5_col5" class="data row5 col5">-28.0</td>
                        <td id="T_dfab2_row5_col6" class="data row5 col6">162.8</td>
                        <td id="T_dfab2_row5_col7" class="data row5 col7">2,417.6</td>
            </tr>
            <tr>
                        <th id="T_dfab2_level0_row6" class="row_heading level0 row6">debt_service</th>
                        <td id="T_dfab2_row6_col0" class="data row6 col0">47</td>
                        <td id="T_dfab2_row6_col1" class="data row6 col1">4.50</td>
                        <td id="T_dfab2_row6_col2" class="data row6 col2">86.2</td>
                        <td id="T_dfab2_row6_col3" class="data row6 col3">-247.5</td>
                        <td id="T_dfab2_row6_col4" class="data row6 col4">-21.6</td>
                        <td id="T_dfab2_row6_col5" class="data row6 col5">2.00</td>
                        <td id="T_dfab2_row6_col6" class="data row6 col6">36.0</td>
                        <td id="T_dfab2_row6_col7" class="data row6 col7">222.3</td>
            </tr>
            <tr>
                        <th id="T_dfab2_level0_row7" class="row_heading level0 row7">program_expenditure</th>
                        <td id="T_dfab2_row7_col0" class="data row7 col0">47</td>
                        <td id="T_dfab2_row7_col1" class="data row7 col1">147.4</td>
                        <td id="T_dfab2_row7_col2" class="data row7 col2">734.5</td>
                        <td id="T_dfab2_row7_col3" class="data row7 col3">-1,263.2</td>
                        <td id="T_dfab2_row7_col4" class="data row7 col4">-245.9</td>
                        <td id="T_dfab2_row7_col5" class="data row7 col5">202.7</td>
                        <td id="T_dfab2_row7_col6" class="data row7 col6">552.7</td>
                        <td id="T_dfab2_row7_col7" class="data row7 col7">2,477.9</td>
            </tr>
            <tr>
                        <th id="T_dfab2_level0_row8" class="row_heading level0 row8">deficit</th>
                        <td id="T_dfab2_row8_col0" class="data row8 col0">47</td>
                        <td id="T_dfab2_row8_col1" class="data row8 col1">62.3</td>
                        <td id="T_dfab2_row8_col2" class="data row8 col2">1,578.2</td>
                        <td id="T_dfab2_row8_col3" class="data row8 col3">-4,722.8</td>
                        <td id="T_dfab2_row8_col4" class="data row8 col4">-806.6</td>
                        <td id="T_dfab2_row8_col5" class="data row8 col5">-39.0</td>
                        <td id="T_dfab2_row8_col6" class="data row8 col6">836.0</td>
                        <td id="T_dfab2_row8_col7" class="data row8 col7">4,431.3</td>
            </tr>
            <tr>
                        <th id="T_dfab2_level0_row9" class="row_heading level0 row9">ur_lag</th>
                        <td id="T_dfab2_row9_col0" class="data row9 col0">47</td>
                        <td id="T_dfab2_row9_col1" class="data row9 col1">0.10</td>
                        <td id="T_dfab2_row9_col2" class="data row9 col2">1.10</td>
                        <td id="T_dfab2_row9_col3" class="data row9 col3">-1.8</td>
                        <td id="T_dfab2_row9_col4" class="data row9 col4">-0.7</td>
                        <td id="T_dfab2_row9_col5" class="data row9 col5">-0.1</td>
                        <td id="T_dfab2_row9_col6" class="data row9 col6">0.30</td>
                        <td id="T_dfab2_row9_col7" class="data row9 col7">3.90</td>
            </tr>
            <tr>
                        <th id="T_dfab2_level0_row10" class="row_heading level0 row10">er_lag</th>
                        <td id="T_dfab2_row10_col0" class="data row10 col0">47</td>
                        <td id="T_dfab2_row10_col1" class="data row10 col1">0.60</td>
                        <td id="T_dfab2_row10_col2" class="data row10 col2">3.30</td>
                        <td id="T_dfab2_row10_col3" class="data row10 col3">-3.2</td>
                        <td id="T_dfab2_row10_col4" class="data row10 col4">-0.2</td>
                        <td id="T_dfab2_row10_col5" class="data row10 col5">0.40</td>
                        <td id="T_dfab2_row10_col6" class="data row10 col6">0.90</td>
                        <td id="T_dfab2_row10_col7" class="data row10 col7">21.4</td>
            </tr>
            <tr>
                        <th id="T_dfab2_level0_row11" class="row_heading level0 row11">cad_usd_lag</th>
                        <td id="T_dfab2_row11_col0" class="data row11 col0">44</td>
                        <td id="T_dfab2_row11_col1" class="data row11 col1">0.00</td>
                        <td id="T_dfab2_row11_col2" class="data row11 col2">0.10</td>
                        <td id="T_dfab2_row11_col3" class="data row11 col3">-0.2</td>
                        <td id="T_dfab2_row11_col4" class="data row11 col4">-0.0</td>
                        <td id="T_dfab2_row11_col5" class="data row11 col5">0.00</td>
                        <td id="T_dfab2_row11_col6" class="data row11 col6">0.10</td>
                        <td id="T_dfab2_row11_col7" class="data row11 col7">0.20</td>
            </tr>
    </tbody></table>
</div>
</div>
<p>And with the data error:</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">tbl1_diff(mdfl_err)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">

<style type="text/css">
</style><table id="T_e3dc6_"><thead>    <tr>        <th class="blank level0"></th>        <th class="col_heading level0 col0">count</th>        <th class="col_heading level0 col1">mean</th>        <th class="col_heading level0 col2">std</th>        <th class="col_heading level0 col3">min</th>        <th class="col_heading level0 col4">25%</th>        <th class="col_heading level0 col5">50%</th>        <th class="col_heading level0 col6">75%</th>        <th class="col_heading level0 col7">max</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_e3dc6_level0_row0" class="row_heading level0 row0">natural_resource_revenue</th>
                        <td id="T_e3dc6_row0_col0" class="data row0 col0">47</td>
                        <td id="T_e3dc6_row0_col1" class="data row0 col1">-8.3</td>
                        <td id="T_e3dc6_row0_col2" class="data row0 col2">977.5</td>
                        <td id="T_e3dc6_row0_col3" class="data row0 col3">-2,451.6</td>
                        <td id="T_e3dc6_row0_col4" class="data row0 col4">-471.1</td>
                        <td id="T_e3dc6_row0_col5" class="data row0 col5">64.2</td>
                        <td id="T_e3dc6_row0_col6" class="data row0 col6">458.3</td>
                        <td id="T_e3dc6_row0_col7" class="data row0 col7">2,757.8</td>
            </tr>
            <tr>
                        <th id="T_e3dc6_level0_row1" class="row_heading level0 row1">nrri</th>
                        <td id="T_e3dc6_row1_col0" class="data row1 col0">47</td>
                        <td id="T_e3dc6_row1_col1" class="data row1 col1">349.1</td>
                        <td id="T_e3dc6_row1_col2" class="data row1 col2">579.4</td>
                        <td id="T_e3dc6_row1_col3" class="data row1 col3">0.00</td>
                        <td id="T_e3dc6_row1_col4" class="data row1 col4">0.00</td>
                        <td id="T_e3dc6_row1_col5" class="data row1 col5">64.2</td>
                        <td id="T_e3dc6_row1_col6" class="data row1 col6">458.3</td>
                        <td id="T_e3dc6_row1_col7" class="data row1 col7">2,757.8</td>
            </tr>
            <tr>
                        <th id="T_e3dc6_level0_row2" class="row_heading level0 row2">nrrd</th>
                        <td id="T_e3dc6_row2_col0" class="data row2 col0">47</td>
                        <td id="T_e3dc6_row2_col1" class="data row2 col1">-357.4</td>
                        <td id="T_e3dc6_row2_col2" class="data row2 col2">604.0</td>
                        <td id="T_e3dc6_row2_col3" class="data row2 col3">-2,451.6</td>
                        <td id="T_e3dc6_row2_col4" class="data row2 col4">-471.1</td>
                        <td id="T_e3dc6_row2_col5" class="data row2 col5">0.00</td>
                        <td id="T_e3dc6_row2_col6" class="data row2 col6">0.00</td>
                        <td id="T_e3dc6_row2_col7" class="data row2 col7">0.00</td>
            </tr>
            <tr>
                        <th id="T_e3dc6_level0_row3" class="row_heading level0 row3">corporate_income_tax</th>
                        <td id="T_e3dc6_row3_col0" class="data row3 col0">47</td>
                        <td id="T_e3dc6_row3_col1" class="data row3 col1">13.3</td>
                        <td id="T_e3dc6_row3_col2" class="data row3 col2">201.2</td>
                        <td id="T_e3dc6_row3_col3" class="data row3 col3">-463.0</td>
                        <td id="T_e3dc6_row3_col4" class="data row3 col4">-108.5</td>
                        <td id="T_e3dc6_row3_col5" class="data row3 col5">25.9</td>
                        <td id="T_e3dc6_row3_col6" class="data row3 col6">137.8</td>
                        <td id="T_e3dc6_row3_col7" class="data row3 col7">447.1</td>
            </tr>
            <tr>
                        <th id="T_e3dc6_level0_row4" class="row_heading level0 row4">personal_income_tax</th>
                        <td id="T_e3dc6_row4_col0" class="data row4 col0">47</td>
                        <td id="T_e3dc6_row4_col1" class="data row4 col1">42.7</td>
                        <td id="T_e3dc6_row4_col2" class="data row4 col2">227.2</td>
                        <td id="T_e3dc6_row4_col3" class="data row4 col3">-690.7</td>
                        <td id="T_e3dc6_row4_col4" class="data row4 col4">-28.7</td>
                        <td id="T_e3dc6_row4_col5" class="data row4 col5">40.0</td>
                        <td id="T_e3dc6_row4_col6" class="data row4 col6">154.2</td>
                        <td id="T_e3dc6_row4_col7" class="data row4 col7">936.9</td>
            </tr>
            <tr>
                        <th id="T_e3dc6_level0_row5" class="row_heading level0 row5">other_revenue</th>
                        <td id="T_e3dc6_row5_col0" class="data row5 col0">47</td>
                        <td id="T_e3dc6_row5_col1" class="data row5 col1">41.8</td>
                        <td id="T_e3dc6_row5_col2" class="data row5 col2">577.2</td>
                        <td id="T_e3dc6_row5_col3" class="data row5 col3">-1,268.7</td>
                        <td id="T_e3dc6_row5_col4" class="data row5 col4">-288.9</td>
                        <td id="T_e3dc6_row5_col5" class="data row5 col5">-28.0</td>
                        <td id="T_e3dc6_row5_col6" class="data row5 col6">162.8</td>
                        <td id="T_e3dc6_row5_col7" class="data row5 col7">2,417.6</td>
            </tr>
            <tr>
                        <th id="T_e3dc6_level0_row6" class="row_heading level0 row6">debt_service</th>
                        <td id="T_e3dc6_row6_col0" class="data row6 col0">47</td>
                        <td id="T_e3dc6_row6_col1" class="data row6 col1">4.50</td>
                        <td id="T_e3dc6_row6_col2" class="data row6 col2">86.2</td>
                        <td id="T_e3dc6_row6_col3" class="data row6 col3">-247.5</td>
                        <td id="T_e3dc6_row6_col4" class="data row6 col4">-21.6</td>
                        <td id="T_e3dc6_row6_col5" class="data row6 col5">2.00</td>
                        <td id="T_e3dc6_row6_col6" class="data row6 col6">36.0</td>
                        <td id="T_e3dc6_row6_col7" class="data row6 col7">222.3</td>
            </tr>
            <tr>
                        <th id="T_e3dc6_level0_row7" class="row_heading level0 row7">program_expenditure</th>
                        <td id="T_e3dc6_row7_col0" class="data row7 col0">47</td>
                        <td id="T_e3dc6_row7_col1" class="data row7 col1">147.4</td>
                        <td id="T_e3dc6_row7_col2" class="data row7 col2">734.5</td>
                        <td id="T_e3dc6_row7_col3" class="data row7 col3">-1,263.2</td>
                        <td id="T_e3dc6_row7_col4" class="data row7 col4">-245.9</td>
                        <td id="T_e3dc6_row7_col5" class="data row7 col5">202.7</td>
                        <td id="T_e3dc6_row7_col6" class="data row7 col6">552.7</td>
                        <td id="T_e3dc6_row7_col7" class="data row7 col7">2,477.9</td>
            </tr>
            <tr>
                        <th id="T_e3dc6_level0_row8" class="row_heading level0 row8">deficit</th>
                        <td id="T_e3dc6_row8_col0" class="data row8 col0">47</td>
                        <td id="T_e3dc6_row8_col1" class="data row8 col1">62.3</td>
                        <td id="T_e3dc6_row8_col2" class="data row8 col2">1,260.2</td>
                        <td id="T_e3dc6_row8_col3" class="data row8 col3">-2,615.7</td>
                        <td id="T_e3dc6_row8_col4" class="data row8 col4">-758.1</td>
                        <td id="T_e3dc6_row8_col5" class="data row8 col5">-39.0</td>
                        <td id="T_e3dc6_row8_col6" class="data row8 col6">747.4</td>
                        <td id="T_e3dc6_row8_col7" class="data row8 col7">3,117.0</td>
            </tr>
            <tr>
                        <th id="T_e3dc6_level0_row9" class="row_heading level0 row9">ur_lag</th>
                        <td id="T_e3dc6_row9_col0" class="data row9 col0">47</td>
                        <td id="T_e3dc6_row9_col1" class="data row9 col1">0.10</td>
                        <td id="T_e3dc6_row9_col2" class="data row9 col2">1.10</td>
                        <td id="T_e3dc6_row9_col3" class="data row9 col3">-1.8</td>
                        <td id="T_e3dc6_row9_col4" class="data row9 col4">-0.7</td>
                        <td id="T_e3dc6_row9_col5" class="data row9 col5">-0.1</td>
                        <td id="T_e3dc6_row9_col6" class="data row9 col6">0.30</td>
                        <td id="T_e3dc6_row9_col7" class="data row9 col7">3.90</td>
            </tr>
            <tr>
                        <th id="T_e3dc6_level0_row10" class="row_heading level0 row10">er_lag</th>
                        <td id="T_e3dc6_row10_col0" class="data row10 col0">47</td>
                        <td id="T_e3dc6_row10_col1" class="data row10 col1">0.60</td>
                        <td id="T_e3dc6_row10_col2" class="data row10 col2">3.30</td>
                        <td id="T_e3dc6_row10_col3" class="data row10 col3">-3.2</td>
                        <td id="T_e3dc6_row10_col4" class="data row10 col4">-0.2</td>
                        <td id="T_e3dc6_row10_col5" class="data row10 col5">0.40</td>
                        <td id="T_e3dc6_row10_col6" class="data row10 col6">0.90</td>
                        <td id="T_e3dc6_row10_col7" class="data row10 col7">21.4</td>
            </tr>
            <tr>
                        <th id="T_e3dc6_level0_row11" class="row_heading level0 row11">cad_usd_lag</th>
                        <td id="T_e3dc6_row11_col0" class="data row11 col0">44</td>
                        <td id="T_e3dc6_row11_col1" class="data row11 col1">0.00</td>
                        <td id="T_e3dc6_row11_col2" class="data row11 col2">0.10</td>
                        <td id="T_e3dc6_row11_col3" class="data row11 col3">-0.2</td>
                        <td id="T_e3dc6_row11_col4" class="data row11 col4">-0.0</td>
                        <td id="T_e3dc6_row11_col5" class="data row11 col5">0.00</td>
                        <td id="T_e3dc6_row11_col6" class="data row11 col6">0.10</td>
                        <td id="T_e3dc6_row11_col7" class="data row11 col7">0.20</td>
            </tr>
    </tbody></table>
</div>
</div>
<p>As with everything so far, the data overall matches, and Natural Resource Revenue matches a lot better if I neglect to net out the heritage fund in 1976.</p>
</section>
<section id="unit-root-tests" class="level3">
<h3 class="anchored" data-anchor-id="unit-root-tests">Unit-Root Tests</h3>
<p>Table A1 in the paper shows the results of unit root tests for both the level and first differenced variables in the model. This section will reproduce those tables</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;">def</span> stationarity_tests(df: pd.DataFrame, first_diff: <span class="bu" style="color: null;">bool</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb26-2">    <span class="co" style="color: #5E5E5E;">"""Compute stationarity test statistics.</span></span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;">    df: pd.DataFrame</span></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;">        The model input data</span></span>
<span id="cb26-8"><span class="co" style="color: #5E5E5E;">    first_diff: bool, default False</span></span>
<span id="cb26-9"><span class="co" style="color: #5E5E5E;">        Perform tests on first differenced version of the data</span></span>
<span id="cb26-10"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb26-11">    <span class="cf" style="color: #003B4F;">if</span> first_diff:</span>
<span id="cb26-12">        df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb26-13">            model_df_first_diff(df)</span>
<span id="cb26-14">            .drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"heritage_dummy"</span>, <span class="st" style="color: #20794D;">"constant"</span>])</span>
<span id="cb26-15">        )</span>
<span id="cb26-16">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb26-17">        df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb26-18">            df</span>
<span id="cb26-19">            .loc[<span class="st" style="color: #20794D;">'1970'</span>:<span class="st" style="color: #20794D;">'2016'</span>]</span>
<span id="cb26-20">            .copy()</span>
<span id="cb26-21">            .drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'heritage_dummy'</span>])</span>
<span id="cb26-22">            .reindex(</span>
<span id="cb26-23">                columns<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb26-24">                    <span class="st" style="color: #20794D;">'natural_resource_revenue'</span>,</span>
<span id="cb26-25">                    <span class="st" style="color: #20794D;">'corporate_income_tax'</span>,</span>
<span id="cb26-26">                    <span class="st" style="color: #20794D;">'personal_income_tax'</span>,</span>
<span id="cb26-27">                    <span class="st" style="color: #20794D;">'other_revenue'</span>,</span>
<span id="cb26-28">                    <span class="st" style="color: #20794D;">'debt_service'</span>,</span>
<span id="cb26-29">                    <span class="st" style="color: #20794D;">'program_expenditure'</span>,</span>
<span id="cb26-30">                    <span class="st" style="color: #20794D;">'deficit'</span>,</span>
<span id="cb26-31">                    <span class="st" style="color: #20794D;">'ur_lag'</span>,</span>
<span id="cb26-32">                    <span class="st" style="color: #20794D;">'er_lag'</span>,</span>
<span id="cb26-33">                    <span class="st" style="color: #20794D;">'cad_usd_lag'</span>,</span>
<span id="cb26-34">                ]</span>
<span id="cb26-35">            )</span>
<span id="cb26-36">        )</span>
<span id="cb26-37">    tests_dict <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'ADF'</span>: ADF, <span class="st" style="color: #20794D;">'Phillips-Perron'</span>: PhillipsPerron, <span class="st" style="color: #20794D;">'DF-GLS'</span>: DFGLS}</span>
<span id="cb26-38">    cols <span class="op" style="color: #5E5E5E;">=</span> df.columns</span>
<span id="cb26-39">    tests_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame()</span>
<span id="cb26-40">    <span class="cf" style="color: #003B4F;">for</span> test_label, test <span class="kw" style="color: #003B4F;">in</span> tests_dict.items():</span>
<span id="cb26-41">        <span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> cols:</span>
<span id="cb26-42">            <span class="cf" style="color: #003B4F;">if</span> test_label <span class="op" style="color: #5E5E5E;">!=</span> <span class="st" style="color: #20794D;">'Phillips-Perron'</span>:</span>
<span id="cb26-43">                col_test <span class="op" style="color: #5E5E5E;">=</span> test(df[col].dropna(), method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'BIC'</span>)</span>
<span id="cb26-44">            <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb26-45">                col_test <span class="op" style="color: #5E5E5E;">=</span> test(df[col].dropna())</span>
<span id="cb26-46">            test_val <span class="op" style="color: #5E5E5E;">=</span> col_test.stat</span>
<span id="cb26-47">            test_p <span class="op" style="color: #5E5E5E;">=</span> col_test.pvalue</span>
<span id="cb26-48">            test_summary <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'val: </span><span class="sc" style="color: #5E5E5E;">{</span>test_val<span class="sc" style="color: #5E5E5E;">:0.3f}</span><span class="ss" style="color: #20794D;">, p: </span><span class="sc" style="color: #5E5E5E;">{</span>test_p<span class="sc" style="color: #5E5E5E;">:.1%}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb26-49">            tests_df.loc[col, test_label] <span class="op" style="color: #5E5E5E;">=</span> test_summary</span>
<span id="cb26-50">    <span class="cf" style="color: #003B4F;">return</span> tests_df</span></code></pre></div>
</div>
<p>Here’s the table from the paper:</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">Image(filename<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"img/ferede_tbl_a1.png"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-28-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Here is mine with my data set</p>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">stationarity_tests(mdfl, first_diff<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>ADF</th>
      <th>Phillips-Perron</th>
      <th>DF-GLS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>natural_resource_revenue</th>
      <td>val: -3.927, p: 0.2%</td>
      <td>val: -4.056, p: 0.1%</td>
      <td>val: -3.125, p: 0.2%</td>
    </tr>
    <tr>
      <th>corporate_income_tax</th>
      <td>val: -2.340, p: 15.9%</td>
      <td>val: -2.285, p: 17.7%</td>
      <td>val: -1.676, p: 9.2%</td>
    </tr>
    <tr>
      <th>personal_income_tax</th>
      <td>val: -1.650, p: 45.7%</td>
      <td>val: -1.440, p: 56.3%</td>
      <td>val: -0.688, p: 43.2%</td>
    </tr>
    <tr>
      <th>other_revenue</th>
      <td>val: -2.196, p: 20.8%</td>
      <td>val: -2.057, p: 26.2%</td>
      <td>val: -1.585, p: 11.0%</td>
    </tr>
    <tr>
      <th>debt_service</th>
      <td>val: -1.548, p: 51.0%</td>
      <td>val: -1.697, p: 43.3%</td>
      <td>val: -1.377, p: 16.2%</td>
    </tr>
    <tr>
      <th>program_expenditure</th>
      <td>val: -2.966, p: 3.8%</td>
      <td>val: -2.137, p: 23.0%</td>
      <td>val: -0.682, p: 43.4%</td>
    </tr>
    <tr>
      <th>deficit</th>
      <td>val: -3.510, p: 0.8%</td>
      <td>val: -3.924, p: 0.2%</td>
      <td>val: -3.537, p: 0.0%</td>
    </tr>
    <tr>
      <th>ur_lag</th>
      <td>val: -2.709, p: 7.3%</td>
      <td>val: -2.071, p: 25.6%</td>
      <td>val: -2.319, p: 2.1%</td>
    </tr>
    <tr>
      <th>er_lag</th>
      <td>val: -10.652, p: 0.0%</td>
      <td>val: -2.931, p: 4.2%</td>
      <td>val: -0.763, p: 39.7%</td>
    </tr>
    <tr>
      <th>cad_usd_lag</th>
      <td>val: -2.454, p: 12.7%</td>
      <td>val: -1.796, p: 38.2%</td>
      <td>val: -1.870, p: 6.1%</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">stationarity_tests(mdfl, first_diff<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>ADF</th>
      <th>Phillips-Perron</th>
      <th>DF-GLS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>natural_resource_revenue</th>
      <td>val: -7.403, p: 0.0%</td>
      <td>val: -10.300, p: 0.0%</td>
      <td>val: -7.430, p: 0.0%</td>
    </tr>
    <tr>
      <th>nrri</th>
      <td>val: -6.885, p: 0.0%</td>
      <td>val: -6.896, p: 0.0%</td>
      <td>val: -6.533, p: 0.0%</td>
    </tr>
    <tr>
      <th>nrrd</th>
      <td>val: -7.835, p: 0.0%</td>
      <td>val: -9.218, p: 0.0%</td>
      <td>val: -7.634, p: 0.0%</td>
    </tr>
    <tr>
      <th>corporate_income_tax</th>
      <td>val: -7.228, p: 0.0%</td>
      <td>val: -8.484, p: 0.0%</td>
      <td>val: -7.103, p: 0.0%</td>
    </tr>
    <tr>
      <th>personal_income_tax</th>
      <td>val: -5.560, p: 0.0%</td>
      <td>val: -8.831, p: 0.0%</td>
      <td>val: -6.703, p: 0.0%</td>
    </tr>
    <tr>
      <th>other_revenue</th>
      <td>val: -7.914, p: 0.0%</td>
      <td>val: -8.169, p: 0.0%</td>
      <td>val: -7.717, p: 0.0%</td>
    </tr>
    <tr>
      <th>debt_service</th>
      <td>val: -3.918, p: 0.2%</td>
      <td>val: -4.252, p: 0.1%</td>
      <td>val: -3.931, p: 0.0%</td>
    </tr>
    <tr>
      <th>program_expenditure</th>
      <td>val: -2.545, p: 10.5%</td>
      <td>val: -6.105, p: 0.0%</td>
      <td>val: -2.461, p: 1.4%</td>
    </tr>
    <tr>
      <th>deficit</th>
      <td>val: -2.485, p: 11.9%</td>
      <td>val: -10.105, p: 0.0%</td>
      <td>val: -2.509, p: 1.2%</td>
    </tr>
    <tr>
      <th>ur_lag</th>
      <td>val: -4.924, p: 0.0%</td>
      <td>val: -4.056, p: 0.1%</td>
      <td>val: -4.901, p: 0.0%</td>
    </tr>
    <tr>
      <th>er_lag</th>
      <td>val: -2.697, p: 7.5%</td>
      <td>val: -6.507, p: 0.0%</td>
      <td>val: -2.742, p: 0.6%</td>
    </tr>
    <tr>
      <th>cad_usd_lag</th>
      <td>val: -3.318, p: 1.4%</td>
      <td>val: -3.042, p: 3.1%</td>
      <td>val: -3.384, p: 0.1%</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>And with the error data set:</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">stationarity_tests(mdfl_err, first_diff<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>ADF</th>
      <th>Phillips-Perron</th>
      <th>DF-GLS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>natural_resource_revenue</th>
      <td>val: -2.652, p: 8.3%</td>
      <td>val: -2.875, p: 4.8%</td>
      <td>val: -2.113, p: 3.5%</td>
    </tr>
    <tr>
      <th>corporate_income_tax</th>
      <td>val: -2.340, p: 15.9%</td>
      <td>val: -2.285, p: 17.7%</td>
      <td>val: -1.676, p: 9.2%</td>
    </tr>
    <tr>
      <th>personal_income_tax</th>
      <td>val: -1.650, p: 45.7%</td>
      <td>val: -1.440, p: 56.3%</td>
      <td>val: -0.688, p: 43.2%</td>
    </tr>
    <tr>
      <th>other_revenue</th>
      <td>val: -2.196, p: 20.8%</td>
      <td>val: -2.057, p: 26.2%</td>
      <td>val: -1.585, p: 11.0%</td>
    </tr>
    <tr>
      <th>debt_service</th>
      <td>val: -1.548, p: 51.0%</td>
      <td>val: -1.697, p: 43.3%</td>
      <td>val: -1.377, p: 16.2%</td>
    </tr>
    <tr>
      <th>program_expenditure</th>
      <td>val: -2.966, p: 3.8%</td>
      <td>val: -2.137, p: 23.0%</td>
      <td>val: -0.682, p: 43.4%</td>
    </tr>
    <tr>
      <th>deficit</th>
      <td>val: -2.566, p: 10.0%</td>
      <td>val: -2.763, p: 6.4%</td>
      <td>val: -2.606, p: 0.9%</td>
    </tr>
    <tr>
      <th>ur_lag</th>
      <td>val: -2.709, p: 7.3%</td>
      <td>val: -2.071, p: 25.6%</td>
      <td>val: -2.319, p: 2.1%</td>
    </tr>
    <tr>
      <th>er_lag</th>
      <td>val: -10.652, p: 0.0%</td>
      <td>val: -2.931, p: 4.2%</td>
      <td>val: -0.763, p: 39.7%</td>
    </tr>
    <tr>
      <th>cad_usd_lag</th>
      <td>val: -2.454, p: 12.7%</td>
      <td>val: -1.796, p: 38.2%</td>
      <td>val: -1.870, p: 6.1%</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">stationarity_tests(mdfl_err, first_diff<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>ADF</th>
      <th>Phillips-Perron</th>
      <th>DF-GLS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>natural_resource_revenue</th>
      <td>val: -5.913, p: 0.0%</td>
      <td>val: -7.791, p: 0.0%</td>
      <td>val: -5.925, p: 0.0%</td>
    </tr>
    <tr>
      <th>nrri</th>
      <td>val: -6.119, p: 0.0%</td>
      <td>val: -6.149, p: 0.0%</td>
      <td>val: -5.731, p: 0.0%</td>
    </tr>
    <tr>
      <th>nrrd</th>
      <td>val: -7.846, p: 0.0%</td>
      <td>val: -8.008, p: 0.0%</td>
      <td>val: -7.640, p: 0.0%</td>
    </tr>
    <tr>
      <th>corporate_income_tax</th>
      <td>val: -7.228, p: 0.0%</td>
      <td>val: -8.484, p: 0.0%</td>
      <td>val: -7.103, p: 0.0%</td>
    </tr>
    <tr>
      <th>personal_income_tax</th>
      <td>val: -5.560, p: 0.0%</td>
      <td>val: -8.831, p: 0.0%</td>
      <td>val: -6.703, p: 0.0%</td>
    </tr>
    <tr>
      <th>other_revenue</th>
      <td>val: -7.914, p: 0.0%</td>
      <td>val: -8.169, p: 0.0%</td>
      <td>val: -7.717, p: 0.0%</td>
    </tr>
    <tr>
      <th>debt_service</th>
      <td>val: -3.918, p: 0.2%</td>
      <td>val: -4.252, p: 0.1%</td>
      <td>val: -3.931, p: 0.0%</td>
    </tr>
    <tr>
      <th>program_expenditure</th>
      <td>val: -2.545, p: 10.5%</td>
      <td>val: -6.105, p: 0.0%</td>
      <td>val: -2.461, p: 1.4%</td>
    </tr>
    <tr>
      <th>deficit</th>
      <td>val: -6.642, p: 0.0%</td>
      <td>val: -8.574, p: 0.0%</td>
      <td>val: -6.609, p: 0.0%</td>
    </tr>
    <tr>
      <th>ur_lag</th>
      <td>val: -4.924, p: 0.0%</td>
      <td>val: -4.056, p: 0.1%</td>
      <td>val: -4.901, p: 0.0%</td>
    </tr>
    <tr>
      <th>er_lag</th>
      <td>val: -2.697, p: 7.5%</td>
      <td>val: -6.507, p: 0.0%</td>
      <td>val: -2.742, p: 0.6%</td>
    </tr>
    <tr>
      <th>cad_usd_lag</th>
      <td>val: -3.318, p: 1.4%</td>
      <td>val: -3.042, p: 3.1%</td>
      <td>val: -3.384, p: 0.1%</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Documentation on the test tools I used can be found <a href="https://arch.readthedocs.io/en/latest/unitroot/tests.html">here</a></p>
<p>There are some interesting differences. Most notable is that on the levels of the deficit series I reject the null hypothesis of a unit root using all three tests at a significance level &lt; 1%. The paper specifically notes that if the deficit is stationary in levels then a Vector Error Correction model can be applied. As the original author’s fails to reject the null he implements a Vector AutoRegression model on the first differenced data. In levels the only other series that I find to be stationary is natural resource revenue. ADF on program expenditure would also reject the null at 5% significance, but would fail to reject it using the other two tests.</p>
<p>Looking at the first differenced series, since that’s what the paper ultimately ends up using, I also reject the null hypothesis of a unit root for all variables using all tests at a 1% significant <em>except</em> program expenditure and deficit using Augmented Dickey Fuller. Those last two tests differ from what’s reported in the paper.</p>
<p>The paper notes that it uses the Schwarz Information Criterion (SIC) for determining optimal lags in the DF-GLS test. It doesn’t specify what it’s using in the other two tests. For ADF and DF-GLS I used the Schwarz/Bayesian IC (BIC), <a href="https://en.wikipedia.org/wiki/Bayesian_information_criterion">which is just another name for SIC</a>. Phillips-Perron only uses 1 lag and then Newey-West for a long run variance estimator. I also ran these tests using Akaike IC (AIC) for optimal lags for ADF and DF-GLS, with similar results.</p>
<p>Again we can see that using the results with the data error more closely matches the table in the paper, specifically around resource revenue and deficits.</p>
</section>
<section id="the-model" class="level3">
<h3 class="anchored" data-anchor-id="the-model">The Model</h3>
<p>The conclusions from the paper are based on fitting a <a href="https://en.wikipedia.org/wiki/Vector_autoregression">VAR</a> to the first differenced data set we’ve been analyzing above. Let’s do that now and compare the results to the paper.</p>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;">def</span> fit_var(mdfl: pd.DataFrame) <span class="op" style="color: #5E5E5E;">-&gt;</span> statsmodels.tsa.vector_ar.var_model.VARResults:</span>
<span id="cb32-2">    <span class="co" style="color: #5E5E5E;">"""Fit a VAR to the model data.</span></span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;">    mdfl: pd.DataFrame</span></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;">        Input model data</span></span>
<span id="cb32-8"></span>
<span id="cb32-9"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb32-10"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb32-11"><span class="co" style="color: #5E5E5E;">    statsmodels.tsa.vector_ar.var_model.VarResults</span></span>
<span id="cb32-12"><span class="co" style="color: #5E5E5E;">        The fitted model</span></span>
<span id="cb32-13"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb32-14">    vec_df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb32-15">        model_df_first_diff(mdfl)</span>
<span id="cb32-16">        .drop(columns<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'natural_resource_revenue'</span>)</span>
<span id="cb32-17">        .dropna()</span>
<span id="cb32-18">    )</span>
<span id="cb32-19">    endog_df <span class="op" style="color: #5E5E5E;">=</span> vec_df[[</span>
<span id="cb32-20">        <span class="st" style="color: #20794D;">'nrri'</span>, <span class="st" style="color: #20794D;">'nrrd'</span>, <span class="st" style="color: #20794D;">'program_expenditure'</span>, <span class="st" style="color: #20794D;">'debt_service'</span>, <span class="st" style="color: #20794D;">'corporate_income_tax'</span>,</span>
<span id="cb32-21">         <span class="st" style="color: #20794D;">'personal_income_tax'</span>, <span class="st" style="color: #20794D;">'other_revenue'</span></span>
<span id="cb32-22">    ]]</span>
<span id="cb32-23">    exog_df <span class="op" style="color: #5E5E5E;">=</span> vec_df[[<span class="st" style="color: #20794D;">'ur_lag'</span>, <span class="st" style="color: #20794D;">'er_lag'</span>, <span class="st" style="color: #20794D;">'cad_usd_lag'</span>, <span class="st" style="color: #20794D;">'heritage_dummy'</span>]]</span>
<span id="cb32-24">    model <span class="op" style="color: #5E5E5E;">=</span> VAR(endog<span class="op" style="color: #5E5E5E;">=</span>endog_df, exog<span class="op" style="color: #5E5E5E;">=</span>exog_df, freq<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'AS'</span>)</span>
<span id="cb32-25">    <span class="co" style="color: #5E5E5E;"># Fit the model with 2 lags</span></span>
<span id="cb32-26">    results <span class="op" style="color: #5E5E5E;">=</span> model.fit(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb32-27">    <span class="cf" style="color: #003B4F;">return</span> results</span></code></pre></div>
</div>
<div class="cell" data-execution_count="34">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;">def</span> highlight_significance(val):</span>
<span id="cb33-2">    <span class="co" style="color: #5E5E5E;">"""Colour code statistical significance.</span></span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;">    Takes a scalar and returns a string with</span></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;">    the css property `'color: &lt;color&gt;'` where</span></span>
<span id="cb33-6"><span class="co" style="color: #5E5E5E;">    color is maroon for 1% significance, </span></span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;">    red for 5% significance,</span></span>
<span id="cb33-8"><span class="co" style="color: #5E5E5E;">    orange for 10%, and black otherwise</span></span>
<span id="cb33-9"></span>
<span id="cb33-10"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb33-11"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb33-12"><span class="co" style="color: #5E5E5E;">    val: float</span></span>
<span id="cb33-13"><span class="co" style="color: #5E5E5E;">        The p value of a test</span></span>
<span id="cb33-14"></span>
<span id="cb33-15"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb33-16"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb33-17"><span class="co" style="color: #5E5E5E;">    str:</span></span>
<span id="cb33-18"><span class="co" style="color: #5E5E5E;">        A formatted colour coded p value</span></span>
<span id="cb33-19"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb33-20"></span>
<span id="cb33-21">    <span class="cf" style="color: #003B4F;">if</span> val <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="fl" style="color: #AD0000;">0.01</span>:</span>
<span id="cb33-22">        color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'maroon'</span></span>
<span id="cb33-23">    <span class="cf" style="color: #003B4F;">elif</span> val <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="fl" style="color: #AD0000;">0.05</span>:</span>
<span id="cb33-24">        color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'red'</span></span>
<span id="cb33-25">    <span class="cf" style="color: #003B4F;">elif</span> val <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="fl" style="color: #AD0000;">0.1</span>:</span>
<span id="cb33-26">        color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'orange'</span></span>
<span id="cb33-27">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb33-28">        color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb33-29">    <span class="cf" style="color: #003B4F;">return</span> <span class="ss" style="color: #20794D;">f'color: </span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">results <span class="op" style="color: #5E5E5E;">=</span> fit_var(mdfl)</span>
<span id="cb34-2">results_err <span class="op" style="color: #5E5E5E;">=</span> fit_var(mdfl_err)</span>
<span id="cb34-3">summary <span class="op" style="color: #5E5E5E;">=</span> results.summary()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;"># Set up the rows and columns of my parameters to match the paper</span></span>
<span id="cb35-2">reindex_cols <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"program_expenditure"</span>, <span class="st" style="color: #20794D;">"debt_service"</span>, <span class="st" style="color: #20794D;">"corporate_income_tax"</span>, <span class="st" style="color: #20794D;">"personal_income_tax"</span>, <span class="st" style="color: #20794D;">"other_revenue"</span>, <span class="st" style="color: #20794D;">"nrri"</span>, <span class="st" style="color: #20794D;">"nrrd"</span>]</span>
<span id="cb35-3">index_order <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"nrri"</span>, <span class="st" style="color: #20794D;">"nrrd"</span>, <span class="st" style="color: #20794D;">"program_expenditure"</span>, <span class="st" style="color: #20794D;">"debt_service"</span>, <span class="st" style="color: #20794D;">"corporate_income_tax"</span>, <span class="st" style="color: #20794D;">"personal_income_tax"</span>, <span class="st" style="color: #20794D;">"other_revenue"</span>]</span>
<span id="cb35-4">reindex_rows <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(chain.from_iterable((<span class="ss" style="color: #20794D;">f"L1.</span><span class="sc" style="color: #5E5E5E;">{</span>row<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="ss" style="color: #20794D;">f"L2.</span><span class="sc" style="color: #5E5E5E;">{</span>row<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>) <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> index_order))</span></code></pre></div>
</div>
<p>Here’s the table from the paper:</p>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">Image(filename<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"img/ferede_tbl_a2.png"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-37-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">results.params.reindex(index<span class="op" style="color: #5E5E5E;">=</span>reindex_rows, columns<span class="op" style="color: #5E5E5E;">=</span>reindex_cols)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>program_expenditure</th>
      <th>debt_service</th>
      <th>corporate_income_tax</th>
      <th>personal_income_tax</th>
      <th>other_revenue</th>
      <th>nrri</th>
      <th>nrrd</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>L1.nrri</th>
      <td>0.307014</td>
      <td>-0.028267</td>
      <td>0.081846</td>
      <td>-0.052581</td>
      <td>-0.197417</td>
      <td>0.157775</td>
      <td>0.002814</td>
    </tr>
    <tr>
      <th>L2.nrri</th>
      <td>0.328607</td>
      <td>0.006210</td>
      <td>-0.044256</td>
      <td>-0.031283</td>
      <td>-0.073461</td>
      <td>0.059988</td>
      <td>-0.052033</td>
    </tr>
    <tr>
      <th>L1.nrrd</th>
      <td>0.131802</td>
      <td>-0.034380</td>
      <td>0.026578</td>
      <td>-0.144894</td>
      <td>0.193682</td>
      <td>-0.067386</td>
      <td>-0.333322</td>
    </tr>
    <tr>
      <th>L2.nrrd</th>
      <td>0.353466</td>
      <td>-0.020362</td>
      <td>0.089569</td>
      <td>-0.037287</td>
      <td>-0.147460</td>
      <td>0.110970</td>
      <td>-0.055394</td>
    </tr>
    <tr>
      <th>L1.program_expenditure</th>
      <td>-0.089949</td>
      <td>0.024739</td>
      <td>-0.000802</td>
      <td>-0.053868</td>
      <td>0.070080</td>
      <td>-0.065026</td>
      <td>-0.105625</td>
    </tr>
    <tr>
      <th>L2.program_expenditure</th>
      <td>-0.262484</td>
      <td>0.009716</td>
      <td>-0.031223</td>
      <td>0.042743</td>
      <td>0.410439</td>
      <td>0.025392</td>
      <td>-0.456895</td>
    </tr>
    <tr>
      <th>L1.debt_service</th>
      <td>0.794685</td>
      <td>0.401266</td>
      <td>-0.108643</td>
      <td>0.336733</td>
      <td>0.400447</td>
      <td>-2.370450</td>
      <td>-0.278888</td>
    </tr>
    <tr>
      <th>L2.debt_service</th>
      <td>-2.693856</td>
      <td>0.228409</td>
      <td>-0.088742</td>
      <td>-0.179124</td>
      <td>-0.041884</td>
      <td>0.290135</td>
      <td>-0.215989</td>
    </tr>
    <tr>
      <th>L1.corporate_income_tax</th>
      <td>-0.972853</td>
      <td>-0.092308</td>
      <td>-0.210123</td>
      <td>0.169059</td>
      <td>-0.071714</td>
      <td>-0.914462</td>
      <td>0.730905</td>
    </tr>
    <tr>
      <th>L2.corporate_income_tax</th>
      <td>0.088413</td>
      <td>-0.199031</td>
      <td>-0.206852</td>
      <td>0.245321</td>
      <td>-0.509617</td>
      <td>-0.683630</td>
      <td>-0.578293</td>
    </tr>
    <tr>
      <th>L1.personal_income_tax</th>
      <td>0.959002</td>
      <td>-0.041882</td>
      <td>0.292569</td>
      <td>-0.378646</td>
      <td>-0.250158</td>
      <td>0.347750</td>
      <td>0.862515</td>
    </tr>
    <tr>
      <th>L2.personal_income_tax</th>
      <td>0.814557</td>
      <td>0.084507</td>
      <td>-0.112748</td>
      <td>-0.099020</td>
      <td>-0.528812</td>
      <td>0.385575</td>
      <td>-0.226230</td>
    </tr>
    <tr>
      <th>L1.other_revenue</th>
      <td>0.347131</td>
      <td>-0.015834</td>
      <td>-0.042866</td>
      <td>-0.022883</td>
      <td>-0.296401</td>
      <td>0.224576</td>
      <td>-0.102018</td>
    </tr>
    <tr>
      <th>L2.other_revenue</th>
      <td>-0.140592</td>
      <td>-0.010601</td>
      <td>-0.009822</td>
      <td>-0.010749</td>
      <td>-0.339955</td>
      <td>0.385613</td>
      <td>0.043835</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">results.pvalues.reindex(index<span class="op" style="color: #5E5E5E;">=</span>reindex_rows, columns<span class="op" style="color: #5E5E5E;">=</span>reindex_cols).style.applymap(highlight_significance).<span class="bu" style="color: null;">format</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">{:.2%}</span><span class="st" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">

<style type="text/css">
#T_b41d0_row0_col0,#T_b41d0_row0_col1,#T_b41d0_row0_col2,#T_b41d0_row0_col3,#T_b41d0_row0_col4,#T_b41d0_row0_col5,#T_b41d0_row0_col6,#T_b41d0_row1_col1,#T_b41d0_row1_col2,#T_b41d0_row1_col3,#T_b41d0_row1_col4,#T_b41d0_row1_col5,#T_b41d0_row1_col6,#T_b41d0_row2_col0,#T_b41d0_row2_col1,#T_b41d0_row2_col2,#T_b41d0_row2_col4,#T_b41d0_row2_col5,#T_b41d0_row2_col6,#T_b41d0_row3_col1,#T_b41d0_row3_col2,#T_b41d0_row3_col3,#T_b41d0_row3_col4,#T_b41d0_row3_col5,#T_b41d0_row3_col6,#T_b41d0_row4_col0,#T_b41d0_row4_col1,#T_b41d0_row4_col2,#T_b41d0_row4_col3,#T_b41d0_row4_col4,#T_b41d0_row4_col5,#T_b41d0_row4_col6,#T_b41d0_row5_col0,#T_b41d0_row5_col1,#T_b41d0_row5_col2,#T_b41d0_row5_col3,#T_b41d0_row5_col5,#T_b41d0_row6_col0,#T_b41d0_row6_col2,#T_b41d0_row6_col3,#T_b41d0_row6_col4,#T_b41d0_row6_col6,#T_b41d0_row7_col1,#T_b41d0_row7_col2,#T_b41d0_row7_col3,#T_b41d0_row7_col4,#T_b41d0_row7_col5,#T_b41d0_row7_col6,#T_b41d0_row8_col0,#T_b41d0_row8_col1,#T_b41d0_row8_col2,#T_b41d0_row8_col3,#T_b41d0_row8_col4,#T_b41d0_row8_col6,#T_b41d0_row9_col0,#T_b41d0_row9_col2,#T_b41d0_row9_col3,#T_b41d0_row9_col4,#T_b41d0_row9_col5,#T_b41d0_row9_col6,#T_b41d0_row10_col0,#T_b41d0_row10_col1,#T_b41d0_row10_col4,#T_b41d0_row10_col5,#T_b41d0_row10_col6,#T_b41d0_row11_col0,#T_b41d0_row11_col1,#T_b41d0_row11_col2,#T_b41d0_row11_col3,#T_b41d0_row11_col4,#T_b41d0_row11_col5,#T_b41d0_row11_col6,#T_b41d0_row12_col0,#T_b41d0_row12_col1,#T_b41d0_row12_col2,#T_b41d0_row12_col3,#T_b41d0_row12_col4,#T_b41d0_row12_col5,#T_b41d0_row12_col6,#T_b41d0_row13_col0,#T_b41d0_row13_col1,#T_b41d0_row13_col2,#T_b41d0_row13_col3,#T_b41d0_row13_col6{
            color:  black;
        }#T_b41d0_row1_col0,#T_b41d0_row2_col3,#T_b41d0_row5_col4,#T_b41d0_row6_col1,#T_b41d0_row9_col1,#T_b41d0_row13_col5{
            color:  red;
        }#T_b41d0_row3_col0,#T_b41d0_row5_col6,#T_b41d0_row6_col5,#T_b41d0_row7_col0,#T_b41d0_row8_col5,#T_b41d0_row10_col2,#T_b41d0_row10_col3,#T_b41d0_row13_col4{
            color:  orange;
        }</style><table id="T_b41d0_"><thead>    <tr>        <th class="blank level0"></th>        <th class="col_heading level0 col0">program_expenditure</th>        <th class="col_heading level0 col1">debt_service</th>        <th class="col_heading level0 col2">corporate_income_tax</th>        <th class="col_heading level0 col3">personal_income_tax</th>        <th class="col_heading level0 col4">other_revenue</th>        <th class="col_heading level0 col5">nrri</th>        <th class="col_heading level0 col6">nrrd</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_b41d0_level0_row0" class="row_heading level0 row0">L1.nrri</th>
                        <td id="T_b41d0_row0_col0" class="data row0 col0">17.85%</td>
                        <td id="T_b41d0_row0_col1" class="data row0 col1">28.23%</td>
                        <td id="T_b41d0_row0_col2" class="data row0 col2">19.05%</td>
                        <td id="T_b41d0_row0_col3" class="data row0 col3">46.54%</td>
                        <td id="T_b41d0_row0_col4" class="data row0 col4">31.40%</td>
                        <td id="T_b41d0_row0_col5" class="data row0 col5">35.35%</td>
                        <td id="T_b41d0_row0_col6" class="data row0 col6">99.27%</td>
            </tr>
            <tr>
                        <th id="T_b41d0_level0_row1" class="row_heading level0 row1">L2.nrri</th>
                        <td id="T_b41d0_row1_col0" class="data row1 col0">3.41%</td>
                        <td id="T_b41d0_row1_col1" class="data row1 col1">72.82%</td>
                        <td id="T_b41d0_row1_col2" class="data row1 col2">29.76%</td>
                        <td id="T_b41d0_row1_col3" class="data row1 col3">52.28%</td>
                        <td id="T_b41d0_row1_col4" class="data row1 col4">58.14%</td>
                        <td id="T_b41d0_row1_col5" class="data row1 col5">60.37%</td>
                        <td id="T_b41d0_row1_col6" class="data row1 col6">80.42%</td>
            </tr>
            <tr>
                        <th id="T_b41d0_level0_row2" class="row_heading level0 row2">L1.nrrd</th>
                        <td id="T_b41d0_row2_col0" class="data row2 col0">54.73%</td>
                        <td id="T_b41d0_row2_col1" class="data row2 col1">17.31%</td>
                        <td id="T_b41d0_row2_col2" class="data row2 col2">65.78%</td>
                        <td id="T_b41d0_row2_col3" class="data row2 col3">3.61%</td>
                        <td id="T_b41d0_row2_col4" class="data row2 col4">30.34%</td>
                        <td id="T_b41d0_row2_col5" class="data row2 col5">67.97%</td>
                        <td id="T_b41d0_row2_col6" class="data row2 col6">26.07%</td>
            </tr>
            <tr>
                        <th id="T_b41d0_level0_row3" class="row_heading level0 row3">L2.nrrd</th>
                        <td id="T_b41d0_row3_col0" class="data row3 col0">8.86%</td>
                        <td id="T_b41d0_row3_col1" class="data row3 col1">39.46%</td>
                        <td id="T_b41d0_row3_col2" class="data row3 col2">11.53%</td>
                        <td id="T_b41d0_row3_col3" class="data row3 col3">56.93%</td>
                        <td id="T_b41d0_row3_col4" class="data row3 col4">40.83%</td>
                        <td id="T_b41d0_row3_col5" class="data row3 col5">47.32%</td>
                        <td id="T_b41d0_row3_col6" class="data row3 col6">84.37%</td>
            </tr>
            <tr>
                        <th id="T_b41d0_level0_row4" class="row_heading level0 row4">L1.program_expenditure</th>
                        <td id="T_b41d0_row4_col0" class="data row4 col0">63.72%</td>
                        <td id="T_b41d0_row4_col1" class="data row4 col1">26.03%</td>
                        <td id="T_b41d0_row4_col2" class="data row4 col2">98.78%</td>
                        <td id="T_b41d0_row4_col3" class="data row4 col3">37.09%</td>
                        <td id="T_b41d0_row4_col4" class="data row4 col4">66.89%</td>
                        <td id="T_b41d0_row4_col5" class="data row4 col5">64.73%</td>
                        <td id="T_b41d0_row4_col6" class="data row4 col6">68.24%</td>
            </tr>
            <tr>
                        <th id="T_b41d0_level0_row5" class="row_heading level0 row5">L2.program_expenditure</th>
                        <td id="T_b41d0_row5_col0" class="data row5 col0">16.67%</td>
                        <td id="T_b41d0_row5_col1" class="data row5 col1">65.69%</td>
                        <td id="T_b41d0_row5_col2" class="data row5 col2">54.83%</td>
                        <td id="T_b41d0_row5_col3" class="data row5 col3">47.56%</td>
                        <td id="T_b41d0_row5_col4" class="data row5 col4">1.18%</td>
                        <td id="T_b41d0_row5_col5" class="data row5 col5">85.75%</td>
                        <td id="T_b41d0_row5_col6" class="data row5 col6">7.53%</td>
            </tr>
            <tr>
                        <th id="T_b41d0_level0_row6" class="row_heading level0 row6">L1.debt_service</th>
                        <td id="T_b41d0_row6_col0" class="data row6 col0">62.80%</td>
                        <td id="T_b41d0_row6_col1" class="data row6 col1">3.37%</td>
                        <td id="T_b41d0_row6_col2" class="data row6 col2">80.89%</td>
                        <td id="T_b41d0_row6_col3" class="data row6 col3">51.54%</td>
                        <td id="T_b41d0_row6_col4" class="data row6 col4">77.63%</td>
                        <td id="T_b41d0_row6_col5" class="data row6 col5">5.24%</td>
                        <td id="T_b41d0_row6_col6" class="data row6 col6">90.00%</td>
            </tr>
            <tr>
                        <th id="T_b41d0_level0_row7" class="row_heading level0 row7">L2.debt_service</th>
                        <td id="T_b41d0_row7_col0" class="data row7 col0">9.99%</td>
                        <td id="T_b41d0_row7_col1" class="data row7 col1">22.60%</td>
                        <td id="T_b41d0_row7_col2" class="data row7 col2">84.32%</td>
                        <td id="T_b41d0_row7_col3" class="data row7 col3">72.89%</td>
                        <td id="T_b41d0_row7_col4" class="data row7 col4">97.63%</td>
                        <td id="T_b41d0_row7_col5" class="data row7 col5">81.21%</td>
                        <td id="T_b41d0_row7_col6" class="data row7 col6">92.24%</td>
            </tr>
            <tr>
                        <th id="T_b41d0_level0_row8" class="row_heading level0 row8">L1.corporate_income_tax</th>
                        <td id="T_b41d0_row8_col0" class="data row8 col0">17.66%</td>
                        <td id="T_b41d0_row8_col1" class="data row8 col1">26.58%</td>
                        <td id="T_b41d0_row8_col2" class="data row8 col2">28.68%</td>
                        <td id="T_b41d0_row8_col3" class="data row8 col3">45.69%</td>
                        <td id="T_b41d0_row8_col4" class="data row8 col4">90.77%</td>
                        <td id="T_b41d0_row8_col5" class="data row8 col5">8.83%</td>
                        <td id="T_b41d0_row8_col6" class="data row8 col6">45.31%</td>
            </tr>
            <tr>
                        <th id="T_b41d0_level0_row9" class="row_heading level0 row9">L2.corporate_income_tax</th>
                        <td id="T_b41d0_row9_col0" class="data row9 col0">90.24%</td>
                        <td id="T_b41d0_row9_col1" class="data row9 col1">1.66%</td>
                        <td id="T_b41d0_row9_col2" class="data row9 col2">29.52%</td>
                        <td id="T_b41d0_row9_col3" class="data row9 col3">28.12%</td>
                        <td id="T_b41d0_row9_col4" class="data row9 col4">41.09%</td>
                        <td id="T_b41d0_row9_col5" class="data row9 col5">20.34%</td>
                        <td id="T_b41d0_row9_col6" class="data row9 col6">55.35%</td>
            </tr>
            <tr>
                        <th id="T_b41d0_level0_row10" class="row_heading level0 row10">L1.personal_income_tax</th>
                        <td id="T_b41d0_row10_col0" class="data row10 col0">11.91%</td>
                        <td id="T_b41d0_row10_col1" class="data row10 col1">55.47%</td>
                        <td id="T_b41d0_row10_col2" class="data row10 col2">8.27%</td>
                        <td id="T_b41d0_row10_col3" class="data row10 col3">5.12%</td>
                        <td id="T_b41d0_row10_col4" class="data row10 col4">63.61%</td>
                        <td id="T_b41d0_row10_col5" class="data row10 col5">44.83%</td>
                        <td id="T_b41d0_row10_col6" class="data row10 col6">30.03%</td>
            </tr>
            <tr>
                        <th id="T_b41d0_level0_row11" class="row_heading level0 row11">L2.personal_income_tax</th>
                        <td id="T_b41d0_row11_col0" class="data row11 col0">12.28%</td>
                        <td id="T_b41d0_row11_col1" class="data row11 col1">16.47%</td>
                        <td id="T_b41d0_row11_col2" class="data row11 col2">43.56%</td>
                        <td id="T_b41d0_row11_col3" class="data row11 col3">55.23%</td>
                        <td id="T_b41d0_row11_col4" class="data row11 col4">24.36%</td>
                        <td id="T_b41d0_row11_col5" class="data row11 col5">32.70%</td>
                        <td id="T_b41d0_row11_col6" class="data row11 col6">75.15%</td>
            </tr>
            <tr>
                        <th id="T_b41d0_level0_row12" class="row_heading level0 row12">L1.other_revenue</th>
                        <td id="T_b41d0_row12_col0" class="data row12 col0">11.25%</td>
                        <td id="T_b41d0_row12_col1" class="data row12 col1">52.98%</td>
                        <td id="T_b41d0_row12_col2" class="data row12 col2">47.45%</td>
                        <td id="T_b41d0_row12_col3" class="data row12 col3">74.03%</td>
                        <td id="T_b41d0_row12_col4" class="data row12 col4">11.48%</td>
                        <td id="T_b41d0_row12_col5" class="data row12 col5">16.83%</td>
                        <td id="T_b41d0_row12_col6" class="data row12 col6">73.04%</td>
            </tr>
            <tr>
                        <th id="T_b41d0_level0_row13" class="row_heading level0 row13">L2.other_revenue</th>
                        <td id="T_b41d0_row13_col0" class="data row13 col0">54.20%</td>
                        <td id="T_b41d0_row13_col1" class="data row13 col1">68.98%</td>
                        <td id="T_b41d0_row13_col2" class="data row13 col2">87.64%</td>
                        <td id="T_b41d0_row13_col3" class="data row13 col3">88.26%</td>
                        <td id="T_b41d0_row13_col4" class="data row13 col4">8.61%</td>
                        <td id="T_b41d0_row13_col5" class="data row13 col5">2.48%</td>
                        <td id="T_b41d0_row13_col6" class="data row13 col6">88.83%</td>
            </tr>
    </tbody></table>
</div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">results_err.params.reindex(index<span class="op" style="color: #5E5E5E;">=</span>reindex_rows, columns<span class="op" style="color: #5E5E5E;">=</span>reindex_cols)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>program_expenditure</th>
      <th>debt_service</th>
      <th>corporate_income_tax</th>
      <th>personal_income_tax</th>
      <th>other_revenue</th>
      <th>nrri</th>
      <th>nrrd</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>L1.nrri</th>
      <td>0.531582</td>
      <td>-0.024542</td>
      <td>0.107731</td>
      <td>-0.123072</td>
      <td>-0.150617</td>
      <td>0.208281</td>
      <td>-0.080868</td>
    </tr>
    <tr>
      <th>L2.nrri</th>
      <td>-0.184916</td>
      <td>-0.003392</td>
      <td>-0.079855</td>
      <td>-0.031832</td>
      <td>-0.134564</td>
      <td>0.023580</td>
      <td>0.076075</td>
    </tr>
    <tr>
      <th>L1.nrrd</th>
      <td>-0.164689</td>
      <td>-0.033454</td>
      <td>0.002593</td>
      <td>-0.085661</td>
      <td>0.110608</td>
      <td>-0.058941</td>
      <td>-0.105753</td>
    </tr>
    <tr>
      <th>L2.nrrd</th>
      <td>0.179398</td>
      <td>-0.020179</td>
      <td>0.072508</td>
      <td>0.027891</td>
      <td>-0.178763</td>
      <td>0.081864</td>
      <td>-0.032297</td>
    </tr>
    <tr>
      <th>L1.program_expenditure</th>
      <td>-0.148569</td>
      <td>0.024375</td>
      <td>0.010583</td>
      <td>-0.035676</td>
      <td>0.095480</td>
      <td>-0.051153</td>
      <td>-0.027252</td>
    </tr>
    <tr>
      <th>L2.program_expenditure</th>
      <td>-0.274168</td>
      <td>0.012469</td>
      <td>-0.028204</td>
      <td>0.060072</td>
      <td>0.419366</td>
      <td>0.043190</td>
      <td>-0.266589</td>
    </tr>
    <tr>
      <th>L1.debt_service</th>
      <td>-0.138827</td>
      <td>0.391381</td>
      <td>-0.192682</td>
      <td>0.456206</td>
      <td>0.250624</td>
      <td>-2.379002</td>
      <td>0.182134</td>
    </tr>
    <tr>
      <th>L2.debt_service</th>
      <td>-1.839879</td>
      <td>0.244616</td>
      <td>0.030729</td>
      <td>-0.321701</td>
      <td>0.208719</td>
      <td>0.387627</td>
      <td>0.026273</td>
    </tr>
    <tr>
      <th>L1.corporate_income_tax</th>
      <td>-0.591167</td>
      <td>-0.087419</td>
      <td>-0.166213</td>
      <td>0.193455</td>
      <td>-0.009423</td>
      <td>-1.069105</td>
      <td>0.084121</td>
    </tr>
    <tr>
      <th>L2.corporate_income_tax</th>
      <td>0.986182</td>
      <td>-0.171169</td>
      <td>-0.180347</td>
      <td>0.219469</td>
      <td>-0.439124</td>
      <td>-0.441616</td>
      <td>0.337464</td>
    </tr>
    <tr>
      <th>L1.personal_income_tax</th>
      <td>0.446547</td>
      <td>-0.050872</td>
      <td>0.281996</td>
      <td>-0.364826</td>
      <td>-0.291701</td>
      <td>0.365623</td>
      <td>0.499642</td>
    </tr>
    <tr>
      <th>L2.personal_income_tax</th>
      <td>0.537147</td>
      <td>0.068406</td>
      <td>-0.161794</td>
      <td>-0.159843</td>
      <td>-0.598672</td>
      <td>0.542697</td>
      <td>-0.054906</td>
    </tr>
    <tr>
      <th>L1.other_revenue</th>
      <td>0.319686</td>
      <td>-0.014068</td>
      <td>-0.036482</td>
      <td>-0.021636</td>
      <td>-0.280981</td>
      <td>0.235076</td>
      <td>-0.052564</td>
    </tr>
    <tr>
      <th>L2.other_revenue</th>
      <td>-0.328932</td>
      <td>-0.009975</td>
      <td>-0.017606</td>
      <td>0.013375</td>
      <td>-0.362590</td>
      <td>0.255418</td>
      <td>-0.122366</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">results_err.pvalues.reindex(index<span class="op" style="color: #5E5E5E;">=</span>reindex_rows, columns<span class="op" style="color: #5E5E5E;">=</span>reindex_cols).style.applymap(highlight_significance).<span class="bu" style="color: null;">format</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">{:.2%}</span><span class="st" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">

<style type="text/css">
#T_e8301_row0_col0,#T_e8301_row6_col5,#T_e8301_row8_col5,#T_e8301_row10_col3,#T_e8301_row13_col4{
            color:  orange;
        }#T_e8301_row0_col1,#T_e8301_row0_col2,#T_e8301_row0_col3,#T_e8301_row0_col4,#T_e8301_row0_col5,#T_e8301_row0_col6,#T_e8301_row1_col0,#T_e8301_row1_col1,#T_e8301_row1_col2,#T_e8301_row1_col3,#T_e8301_row1_col4,#T_e8301_row1_col5,#T_e8301_row1_col6,#T_e8301_row2_col0,#T_e8301_row2_col1,#T_e8301_row2_col2,#T_e8301_row2_col3,#T_e8301_row2_col4,#T_e8301_row2_col5,#T_e8301_row2_col6,#T_e8301_row3_col0,#T_e8301_row3_col1,#T_e8301_row3_col2,#T_e8301_row3_col3,#T_e8301_row3_col4,#T_e8301_row3_col5,#T_e8301_row3_col6,#T_e8301_row4_col0,#T_e8301_row4_col1,#T_e8301_row4_col2,#T_e8301_row4_col3,#T_e8301_row4_col4,#T_e8301_row4_col5,#T_e8301_row4_col6,#T_e8301_row5_col0,#T_e8301_row5_col1,#T_e8301_row5_col2,#T_e8301_row5_col3,#T_e8301_row5_col5,#T_e8301_row5_col6,#T_e8301_row6_col0,#T_e8301_row6_col2,#T_e8301_row6_col3,#T_e8301_row6_col4,#T_e8301_row6_col6,#T_e8301_row7_col0,#T_e8301_row7_col1,#T_e8301_row7_col2,#T_e8301_row7_col3,#T_e8301_row7_col4,#T_e8301_row7_col5,#T_e8301_row7_col6,#T_e8301_row8_col0,#T_e8301_row8_col1,#T_e8301_row8_col2,#T_e8301_row8_col3,#T_e8301_row8_col4,#T_e8301_row8_col6,#T_e8301_row9_col0,#T_e8301_row9_col2,#T_e8301_row9_col3,#T_e8301_row9_col4,#T_e8301_row9_col5,#T_e8301_row9_col6,#T_e8301_row10_col0,#T_e8301_row10_col1,#T_e8301_row10_col2,#T_e8301_row10_col4,#T_e8301_row10_col5,#T_e8301_row10_col6,#T_e8301_row11_col0,#T_e8301_row11_col1,#T_e8301_row11_col2,#T_e8301_row11_col3,#T_e8301_row11_col4,#T_e8301_row11_col5,#T_e8301_row11_col6,#T_e8301_row12_col0,#T_e8301_row12_col1,#T_e8301_row12_col2,#T_e8301_row12_col3,#T_e8301_row12_col4,#T_e8301_row12_col5,#T_e8301_row12_col6,#T_e8301_row13_col0,#T_e8301_row13_col1,#T_e8301_row13_col2,#T_e8301_row13_col3,#T_e8301_row13_col5,#T_e8301_row13_col6{
            color:  black;
        }#T_e8301_row5_col4,#T_e8301_row6_col1,#T_e8301_row9_col1{
            color:  red;
        }</style><table id="T_e8301_"><thead>    <tr>        <th class="blank level0"></th>        <th class="col_heading level0 col0">program_expenditure</th>        <th class="col_heading level0 col1">debt_service</th>        <th class="col_heading level0 col2">corporate_income_tax</th>        <th class="col_heading level0 col3">personal_income_tax</th>        <th class="col_heading level0 col4">other_revenue</th>        <th class="col_heading level0 col5">nrri</th>        <th class="col_heading level0 col6">nrrd</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_e8301_level0_row0" class="row_heading level0 row0">L1.nrri</th>
                        <td id="T_e8301_row0_col0" class="data row0 col0">6.09%</td>
                        <td id="T_e8301_row0_col1" class="data row0 col1">42.34%</td>
                        <td id="T_e8301_row0_col2" class="data row0 col2">12.95%</td>
                        <td id="T_e8301_row0_col3" class="data row0 col3">12.90%</td>
                        <td id="T_e8301_row0_col4" class="data row0 col4">50.73%</td>
                        <td id="T_e8301_row0_col5" class="data row0 col5">26.95%</td>
                        <td id="T_e8301_row0_col6" class="data row0 col6">75.32%</td>
            </tr>
            <tr>
                        <th id="T_e8301_level0_row1" class="row_heading level0 row1">L2.nrri</th>
                        <td id="T_e8301_row1_col0" class="data row1 col0">53.56%</td>
                        <td id="T_e8301_row1_col1" class="data row1 col1">91.63%</td>
                        <td id="T_e8301_row1_col2" class="data row1 col2">28.56%</td>
                        <td id="T_e8301_row1_col3" class="data row1 col3">70.91%</td>
                        <td id="T_e8301_row1_col4" class="data row1 col4">57.36%</td>
                        <td id="T_e8301_row1_col5" class="data row1 col5">90.54%</td>
                        <td id="T_e8301_row1_col6" class="data row1 col6">77.87%</td>
            </tr>
            <tr>
                        <th id="T_e8301_level0_row2" class="row_heading level0 row2">L1.nrrd</th>
                        <td id="T_e8301_row2_col0" class="data row2 col0">54.19%</td>
                        <td id="T_e8301_row2_col1" class="data row2 col1">25.17%</td>
                        <td id="T_e8301_row2_col2" class="data row2 col2">96.94%</td>
                        <td id="T_e8301_row2_col3" class="data row2 col3">26.71%</td>
                        <td id="T_e8301_row2_col4" class="data row2 col4">60.91%</td>
                        <td id="T_e8301_row2_col5" class="data row2 col5">74.28%</td>
                        <td id="T_e8301_row2_col6" class="data row2 col6">66.59%</td>
            </tr>
            <tr>
                        <th id="T_e8301_level0_row3" class="row_heading level0 row3">L2.nrrd</th>
                        <td id="T_e8301_row3_col0" class="data row3 col0">49.68%</td>
                        <td id="T_e8301_row3_col1" class="data row3 col1">47.94%</td>
                        <td id="T_e8301_row3_col2" class="data row3 col2">27.30%</td>
                        <td id="T_e8301_row3_col3" class="data row3 col3">71.17%</td>
                        <td id="T_e8301_row3_col4" class="data row3 col4">39.79%</td>
                        <td id="T_e8301_row3_col5" class="data row3 col5">64.10%</td>
                        <td id="T_e8301_row3_col6" class="data row3 col6">89.27%</td>
            </tr>
            <tr>
                        <th id="T_e8301_level0_row4" class="row_heading level0 row4">L1.program_expenditure</th>
                        <td id="T_e8301_row4_col0" class="data row4 col0">47.97%</td>
                        <td id="T_e8301_row4_col1" class="data row4 col1">28.33%</td>
                        <td id="T_e8301_row4_col2" class="data row4 col2">84.07%</td>
                        <td id="T_e8301_row4_col3" class="data row4 col3">55.26%</td>
                        <td id="T_e8301_row4_col4" class="data row4 col4">57.06%</td>
                        <td id="T_e8301_row4_col5" class="data row4 col5">71.44%</td>
                        <td id="T_e8301_row4_col6" class="data row4 col6">88.63%</td>
            </tr>
            <tr>
                        <th id="T_e8301_level0_row5" class="row_heading level0 row5">L2.program_expenditure</th>
                        <td id="T_e8301_row5_col0" class="data row5 col0">18.15%</td>
                        <td id="T_e8301_row5_col1" class="data row5 col1">57.39%</td>
                        <td id="T_e8301_row5_col2" class="data row5 col2">58.33%</td>
                        <td id="T_e8301_row5_col3" class="data row5 col3">30.58%</td>
                        <td id="T_e8301_row5_col4" class="data row5 col4">1.07%</td>
                        <td id="T_e8301_row5_col5" class="data row5 col5">75.16%</td>
                        <td id="T_e8301_row5_col6" class="data row5 col6">15.20%</td>
            </tr>
            <tr>
                        <th id="T_e8301_level0_row6" class="row_heading level0 row6">L1.debt_service</th>
                        <td id="T_e8301_row6_col0" class="data row6 col0">93.96%</td>
                        <td id="T_e8301_row6_col1" class="data row6 col1">4.82%</td>
                        <td id="T_e8301_row6_col2" class="data row6 col2">67.48%</td>
                        <td id="T_e8301_row6_col3" class="data row6 col3">38.39%</td>
                        <td id="T_e8301_row6_col4" class="data row6 col4">86.44%</td>
                        <td id="T_e8301_row6_col5" class="data row6 col5">5.10%</td>
                        <td id="T_e8301_row6_col6" class="data row6 col6">91.27%</td>
            </tr>
            <tr>
                        <th id="T_e8301_level0_row7" class="row_heading level0 row7">L2.debt_service</th>
                        <td id="T_e8301_row7_col0" class="data row7 col0">31.50%</td>
                        <td id="T_e8301_row7_col1" class="data row7 col1">21.64%</td>
                        <td id="T_e8301_row7_col2" class="data row7 col2">94.66%</td>
                        <td id="T_e8301_row7_col3" class="data row7 col3">53.88%</td>
                        <td id="T_e8301_row7_col4" class="data row7 col4">88.68%</td>
                        <td id="T_e8301_row7_col5" class="data row7 col5">75.02%</td>
                        <td id="T_e8301_row7_col6" class="data row7 col6">98.74%</td>
            </tr>
            <tr>
                        <th id="T_e8301_level0_row8" class="row_heading level0 row8">L1.corporate_income_tax</th>
                        <td id="T_e8301_row8_col0" class="data row8 col0">47.78%</td>
                        <td id="T_e8301_row8_col1" class="data row8 col1">33.14%</td>
                        <td id="T_e8301_row8_col2" class="data row8 col2">42.56%</td>
                        <td id="T_e8301_row8_col3" class="data row8 col3">41.64%</td>
                        <td id="T_e8301_row8_col4" class="data row8 col4">98.87%</td>
                        <td id="T_e8301_row8_col5" class="data row8 col5">5.35%</td>
                        <td id="T_e8301_row8_col6" class="data row8 col6">91.13%</td>
            </tr>
            <tr>
                        <th id="T_e8301_level0_row9" class="row_heading level0 row9">L2.corporate_income_tax</th>
                        <td id="T_e8301_row9_col0" class="data row9 col0">17.90%</td>
                        <td id="T_e8301_row9_col1" class="data row9 col1">3.09%</td>
                        <td id="T_e8301_row9_col2" class="data row9 col2">32.66%</td>
                        <td id="T_e8301_row9_col3" class="data row9 col3">29.54%</td>
                        <td id="T_e8301_row9_col4" class="data row9 col4">45.50%</td>
                        <td id="T_e8301_row9_col5" class="data row9 col5">36.55%</td>
                        <td id="T_e8301_row9_col6" class="data row9 col6">61.21%</td>
            </tr>
            <tr>
                        <th id="T_e8301_level0_row10" class="row_heading level0 row10">L1.personal_income_tax</th>
                        <td id="T_e8301_row10_col0" class="data row10 col0">51.65%</td>
                        <td id="T_e8301_row10_col1" class="data row10 col1">49.41%</td>
                        <td id="T_e8301_row10_col2" class="data row10 col2">10.20%</td>
                        <td id="T_e8301_row10_col3" class="data row10 col3">6.37%</td>
                        <td id="T_e8301_row10_col4" class="data row10 col4">59.67%</td>
                        <td id="T_e8301_row10_col5" class="data row10 col5">42.44%</td>
                        <td id="T_e8301_row10_col6" class="data row10 col6">42.34%</td>
            </tr>
            <tr>
                        <th id="T_e8301_level0_row11" class="row_heading level0 row11">L2.personal_income_tax</th>
                        <td id="T_e8301_row11_col0" class="data row11 col0">39.82%</td>
                        <td id="T_e8301_row11_col1" class="data row11 col1">31.95%</td>
                        <td id="T_e8301_row11_col2" class="data row11 col2">30.98%</td>
                        <td id="T_e8301_row11_col3" class="data row11 col3">37.91%</td>
                        <td id="T_e8301_row11_col4" class="data row11 col4">23.97%</td>
                        <td id="T_e8301_row11_col5" class="data row11 col5">19.93%</td>
                        <td id="T_e8301_row11_col6" class="data row11 col6">92.41%</td>
            </tr>
            <tr>
                        <th id="T_e8301_level0_row12" class="row_heading level0 row12">L1.other_revenue</th>
                        <td id="T_e8301_row12_col0" class="data row12 col0">16.84%</td>
                        <td id="T_e8301_row12_col1" class="data row12 col1">57.49%</td>
                        <td id="T_e8301_row12_col2" class="data row12 col2">53.04%</td>
                        <td id="T_e8301_row12_col3" class="data row12 col3">74.43%</td>
                        <td id="T_e8301_row12_col4" class="data row12 col4">13.07%</td>
                        <td id="T_e8301_row12_col5" class="data row12 col5">12.78%</td>
                        <td id="T_e8301_row12_col6" class="data row12 col6">80.28%</td>
            </tr>
            <tr>
                        <th id="T_e8301_level0_row13" class="row_heading level0 row13">L2.other_revenue</th>
                        <td id="T_e8301_row13_col0" class="data row13 col0">18.72%</td>
                        <td id="T_e8301_row13_col1" class="data row13 col1">71.13%</td>
                        <td id="T_e8301_row13_col2" class="data row13 col2">77.81%</td>
                        <td id="T_e8301_row13_col3" class="data row13 col3">85.12%</td>
                        <td id="T_e8301_row13_col4" class="data row13 col4">6.95%</td>
                        <td id="T_e8301_row13_col5" class="data row13 col5">12.35%</td>
                        <td id="T_e8301_row13_col6" class="data row13 col6">58.85%</td>
            </tr>
    </tbody></table>
</div>
</div>
<p>Once again, my results with the data error included are much closer to the original paper results. Note that without the data error, program spending is shown to rise in response to an increase <em>or</em> decrease in natural resource revenue, but only on the second lag (at least at a statistically significant level. That’s completely contrary to the main thesis of the paper. Now, given that I’ve shown with the corrected data set that budget deficits are stationary in levels, maybe a more appropriate form of analysis would have been to use a VECM as the paper states it would have been, but from this I can say that the data error has led to a significant change in the outcome of the analysis.</p>
</section>
<section id="impulse-response-functions" class="level3">
<h3 class="anchored" data-anchor-id="impulse-response-functions">Impulse Response Functions</h3>
<p>The actual results of the paper involve taking the estimated impulse response functions derived from the VAR model and examining their implications. Given the results above I’m not sure there’s a lot of value in reproducing all of the other results of this model, but I do want to at least reproduce the IRFs.</p>
<div class="cell" data-execution_count="42">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;">def</span> irf_tbl(result: statsmodels.tsa.vector_ar.var_model.VARResults, impulse: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb41-2">    <span class="co" style="color: #5E5E5E;">"""Show the IRF as in table 3 of the paper.</span></span>
<span id="cb41-3"></span>
<span id="cb41-4"><span class="co" style="color: #5E5E5E;">    Parameters</span></span>
<span id="cb41-5"><span class="co" style="color: #5E5E5E;">    ----------</span></span>
<span id="cb41-6"><span class="co" style="color: #5E5E5E;">    result: statsmodels.tsa.vector_ar.var_model.VARResults</span></span>
<span id="cb41-7"><span class="co" style="color: #5E5E5E;">        The fitted VAR</span></span>
<span id="cb41-8"></span>
<span id="cb41-9"><span class="co" style="color: #5E5E5E;">    impulse: str</span></span>
<span id="cb41-10"><span class="co" style="color: #5E5E5E;">        The impulse function, either an increase or decrease in natural resource revenue</span></span>
<span id="cb41-11"></span>
<span id="cb41-12"><span class="co" style="color: #5E5E5E;">    Returns</span></span>
<span id="cb41-13"><span class="co" style="color: #5E5E5E;">    -------</span></span>
<span id="cb41-14"><span class="co" style="color: #5E5E5E;">    pd.DataFrame</span></span>
<span id="cb41-15"><span class="co" style="color: #5E5E5E;">        A summary table</span></span>
<span id="cb41-16"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb41-17">    irf <span class="op" style="color: #5E5E5E;">=</span> result.irf()</span>
<span id="cb41-18">    irf_stderr <span class="op" style="color: #5E5E5E;">=</span> irf.stderr()</span>
<span id="cb41-19">    irfs <span class="op" style="color: #5E5E5E;">=</span> irf.irfs</span>
<span id="cb41-20">    params <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(results.params.columns)</span>
<span id="cb41-21"></span>
<span id="cb41-22">    <span class="kw" style="color: #003B4F;">def</span> _impulse_response(impulse: <span class="bu" style="color: null;">str</span>, response: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb41-23">        <span class="co" style="color: #5E5E5E;">"""Get a specific IRF out of the big array.</span></span>
<span id="cb41-24"></span>
<span id="cb41-25"><span class="co" style="color: #5E5E5E;">        Parameters</span></span>
<span id="cb41-26"><span class="co" style="color: #5E5E5E;">        ----------</span></span>
<span id="cb41-27"><span class="co" style="color: #5E5E5E;">        impulse: str</span></span>
<span id="cb41-28"><span class="co" style="color: #5E5E5E;">            The impulse function</span></span>
<span id="cb41-29"><span class="co" style="color: #5E5E5E;">        response: str</span></span>
<span id="cb41-30"><span class="co" style="color: #5E5E5E;">            The response function</span></span>
<span id="cb41-31"></span>
<span id="cb41-32"><span class="co" style="color: #5E5E5E;">        Returns</span></span>
<span id="cb41-33"><span class="co" style="color: #5E5E5E;">        -------</span></span>
<span id="cb41-34"><span class="co" style="color: #5E5E5E;">        pd.DataFrame</span></span>
<span id="cb41-35"><span class="co" style="color: #5E5E5E;">            The 3 period IRF</span></span>
<span id="cb41-36"><span class="co" style="color: #5E5E5E;">        """</span></span>
<span id="cb41-37">        imp_ind <span class="op" style="color: #5E5E5E;">=</span> params.index(impulse)</span>
<span id="cb41-38">        res_ind <span class="op" style="color: #5E5E5E;">=</span> params.index(response)</span>
<span id="cb41-39">        ir <span class="op" style="color: #5E5E5E;">=</span> irfs[:, res_ind, imp_ind]</span>
<span id="cb41-40">        se <span class="op" style="color: #5E5E5E;">=</span> irf_stderr[:, res_ind, imp_ind]</span>
<span id="cb41-41">        imp_name <span class="op" style="color: #5E5E5E;">=</span> response <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'_impulse'</span></span>
<span id="cb41-42">        se_name <span class="op" style="color: #5E5E5E;">=</span> response <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'_se'</span></span>
<span id="cb41-43">        df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({imp_name: ir, se_name: se})</span>
<span id="cb41-44">        <span class="cf" style="color: #003B4F;">return</span> df.loc[<span class="dv" style="color: #AD0000;">1</span>:<span class="dv" style="color: #AD0000;">3</span>].T</span>
<span id="cb41-45"></span>
<span id="cb41-46">    responses <span class="op" style="color: #5E5E5E;">=</span> params[<span class="dv" style="color: #AD0000;">2</span>:]</span>
<span id="cb41-47">    <span class="cf" style="color: #003B4F;">return</span> pd.concat([_impulse_response(impulse, response) <span class="cf" style="color: #003B4F;">for</span> response <span class="kw" style="color: #003B4F;">in</span> responses])</span></code></pre></div>
</details>
</div>
<section id="table-3" class="level4">
<h4 class="anchored" data-anchor-id="table-3">Table 3</h4>
<p>IMPACTS ON ALBERTA’S BUDGET OF A ONE-DOLLAR INNOVATION IN NON-RENEWABLE-RESOURCE REVENUE (ASYMMETRIC CASE), 1970/71–2016/17</p>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">Image(filename<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"img/ferede_tbl_3.png"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-43-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">irf_tbl(results, <span class="st" style="color: #20794D;">"nrrd"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>program_expenditure_impulse</th>
      <td>0.131802</td>
      <td>0.152091</td>
      <td>-0.263057</td>
    </tr>
    <tr>
      <th>program_expenditure_se</th>
      <td>0.219009</td>
      <td>0.213435</td>
      <td>0.189561</td>
    </tr>
    <tr>
      <th>debt_service_impulse</th>
      <td>-0.034380</td>
      <td>-0.016984</td>
      <td>-0.025572</td>
    </tr>
    <tr>
      <th>debt_service_se</th>
      <td>0.025235</td>
      <td>0.026153</td>
      <td>0.023777</td>
    </tr>
    <tr>
      <th>corporate_income_tax_impulse</th>
      <td>0.026578</td>
      <td>0.022545</td>
      <td>0.014045</td>
    </tr>
    <tr>
      <th>corporate_income_tax_se</th>
      <td>0.060010</td>
      <td>0.062050</td>
      <td>0.049948</td>
    </tr>
    <tr>
      <th>personal_income_tax_impulse</th>
      <td>-0.144894</td>
      <td>0.050801</td>
      <td>0.023045</td>
    </tr>
    <tr>
      <th>personal_income_tax_se</th>
      <td>0.069135</td>
      <td>0.090279</td>
      <td>0.082072</td>
    </tr>
    <tr>
      <th>other_revenue_impulse</th>
      <td>0.193682</td>
      <td>-0.226313</td>
      <td>0.116648</td>
    </tr>
    <tr>
      <th>other_revenue_se</th>
      <td>0.188179</td>
      <td>0.190130</td>
      <td>0.169276</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">irf_tbl(results, <span class="st" style="color: #20794D;">"nrri"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>program_expenditure_impulse</th>
      <td>0.307014</td>
      <td>0.128759</td>
      <td>0.032942</td>
    </tr>
    <tr>
      <th>program_expenditure_se</th>
      <td>0.228184</td>
      <td>0.200129</td>
      <td>0.172849</td>
    </tr>
    <tr>
      <th>debt_service_impulse</th>
      <td>-0.028267</td>
      <td>-0.004321</td>
      <td>-0.011658</td>
    </tr>
    <tr>
      <th>debt_service_se</th>
      <td>0.026292</td>
      <td>0.026157</td>
      <td>0.025746</td>
    </tr>
    <tr>
      <th>corporate_income_tax_impulse</th>
      <td>0.081846</td>
      <td>-0.052562</td>
      <td>-0.019982</td>
    </tr>
    <tr>
      <th>corporate_income_tax_se</th>
      <td>0.062524</td>
      <td>0.057369</td>
      <td>0.041195</td>
    </tr>
    <tr>
      <th>personal_income_tax_impulse</th>
      <td>-0.052581</td>
      <td>-0.027779</td>
      <td>0.040890</td>
    </tr>
    <tr>
      <th>personal_income_tax_se</th>
      <td>0.072031</td>
      <td>0.085436</td>
      <td>0.068562</td>
    </tr>
    <tr>
      <th>other_revenue_impulse</th>
      <td>-0.197417</td>
      <td>-0.028068</td>
      <td>0.187637</td>
    </tr>
    <tr>
      <th>other_revenue_se</th>
      <td>0.196063</td>
      <td>0.172347</td>
      <td>0.147472</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">irf_tbl(results_err, <span class="st" style="color: #20794D;">"nrrd"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>program_expenditure_impulse</th>
      <td>-0.164689</td>
      <td>0.190170</td>
      <td>0.024520</td>
    </tr>
    <tr>
      <th>program_expenditure_se</th>
      <td>0.270039</td>
      <td>0.264733</td>
      <td>0.231589</td>
    </tr>
    <tr>
      <th>debt_service_impulse</th>
      <td>-0.033454</td>
      <td>-0.029727</td>
      <td>-0.027865</td>
    </tr>
    <tr>
      <th>debt_service_se</th>
      <td>0.029185</td>
      <td>0.033489</td>
      <td>0.028892</td>
    </tr>
    <tr>
      <th>corporate_income_tax_impulse</th>
      <td>0.002593</td>
      <td>0.041965</td>
      <td>0.055297</td>
    </tr>
    <tr>
      <th>corporate_income_tax_se</th>
      <td>0.067657</td>
      <td>0.068952</td>
      <td>0.054178</td>
    </tr>
    <tr>
      <th>personal_income_tax_impulse</th>
      <td>-0.085661</td>
      <td>0.064177</td>
      <td>-0.029006</td>
    </tr>
    <tr>
      <th>personal_income_tax_se</th>
      <td>0.077188</td>
      <td>0.085444</td>
      <td>0.072486</td>
    </tr>
    <tr>
      <th>other_revenue_impulse</th>
      <td>0.110608</td>
      <td>-0.211807</td>
      <td>-0.018863</td>
    </tr>
    <tr>
      <th>other_revenue_se</th>
      <td>0.216285</td>
      <td>0.206303</td>
      <td>0.197149</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">irf_tbl(results_err, <span class="st" style="color: #20794D;">"nrri"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>program_expenditure_impulse</th>
      <td>0.531582</td>
      <td>-0.303243</td>
      <td>-0.034754</td>
    </tr>
    <tr>
      <th>program_expenditure_se</th>
      <td>0.283645</td>
      <td>0.282106</td>
      <td>0.247443</td>
    </tr>
    <tr>
      <th>debt_service_impulse</th>
      <td>-0.024542</td>
      <td>-0.003484</td>
      <td>-0.020839</td>
    </tr>
    <tr>
      <th>debt_service_se</th>
      <td>0.030655</td>
      <td>0.033327</td>
      <td>0.030126</td>
    </tr>
    <tr>
      <th>corporate_income_tax_impulse</th>
      <td>0.107731</td>
      <td>-0.094389</td>
      <td>-0.033291</td>
    </tr>
    <tr>
      <th>corporate_income_tax_se</th>
      <td>0.071066</td>
      <td>0.074045</td>
      <td>0.058701</td>
    </tr>
    <tr>
      <th>personal_income_tax_impulse</th>
      <td>-0.123072</td>
      <td>-0.011699</td>
      <td>0.079664</td>
    </tr>
    <tr>
      <th>personal_income_tax_se</th>
      <td>0.081077</td>
      <td>0.093111</td>
      <td>0.078465</td>
    </tr>
    <tr>
      <th>other_revenue_impulse</th>
      <td>-0.150617</td>
      <td>-0.053069</td>
      <td>0.289039</td>
    </tr>
    <tr>
      <th>other_revenue_se</th>
      <td>0.227183</td>
      <td>0.225741</td>
      <td>0.202924</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Same patters as we’ve seen above, the results with the data error included are pretty close to what the paper reports.</p>
</section>
<section id="plot-the-irfs" class="level4">
<h4 class="anchored" data-anchor-id="plot-the-irfs">Plot the IRFs</h4>
<p>Ok, this is the last bit I want to reproduce, just because IRF charts look cool so it would be a shame to leave them out.</p>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">Image(filename<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"img/ferede_fig_3.png"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-48-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">results.irf().plot(impulse<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'nrri'</span>, response<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'program_expenditure'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-49-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">results.irf().plot(impulse<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'nrrd'</span>, response<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'program_expenditure'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-50-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">results_err.irf().plot(impulse<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'nrri'</span>, response<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'program_expenditure'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-51-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">results_err.irf().plot(impulse<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'nrrd'</span>, response<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'program_expenditure'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ianepreston.github.io/blog/posts/2021-02-26-ferede_files/figure-html/cell-52-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>These are harder to eyeball because I’m showing the individual responses and the paper is showing the cumulative ones. But again, if I think about what adding up the points in my charts would look like, they end up closer to the data set with the error.</p>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>The initial goal of this exercise was to practice my python and econometrics. I’ve certainly done that over the course of working on it, but as a bonus I’ve also demonstrated how sensitive results can be to even a single data point (at least when you have relatively few samples.</p>
</section>
<section id="appendix-raw-tables" class="level2">
<h2 class="anchored" data-anchor-id="appendix-raw-tables">Appendix: Raw tables</h2>
<p>For the purposes of validation, here are the full tables I used to produce both the summary statistics above, as well as all statistical models and tests below</p>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">mdfl</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>program_expenditure</th>
      <th>debt_service</th>
      <th>corporate_income_tax</th>
      <th>personal_income_tax</th>
      <th>other_revenue</th>
      <th>natural_resource_revenue</th>
      <th>deficit</th>
      <th>heritage_dummy</th>
      <th>ur_lag</th>
      <th>er_lag</th>
      <th>cad_usd_lag</th>
    </tr>
    <tr>
      <th>budget_dt</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1964-01-01</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1965-01-01</th>
      <td>2327.844291</td>
      <td>11.272854</td>
      <td>174.729232</td>
      <td>231.093501</td>
      <td>1442.925275</td>
      <td>1397.833860</td>
      <td>-907.464724</td>
      <td>0.0</td>
      <td>2.500000</td>
      <td>37.935748</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1966-01-01</th>
      <td>2891.984579</td>
      <td>10.750872</td>
      <td>145.136773</td>
      <td>301.024417</td>
      <td>1542.750138</td>
      <td>1290.104645</td>
      <td>-376.280521</td>
      <td>0.0</td>
      <td>2.500000</td>
      <td>37.935748</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1967-01-01</th>
      <td>4436.875339</td>
      <td>10.199713</td>
      <td>203.994268</td>
      <td>407.988537</td>
      <td>2351.033944</td>
      <td>1116.868620</td>
      <td>367.189683</td>
      <td>0.0</td>
      <td>2.500000</td>
      <td>37.935748</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1968-01-01</th>
      <td>4368.535726</td>
      <td>19.160244</td>
      <td>239.503055</td>
      <td>469.425988</td>
      <td>2639.323668</td>
      <td>1360.377353</td>
      <td>-320.934094</td>
      <td>0.0</td>
      <td>2.700000</td>
      <td>38.322148</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1969-01-01</th>
      <td>4396.849967</td>
      <td>17.909776</td>
      <td>286.556413</td>
      <td>599.977490</td>
      <td>2444.684401</td>
      <td>1141.748209</td>
      <td>-58.206771</td>
      <td>0.0</td>
      <td>3.300000</td>
      <td>39.041995</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1970-01-01</th>
      <td>4745.762712</td>
      <td>38.135593</td>
      <td>245.762712</td>
      <td>771.186441</td>
      <td>2737.288136</td>
      <td>978.813559</td>
      <td>50.847458</td>
      <td>0.0</td>
      <td>3.400000</td>
      <td>39.833226</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1971-01-01</th>
      <td>4993.823780</td>
      <td>67.916003</td>
      <td>271.664014</td>
      <td>767.051333</td>
      <td>2848.477084</td>
      <td>1090.651114</td>
      <td>83.896240</td>
      <td>0.0</td>
      <td>5.200000</td>
      <td>39.686520</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1972-01-01</th>
      <td>4988.477844</td>
      <td>85.114978</td>
      <td>362.663820</td>
      <td>858.551083</td>
      <td>2768.087112</td>
      <td>1224.915554</td>
      <td>-140.624746</td>
      <td>0.0</td>
      <td>5.700000</td>
      <td>38.456938</td>
      <td>1.009883</td>
    </tr>
    <tr>
      <th>1973-01-01</th>
      <td>5004.356719</td>
      <td>81.151731</td>
      <td>382.089398</td>
      <td>977.202089</td>
      <td>2387.213408</td>
      <td>2160.664826</td>
      <td>-821.661272</td>
      <td>0.0</td>
      <td>5.700000</td>
      <td>39.470588</td>
      <td>0.990792</td>
    </tr>
    <tr>
      <th>1974-01-01</th>
      <td>6124.378806</td>
      <td>92.793618</td>
      <td>829.155879</td>
      <td>1038.689856</td>
      <td>2352.767225</td>
      <td>4549.880638</td>
      <td>-2553.321174</td>
      <td>0.0</td>
      <td>5.300000</td>
      <td>40.843443</td>
      <td>1.000233</td>
    </tr>
    <tr>
      <th>1975-01-01</th>
      <td>7071.218716</td>
      <td>84.149869</td>
      <td>686.347373</td>
      <td>925.648564</td>
      <td>2721.722340</td>
      <td>4417.868145</td>
      <td>-1596.217836</td>
      <td>0.0</td>
      <td>3.500000</td>
      <td>42.840909</td>
      <td>0.978133</td>
    </tr>
    <tr>
      <th>1976-01-01</th>
      <td>6845.363213</td>
      <td>59.113672</td>
      <td>326.307469</td>
      <td>1038.036080</td>
      <td>2830.362613</td>
      <td>-125.320985</td>
      <td>2835.091707</td>
      <td>1.0</td>
      <td>4.200000</td>
      <td>43.439912</td>
      <td>1.017267</td>
    </tr>
    <tr>
      <th>1977-01-01</th>
      <td>7061.151803</td>
      <td>46.247496</td>
      <td>554.969954</td>
      <td>1206.639219</td>
      <td>2720.193639</td>
      <td>4513.335196</td>
      <td>-1887.738708</td>
      <td>1.0</td>
      <td>3.891667</td>
      <td>64.800000</td>
      <td>0.986075</td>
    </tr>
    <tr>
      <th>1978-01-01</th>
      <td>6825.084687</td>
      <td>48.260049</td>
      <td>545.709790</td>
      <td>1225.062794</td>
      <td>2643.165786</td>
      <td>4701.642511</td>
      <td>-2242.236144</td>
      <td>1.0</td>
      <td>4.475000</td>
      <td>64.633333</td>
      <td>1.063525</td>
    </tr>
    <tr>
      <th>1979-01-01</th>
      <td>9302.990086</td>
      <td>32.774318</td>
      <td>342.491620</td>
      <td>1265.088664</td>
      <td>2525.261181</td>
      <td>5181.619632</td>
      <td>21.303307</td>
      <td>1.0</td>
      <td>4.750000</td>
      <td>65.341667</td>
      <td>1.140767</td>
    </tr>
    <tr>
      <th>1980-01-01</th>
      <td>9937.742745</td>
      <td>31.376340</td>
      <td>620.395823</td>
      <td>1337.773062</td>
      <td>2676.972321</td>
      <td>4797.727697</td>
      <td>536.250183</td>
      <td>1.0</td>
      <td>3.966667</td>
      <td>67.125000</td>
      <td>1.171558</td>
    </tr>
    <tr>
      <th>1981-01-01</th>
      <td>10441.551444</td>
      <td>109.885646</td>
      <td>701.577586</td>
      <td>1597.568239</td>
      <td>5094.588359</td>
      <td>4001.769572</td>
      <td>-844.066666</td>
      <td>1.0</td>
      <td>3.866667</td>
      <td>68.050000</td>
      <td>1.169408</td>
    </tr>
    <tr>
      <th>1982-01-01</th>
      <td>12281.969722</td>
      <td>57.716023</td>
      <td>639.073783</td>
      <td>1731.480694</td>
      <td>4808.269418</td>
      <td>2887.899921</td>
      <td>2272.961929</td>
      <td>1.0</td>
      <td>3.883333</td>
      <td>69.500000</td>
      <td>1.198892</td>
    </tr>
    <tr>
      <th>1983-01-01</th>
      <td>11489.190564</td>
      <td>168.596206</td>
      <td>771.007210</td>
      <td>1488.773513</td>
      <td>4813.372379</td>
      <td>4001.941517</td>
      <td>582.692150</td>
      <td>1.0</td>
      <td>7.750000</td>
      <td>66.275000</td>
      <td>1.233858</td>
    </tr>
    <tr>
      <th>1984-01-01</th>
      <td>11320.287262</td>
      <td>218.545766</td>
      <td>793.666203</td>
      <td>1396.584127</td>
      <td>5529.782999</td>
      <td>4306.693537</td>
      <td>-487.893837</td>
      <td>1.0</td>
      <td>11.008333</td>
      <td>63.816667</td>
      <td>1.232583</td>
    </tr>
    <tr>
      <th>1985-01-01</th>
      <td>12869.198063</td>
      <td>168.831114</td>
      <td>723.561918</td>
      <td>1410.945740</td>
      <td>5622.447161</td>
      <td>3939.701880</td>
      <td>1341.372479</td>
      <td>1.0</td>
      <td>11.408333</td>
      <td>63.933333</td>
      <td>1.295150</td>
    </tr>
    <tr>
      <th>1986-01-01</th>
      <td>11863.166376</td>
      <td>263.862833</td>
      <td>351.817111</td>
      <td>1570.739021</td>
      <td>4940.542816</td>
      <td>1488.115306</td>
      <td>3775.814955</td>
      <td>1.0</td>
      <td>9.775000</td>
      <td>65.491667</td>
      <td>1.365900</td>
    </tr>
    <tr>
      <th>1987-01-01</th>
      <td>10791.884860</td>
      <td>486.136253</td>
      <td>505.683690</td>
      <td>1900.350807</td>
      <td>5480.081397</td>
      <td>2231.807343</td>
      <td>1160.097876</td>
      <td>0.0</td>
      <td>10.008333</td>
      <td>65.350000</td>
      <td>1.389767</td>
    </tr>
    <tr>
      <th>1988-01-01</th>
      <td>10774.989850</td>
      <td>655.047057</td>
      <td>572.857965</td>
      <td>1675.835569</td>
      <td>5818.165763</td>
      <td>1713.642551</td>
      <td>1649.535059</td>
      <td>0.0</td>
      <td>9.525000</td>
      <td>65.450000</td>
      <td>1.326175</td>
    </tr>
    <tr>
      <th>1989-01-01</th>
      <td>10745.455671</td>
      <td>865.692419</td>
      <td>543.484030</td>
      <td>1968.964999</td>
      <td>5716.675586</td>
      <td>1739.148895</td>
      <td>1642.874581</td>
      <td>0.0</td>
      <td>7.983333</td>
      <td>66.925000</td>
      <td>1.230942</td>
    </tr>
    <tr>
      <th>1990-01-01</th>
      <td>10614.752643</td>
      <td>923.523101</td>
      <td>578.462597</td>
      <td>2014.173627</td>
      <td>5689.536231</td>
      <td>1936.372929</td>
      <td>1319.730359</td>
      <td>0.0</td>
      <td>7.158333</td>
      <td>67.516667</td>
      <td>1.184108</td>
    </tr>
    <tr>
      <th>1991-01-01</th>
      <td>10060.915107</td>
      <td>878.291420</td>
      <td>488.608088</td>
      <td>2043.330951</td>
      <td>5298.490171</td>
      <td>1351.526066</td>
      <td>1757.251250</td>
      <td>0.0</td>
      <td>6.916667</td>
      <td>67.500000</td>
      <td>1.167017</td>
    </tr>
    <tr>
      <th>1992-01-01</th>
      <td>10490.255898</td>
      <td>920.232018</td>
      <td>413.099221</td>
      <td>1811.929709</td>
      <td>5614.128666</td>
      <td>1415.691681</td>
      <td>2155.638638</td>
      <td>0.0</td>
      <td>8.250000</td>
      <td>66.591667</td>
      <td>1.145975</td>
    </tr>
    <tr>
      <th>1993-01-01</th>
      <td>9567.673764</td>
      <td>1046.414892</td>
      <td>540.289188</td>
      <td>1820.154561</td>
      <td>5604.076850</td>
      <td>1782.195133</td>
      <td>867.372924</td>
      <td>0.0</td>
      <td>9.458333</td>
      <td>65.383333</td>
      <td>1.208808</td>
    </tr>
    <tr>
      <th>1994-01-01</th>
      <td>8304.447335</td>
      <td>1075.635389</td>
      <td>661.029079</td>
      <td>1886.982358</td>
      <td>5328.892392</td>
      <td>2081.040289</td>
      <td>-577.861395</td>
      <td>0.0</td>
      <td>9.583333</td>
      <td>64.875000</td>
      <td>1.290167</td>
    </tr>
    <tr>
      <th>1995-01-01</th>
      <td>7542.256294</td>
      <td>1000.994980</td>
      <td>792.231321</td>
      <td>1889.578759</td>
      <td>4888.995090</td>
      <td>1657.024370</td>
      <td>-684.578266</td>
      <td>0.0</td>
      <td>8.783333</td>
      <td>65.725000</td>
      <td>1.365892</td>
    </tr>
    <tr>
      <th>1996-01-01</th>
      <td>7286.510699</td>
      <td>838.743299</td>
      <td>807.190029</td>
      <td>1976.382124</td>
      <td>4455.321793</td>
      <td>2314.288966</td>
      <td>-1427.928914</td>
      <td>0.0</td>
      <td>7.841667</td>
      <td>66.650000</td>
      <td>1.372650</td>
    </tr>
    <tr>
      <th>1997-01-01</th>
      <td>7598.400009</td>
      <td>729.331650</td>
      <td>1020.071271</td>
      <td>2138.894710</td>
      <td>4551.426710</td>
      <td>2084.277589</td>
      <td>-1466.938621</td>
      <td>0.0</td>
      <td>6.883333</td>
      <td>67.316667</td>
      <td>1.363700</td>
    </tr>
    <tr>
      <th>1998-01-01</th>
      <td>7647.600932</td>
      <td>735.120709</td>
      <td>884.383797</td>
      <td>2452.712386</td>
      <td>4366.478407</td>
      <td>1262.339259</td>
      <td>-583.192208</td>
      <td>0.0</td>
      <td>5.875000</td>
      <td>67.925000</td>
      <td>1.384867</td>
    </tr>
    <tr>
      <th>1999-01-01</th>
      <td>8342.393922</td>
      <td>487.608742</td>
      <td>640.113987</td>
      <td>2601.260027</td>
      <td>4640.443868</td>
      <td>2371.737084</td>
      <td>-1423.552301</td>
      <td>0.0</td>
      <td>5.583333</td>
      <td>68.566667</td>
      <td>1.483633</td>
    </tr>
    <tr>
      <th>2000-01-01</th>
      <td>8710.352822</td>
      <td>474.863472</td>
      <td>980.253881</td>
      <td>1910.598641</td>
      <td>4348.877202</td>
      <td>5129.494603</td>
      <td>-3184.008033</td>
      <td>0.0</td>
      <td>5.666667</td>
      <td>68.500000</td>
      <td>1.485825</td>
    </tr>
    <tr>
      <th>2001-01-01</th>
      <td>9338.287124</td>
      <td>360.113309</td>
      <td>1037.070500</td>
      <td>1946.193764</td>
      <td>4320.894451</td>
      <td>2897.190669</td>
      <td>-502.948950</td>
      <td>0.0</td>
      <td>4.966667</td>
      <td>68.675000</td>
      <td>1.485517</td>
    </tr>
    <tr>
      <th>2002-01-01</th>
      <td>8826.496403</td>
      <td>209.515399</td>
      <td>888.679810</td>
      <td>2127.725707</td>
      <td>3820.134757</td>
      <td>3138.329395</td>
      <td>-938.857868</td>
      <td>0.0</td>
      <td>4.725000</td>
      <td>68.975000</td>
      <td>1.549017</td>
    </tr>
    <tr>
      <th>2003-01-01</th>
      <td>8889.845744</td>
      <td>112.157737</td>
      <td>701.917057</td>
      <td>1909.164731</td>
      <td>4925.835384</td>
      <td>3176.836868</td>
      <td>-1711.750559</td>
      <td>0.0</td>
      <td>5.341667</td>
      <td>68.975000</td>
      <td>1.570592</td>
    </tr>
    <tr>
      <th>2004-01-01</th>
      <td>9563.476337</td>
      <td>121.092191</td>
      <td>947.887219</td>
      <td>1864.098004</td>
      <td>5040.562703</td>
      <td>3907.027522</td>
      <td>-2075.006920</td>
      <td>0.0</td>
      <td>5.116667</td>
      <td>69.741667</td>
      <td>1.401167</td>
    </tr>
    <tr>
      <th>2005-01-01</th>
      <td>10252.960247</td>
      <td>95.080363</td>
      <td>1118.344428</td>
      <td>1793.108293</td>
      <td>5214.467798</td>
      <td>4829.545684</td>
      <td>-2607.425593</td>
      <td>1.0</td>
      <td>4.591667</td>
      <td>70.125000</td>
      <td>1.301575</td>
    </tr>
    <tr>
      <th>2006-01-01</th>
      <td>10491.526962</td>
      <td>77.006633</td>
      <td>1291.562414</td>
      <td>2729.974686</td>
      <td>5203.857546</td>
      <td>3943.455955</td>
      <td>-2600.317006</td>
      <td>1.0</td>
      <td>3.941667</td>
      <td>69.850000</td>
      <td>1.211483</td>
    </tr>
    <tr>
      <th>2007-01-01</th>
      <td>11093.119793</td>
      <td>71.131049</td>
      <td>1560.562037</td>
      <td>2749.181812</td>
      <td>4712.930591</td>
      <td>3359.113940</td>
      <td>-1217.537538</td>
      <td>1.0</td>
      <td>3.458333</td>
      <td>70.791667</td>
      <td>1.134375</td>
    </tr>
    <tr>
      <th>2008-01-01</th>
      <td>11481.223206</td>
      <td>65.508008</td>
      <td>1339.134853</td>
      <td>2742.517945</td>
      <td>3444.209491</td>
      <td>3752.538047</td>
      <td>268.330878</td>
      <td>0.0</td>
      <td>3.566667</td>
      <td>71.383333</td>
      <td>1.074183</td>
    </tr>
    <tr>
      <th>2009-01-01</th>
      <td>11192.177199</td>
      <td>111.838586</td>
      <td>1464.684956</td>
      <td>2426.866512</td>
      <td>5009.321141</td>
      <td>2085.188848</td>
      <td>317.954328</td>
      <td>0.0</td>
      <td>3.691667</td>
      <td>71.800000</td>
      <td>1.066767</td>
    </tr>
    <tr>
      <th>2010-01-01</th>
      <td>11408.370379</td>
      <td>141.808459</td>
      <td>1001.672465</td>
      <td>2292.670240</td>
      <td>4699.207866</td>
      <td>2532.122236</td>
      <td>1024.506031</td>
      <td>0.0</td>
      <td>6.575000</td>
      <td>69.416667</td>
      <td>1.141442</td>
    </tr>
    <tr>
      <th>2011-01-01</th>
      <td>11288.615235</td>
      <td>144.188676</td>
      <td>1062.777455</td>
      <td>2474.323912</td>
      <td>4526.773140</td>
      <td>3362.283433</td>
      <td>6.645971</td>
      <td>0.0</td>
      <td>6.516667</td>
      <td>68.133333</td>
      <td>1.030125</td>
    </tr>
    <tr>
      <th>2012-01-01</th>
      <td>11491.360391</td>
      <td>143.201492</td>
      <td>1330.207614</td>
      <td>2690.901483</td>
      <td>4642.860889</td>
      <td>2175.711738</td>
      <td>794.880159</td>
      <td>0.0</td>
      <td>5.433333</td>
      <td>69.508333</td>
      <td>0.989025</td>
    </tr>
    <tr>
      <th>2013-01-01</th>
      <td>11803.343431</td>
      <td>158.459375</td>
      <td>1473.940765</td>
      <td>2829.977012</td>
      <td>5288.245930</td>
      <td>2572.413384</td>
      <td>-202.774285</td>
      <td>0.0</td>
      <td>4.700000</td>
      <td>69.958333</td>
      <td>0.999408</td>
    </tr>
    <tr>
      <th>2014-01-01</th>
      <td>11006.721496</td>
      <td>182.199224</td>
      <td>1479.028999</td>
      <td>2817.708454</td>
      <td>4975.008515</td>
      <td>2283.359468</td>
      <td>-366.184716</td>
      <td>0.0</td>
      <td>4.658333</td>
      <td>69.591667</td>
      <td>1.029992</td>
    </tr>
    <tr>
      <th>2015-01-01</th>
      <td>10664.784806</td>
      <td>176.142114</td>
      <td>1040.727000</td>
      <td>2817.529567</td>
      <td>4492.864354</td>
      <td>691.915996</td>
      <td>1797.890004</td>
      <td>0.0</td>
      <td>4.775000</td>
      <td>69.058333</td>
      <td>1.104683</td>
    </tr>
    <tr>
      <th>2016-01-01</th>
      <td>11322.810385</td>
      <td>230.029051</td>
      <td>913.571647</td>
      <td>2608.854241</td>
      <td>4407.637789</td>
      <td>750.684901</td>
      <td>2872.090858</td>
      <td>0.0</td>
      <td>6.091667</td>
      <td>68.408333</td>
      <td>1.278808</td>
    </tr>
    <tr>
      <th>2017-01-01</th>
      <td>11433.853017</td>
      <td>319.856119</td>
      <td>813.921696</td>
      <td>2543.505301</td>
      <td>5094.564399</td>
      <td>1175.559759</td>
      <td>2126.157981</td>
      <td>0.0</td>
      <td>8.133333</td>
      <td>66.250000</td>
      <td>1.325583</td>
    </tr>
    <tr>
      <th>2018-01-01</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>7.883333</td>
      <td>66.316667</td>
      <td>1.297858</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">model_df_first_diff(mdfl)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>natural_resource_revenue</th>
      <th>nrri</th>
      <th>nrrd</th>
      <th>corporate_income_tax</th>
      <th>personal_income_tax</th>
      <th>other_revenue</th>
      <th>debt_service</th>
      <th>program_expenditure</th>
      <th>deficit</th>
      <th>ur_lag</th>
      <th>er_lag</th>
      <th>cad_usd_lag</th>
      <th>heritage_dummy</th>
      <th>constant</th>
    </tr>
    <tr>
      <th>budget_dt</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1970-01-01</th>
      <td>-162.934650</td>
      <td>0.000000</td>
      <td>-162.934650</td>
      <td>-40.793701</td>
      <td>171.208950</td>
      <td>292.603734</td>
      <td>20.225817</td>
      <td>348.912745</td>
      <td>109.054229</td>
      <td>0.100000</td>
      <td>0.791232</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1971-01-01</th>
      <td>111.837554</td>
      <td>111.837554</td>
      <td>0.000000</td>
      <td>25.901302</td>
      <td>-4.135108</td>
      <td>111.188949</td>
      <td>29.780410</td>
      <td>248.061068</td>
      <td>33.048782</td>
      <td>1.800000</td>
      <td>-0.146706</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1972-01-01</th>
      <td>134.264440</td>
      <td>134.264440</td>
      <td>0.000000</td>
      <td>90.999806</td>
      <td>91.499750</td>
      <td>-80.389972</td>
      <td>17.198975</td>
      <td>-5.345936</td>
      <td>-224.520986</td>
      <td>0.500000</td>
      <td>-1.229583</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1973-01-01</th>
      <td>935.749273</td>
      <td>935.749273</td>
      <td>0.000000</td>
      <td>19.425579</td>
      <td>118.651006</td>
      <td>-380.873704</td>
      <td>-3.963247</td>
      <td>15.878875</td>
      <td>-681.036526</td>
      <td>0.000000</td>
      <td>1.013650</td>
      <td>-0.019092</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1974-01-01</th>
      <td>2389.215812</td>
      <td>2389.215812</td>
      <td>0.000000</td>
      <td>447.066481</td>
      <td>61.487767</td>
      <td>-34.446183</td>
      <td>11.641888</td>
      <td>1120.022088</td>
      <td>-1731.659902</td>
      <td>-0.400000</td>
      <td>1.372855</td>
      <td>0.009442</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1975-01-01</th>
      <td>-132.012493</td>
      <td>0.000000</td>
      <td>-132.012493</td>
      <td>-142.808507</td>
      <td>-113.041292</td>
      <td>368.955115</td>
      <td>-8.643749</td>
      <td>946.839909</td>
      <td>957.103338</td>
      <td>-1.800000</td>
      <td>1.997466</td>
      <td>-0.022100</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1976-01-01</th>
      <td>-4543.189130</td>
      <td>0.000000</td>
      <td>-4543.189130</td>
      <td>-360.039903</td>
      <td>112.387516</td>
      <td>108.640274</td>
      <td>-25.036197</td>
      <td>-225.855503</td>
      <td>4431.309543</td>
      <td>0.700000</td>
      <td>0.599003</td>
      <td>0.039133</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1977-01-01</th>
      <td>4638.656180</td>
      <td>4638.656180</td>
      <td>0.000000</td>
      <td>228.662485</td>
      <td>168.603139</td>
      <td>-110.168974</td>
      <td>-12.866176</td>
      <td>215.788591</td>
      <td>-4722.830415</td>
      <td>-0.308333</td>
      <td>21.360088</td>
      <td>-0.031192</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1978-01-01</th>
      <td>188.307315</td>
      <td>188.307315</td>
      <td>0.000000</td>
      <td>-9.260164</td>
      <td>18.423575</td>
      <td>-77.027853</td>
      <td>2.012553</td>
      <td>-236.067116</td>
      <td>-354.497436</td>
      <td>0.583333</td>
      <td>-0.166667</td>
      <td>0.077450</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1979-01-01</th>
      <td>479.977121</td>
      <td>479.977121</td>
      <td>0.000000</td>
      <td>-203.218170</td>
      <td>40.025870</td>
      <td>-117.904605</td>
      <td>-15.485732</td>
      <td>2477.905398</td>
      <td>2263.539451</td>
      <td>0.275000</td>
      <td>0.708333</td>
      <td>0.077242</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1980-01-01</th>
      <td>-383.891935</td>
      <td>0.000000</td>
      <td>-383.891935</td>
      <td>277.904203</td>
      <td>72.684398</td>
      <td>151.711140</td>
      <td>-1.397977</td>
      <td>634.752660</td>
      <td>514.946876</td>
      <td>-0.783333</td>
      <td>1.783333</td>
      <td>0.030792</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1981-01-01</th>
      <td>-795.958126</td>
      <td>0.000000</td>
      <td>-795.958126</td>
      <td>81.181763</td>
      <td>259.795177</td>
      <td>2417.616038</td>
      <td>78.509306</td>
      <td>503.808699</td>
      <td>-1380.316848</td>
      <td>-0.100000</td>
      <td>0.925000</td>
      <td>-0.002150</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1982-01-01</th>
      <td>-1113.869651</td>
      <td>0.000000</td>
      <td>-1113.869651</td>
      <td>-62.503803</td>
      <td>133.912455</td>
      <td>-286.318941</td>
      <td>-52.169623</td>
      <td>1840.418278</td>
      <td>3117.028595</td>
      <td>0.016667</td>
      <td>1.450000</td>
      <td>0.029483</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1983-01-01</th>
      <td>1114.041596</td>
      <td>1114.041596</td>
      <td>0.000000</td>
      <td>131.933427</td>
      <td>-242.707181</td>
      <td>5.102961</td>
      <td>110.880183</td>
      <td>-792.779158</td>
      <td>-1690.269779</td>
      <td>3.866667</td>
      <td>-3.225000</td>
      <td>0.034967</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1984-01-01</th>
      <td>304.752020</td>
      <td>304.752020</td>
      <td>0.000000</td>
      <td>22.658992</td>
      <td>-92.189386</td>
      <td>716.410620</td>
      <td>49.949560</td>
      <td>-168.903301</td>
      <td>-1070.585987</td>
      <td>3.258333</td>
      <td>-2.458333</td>
      <td>-0.001275</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1985-01-01</th>
      <td>-366.991657</td>
      <td>0.000000</td>
      <td>-366.991657</td>
      <td>-70.104285</td>
      <td>14.361613</td>
      <td>92.664162</td>
      <td>-49.714652</td>
      <td>1548.910801</td>
      <td>1829.266316</td>
      <td>0.400000</td>
      <td>0.116667</td>
      <td>0.062567</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1986-01-01</th>
      <td>-2451.586574</td>
      <td>0.000000</td>
      <td>-2451.586574</td>
      <td>-371.744807</td>
      <td>159.793281</td>
      <td>-681.904345</td>
      <td>95.031719</td>
      <td>-1006.031688</td>
      <td>2434.442476</td>
      <td>-1.633333</td>
      <td>1.558333</td>
      <td>0.070750</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1987-01-01</th>
      <td>743.692037</td>
      <td>743.692037</td>
      <td>0.000000</td>
      <td>153.866579</td>
      <td>329.611786</td>
      <td>539.538581</td>
      <td>222.273420</td>
      <td>-1071.281516</td>
      <td>-2615.717079</td>
      <td>0.233333</td>
      <td>-0.141667</td>
      <td>0.023867</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1988-01-01</th>
      <td>-518.164793</td>
      <td>0.000000</td>
      <td>-518.164793</td>
      <td>67.174276</td>
      <td>-224.515238</td>
      <td>338.084366</td>
      <td>168.910804</td>
      <td>-16.895010</td>
      <td>489.437183</td>
      <td>-0.483333</td>
      <td>0.100000</td>
      <td>-0.063592</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1989-01-01</th>
      <td>25.506344</td>
      <td>25.506344</td>
      <td>0.000000</td>
      <td>-29.373936</td>
      <td>293.129430</td>
      <td>-101.490177</td>
      <td>210.645362</td>
      <td>-29.534180</td>
      <td>-6.660479</td>
      <td>-1.541667</td>
      <td>1.475000</td>
      <td>-0.095233</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1990-01-01</th>
      <td>197.224034</td>
      <td>197.224034</td>
      <td>0.000000</td>
      <td>34.978568</td>
      <td>45.208628</td>
      <td>-27.139354</td>
      <td>57.830682</td>
      <td>-130.703028</td>
      <td>-323.144222</td>
      <td>-0.825000</td>
      <td>0.591667</td>
      <td>-0.046833</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1991-01-01</th>
      <td>-584.846863</td>
      <td>0.000000</td>
      <td>-584.846863</td>
      <td>-89.854509</td>
      <td>29.157325</td>
      <td>-391.046061</td>
      <td>-45.231681</td>
      <td>-553.837536</td>
      <td>437.520891</td>
      <td>-0.241667</td>
      <td>-0.016667</td>
      <td>-0.017092</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1992-01-01</th>
      <td>64.165615</td>
      <td>64.165615</td>
      <td>0.000000</td>
      <td>-75.508867</td>
      <td>-231.401242</td>
      <td>315.638496</td>
      <td>41.940598</td>
      <td>429.340791</td>
      <td>398.387388</td>
      <td>1.333333</td>
      <td>-0.908333</td>
      <td>-0.021042</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1993-01-01</th>
      <td>366.503452</td>
      <td>366.503452</td>
      <td>0.000000</td>
      <td>127.189967</td>
      <td>8.224851</td>
      <td>-10.051816</td>
      <td>126.182874</td>
      <td>-922.582134</td>
      <td>-1288.265714</td>
      <td>1.208333</td>
      <td>-1.208333</td>
      <td>0.062833</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1994-01-01</th>
      <td>298.845156</td>
      <td>298.845156</td>
      <td>0.000000</td>
      <td>120.739891</td>
      <td>66.827798</td>
      <td>-275.184458</td>
      <td>29.220498</td>
      <td>-1263.226429</td>
      <td>-1445.234319</td>
      <td>0.125000</td>
      <td>-0.508333</td>
      <td>0.081358</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1995-01-01</th>
      <td>-424.015919</td>
      <td>0.000000</td>
      <td>-424.015919</td>
      <td>131.202242</td>
      <td>2.596401</td>
      <td>-439.897302</td>
      <td>-74.640409</td>
      <td>-762.191041</td>
      <td>-106.716872</td>
      <td>-0.800000</td>
      <td>0.850000</td>
      <td>0.075725</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1996-01-01</th>
      <td>657.264596</td>
      <td>657.264596</td>
      <td>0.000000</td>
      <td>14.958707</td>
      <td>86.803365</td>
      <td>-433.673297</td>
      <td>-162.251681</td>
      <td>-255.745595</td>
      <td>-743.350647</td>
      <td>-0.941667</td>
      <td>0.925000</td>
      <td>0.006758</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1997-01-01</th>
      <td>-230.011377</td>
      <td>0.000000</td>
      <td>-230.011377</td>
      <td>212.881242</td>
      <td>162.512585</td>
      <td>96.104917</td>
      <td>-109.411649</td>
      <td>311.889310</td>
      <td>-39.009707</td>
      <td>-0.958333</td>
      <td>0.666667</td>
      <td>-0.008950</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1998-01-01</th>
      <td>-821.938330</td>
      <td>0.000000</td>
      <td>-821.938330</td>
      <td>-135.687474</td>
      <td>313.817676</td>
      <td>-184.948302</td>
      <td>5.789059</td>
      <td>49.200923</td>
      <td>883.746412</td>
      <td>-1.008333</td>
      <td>0.608333</td>
      <td>0.021167</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1999-01-01</th>
      <td>1109.397825</td>
      <td>1109.397825</td>
      <td>0.000000</td>
      <td>-244.269810</td>
      <td>148.547641</td>
      <td>273.965461</td>
      <td>-247.511966</td>
      <td>694.792990</td>
      <td>-840.360093</td>
      <td>-0.291667</td>
      <td>0.641667</td>
      <td>0.098767</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2000-01-01</th>
      <td>2757.757519</td>
      <td>2757.757519</td>
      <td>0.000000</td>
      <td>340.139894</td>
      <td>-690.661386</td>
      <td>-291.566666</td>
      <td>-12.745271</td>
      <td>367.958900</td>
      <td>-1760.455732</td>
      <td>0.083333</td>
      <td>-0.066667</td>
      <td>0.002192</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2001-01-01</th>
      <td>-2232.303933</td>
      <td>0.000000</td>
      <td>-2232.303933</td>
      <td>56.816619</td>
      <td>35.595123</td>
      <td>-27.982751</td>
      <td>-114.750162</td>
      <td>627.934302</td>
      <td>2681.059082</td>
      <td>-0.700000</td>
      <td>0.175000</td>
      <td>-0.000308</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2002-01-01</th>
      <td>241.138725</td>
      <td>241.138725</td>
      <td>0.000000</td>
      <td>-148.390689</td>
      <td>181.531943</td>
      <td>-500.759694</td>
      <td>-150.597911</td>
      <td>-511.790721</td>
      <td>-435.908918</td>
      <td>-0.241667</td>
      <td>0.300000</td>
      <td>0.063500</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2003-01-01</th>
      <td>38.507474</td>
      <td>38.507474</td>
      <td>0.000000</td>
      <td>-186.762753</td>
      <td>-218.560977</td>
      <td>1105.700627</td>
      <td>-97.357661</td>
      <td>63.349341</td>
      <td>-772.892691</td>
      <td>0.616667</td>
      <td>0.000000</td>
      <td>0.021575</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2004-01-01</th>
      <td>730.190654</td>
      <td>730.190654</td>
      <td>0.000000</td>
      <td>245.970162</td>
      <td>-45.066727</td>
      <td>114.727320</td>
      <td>8.934454</td>
      <td>673.630593</td>
      <td>-363.256361</td>
      <td>-0.225000</td>
      <td>0.766667</td>
      <td>-0.169425</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2005-01-01</th>
      <td>922.518162</td>
      <td>922.518162</td>
      <td>0.000000</td>
      <td>170.457209</td>
      <td>-70.989711</td>
      <td>173.905095</td>
      <td>-26.011829</td>
      <td>689.483910</td>
      <td>-532.418673</td>
      <td>-0.525000</td>
      <td>0.383333</td>
      <td>-0.099592</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2006-01-01</th>
      <td>-886.089729</td>
      <td>0.000000</td>
      <td>-886.089729</td>
      <td>173.217986</td>
      <td>936.866393</td>
      <td>-10.610252</td>
      <td>-18.073730</td>
      <td>238.566715</td>
      <td>7.108587</td>
      <td>-0.650000</td>
      <td>-0.275000</td>
      <td>-0.090092</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2007-01-01</th>
      <td>-584.342016</td>
      <td>0.000000</td>
      <td>-584.342016</td>
      <td>268.999623</td>
      <td>19.207126</td>
      <td>-490.926955</td>
      <td>-5.875584</td>
      <td>601.592831</td>
      <td>1382.779468</td>
      <td>-0.483333</td>
      <td>0.941667</td>
      <td>-0.077108</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2008-01-01</th>
      <td>393.424107</td>
      <td>393.424107</td>
      <td>0.000000</td>
      <td>-221.427184</td>
      <td>-6.663868</td>
      <td>-1268.721100</td>
      <td>-5.623041</td>
      <td>388.103413</td>
      <td>1485.868417</td>
      <td>0.108333</td>
      <td>0.591667</td>
      <td>-0.060192</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2009-01-01</th>
      <td>-1667.349199</td>
      <td>0.000000</td>
      <td>-1667.349199</td>
      <td>125.550103</td>
      <td>-315.651432</td>
      <td>1565.111650</td>
      <td>46.330578</td>
      <td>-289.046007</td>
      <td>49.623450</td>
      <td>0.125000</td>
      <td>0.416667</td>
      <td>-0.007417</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2010-01-01</th>
      <td>446.933388</td>
      <td>446.933388</td>
      <td>0.000000</td>
      <td>-463.012491</td>
      <td>-134.196272</td>
      <td>-310.113274</td>
      <td>29.969873</td>
      <td>216.193180</td>
      <td>706.551703</td>
      <td>2.883333</td>
      <td>-2.383333</td>
      <td>0.074675</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2011-01-01</th>
      <td>830.161197</td>
      <td>830.161197</td>
      <td>0.000000</td>
      <td>61.104990</td>
      <td>181.653671</td>
      <td>-172.434726</td>
      <td>2.380217</td>
      <td>-119.755144</td>
      <td>-1017.860060</td>
      <td>-0.058333</td>
      <td>-1.283333</td>
      <td>-0.111317</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2012-01-01</th>
      <td>-1186.571695</td>
      <td>0.000000</td>
      <td>-1186.571695</td>
      <td>267.430159</td>
      <td>216.577571</td>
      <td>116.087749</td>
      <td>-0.987183</td>
      <td>202.745156</td>
      <td>788.234188</td>
      <td>-1.083333</td>
      <td>1.375000</td>
      <td>-0.041100</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2013-01-01</th>
      <td>396.701645</td>
      <td>396.701645</td>
      <td>0.000000</td>
      <td>143.733151</td>
      <td>139.075529</td>
      <td>645.385041</td>
      <td>15.257883</td>
      <td>311.983040</td>
      <td>-997.654445</td>
      <td>-0.733333</td>
      <td>0.450000</td>
      <td>0.010383</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2014-01-01</th>
      <td>-289.053915</td>
      <td>0.000000</td>
      <td>-289.053915</td>
      <td>5.088233</td>
      <td>-12.268558</td>
      <td>-313.237415</td>
      <td>23.739849</td>
      <td>-796.621934</td>
      <td>-163.410431</td>
      <td>-0.041667</td>
      <td>-0.366667</td>
      <td>0.030583</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2015-01-01</th>
      <td>-1591.443473</td>
      <td>0.000000</td>
      <td>-1591.443473</td>
      <td>-438.301999</td>
      <td>-0.178887</td>
      <td>-482.144162</td>
      <td>-6.057110</td>
      <td>-341.936691</td>
      <td>2164.074720</td>
      <td>0.116667</td>
      <td>-0.533333</td>
      <td>0.074692</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2016-01-01</th>
      <td>58.768905</td>
      <td>58.768905</td>
      <td>0.000000</td>
      <td>-127.155353</td>
      <td>-208.675326</td>
      <td>-85.226565</td>
      <td>53.886937</td>
      <td>658.025579</td>
      <td>1074.200854</td>
      <td>1.316667</td>
      <td>-0.650000</td>
      <td>0.174125</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">mdfl_err</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>program_expenditure</th>
      <th>debt_service</th>
      <th>corporate_income_tax</th>
      <th>personal_income_tax</th>
      <th>other_revenue</th>
      <th>natural_resource_revenue</th>
      <th>deficit</th>
      <th>heritage_dummy</th>
      <th>ur_lag</th>
      <th>er_lag</th>
      <th>cad_usd_lag</th>
    </tr>
    <tr>
      <th>budget_dt</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1964-01-01</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1965-01-01</th>
      <td>2327.844291</td>
      <td>11.272854</td>
      <td>174.729232</td>
      <td>231.093501</td>
      <td>1442.925275</td>
      <td>1397.833860</td>
      <td>-907.464724</td>
      <td>0.0</td>
      <td>2.500000</td>
      <td>37.935748</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1966-01-01</th>
      <td>2891.984579</td>
      <td>10.750872</td>
      <td>145.136773</td>
      <td>301.024417</td>
      <td>1542.750138</td>
      <td>1290.104645</td>
      <td>-376.280521</td>
      <td>0.0</td>
      <td>2.500000</td>
      <td>37.935748</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1967-01-01</th>
      <td>4436.875339</td>
      <td>10.199713</td>
      <td>203.994268</td>
      <td>407.988537</td>
      <td>2351.033944</td>
      <td>1116.868620</td>
      <td>367.189683</td>
      <td>0.0</td>
      <td>2.500000</td>
      <td>37.935748</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1968-01-01</th>
      <td>4368.535726</td>
      <td>19.160244</td>
      <td>239.503055</td>
      <td>469.425988</td>
      <td>2639.323668</td>
      <td>1360.377353</td>
      <td>-320.934094</td>
      <td>0.0</td>
      <td>2.700000</td>
      <td>38.322148</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1969-01-01</th>
      <td>4396.849967</td>
      <td>17.909776</td>
      <td>286.556413</td>
      <td>599.977490</td>
      <td>2444.684401</td>
      <td>1141.748209</td>
      <td>-58.206771</td>
      <td>0.0</td>
      <td>3.300000</td>
      <td>39.041995</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1970-01-01</th>
      <td>4745.762712</td>
      <td>38.135593</td>
      <td>245.762712</td>
      <td>771.186441</td>
      <td>2737.288136</td>
      <td>978.813559</td>
      <td>50.847458</td>
      <td>0.0</td>
      <td>3.400000</td>
      <td>39.833226</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1971-01-01</th>
      <td>4993.823780</td>
      <td>67.916003</td>
      <td>271.664014</td>
      <td>767.051333</td>
      <td>2848.477084</td>
      <td>1090.651114</td>
      <td>83.896240</td>
      <td>0.0</td>
      <td>5.200000</td>
      <td>39.686520</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1972-01-01</th>
      <td>4988.477844</td>
      <td>85.114978</td>
      <td>362.663820</td>
      <td>858.551083</td>
      <td>2768.087112</td>
      <td>1224.915554</td>
      <td>-140.624746</td>
      <td>0.0</td>
      <td>5.700000</td>
      <td>38.456938</td>
      <td>1.009883</td>
    </tr>
    <tr>
      <th>1973-01-01</th>
      <td>5004.356719</td>
      <td>81.151731</td>
      <td>382.089398</td>
      <td>977.202089</td>
      <td>2387.213408</td>
      <td>2160.664826</td>
      <td>-821.661272</td>
      <td>0.0</td>
      <td>5.700000</td>
      <td>39.470588</td>
      <td>0.990792</td>
    </tr>
    <tr>
      <th>1974-01-01</th>
      <td>6124.378806</td>
      <td>92.793618</td>
      <td>829.155879</td>
      <td>1038.689856</td>
      <td>2352.767225</td>
      <td>4549.880638</td>
      <td>-2553.321174</td>
      <td>0.0</td>
      <td>5.300000</td>
      <td>40.843443</td>
      <td>1.000233</td>
    </tr>
    <tr>
      <th>1975-01-01</th>
      <td>7071.218716</td>
      <td>84.149869</td>
      <td>686.347373</td>
      <td>925.648564</td>
      <td>2721.722340</td>
      <td>4417.868145</td>
      <td>-1596.217836</td>
      <td>0.0</td>
      <td>3.500000</td>
      <td>42.840909</td>
      <td>0.978133</td>
    </tr>
    <tr>
      <th>1976-01-01</th>
      <td>6845.363213</td>
      <td>59.113672</td>
      <td>326.307469</td>
      <td>1038.036080</td>
      <td>2830.362613</td>
      <td>4887.518397</td>
      <td>-2177.747675</td>
      <td>1.0</td>
      <td>4.200000</td>
      <td>43.439912</td>
      <td>1.017267</td>
    </tr>
    <tr>
      <th>1977-01-01</th>
      <td>7061.151803</td>
      <td>46.247496</td>
      <td>554.969954</td>
      <td>1206.639219</td>
      <td>2720.193639</td>
      <td>4513.335196</td>
      <td>-1887.738708</td>
      <td>1.0</td>
      <td>3.891667</td>
      <td>64.800000</td>
      <td>0.986075</td>
    </tr>
    <tr>
      <th>1978-01-01</th>
      <td>6825.084687</td>
      <td>48.260049</td>
      <td>545.709790</td>
      <td>1225.062794</td>
      <td>2643.165786</td>
      <td>4701.642511</td>
      <td>-2242.236144</td>
      <td>1.0</td>
      <td>4.475000</td>
      <td>64.633333</td>
      <td>1.063525</td>
    </tr>
    <tr>
      <th>1979-01-01</th>
      <td>9302.990086</td>
      <td>32.774318</td>
      <td>342.491620</td>
      <td>1265.088664</td>
      <td>2525.261181</td>
      <td>5181.619632</td>
      <td>21.303307</td>
      <td>1.0</td>
      <td>4.750000</td>
      <td>65.341667</td>
      <td>1.140767</td>
    </tr>
    <tr>
      <th>1980-01-01</th>
      <td>9937.742745</td>
      <td>31.376340</td>
      <td>620.395823</td>
      <td>1337.773062</td>
      <td>2676.972321</td>
      <td>4797.727697</td>
      <td>536.250183</td>
      <td>1.0</td>
      <td>3.966667</td>
      <td>67.125000</td>
      <td>1.171558</td>
    </tr>
    <tr>
      <th>1981-01-01</th>
      <td>10441.551444</td>
      <td>109.885646</td>
      <td>701.577586</td>
      <td>1597.568239</td>
      <td>5094.588359</td>
      <td>4001.769572</td>
      <td>-844.066666</td>
      <td>1.0</td>
      <td>3.866667</td>
      <td>68.050000</td>
      <td>1.169408</td>
    </tr>
    <tr>
      <th>1982-01-01</th>
      <td>12281.969722</td>
      <td>57.716023</td>
      <td>639.073783</td>
      <td>1731.480694</td>
      <td>4808.269418</td>
      <td>2887.899921</td>
      <td>2272.961929</td>
      <td>1.0</td>
      <td>3.883333</td>
      <td>69.500000</td>
      <td>1.198892</td>
    </tr>
    <tr>
      <th>1983-01-01</th>
      <td>11489.190564</td>
      <td>168.596206</td>
      <td>771.007210</td>
      <td>1488.773513</td>
      <td>4813.372379</td>
      <td>4001.941517</td>
      <td>582.692150</td>
      <td>1.0</td>
      <td>7.750000</td>
      <td>66.275000</td>
      <td>1.233858</td>
    </tr>
    <tr>
      <th>1984-01-01</th>
      <td>11320.287262</td>
      <td>218.545766</td>
      <td>793.666203</td>
      <td>1396.584127</td>
      <td>5529.782999</td>
      <td>4306.693537</td>
      <td>-487.893837</td>
      <td>1.0</td>
      <td>11.008333</td>
      <td>63.816667</td>
      <td>1.232583</td>
    </tr>
    <tr>
      <th>1985-01-01</th>
      <td>12869.198063</td>
      <td>168.831114</td>
      <td>723.561918</td>
      <td>1410.945740</td>
      <td>5622.447161</td>
      <td>3939.701880</td>
      <td>1341.372479</td>
      <td>1.0</td>
      <td>11.408333</td>
      <td>63.933333</td>
      <td>1.295150</td>
    </tr>
    <tr>
      <th>1986-01-01</th>
      <td>11863.166376</td>
      <td>263.862833</td>
      <td>351.817111</td>
      <td>1570.739021</td>
      <td>4940.542816</td>
      <td>1488.115306</td>
      <td>3775.814955</td>
      <td>1.0</td>
      <td>9.775000</td>
      <td>65.491667</td>
      <td>1.365900</td>
    </tr>
    <tr>
      <th>1987-01-01</th>
      <td>10791.884860</td>
      <td>486.136253</td>
      <td>505.683690</td>
      <td>1900.350807</td>
      <td>5480.081397</td>
      <td>2231.807343</td>
      <td>1160.097876</td>
      <td>0.0</td>
      <td>10.008333</td>
      <td>65.350000</td>
      <td>1.389767</td>
    </tr>
    <tr>
      <th>1988-01-01</th>
      <td>10774.989850</td>
      <td>655.047057</td>
      <td>572.857965</td>
      <td>1675.835569</td>
      <td>5818.165763</td>
      <td>1713.642551</td>
      <td>1649.535059</td>
      <td>0.0</td>
      <td>9.525000</td>
      <td>65.450000</td>
      <td>1.326175</td>
    </tr>
    <tr>
      <th>1989-01-01</th>
      <td>10745.455671</td>
      <td>865.692419</td>
      <td>543.484030</td>
      <td>1968.964999</td>
      <td>5716.675586</td>
      <td>1739.148895</td>
      <td>1642.874581</td>
      <td>0.0</td>
      <td>7.983333</td>
      <td>66.925000</td>
      <td>1.230942</td>
    </tr>
    <tr>
      <th>1990-01-01</th>
      <td>10614.752643</td>
      <td>923.523101</td>
      <td>578.462597</td>
      <td>2014.173627</td>
      <td>5689.536231</td>
      <td>1936.372929</td>
      <td>1319.730359</td>
      <td>0.0</td>
      <td>7.158333</td>
      <td>67.516667</td>
      <td>1.184108</td>
    </tr>
    <tr>
      <th>1991-01-01</th>
      <td>10060.915107</td>
      <td>878.291420</td>
      <td>488.608088</td>
      <td>2043.330951</td>
      <td>5298.490171</td>
      <td>1351.526066</td>
      <td>1757.251250</td>
      <td>0.0</td>
      <td>6.916667</td>
      <td>67.500000</td>
      <td>1.167017</td>
    </tr>
    <tr>
      <th>1992-01-01</th>
      <td>10490.255898</td>
      <td>920.232018</td>
      <td>413.099221</td>
      <td>1811.929709</td>
      <td>5614.128666</td>
      <td>1415.691681</td>
      <td>2155.638638</td>
      <td>0.0</td>
      <td>8.250000</td>
      <td>66.591667</td>
      <td>1.145975</td>
    </tr>
    <tr>
      <th>1993-01-01</th>
      <td>9567.673764</td>
      <td>1046.414892</td>
      <td>540.289188</td>
      <td>1820.154561</td>
      <td>5604.076850</td>
      <td>1782.195133</td>
      <td>867.372924</td>
      <td>0.0</td>
      <td>9.458333</td>
      <td>65.383333</td>
      <td>1.208808</td>
    </tr>
    <tr>
      <th>1994-01-01</th>
      <td>8304.447335</td>
      <td>1075.635389</td>
      <td>661.029079</td>
      <td>1886.982358</td>
      <td>5328.892392</td>
      <td>2081.040289</td>
      <td>-577.861395</td>
      <td>0.0</td>
      <td>9.583333</td>
      <td>64.875000</td>
      <td>1.290167</td>
    </tr>
    <tr>
      <th>1995-01-01</th>
      <td>7542.256294</td>
      <td>1000.994980</td>
      <td>792.231321</td>
      <td>1889.578759</td>
      <td>4888.995090</td>
      <td>1657.024370</td>
      <td>-684.578266</td>
      <td>0.0</td>
      <td>8.783333</td>
      <td>65.725000</td>
      <td>1.365892</td>
    </tr>
    <tr>
      <th>1996-01-01</th>
      <td>7286.510699</td>
      <td>838.743299</td>
      <td>807.190029</td>
      <td>1976.382124</td>
      <td>4455.321793</td>
      <td>2314.288966</td>
      <td>-1427.928914</td>
      <td>0.0</td>
      <td>7.841667</td>
      <td>66.650000</td>
      <td>1.372650</td>
    </tr>
    <tr>
      <th>1997-01-01</th>
      <td>7598.400009</td>
      <td>729.331650</td>
      <td>1020.071271</td>
      <td>2138.894710</td>
      <td>4551.426710</td>
      <td>2084.277589</td>
      <td>-1466.938621</td>
      <td>0.0</td>
      <td>6.883333</td>
      <td>67.316667</td>
      <td>1.363700</td>
    </tr>
    <tr>
      <th>1998-01-01</th>
      <td>7647.600932</td>
      <td>735.120709</td>
      <td>884.383797</td>
      <td>2452.712386</td>
      <td>4366.478407</td>
      <td>1262.339259</td>
      <td>-583.192208</td>
      <td>0.0</td>
      <td>5.875000</td>
      <td>67.925000</td>
      <td>1.384867</td>
    </tr>
    <tr>
      <th>1999-01-01</th>
      <td>8342.393922</td>
      <td>487.608742</td>
      <td>640.113987</td>
      <td>2601.260027</td>
      <td>4640.443868</td>
      <td>2371.737084</td>
      <td>-1423.552301</td>
      <td>0.0</td>
      <td>5.583333</td>
      <td>68.566667</td>
      <td>1.483633</td>
    </tr>
    <tr>
      <th>2000-01-01</th>
      <td>8710.352822</td>
      <td>474.863472</td>
      <td>980.253881</td>
      <td>1910.598641</td>
      <td>4348.877202</td>
      <td>5129.494603</td>
      <td>-3184.008033</td>
      <td>0.0</td>
      <td>5.666667</td>
      <td>68.500000</td>
      <td>1.485825</td>
    </tr>
    <tr>
      <th>2001-01-01</th>
      <td>9338.287124</td>
      <td>360.113309</td>
      <td>1037.070500</td>
      <td>1946.193764</td>
      <td>4320.894451</td>
      <td>2897.190669</td>
      <td>-502.948950</td>
      <td>0.0</td>
      <td>4.966667</td>
      <td>68.675000</td>
      <td>1.485517</td>
    </tr>
    <tr>
      <th>2002-01-01</th>
      <td>8826.496403</td>
      <td>209.515399</td>
      <td>888.679810</td>
      <td>2127.725707</td>
      <td>3820.134757</td>
      <td>3138.329395</td>
      <td>-938.857868</td>
      <td>0.0</td>
      <td>4.725000</td>
      <td>68.975000</td>
      <td>1.549017</td>
    </tr>
    <tr>
      <th>2003-01-01</th>
      <td>8889.845744</td>
      <td>112.157737</td>
      <td>701.917057</td>
      <td>1909.164731</td>
      <td>4925.835384</td>
      <td>3176.836868</td>
      <td>-1711.750559</td>
      <td>0.0</td>
      <td>5.341667</td>
      <td>68.975000</td>
      <td>1.570592</td>
    </tr>
    <tr>
      <th>2004-01-01</th>
      <td>9563.476337</td>
      <td>121.092191</td>
      <td>947.887219</td>
      <td>1864.098004</td>
      <td>5040.562703</td>
      <td>3907.027522</td>
      <td>-2075.006920</td>
      <td>0.0</td>
      <td>5.116667</td>
      <td>69.741667</td>
      <td>1.401167</td>
    </tr>
    <tr>
      <th>2005-01-01</th>
      <td>10252.960247</td>
      <td>95.080363</td>
      <td>1118.344428</td>
      <td>1793.108293</td>
      <td>5214.467798</td>
      <td>4829.545684</td>
      <td>-2607.425593</td>
      <td>1.0</td>
      <td>4.591667</td>
      <td>70.125000</td>
      <td>1.301575</td>
    </tr>
    <tr>
      <th>2006-01-01</th>
      <td>10491.526962</td>
      <td>77.006633</td>
      <td>1291.562414</td>
      <td>2729.974686</td>
      <td>5203.857546</td>
      <td>3943.455955</td>
      <td>-2600.317006</td>
      <td>1.0</td>
      <td>3.941667</td>
      <td>69.850000</td>
      <td>1.211483</td>
    </tr>
    <tr>
      <th>2007-01-01</th>
      <td>11093.119793</td>
      <td>71.131049</td>
      <td>1560.562037</td>
      <td>2749.181812</td>
      <td>4712.930591</td>
      <td>3359.113940</td>
      <td>-1217.537538</td>
      <td>1.0</td>
      <td>3.458333</td>
      <td>70.791667</td>
      <td>1.134375</td>
    </tr>
    <tr>
      <th>2008-01-01</th>
      <td>11481.223206</td>
      <td>65.508008</td>
      <td>1339.134853</td>
      <td>2742.517945</td>
      <td>3444.209491</td>
      <td>3752.538047</td>
      <td>268.330878</td>
      <td>0.0</td>
      <td>3.566667</td>
      <td>71.383333</td>
      <td>1.074183</td>
    </tr>
    <tr>
      <th>2009-01-01</th>
      <td>11192.177199</td>
      <td>111.838586</td>
      <td>1464.684956</td>
      <td>2426.866512</td>
      <td>5009.321141</td>
      <td>2085.188848</td>
      <td>317.954328</td>
      <td>0.0</td>
      <td>3.691667</td>
      <td>71.800000</td>
      <td>1.066767</td>
    </tr>
    <tr>
      <th>2010-01-01</th>
      <td>11408.370379</td>
      <td>141.808459</td>
      <td>1001.672465</td>
      <td>2292.670240</td>
      <td>4699.207866</td>
      <td>2532.122236</td>
      <td>1024.506031</td>
      <td>0.0</td>
      <td>6.575000</td>
      <td>69.416667</td>
      <td>1.141442</td>
    </tr>
    <tr>
      <th>2011-01-01</th>
      <td>11288.615235</td>
      <td>144.188676</td>
      <td>1062.777455</td>
      <td>2474.323912</td>
      <td>4526.773140</td>
      <td>3362.283433</td>
      <td>6.645971</td>
      <td>0.0</td>
      <td>6.516667</td>
      <td>68.133333</td>
      <td>1.030125</td>
    </tr>
    <tr>
      <th>2012-01-01</th>
      <td>11491.360391</td>
      <td>143.201492</td>
      <td>1330.207614</td>
      <td>2690.901483</td>
      <td>4642.860889</td>
      <td>2175.711738</td>
      <td>794.880159</td>
      <td>0.0</td>
      <td>5.433333</td>
      <td>69.508333</td>
      <td>0.989025</td>
    </tr>
    <tr>
      <th>2013-01-01</th>
      <td>11803.343431</td>
      <td>158.459375</td>
      <td>1473.940765</td>
      <td>2829.977012</td>
      <td>5288.245930</td>
      <td>2572.413384</td>
      <td>-202.774285</td>
      <td>0.0</td>
      <td>4.700000</td>
      <td>69.958333</td>
      <td>0.999408</td>
    </tr>
    <tr>
      <th>2014-01-01</th>
      <td>11006.721496</td>
      <td>182.199224</td>
      <td>1479.028999</td>
      <td>2817.708454</td>
      <td>4975.008515</td>
      <td>2283.359468</td>
      <td>-366.184716</td>
      <td>0.0</td>
      <td>4.658333</td>
      <td>69.591667</td>
      <td>1.029992</td>
    </tr>
    <tr>
      <th>2015-01-01</th>
      <td>10664.784806</td>
      <td>176.142114</td>
      <td>1040.727000</td>
      <td>2817.529567</td>
      <td>4492.864354</td>
      <td>691.915996</td>
      <td>1797.890004</td>
      <td>0.0</td>
      <td>4.775000</td>
      <td>69.058333</td>
      <td>1.104683</td>
    </tr>
    <tr>
      <th>2016-01-01</th>
      <td>11322.810385</td>
      <td>230.029051</td>
      <td>913.571647</td>
      <td>2608.854241</td>
      <td>4407.637789</td>
      <td>750.684901</td>
      <td>2872.090858</td>
      <td>0.0</td>
      <td>6.091667</td>
      <td>68.408333</td>
      <td>1.278808</td>
    </tr>
    <tr>
      <th>2017-01-01</th>
      <td>11433.853017</td>
      <td>319.856119</td>
      <td>813.921696</td>
      <td>2543.505301</td>
      <td>5094.564399</td>
      <td>1175.559759</td>
      <td>2126.157981</td>
      <td>0.0</td>
      <td>8.133333</td>
      <td>66.250000</td>
      <td>1.325583</td>
    </tr>
    <tr>
      <th>2018-01-01</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>7.883333</td>
      <td>66.316667</td>
      <td>1.297858</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">model_df_first_diff(mdfl_err)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>natural_resource_revenue</th>
      <th>nrri</th>
      <th>nrrd</th>
      <th>corporate_income_tax</th>
      <th>personal_income_tax</th>
      <th>other_revenue</th>
      <th>debt_service</th>
      <th>program_expenditure</th>
      <th>deficit</th>
      <th>ur_lag</th>
      <th>er_lag</th>
      <th>cad_usd_lag</th>
      <th>heritage_dummy</th>
      <th>constant</th>
    </tr>
    <tr>
      <th>budget_dt</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1970-01-01</th>
      <td>-162.934650</td>
      <td>0.000000</td>
      <td>-162.934650</td>
      <td>-40.793701</td>
      <td>171.208950</td>
      <td>292.603734</td>
      <td>20.225817</td>
      <td>348.912745</td>
      <td>109.054229</td>
      <td>0.100000</td>
      <td>0.791232</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1971-01-01</th>
      <td>111.837554</td>
      <td>111.837554</td>
      <td>0.000000</td>
      <td>25.901302</td>
      <td>-4.135108</td>
      <td>111.188949</td>
      <td>29.780410</td>
      <td>248.061068</td>
      <td>33.048782</td>
      <td>1.800000</td>
      <td>-0.146706</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1972-01-01</th>
      <td>134.264440</td>
      <td>134.264440</td>
      <td>0.000000</td>
      <td>90.999806</td>
      <td>91.499750</td>
      <td>-80.389972</td>
      <td>17.198975</td>
      <td>-5.345936</td>
      <td>-224.520986</td>
      <td>0.500000</td>
      <td>-1.229583</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1973-01-01</th>
      <td>935.749273</td>
      <td>935.749273</td>
      <td>0.000000</td>
      <td>19.425579</td>
      <td>118.651006</td>
      <td>-380.873704</td>
      <td>-3.963247</td>
      <td>15.878875</td>
      <td>-681.036526</td>
      <td>0.000000</td>
      <td>1.013650</td>
      <td>-0.019092</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1974-01-01</th>
      <td>2389.215812</td>
      <td>2389.215812</td>
      <td>0.000000</td>
      <td>447.066481</td>
      <td>61.487767</td>
      <td>-34.446183</td>
      <td>11.641888</td>
      <td>1120.022088</td>
      <td>-1731.659902</td>
      <td>-0.400000</td>
      <td>1.372855</td>
      <td>0.009442</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1975-01-01</th>
      <td>-132.012493</td>
      <td>0.000000</td>
      <td>-132.012493</td>
      <td>-142.808507</td>
      <td>-113.041292</td>
      <td>368.955115</td>
      <td>-8.643749</td>
      <td>946.839909</td>
      <td>957.103338</td>
      <td>-1.800000</td>
      <td>1.997466</td>
      <td>-0.022100</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1976-01-01</th>
      <td>469.650252</td>
      <td>469.650252</td>
      <td>0.000000</td>
      <td>-360.039903</td>
      <td>112.387516</td>
      <td>108.640274</td>
      <td>-25.036197</td>
      <td>-225.855503</td>
      <td>-581.529839</td>
      <td>0.700000</td>
      <td>0.599003</td>
      <td>0.039133</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1977-01-01</th>
      <td>-374.183202</td>
      <td>0.000000</td>
      <td>-374.183202</td>
      <td>228.662485</td>
      <td>168.603139</td>
      <td>-110.168974</td>
      <td>-12.866176</td>
      <td>215.788591</td>
      <td>290.008967</td>
      <td>-0.308333</td>
      <td>21.360088</td>
      <td>-0.031192</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1978-01-01</th>
      <td>188.307315</td>
      <td>188.307315</td>
      <td>0.000000</td>
      <td>-9.260164</td>
      <td>18.423575</td>
      <td>-77.027853</td>
      <td>2.012553</td>
      <td>-236.067116</td>
      <td>-354.497436</td>
      <td>0.583333</td>
      <td>-0.166667</td>
      <td>0.077450</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1979-01-01</th>
      <td>479.977121</td>
      <td>479.977121</td>
      <td>0.000000</td>
      <td>-203.218170</td>
      <td>40.025870</td>
      <td>-117.904605</td>
      <td>-15.485732</td>
      <td>2477.905398</td>
      <td>2263.539451</td>
      <td>0.275000</td>
      <td>0.708333</td>
      <td>0.077242</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1980-01-01</th>
      <td>-383.891935</td>
      <td>0.000000</td>
      <td>-383.891935</td>
      <td>277.904203</td>
      <td>72.684398</td>
      <td>151.711140</td>
      <td>-1.397977</td>
      <td>634.752660</td>
      <td>514.946876</td>
      <td>-0.783333</td>
      <td>1.783333</td>
      <td>0.030792</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1981-01-01</th>
      <td>-795.958126</td>
      <td>0.000000</td>
      <td>-795.958126</td>
      <td>81.181763</td>
      <td>259.795177</td>
      <td>2417.616038</td>
      <td>78.509306</td>
      <td>503.808699</td>
      <td>-1380.316848</td>
      <td>-0.100000</td>
      <td>0.925000</td>
      <td>-0.002150</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1982-01-01</th>
      <td>-1113.869651</td>
      <td>0.000000</td>
      <td>-1113.869651</td>
      <td>-62.503803</td>
      <td>133.912455</td>
      <td>-286.318941</td>
      <td>-52.169623</td>
      <td>1840.418278</td>
      <td>3117.028595</td>
      <td>0.016667</td>
      <td>1.450000</td>
      <td>0.029483</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1983-01-01</th>
      <td>1114.041596</td>
      <td>1114.041596</td>
      <td>0.000000</td>
      <td>131.933427</td>
      <td>-242.707181</td>
      <td>5.102961</td>
      <td>110.880183</td>
      <td>-792.779158</td>
      <td>-1690.269779</td>
      <td>3.866667</td>
      <td>-3.225000</td>
      <td>0.034967</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1984-01-01</th>
      <td>304.752020</td>
      <td>304.752020</td>
      <td>0.000000</td>
      <td>22.658992</td>
      <td>-92.189386</td>
      <td>716.410620</td>
      <td>49.949560</td>
      <td>-168.903301</td>
      <td>-1070.585987</td>
      <td>3.258333</td>
      <td>-2.458333</td>
      <td>-0.001275</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1985-01-01</th>
      <td>-366.991657</td>
      <td>0.000000</td>
      <td>-366.991657</td>
      <td>-70.104285</td>
      <td>14.361613</td>
      <td>92.664162</td>
      <td>-49.714652</td>
      <td>1548.910801</td>
      <td>1829.266316</td>
      <td>0.400000</td>
      <td>0.116667</td>
      <td>0.062567</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1986-01-01</th>
      <td>-2451.586574</td>
      <td>0.000000</td>
      <td>-2451.586574</td>
      <td>-371.744807</td>
      <td>159.793281</td>
      <td>-681.904345</td>
      <td>95.031719</td>
      <td>-1006.031688</td>
      <td>2434.442476</td>
      <td>-1.633333</td>
      <td>1.558333</td>
      <td>0.070750</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1987-01-01</th>
      <td>743.692037</td>
      <td>743.692037</td>
      <td>0.000000</td>
      <td>153.866579</td>
      <td>329.611786</td>
      <td>539.538581</td>
      <td>222.273420</td>
      <td>-1071.281516</td>
      <td>-2615.717079</td>
      <td>0.233333</td>
      <td>-0.141667</td>
      <td>0.023867</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1988-01-01</th>
      <td>-518.164793</td>
      <td>0.000000</td>
      <td>-518.164793</td>
      <td>67.174276</td>
      <td>-224.515238</td>
      <td>338.084366</td>
      <td>168.910804</td>
      <td>-16.895010</td>
      <td>489.437183</td>
      <td>-0.483333</td>
      <td>0.100000</td>
      <td>-0.063592</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1989-01-01</th>
      <td>25.506344</td>
      <td>25.506344</td>
      <td>0.000000</td>
      <td>-29.373936</td>
      <td>293.129430</td>
      <td>-101.490177</td>
      <td>210.645362</td>
      <td>-29.534180</td>
      <td>-6.660479</td>
      <td>-1.541667</td>
      <td>1.475000</td>
      <td>-0.095233</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1990-01-01</th>
      <td>197.224034</td>
      <td>197.224034</td>
      <td>0.000000</td>
      <td>34.978568</td>
      <td>45.208628</td>
      <td>-27.139354</td>
      <td>57.830682</td>
      <td>-130.703028</td>
      <td>-323.144222</td>
      <td>-0.825000</td>
      <td>0.591667</td>
      <td>-0.046833</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1991-01-01</th>
      <td>-584.846863</td>
      <td>0.000000</td>
      <td>-584.846863</td>
      <td>-89.854509</td>
      <td>29.157325</td>
      <td>-391.046061</td>
      <td>-45.231681</td>
      <td>-553.837536</td>
      <td>437.520891</td>
      <td>-0.241667</td>
      <td>-0.016667</td>
      <td>-0.017092</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1992-01-01</th>
      <td>64.165615</td>
      <td>64.165615</td>
      <td>0.000000</td>
      <td>-75.508867</td>
      <td>-231.401242</td>
      <td>315.638496</td>
      <td>41.940598</td>
      <td>429.340791</td>
      <td>398.387388</td>
      <td>1.333333</td>
      <td>-0.908333</td>
      <td>-0.021042</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1993-01-01</th>
      <td>366.503452</td>
      <td>366.503452</td>
      <td>0.000000</td>
      <td>127.189967</td>
      <td>8.224851</td>
      <td>-10.051816</td>
      <td>126.182874</td>
      <td>-922.582134</td>
      <td>-1288.265714</td>
      <td>1.208333</td>
      <td>-1.208333</td>
      <td>0.062833</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1994-01-01</th>
      <td>298.845156</td>
      <td>298.845156</td>
      <td>0.000000</td>
      <td>120.739891</td>
      <td>66.827798</td>
      <td>-275.184458</td>
      <td>29.220498</td>
      <td>-1263.226429</td>
      <td>-1445.234319</td>
      <td>0.125000</td>
      <td>-0.508333</td>
      <td>0.081358</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1995-01-01</th>
      <td>-424.015919</td>
      <td>0.000000</td>
      <td>-424.015919</td>
      <td>131.202242</td>
      <td>2.596401</td>
      <td>-439.897302</td>
      <td>-74.640409</td>
      <td>-762.191041</td>
      <td>-106.716872</td>
      <td>-0.800000</td>
      <td>0.850000</td>
      <td>0.075725</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1996-01-01</th>
      <td>657.264596</td>
      <td>657.264596</td>
      <td>0.000000</td>
      <td>14.958707</td>
      <td>86.803365</td>
      <td>-433.673297</td>
      <td>-162.251681</td>
      <td>-255.745595</td>
      <td>-743.350647</td>
      <td>-0.941667</td>
      <td>0.925000</td>
      <td>0.006758</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1997-01-01</th>
      <td>-230.011377</td>
      <td>0.000000</td>
      <td>-230.011377</td>
      <td>212.881242</td>
      <td>162.512585</td>
      <td>96.104917</td>
      <td>-109.411649</td>
      <td>311.889310</td>
      <td>-39.009707</td>
      <td>-0.958333</td>
      <td>0.666667</td>
      <td>-0.008950</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1998-01-01</th>
      <td>-821.938330</td>
      <td>0.000000</td>
      <td>-821.938330</td>
      <td>-135.687474</td>
      <td>313.817676</td>
      <td>-184.948302</td>
      <td>5.789059</td>
      <td>49.200923</td>
      <td>883.746412</td>
      <td>-1.008333</td>
      <td>0.608333</td>
      <td>0.021167</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1999-01-01</th>
      <td>1109.397825</td>
      <td>1109.397825</td>
      <td>0.000000</td>
      <td>-244.269810</td>
      <td>148.547641</td>
      <td>273.965461</td>
      <td>-247.511966</td>
      <td>694.792990</td>
      <td>-840.360093</td>
      <td>-0.291667</td>
      <td>0.641667</td>
      <td>0.098767</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2000-01-01</th>
      <td>2757.757519</td>
      <td>2757.757519</td>
      <td>0.000000</td>
      <td>340.139894</td>
      <td>-690.661386</td>
      <td>-291.566666</td>
      <td>-12.745271</td>
      <td>367.958900</td>
      <td>-1760.455732</td>
      <td>0.083333</td>
      <td>-0.066667</td>
      <td>0.002192</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2001-01-01</th>
      <td>-2232.303933</td>
      <td>0.000000</td>
      <td>-2232.303933</td>
      <td>56.816619</td>
      <td>35.595123</td>
      <td>-27.982751</td>
      <td>-114.750162</td>
      <td>627.934302</td>
      <td>2681.059082</td>
      <td>-0.700000</td>
      <td>0.175000</td>
      <td>-0.000308</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2002-01-01</th>
      <td>241.138725</td>
      <td>241.138725</td>
      <td>0.000000</td>
      <td>-148.390689</td>
      <td>181.531943</td>
      <td>-500.759694</td>
      <td>-150.597911</td>
      <td>-511.790721</td>
      <td>-435.908918</td>
      <td>-0.241667</td>
      <td>0.300000</td>
      <td>0.063500</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2003-01-01</th>
      <td>38.507474</td>
      <td>38.507474</td>
      <td>0.000000</td>
      <td>-186.762753</td>
      <td>-218.560977</td>
      <td>1105.700627</td>
      <td>-97.357661</td>
      <td>63.349341</td>
      <td>-772.892691</td>
      <td>0.616667</td>
      <td>0.000000</td>
      <td>0.021575</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2004-01-01</th>
      <td>730.190654</td>
      <td>730.190654</td>
      <td>0.000000</td>
      <td>245.970162</td>
      <td>-45.066727</td>
      <td>114.727320</td>
      <td>8.934454</td>
      <td>673.630593</td>
      <td>-363.256361</td>
      <td>-0.225000</td>
      <td>0.766667</td>
      <td>-0.169425</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2005-01-01</th>
      <td>922.518162</td>
      <td>922.518162</td>
      <td>0.000000</td>
      <td>170.457209</td>
      <td>-70.989711</td>
      <td>173.905095</td>
      <td>-26.011829</td>
      <td>689.483910</td>
      <td>-532.418673</td>
      <td>-0.525000</td>
      <td>0.383333</td>
      <td>-0.099592</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2006-01-01</th>
      <td>-886.089729</td>
      <td>0.000000</td>
      <td>-886.089729</td>
      <td>173.217986</td>
      <td>936.866393</td>
      <td>-10.610252</td>
      <td>-18.073730</td>
      <td>238.566715</td>
      <td>7.108587</td>
      <td>-0.650000</td>
      <td>-0.275000</td>
      <td>-0.090092</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2007-01-01</th>
      <td>-584.342016</td>
      <td>0.000000</td>
      <td>-584.342016</td>
      <td>268.999623</td>
      <td>19.207126</td>
      <td>-490.926955</td>
      <td>-5.875584</td>
      <td>601.592831</td>
      <td>1382.779468</td>
      <td>-0.483333</td>
      <td>0.941667</td>
      <td>-0.077108</td>
      <td>1.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2008-01-01</th>
      <td>393.424107</td>
      <td>393.424107</td>
      <td>0.000000</td>
      <td>-221.427184</td>
      <td>-6.663868</td>
      <td>-1268.721100</td>
      <td>-5.623041</td>
      <td>388.103413</td>
      <td>1485.868417</td>
      <td>0.108333</td>
      <td>0.591667</td>
      <td>-0.060192</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2009-01-01</th>
      <td>-1667.349199</td>
      <td>0.000000</td>
      <td>-1667.349199</td>
      <td>125.550103</td>
      <td>-315.651432</td>
      <td>1565.111650</td>
      <td>46.330578</td>
      <td>-289.046007</td>
      <td>49.623450</td>
      <td>0.125000</td>
      <td>0.416667</td>
      <td>-0.007417</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2010-01-01</th>
      <td>446.933388</td>
      <td>446.933388</td>
      <td>0.000000</td>
      <td>-463.012491</td>
      <td>-134.196272</td>
      <td>-310.113274</td>
      <td>29.969873</td>
      <td>216.193180</td>
      <td>706.551703</td>
      <td>2.883333</td>
      <td>-2.383333</td>
      <td>0.074675</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2011-01-01</th>
      <td>830.161197</td>
      <td>830.161197</td>
      <td>0.000000</td>
      <td>61.104990</td>
      <td>181.653671</td>
      <td>-172.434726</td>
      <td>2.380217</td>
      <td>-119.755144</td>
      <td>-1017.860060</td>
      <td>-0.058333</td>
      <td>-1.283333</td>
      <td>-0.111317</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2012-01-01</th>
      <td>-1186.571695</td>
      <td>0.000000</td>
      <td>-1186.571695</td>
      <td>267.430159</td>
      <td>216.577571</td>
      <td>116.087749</td>
      <td>-0.987183</td>
      <td>202.745156</td>
      <td>788.234188</td>
      <td>-1.083333</td>
      <td>1.375000</td>
      <td>-0.041100</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2013-01-01</th>
      <td>396.701645</td>
      <td>396.701645</td>
      <td>0.000000</td>
      <td>143.733151</td>
      <td>139.075529</td>
      <td>645.385041</td>
      <td>15.257883</td>
      <td>311.983040</td>
      <td>-997.654445</td>
      <td>-0.733333</td>
      <td>0.450000</td>
      <td>0.010383</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2014-01-01</th>
      <td>-289.053915</td>
      <td>0.000000</td>
      <td>-289.053915</td>
      <td>5.088233</td>
      <td>-12.268558</td>
      <td>-313.237415</td>
      <td>23.739849</td>
      <td>-796.621934</td>
      <td>-163.410431</td>
      <td>-0.041667</td>
      <td>-0.366667</td>
      <td>0.030583</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2015-01-01</th>
      <td>-1591.443473</td>
      <td>0.000000</td>
      <td>-1591.443473</td>
      <td>-438.301999</td>
      <td>-0.178887</td>
      <td>-482.144162</td>
      <td>-6.057110</td>
      <td>-341.936691</td>
      <td>2164.074720</td>
      <td>0.116667</td>
      <td>-0.533333</td>
      <td>0.074692</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2016-01-01</th>
      <td>58.768905</td>
      <td>58.768905</td>
      <td>0.000000</td>
      <td>-127.155353</td>
      <td>-208.675326</td>
      <td>-85.226565</td>
      <td>53.886937</td>
      <td>658.025579</td>
      <td>1074.200854</td>
      <td>1.316667</td>
      <td>-0.650000</td>
      <td>0.174125</td>
      <td>0.0</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>econometrics</category>
  <category>jupyter</category>
  <category>python</category>
  <category>Alberta</category>
  <guid>https://ianepreston.github.io/blog/posts/2021-02-26-ferede.html</guid>
  <pubDate>Fri, 26 Feb 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Using traefik for internal services</title>
  <link>https://ianepreston.github.io/blog/posts/2021-01-09-traefik-lan.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I have a small server at home that I use to run various services in <a href="https://www.docker.com/">docker</a> containers. I don’t expose any of them to the internet, I can tunnel in through my <a href="http://blog.ianpreston.ca/2020/05/06/pfsense.html#openvpn---secure-remote-access">vpn</a> running on my pfsense router. Because of that up until recently it was enough to just publish the ports of my various services and make a bookmark pointing to my server at that port. Recently I wanted to set up a couple services that both expected to be exposed on port 80, the default http port. Just remapping the port would be insufficient, because their clients did not have options to specify a port to connect on. To get around this issue, I decided to suck it up and learn to use a <a href="https://en.wikipedia.org/wiki/Reverse_proxy">reverse proxy</a>. I looked into both <a href="https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/">nginx</a> and <a href="https://traefik.io/">traefik</a> and settled on traefik. Unfortunately for me, pretty much all the tutorials online expect you to be exposing traefik to the web and have all sorts of stuff about TLS and letsencrypt that don’t matter to me, and don’t really explain how to do the routing if you only want it to work on your internal network. This guide is for me in the future if I ever have to set this up again, and anyone else that’s interested in a similar setup.</p>
<p>This guide isn’t going to cover what a reverse proxy is, or many of the details of traefik, there are lots of good guides for that online. It’s specifically going to cover the configuration specific to a LAN only connection.</p>
</section>
<section id="the-key-configuration" class="level1">
<h1>The key configuration</h1>
<p>My <a href="http://blog.ianpreston.ca/2020/05/06/pfsense.html#dns">pfsense</a> box manages DNS and allows me to resolve machines on my network by their name. For instance, my server is named <code>mars</code> and if I run <code>ping mars</code> it will correctly resolve to that machine’s IP. Traefik doesn’t like to play nice with that naming convetion though, at least I couldn’t get it to work with all sorts of combinations of <code>mars</code> and <code>mars.localdomain</code>. Fortunately, I found a <a href="https://forum.netgate.com/topic/103737/dns-resolver-host-override">forum post</a> that addressed this issue. In my DNS settings I picked a nice sounding domain that I was sure I wouldn’t actually want to connect to (in my case I used ian.ca) and set my DNS to redirect any requests to that domain to go to my server. To do this, from pfsense I went to services -&gt; DNS resolver, and added two lines to the “custom options” section near the bottom</p>
<pre><code>local-zone: "ian.ca" redirect
local-data: "ian.ca A &lt;my server IP&gt;"</code></pre>
</section>
<section id="setting-up-traefik" class="level1">
<h1>Setting up Traefik</h1>
<p>Most of the rest of the traefik setup could be borrowed from other basic guides. I configure traefik and all my other docker containers in an ansible role. You can find that <a href="https://github.com/ianepreston/recipes/blob/master/ansible/roles/docker/tasks/main.yml">on my GitHub</a>. A couple small gotchas that I ran into were making sure Traefik was on the same docker network as the containers I wanted it to route, and to remember the difference between exposing ports (available within the docker network) and publishing ports (mapping them to a port on the host).</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This was one of those setups that is straightforward in retrospect, but I had to spend a lot of time googling and banging my head against the wall before I could get the correct combination of configurations to do what I want. Hopefully this is useful to others, or at least me next time I try and do this.</p>


</section>

 ]]></description>
  <category>docker</category>
  <category>traefik</category>
  <category>networking</category>
  <category>tip</category>
  <guid>https://ianepreston.github.io/blog/posts/2021-01-09-traefik-lan.html</guid>
  <pubDate>Sat, 09 Jan 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Automating provisioning Arch continued - TLDR</title>
  <link>https://ianepreston.github.io/blog/posts/2020-11-26-arch-tldr.html</link>
  <description><![CDATA[ 




<p>This is part 4 of a 4 part series describing how I provision my systems. Links to each part are below:</p>
<ul>
<li><a href="https://blog.ianpreston.ca/configuration/linux/arch/bash/2020/10/14/arch-bootstrap.html">part 1 - The base OS install</a></li>
<li><a href="https://blog.ianpreston.ca/configuration/ansible/linux/arch/2020/11/21/ansible.html">part 2 - Software install and system configuration with Ansible</a></li>
<li><a href="https://blog.ianpreston.ca/configuration/linux/arch/python/2020/11/25/dotfiles.html">part 3 - User level and python environment config with dotfiles and mkrc</a></li>
<li><a href="https://blog.ianpreston.ca/configuration/linux/arch/2020/11/26/arch-tldr.html">part 4 - The tldr that wraps up how to do the whole thing from start to finish</a>]</li>
</ul>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This note is a reference for me to put together my full provisioning pipeline.</p>
</section>
<section id="arch-usb-boot" class="level1">
<h1>Arch USB boot</h1>
<p>Follow <a href="https://wiki.archlinux.org/index.php/USB_flash_installation_medium">The Arch guide</a></p>
</section>
<section id="from-the-live-boot" class="level1">
<h1>From the live boot</h1>
<section id="setup-wifi" class="level2">
<h2 class="anchored" data-anchor-id="setup-wifi">Setup WiFi</h2>
<p>In the case where I’m doing this on a laptop I’ll likely have to get on WiFi before I can continue.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">iwctl</span></span>
<span id="cb1-2"><span class="ex" style="color: null;">station</span> wlan0 connect <span class="op" style="color: #5E5E5E;">&lt;</span>your SSID<span class="op" style="color: #5E5E5E;">&gt;</span>  # You can enclose it in quotes if it has spaces</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">&lt;</span>enter <span class="ex" style="color: null;">passphrase</span><span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb1-4"><span class="bu" style="color: null;">exit</span></span>
<span id="cb1-5"><span class="ex" style="color: null;">dhcpcd</span> wlan0</span></code></pre></div>
</section>
<section id="make-sure-partitions-are-set-up" class="level2">
<h2 class="anchored" data-anchor-id="make-sure-partitions-are-set-up">Make sure partitions are set up</h2>
<p>If you’re not just going to wipe the whole disk you can run <code>lsblk</code> to determine what partitions you have. <code>cfdisk</code> has a nice interface for creating and modifying partitions if necessary. To format the boot partition run:</p>
<p><code>mkfs.vfat -F32 /dev/&lt;partition&gt;</code></p>
<p><code>mkfs.ext4 /dev/&lt;partition&gt;</code> will work for the root partition.</p>
</section>
<section id="run-the-script" class="level2">
<h2 class="anchored" data-anchor-id="run-the-script">Run the script</h2>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;">bash</span> <span class="op" style="color: #5E5E5E;">&lt;(</span><span class="ex" style="color: null;">curl</span> <span class="at" style="color: #657422;">-fsSL</span> http://bootstrap.ianpreston.ca<span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<p>After that power off, remove the USB and power back on.</p>
</section>
</section>
<section id="set-up-ssh-keys" class="level1">
<h1>Set up ssh keys</h1>
<p>Plug in the USB with ssh keys on it. <a href="http://blog.ianpreston.ca/2020/05/03/ssh.html">Guide for reference</a></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">lsblk</span>  <span class="co" style="color: #5E5E5E;"># find where the partition with the keys is stored</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">mkdir</span> ssh  <span class="co" style="color: #5E5E5E;"># make a mount point</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">sudo</span> mount /dev/sd<span class="op" style="color: #5E5E5E;">&lt;</span>something<span class="op" style="color: #5E5E5E;">&gt;</span> ssh</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">cp</span> <span class="at" style="color: #657422;">-R</span> ssh ssh_local  <span class="co" style="color: #5E5E5E;"># Have to set permissions on keys (stupid NTFS)</span></span>
<span id="cb3-5"><span class="bu" style="color: null;">cd</span> ssh_local/CA</span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;">chmod</span> 600 host_ca</span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;">chmod</span> 600 user_ca</span>
<span id="cb3-8"><span class="bu" style="color: null;">cd</span> ../</span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;">chmod</span> +x setup_host.sh</span>
<span id="cb3-10"><span class="fu" style="color: #4758AB;">chmod</span> +x setup_user.sh</span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;">sudo</span> ./setup_host.sh</span>
<span id="cb3-12"><span class="ex" style="color: null;">./setup_user.sh</span></span></code></pre></div>
</section>
<section id="set-up-wifi-again" class="level1">
<h1>Set up WiFi again</h1>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">nmcli</span> device wifi connect <span class="op" style="color: #5E5E5E;">&lt;</span>SSID<span class="op" style="color: #5E5E5E;">&gt;</span> password <span class="op" style="color: #5E5E5E;">&lt;</span>password<span class="op" style="color: #5E5E5E;">&gt;</span></span></code></pre></div>
</section>
<section id="run-ansible" class="level1">
<h1>Run Ansible</h1>
<p>The bootstrap script cloned the repository into <code>/srv/recipes</code>. Modify the hosts file in <code>/srv/recipes/ansible/inventor/hosts</code> to include the hostname of the machine you’re setting up in the appropriate categories if you haven’t already.</p>
<p>Run <code>provision_desktop.sh</code> in the ansible folder. It will fail part way through as you won’t have the keys set up for GitHub for your local user. Go through the ssh key generation process again for the newly created user, this will also make a GitHub specific key. Manually add that key to GitHub’s authorized keys and re-run the recipe. I’ve also seen it flake out a few times on particular application installs. Often I can just get past it by running <code>yay -S &lt;application&gt;</code> to manually install the problematic app. At the time of this writing there’s an additional fix required for spotify that’s mentioned on the AUR page for it. I’m not putting that in the recipe as I’m hoping it will be fixed soon.</p>
</section>
<section id="setup-dotfiles" class="level1">
<h1>Setup dotfiles</h1>
<p>Log in as your regular user.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="bu" style="color: null;">cd</span> ~/.dotfiles</span>
<span id="cb5-2"><span class="ex" style="color: null;">./setup.sh</span></span>
<span id="cb5-3"><span class="ex" style="color: null;">rcup</span> <span class="at" style="color: #657422;">-v</span></span></code></pre></div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Sure, you could just install Ubuntu and be done with it, but where’s the fun in that? Why not spend weeks yak shaving your setup until you’re perfectly happy with it?</p>


</section>

 ]]></description>
  <category>configuration</category>
  <category>linux</category>
  <category>arch</category>
  <guid>https://ianepreston.github.io/blog/posts/2020-11-26-arch-tldr.html</guid>
  <pubDate>Thu, 26 Nov 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Automating provisioning Arch continued - dotfiles</title>
  <link>https://ianepreston.github.io/blog/posts/2020-11-25-dotfiles.html</link>
  <description><![CDATA[ 




<p>This is part 3 of a 4 part series describing how I provision my systems. Links to each part are below:</p>
<ul>
<li><a href="https://blog.ianpreston.ca/configuration/linux/arch/bash/2020/10/14/arch-bootstrap.html">part 1 - The base OS install</a></li>
<li><a href="https://blog.ianpreston.ca/configuration/ansible/linux/arch/2020/11/21/ansible.html">part 2 - Software install and system configuration with Ansible</a></li>
<li><a href="https://blog.ianpreston.ca/configuration/linux/arch/python/2020/11/25/dotfiles.html">part 3 - User level and python environment config with dotfiles and mkrc</a></li>
<li><a href="https://blog.ianpreston.ca/configuration/linux/arch/2020/11/26/arch-tldr.html">part 4 - The tldr that wraps up how to do the whole thing from start to finish</a>]</li>
</ul>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this post I’ll go through setting up configuration files (also called dotfiles or rcs).</p>
<p>As with the earlier posts in this series I’ll be copying liberally from <a href="https://github.com/brennanfee/dotfiles">Brennan Fee</a>. Since I’m building off his guide I will also use <a href="https://thoughtbot.github.io/rcm/rcm.7.html">RCM</a> to manage my dotfiles. At the time of this writing I don’t think I need a lot of the tag or host specific tools it offers, and I could probably stick with using my old approach of a <a href="https://www.atlassian.com/git/tutorials/dotfiles">bare git repository</a> right in my home. This seems a bit cleaner though, and maybe I’ll want to extend it eventually. The idea of being able to extend things to WSL or MacOS is cool and I could see using host or tag specific features to be able to use these on work machines as well.</p>
<p>I have a hard time remembering why I structure my dotfiles the way I do, or what some features do, so hopefully by writing all this out I will make it easier to update them in the future. As a bonus maybe this will be useful to others looking to configure their own environments. I’m not going to dissect the files in this document, it’s too easy to let things get out of sync between this guide and my actual dotfiles. Instead this will focus on explaining the directory structure and what files do what, since that’s not easily captured by comments. I’ll try to heavily comment the actual files in the repository. That will have a slightly better chance of staying relevant.</p>
</section>
<section id="repository-setup" class="level1">
<h1>Repository setup</h1>
<p>Following Brennan’s example, I have two repositories to contain my configs. The first is for configuration I don’t mind sharing and it’s available <a href="https://github.com/ianepreston/dots">here</a>. In addition to that I have a second private repository for configurations that contain personal information, which I will not be sharing a link to for obvious reasons.</p>
<p>Just for reference in this guide the public dotfiles repository is cloned to <code>~/.dotfiles</code>, which is the default location for RCM. The private ones are cloned to <code>~/.private_dotfiles</code>. That one I’ll have to manually specify, and if I want to add a file to it I’ll have to move it over manually.</p>
</section>
<section id="repository-root-files" class="level1">
<h1>Repository root files</h1>
<section id="setup.sh" class="level2">
<h2 class="anchored" data-anchor-id="setup.sh">setup.sh</h2>
<p>This file either links in or generates the config file for RCM (rcrc). This is the file that identifies which tags are applicable for the machine so it has to be configured properly before the rest of the dotfiles can be brought up. The base implementation checks what Operating System you’re running and adds tags for that. At work I have it generate additional tags for which user is running it so I can create user specific tagged files (for things like email addresses).</p>
<p>After running this script, if we didn’t link in an already existing <code>.rcrc</code> file then you’ll have a host specific one generated, but it won’t be saved in the repository, it will just be a reglar file. If as prompted you run <code>mkrc -o ~/.rcrc</code> it will add a host specific rcrc file to the repository.</p>
</section>
<section id="base-rcrc" class="level2">
<h2 class="anchored" data-anchor-id="base-rcrc">base-rcrc</h2>
<p>This file is used by <code>setup.sh</code> to generate the host specific <code>~/.rcrc</code>. The script adds tags to this file based on the operating system you’re running. You can add additional tags if you’d like.</p>
</section>
<section id="other-root-files" class="level2">
<h2 class="anchored" data-anchor-id="other-root-files">other root files</h2>
<p>The other files in the root of the repository are generic repository management files. README.md will show on the base of the page on GitHub and should point back to this blog post for more details. I picked GPL V3 for the license somewhat arbitrarily. I think I used the GitHub license picker helper for it. <code>.gitignore</code> and <code>.gitattributes</code> handle files for git to ignore and enforce consistent line break characters. <code>.editorconfig</code> tells a variety of text editors things like whether to use tabs or spaces for indentation.</p>
</section>
</section>
<section id="bash" class="level1">
<h1>bash</h1>
<p>This folder contains all the stuff that gets loaded into my profile at login. It’s where things like custom functions and the layout of my command prompt are defined.</p>
<section id="completions" class="level2">
<h2 class="anchored" data-anchor-id="completions">completions</h2>
<p>These scripts let you tab complete commands for certain applications. At the time of this writing I have completions for git, pipx and poetry installed.</p>
</section>
<section id="distrosmanjaroaliases" class="level2">
<h2 class="anchored" data-anchor-id="distrosmanjaroaliases">distros/manjaro/aliases</h2>
<p>I don’t actually use manjaro, but I wanted to keep this in as an example for myself of how to set distribution specific functionality.</p>
</section>
<section id="linux" class="level2">
<h2 class="anchored" data-anchor-id="linux">linux</h2>
<p>This has a few commands to set <code>start</code> or <code>open</code> to run <code>xdg-open</code> in linux. Makes the syntax compatible against platforms. That would be for opening a file in a gui rather than with a command line app.</p>
</section>
<section id="macos" class="level2">
<h2 class="anchored" data-anchor-id="macos">macos</h2>
<p>I don’t have any mac machines to test this stuff out on right now. It’s got a few files that presumably help make behaviour consistent on macs.</p>
</section>
<section id="windows-wsl" class="level2">
<h2 class="anchored" data-anchor-id="windows-wsl">windows-wsl</h2>
<p>Similar to the mac and linux entries above. Lets you use the same commands regardless of your specific platform.</p>
</section>
<section id="nerdfonts" class="level2">
<h2 class="anchored" data-anchor-id="nerdfonts">nerdfonts</h2>
<p>This maps a bunch of <a href="https://www.nerdfonts.com/">nerd fonts</a> to environment variables so they can be included in shell scripts. It lets you do things like put a check mark in your command prompt. Very important stuff.</p>
</section>
<section id="shared" class="level2">
<h2 class="anchored" data-anchor-id="shared">shared</h2>
<p>This is where the bulk of the content is in the bash directory. All of these files are cross platform and should work the same on linux, mac or WSL.</p>
<section id="aliases" class="level3">
<h3 class="anchored" data-anchor-id="aliases">aliases</h3>
<p>Basically these are all the command shortcuts. For example <code>alias grep="grep --color"</code> means you can just type <code>grep</code> but get nicely coloured results.</p>
</section>
<section id="exports" class="level3">
<h3 class="anchored" data-anchor-id="exports">exports</h3>
<p>This is where environment variables are set. For example <code>EDITOR=vim</code> is set here.</p>
</section>
<section id="functions" class="level3">
<h3 class="anchored" data-anchor-id="functions">functions</h3>
<p>This is where user defined functions/tools live. For example <code>extract</code> is defined here to call the appropriate underlying app to extract a file based on its extension.</p>
</section>
<section id="options" class="level3">
<h3 class="anchored" data-anchor-id="options">options</h3>
<p>Sets a bunch of shell options. Things like turning on vi mode for the command line.</p>
</section>
<section id="other" class="level3">
<h3 class="anchored" data-anchor-id="other">other</h3>
<p>A catch all. Code to set up conda, manage the file path, and actually set the appearance of my command prompt all live here.</p>
</section>
<section id="third-party" class="level3">
<h3 class="anchored" data-anchor-id="third-party">third party</h3>
<p>A place to dump cool code snippets you found on the internet that you want to be able to manage in your shell.</p>
</section>
</section>
</section>
<section id="bin" class="level1">
<h1>bin</h1>
<p>As opposed to the functions in the bash folder that get added to your environment, these are scripts that are supposed to be called directly, and are therefore on the path but not parsed until they’re called. At least I think that’s the distinction. I’m not super good at bash namespaces yet so this might need to be edited.</p>
</section>
<section id="filesmac-and-iterm2" class="level1">
<h1>files/mac and iterm2</h1>
<p>I don’t have a mac, not totally sure what this stuff does. But maybe some day I will! Then it’ll be super nice to have this stuff enabled… I assume.</p>
</section>
<section id="rcs" class="level1">
<h1>rcs</h1>
<p>This is where the actual config files live</p>
<section id="bash_logout" class="level2">
<h2 class="anchored" data-anchor-id="bash_logout">bash_logout</h2>
<p>Clear the screen when you log out. I’m not sure if I actually need this, doesn’t seem to hurt</p>
</section>
<section id="bash_profile" class="level2">
<h2 class="anchored" data-anchor-id="bash_profile">bash_profile</h2>
<p>I’m sure in theory there’s a difference between this file and <code>.bashrc</code> but in practice they seem to be the same. Just map this one to load <code>~/.bashrc</code> so whichever one your terminal expects you get the same result.</p>
</section>
<section id="bashrc" class="level2">
<h2 class="anchored" data-anchor-id="bashrc">bashrc</h2>
<p><code>bashrc</code> configures your shell on login. Brennan has a nice modular design that I’m going to emulate. Basically nothing goes in bashrc itself, rather it walks through all the folders in the previously described bash folder and adds them in (at least those relevant to your Operating System). A snippet of what that looks like is below.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># We want to walk "outside" in... which is to say run all options files first, then all</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># exports, then all functions, etc.</span></span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;">for</span> folder <span class="kw" style="color: #003B4F;">in</span> <span class="st" style="color: #20794D;">"options"</span> <span class="st" style="color: #20794D;">"exports"</span> <span class="st" style="color: #20794D;">"functions"</span> <span class="st" style="color: #20794D;">"third-party"</span> <span class="st" style="color: #20794D;">"other"</span> <span class="st" style="color: #20794D;">"aliases"</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-4">  <span class="cf" style="color: #003B4F;">for</span> base <span class="kw" style="color: #003B4F;">in</span> <span class="st" style="color: #20794D;">"shared"</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$OS_PRIMARY</span><span class="st" style="color: #20794D;">"</span> <span class="st" style="color: #20794D;">"distros/</span><span class="va" style="color: #111111;">$OS_SECONDARY</span><span class="st" style="color: #20794D;">"</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;">for</span> root <span class="kw" style="color: #003B4F;">in</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$DOTFILES</span><span class="st" style="color: #20794D;">/bash"</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$DOTFILES_PRIVATE</span><span class="st" style="color: #20794D;">/bash"</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-6">      <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">-d</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$root</span><span class="st" style="color: #20794D;">/</span><span class="va" style="color: #111111;">$base</span><span class="st" style="color: #20794D;">/</span><span class="va" style="color: #111111;">$folder</span><span class="st" style="color: #20794D;">"</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-7">        <span class="cf" style="color: #003B4F;">for</span> file <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">$root</span>/<span class="va" style="color: #111111;">$base</span>/<span class="va" style="color: #111111;">$folder</span>/<span class="pp" style="color: #AD0000;">*</span>.bash<span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-8">          <span class="co" style="color: #5E5E5E;"># shellcheck source=/dev/null</span></span>
<span id="cb1-9">          <span class="bu" style="color: null;">source</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$file</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-11">      <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-13">  <span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-14"><span class="cf" style="color: #003B4F;">done</span></span></code></pre></div>
<p>All the actual functionality lives in the <code>bash</code> folders of the dotfiles repositories and only this file itself needs to be linked in by RCM. Distribution and OS specific functionality can be managed by just placing the script in the appropriate folder. Because of the order of execution the more granular files will overwrite more general settings if there’s a conflict.</p>
</section>
<section id="other-files" class="level2">
<h2 class="anchored" data-anchor-id="other-files">other files</h2>
<ul>
<li><code>dircolors</code>: make <code>ls</code> show pretty colours.</li>
<li><code>gitignore</code>: files and patterns to ignore in all git repositories</li>
<li><code>inputrc</code>: manage basic keyboard mappings for the shell (home to go to the beginning of the line for example)</li>
<li><code>prettierrc</code>: configurations for the code formatter prettier. Kind of like <a href="https://pypi.org/project/black/">black</a> for other languages</li>
<li><code>tmux.conf</code>: configuration for <a href="https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/">tmux</a>. I don’t use tmux enough to have strong opinions about these commands so the commenting is pretty sparse at the time of this writing</li>
</ul>
</section>
<section id="config-folder" class="level2">
<h2 class="anchored" data-anchor-id="config-folder">config folder</h2>
<p>Polite applications store their configuration files here rather than your home directory. The <a href="https://wiki.archlinux.org/index.php/XDG_Base_Directory#User_directories">Arch Wiki</a> has a good list of polite applications and how to override some of the impolite ones. The folders all correspond to the name of the application they configure (e.g.&nbsp;git) so they layout is pretty self explanatory.</p>
</section>
<section id="host--folders" class="level2">
<h2 class="anchored" data-anchor-id="host--folders">host-* folders</h2>
<p>Host specific configs. Everything within here will have the same layout as the <code>rcs</code> folder above it, but will have machine specific configs. For my setup that’s just the <code>~/.rcrc</code> file that sets the tags for everything else on the machine.</p>
</section>
<section id="tag--folders" class="level2">
<h2 class="anchored" data-anchor-id="tag--folders">tag-* folders</h2>
<p>The same idea as hosts, except each host can have multiple tags. In general this is used for OS specific configurations. At work I also add tags for each user on the system for things like configuring e-mail addresses.</p>
</section>
<section id="vifm-and-vim" class="level2">
<h2 class="anchored" data-anchor-id="vifm-and-vim">vifm and vim</h2>
<p>These folder should really be under config. They’re just the settings for vim and vifm. Rude of them to demand their own space in <code>~</code>.</p>
</section>
</section>
<section id="hooks" class="level1">
<h1>hooks</h1>
<p>These just live in the <code>rcs</code> folder, but they’re special so I want to give them their own place. Some configurations need to have setup steps run, either before they’re installed or after. For instance, you can specify which plugins you want vim to use, but they won’t actually be installed until you run <code>vim -N -u "$HOME/.vim/vimrc.bundles" +PlugUpdate +PlugClean! +qa -</code>. You can put a script that does that in <code>hooks/post-up</code> and it will automatically run that after loading in your configuration files. I’m pushing this feature a little beyond what it’s intended to install some user level things like miniconda and pyenv. Doing that with this tool doesn’t quite fit its intended use, but it seems to work so I’ll stick with it.</p>
</section>
<section id="conclusion" class="level1">
<h1>conclusion</h1>
<p>This guide gave an overview of the structure of my dotfiles. For more details on the tool used to set them up check out <a href="https://thoughtbot.com/blog/rcm-for-rc-files-in-dotfiles-repos">RCM</a> and for the specifics of the configurations check the files themselves in <a href="https://github.com/ianepreston/dots">my repository</a>.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <category>linux</category>
  <category>arch</category>
  <category>python</category>
  <guid>https://ianepreston.github.io/blog/posts/2020-11-25-dotfiles.html</guid>
  <pubDate>Wed, 25 Nov 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Automating provisioning Arch continued - Ansible</title>
  <link>https://ianepreston.github.io/blog/posts/2020-11-21-ansible.html</link>
  <description><![CDATA[ 




<p>This is part 2 of a 4 part series describing how I provision my systems. Links to each part are below:</p>
<ul>
<li><a href="https://blog.ianpreston.ca/configuration/linux/arch/bash/2020/10/14/arch-bootstrap.html">part 1 - The base OS install</a></li>
<li><a href="https://blog.ianpreston.ca/configuration/ansible/linux/arch/2020/11/21/ansible.html">part 2 - Software install and system configuration with Ansible</a></li>
<li><a href="https://blog.ianpreston.ca/configuration/linux/arch/python/2020/11/25/dotfiles.html">part 3 - User level and python environment config with dotfiles and mkrc</a></li>
<li><a href="https://blog.ianpreston.ca/configuration/linux/arch/2020/11/26/arch-tldr.html">part 4 - The tldr that wraps up how to do the whole thing from start to finish</a>]</li>
</ul>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>My <a href="https://blog.ianpreston.ca/configuration/linux/arch/bash/2020/10/14/arch-bootstrap.html">previous post</a> described how to automate a base installation of <a href="https://www.archlinux.org/">Arch</a>. This follow up post will give an overview of the next step of configuration.</p>
<p>After getting a base system setup there is still a ton of administrative tasks to do, like creating a user account and installing software. I accomplished this using <a href="https://www.ansible.com/">Ansible</a>. As with the previous post, I borrowed heavily from <a href="https://github.com/brennanfee/provision-arch">Brennan Fee</a> for the configuration. My copy is <a href="https://github.com/ianepreston/recipes/tree/master/ansible">here</a>. This post won’t be as in depth as the previous one, as the ansible syntax is a lot more directly readable, so in most cases it should be enough to look at the code and maybe consult the <a href="https://docs.ansible.com/">ansible docs</a> to figure out what’s going on. The sections below will outline a few of the parts that were a little tricky.</p>
</section>
<section id="hashed-passwords" class="level1">
<h1>Hashed passwords</h1>
<p>Ansible lets you create a user and include the hash of their password, which means you can have the data available publicly without a security concern. In order to generate a hash of a password refer to <a href="https://docs.ansible.com/ansible/latest/reference_appendices/faq.html#how-do-i-generate-encrypted-passwords-for-the-user-module">this section of the ansible FAQ</a></p>
</section>
<section id="git-clone" class="level1">
<h1>git clone</h1>
<p>I had a tricky time with <a href="https://github.com/ianepreston/recipes/blob/master/ansible/roles/dotfiles/tasks/main.yml">this task</a>. I wanted to clone some repositories I controlled using ssh and save them in my home directory. After a lot of googling I determined that trying to become my user and do the clone directly wouldn’t work because ansible wouldn’t know which key to use (I have a separate key for GitHub than for my local network). This task splits it up by cloning into the ansible user directory and then using the copy task to move them over to my home directory and set the correct permissions. A little hacky, but it worked.</p>
</section>
<section id="dconf" class="level1">
<h1>dconf</h1>
<p>You can use ansible to configure your GNOME desktop with the <a href="https://docs.ansible.com/ansible/latest/collections/community/general/dconf_module.html">dconf</a> module. The trickiest part of that is figuring out what key you have to change. <a href="https://opensource.com/article/18/5/manage-your-workstation-ansible-part-3">This blog</a> has the solution I used.</p>
<ul>
<li><code>dconf dump / &gt; before.txt</code></li>
<li>make changes in settings or tweak tool</li>
<li><code>dconf dump / &gt; after.txt</code></li>
<li><code>diff before.txt after.txt</code></li>
<li>Figure out what changed and create a dconf task for it.</li>
</ul>
</section>
<section id="other-resources" class="level1">
<h1>Other resources</h1>
<p>Beyond the links previously mentioned I want to highlight a tutorial series from <a href="https://www.youtube.com/watch?v=goclfp6a2IQ">Jeff Geerling</a> which was excellent and informative. He also wrote a book on ansible that I haven’t read yet but imagine is quite good, given the quality of his video guide, and the fact that I found posts from him a few times when I was googling how to do something.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Ansible is a pretty rad way to reproducibly get your desktop environment set up just the way you like it. It’s a bit overkill given what it’s actually designed for, but it’s a handy skill to learn and it saves rebuilding your environment from scratch.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <category>ansible</category>
  <category>linux</category>
  <category>arch</category>
  <guid>https://ianepreston.github.io/blog/posts/2020-11-21-ansible.html</guid>
  <pubDate>Sat, 21 Nov 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Automating provisioning Arch - OS installation</title>
  <link>https://ianepreston.github.io/blog/posts/2020-10-14-arch-bootstrap.html</link>
  <description><![CDATA[ 




<section id="automating-provisioning-arch" class="level1">
<h1>Automating provisioning Arch</h1>
<p>This is part 1 of a 4 part series describing how I provision my systems. Links to each part are below:</p>
<ul>
<li><a href="https://blog.ianpreston.ca/configuration/linux/arch/bash/2020/10/14/arch-bootstrap.html">part 1 - The base OS install</a></li>
<li><a href="https://blog.ianpreston.ca/configuration/ansible/linux/arch/2020/11/21/ansible.html">part 2 - Software install and system configuration with Ansible</a></li>
<li><a href="https://blog.ianpreston.ca/configuration/linux/arch/python/2020/11/25/dotfiles.html">part 3 - User level and python environment config with dotfiles and mkrc</a></li>
<li><a href="https://blog.ianpreston.ca/configuration/linux/arch/2020/11/26/arch-tldr.html">part 4 - The tldr that wraps up how to do the whole thing from start to finish</a>]</li>
</ul>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<section id="edit-2020-10-20" class="level2">
<h2 class="anchored" data-anchor-id="edit-2020-10-20">edit 2020-10-20</h2>
<p>As I use this script to provision machines I’m going to end up making edits to it. I’m not going to edit this post every time I do that. The latest version of the provision script is always available <a href="https://github.com/ianepreston/recipes/blob/master/arch_bootstrap/bootstrap.sh">here</a>.</p>
<p>I’ve also updated the TLDR section a bit based on some experience from the install. That part I will update if I make changes since I use it for reference when building systems.</p>
</section>
<section id="actual-introduction" class="level2">
<h2 class="anchored" data-anchor-id="actual-introduction">Actual Introduction</h2>
<p>I’ve installed a lot of operating systems a lot of times. The goal of writing out this post is to force me to really think about and clearly document a reproducible workflow for building my workstation.</p>
<p>A secondary goal is to get better at bash.</p>
</section>
</section>
<section id="inspiration" class="level1">
<h1>Inspiration</h1>
<p>There are a lot of very smart people out there doing similar things. In the past I’ve used Luke Smith’s <a href="https://larbs.xyz/">LARBS</a> as a base that I forked and modified. There was also <a href="https://www.reddit.com/r/archlinux/comments/gle74o/how_do_you_provision_your_system/">this recent discussion on Reddit</a> which pointed me to a couple of very interesting repositories to get inspiration from: <a href="https://github.com/brennanfee/provision-arch">Brennan Fee’s provision-arch</a> and <a href="https://github.com/Foxboron/PKGBUILDS">Morten Linderud’s PKGBUILDS</a></p>
</section>
<section id="tldr" class="level1">
<h1>TLDR</h1>
<p>For future me when I want to actually just install Arch on a system:</p>
<section id="setting-up-wifi" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-wifi">Setting up WiFi</h2>
<p>In the case where I’m doing this on a laptop I’ll likely have to get on WiFi before I can continue.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">systemctl</span> start iwd.service</span>
<span id="cb1-2"><span class="ex" style="color: null;">iwctl</span></span>
<span id="cb1-3"><span class="ex" style="color: null;">device</span> list <span class="co" style="color: #5E5E5E;">#magically changed my device name to wlan0 here somehow</span></span>
<span id="cb1-4"><span class="ex" style="color: null;">station</span> wlan0 connect <span class="op" style="color: #5E5E5E;">&lt;</span>your SSID<span class="op" style="color: #5E5E5E;">&gt;</span>  # You can enclose it in quotes if it has spaces</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">&lt;</span>enter <span class="ex" style="color: null;">passphrase</span><span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb1-6"><span class="bu" style="color: null;">exit</span></span>
<span id="cb1-7"><span class="ex" style="color: null;">dhcpcd</span> wlan0</span></code></pre></div>
<p>That should work, try pinging something just to be safe.</p>
</section>
<section id="make-sure-partitions-are-set-up" class="level2">
<h2 class="anchored" data-anchor-id="make-sure-partitions-are-set-up">Make sure partitions are set up</h2>
<p>I’m a wuss and don’t trust a script to actually create partitions. <code>lsblk</code> will tell you what disks you have. If you need to create/delete partitions before proceeding use <code>cfdisk /dev/sd&lt;letter&gt;</code> to create them. If it’s a completely blank hard drive and you need to create a boot partition make one at the beginning of the disk with 500M of space in <code>cfdisk</code> and then run <code>mkfs.vfat -F32 /dev/sd&lt;letter&gt;1</code> to format it. There’s probably a cleaner way to clean out the LVMs this script creates but for now it’s easier for me to just blow them away in <code>cfdisk</code> and create a fresh partition to install over. <em>edit: I got braver. The new script has an option to just wipe the whole disk if you want.</em></p>
</section>
<section id="run-the-script" class="level2">
<h2 class="anchored" data-anchor-id="run-the-script">Run the script</h2>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;">bash</span> <span class="op" style="color: #5E5E5E;">&lt;(</span><span class="ex" style="color: null;">curl</span> <span class="at" style="color: #657422;">-fsSL</span> http://bootstrap.ianpreston.ca<span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
</section>
<section id="post-install" class="level2">
<h2 class="anchored" data-anchor-id="post-install">Post install</h2>
<ul>
<li>Get the Wifi going again. It’s a different command than you use from the installer:</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">nmcli</span> device wifi connect <span class="op" style="color: #5E5E5E;">&lt;</span>SSID<span class="op" style="color: #5E5E5E;">&gt;</span> password <span class="op" style="color: #5E5E5E;">&lt;</span>password<span class="op" style="color: #5E5E5E;">&gt;</span></span></code></pre></div>
<ul>
<li>Set up ssh keys - plug in the USB</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">lsblk</span>  <span class="co" style="color: #5E5E5E;"># find where the partition with the keys is stored</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">mkdir</span> ssh  <span class="co" style="color: #5E5E5E;"># make a mount point</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">sudo</span> mount /dev/sd<span class="op" style="color: #5E5E5E;">&lt;</span>something<span class="op" style="color: #5E5E5E;">&gt;</span> ssh</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">cp</span> <span class="at" style="color: #657422;">-R</span> ssh ssh_local  <span class="co" style="color: #5E5E5E;"># Have to set permissions on keys (stupid NTFS)</span></span>
<span id="cb4-5"><span class="bu" style="color: null;">cd</span> ssh_local/CA</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">chmod</span> 600 host_ca</span>
<span id="cb4-7"><span class="fu" style="color: #4758AB;">chmod</span> 600 user_ca</span>
<span id="cb4-8"><span class="bu" style="color: null;">cd</span> ../</span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;">chmod</span> +x setup_host.sh</span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;">chmod</span> +x setup_user.sh</span>
<span id="cb4-11"><span class="fu" style="color: #4758AB;">sudo</span> ./setup_host.sh</span>
<span id="cb4-12"><span class="ex" style="color: null;">./setup_user.sh</span></span></code></pre></div>
<p>After this point you should be able to run ansible to complete the setup.</p>
</section>
</section>
<section id="setting-up-for-testing" class="level1">
<h1>Setting up for testing</h1>
<p>I ended up working on this project over a period of time. Initially I was using a VM in Virtualbox. I document the steps for setting that up below. After a while I ended up putting docker on my Windows machine that I was using for testing, and found it conflicted with Virtualbox, so I switched to Hyper-V. Finally I got my hands on a beater notebook and ended up finishing up on that.</p>
<section id="prepping-the-vm" class="level2">
<h2 class="anchored" data-anchor-id="prepping-the-vm">Prepping the VM</h2>
<p>First thing to do for any install is <a href="https://www.archlinux.org/download/">download the ISO</a>. I’m going to use <a href="https://www.virtualbox.org/">Virtualbox</a> as my hypervisor. No particular reason, I’ve just used it in the past and am comfortable with it.</p>
<p>Then I create a base image to work off of.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ianepreston.github.io/blog/posts/arch/vm_01.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">base_vm</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ianepreston.github.io/blog/posts/arch/vm_02.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">vm_disk</figcaption><p></p>
</figure>
</div>
<p>Fire up the new VM, and select the Arch ISO at the prompt:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ianepreston.github.io/blog/posts/arch/vm_03.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">vm_iso</figcaption><p></p>
</figure>
</div>
<p>After that we’re at the boot prompt. Now comes the fun task of developing a bootstrap script that will automate the install process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ianepreston.github.io/blog/posts/arch/vm_04.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">vm_prompt</figcaption><p></p>
</figure>
</div>
</section>
<section id="getting-the-bootstrap-script-to-the-machine" class="level2">
<h2 class="anchored" data-anchor-id="getting-the-bootstrap-script-to-the-machine">Getting the bootstrap script to the machine</h2>
<p>I’ve created a <a href="https://github.com/ianepreston/recipes">repository on GitHub</a> to host code like this. I think I could probably just install git on the boot machine, clone the whole repo, navigate to the bootstrap script, and run it. That’s no fun though. Let’s see if I can find a more complicated approach just to save a few keystrokes.</p>
<p>The full URL to the raw script is at <a href="https://raw.githubusercontent.com/ianepreston/recipes/arch_bootstrap/arch_bootstrap/bootstrap.sh">this page</a>. That’s pointing to the branch I’m using while I develop the script. When I’ve got it working I’ll hopefully remember to come back here and point it to the master reference. From there I can go to my domain registrar and add a URL redirect record to point an easy to remember subdomain to that path:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ianepreston.github.io/blog/posts/arch/DNS_01.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">DNS</figcaption><p></p>
</figure>
</div>
<p>So now <a href="http://bootstrap.ianpreston.ca">bootstrap.ianpreston.ca</a> redirects directly to my shell script.</p>
<p>To actually get the script onto my machine and run it I’ll use <a href="https://curl.haxx.se/">curl</a>. The exact syntax will be</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;">bash</span> <span class="op" style="color: #5E5E5E;">&lt;(</span><span class="ex" style="color: null;">curl</span> <span class="at" style="color: #657422;">-fsSL</span> http://bootstrap.ianpreston.ca<span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<p><code>-f</code> Specifies that the script should fail silently. Otherwise if there’s an http error it will return a 404 page, which I’d then try and run. I’d rather it just not return anything and fail that way.</p>
<p><code>-L</code> Specifies that if the server reports that the page has moved then curl will redo the request.</p>
<p><code>-sS</code> Means the script should run silently, unless there’s a failure, in which case it will show the output. <code>-S</code> means show error and <code>-s</code> means silent.</p>
<p>As I’m writing this the shell script doesn’t really do anything, it just prints something out so I know it worked. Here’s where it’s at at this point:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;">#!/usr/bin/env bash</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;"># To install: bash &lt;(curl -fsSL http://bootstrap.ianpreston.ca)</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"We got this far!"</span></span></code></pre></div>
<p>As a quick aside, I don’t write bash scripts often, so I often forget how exactly to set up the <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a>. For bash scripts I’ve seen <code>#!/bin/bash</code> and <code>#!/usr/bin/env bash</code>. It seems like in most circumstances they’re interchangeable. <a href="https://unix.stackexchange.com/questions/29608/why-is-it-better-to-use-usr-bin-env-name-instead-of-path-to-name-as-my">This StackOverflow</a> post suggests that the latter is slightly more flexible/portable so I’m going to try and make a habit of using it in my scripts going forward.</p>
<p>Back at the VM I test my overly elaborate bootstrapping setup and…</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ianepreston.github.io/blog/posts/arch/curl_01.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">curl</figcaption><p></p>
</figure>
</div>
<p>Sweet!</p>
</section>
</section>
<section id="bootstrapping-the-install" class="level1">
<h1>Bootstrapping the install</h1>
<p>Borrowing liberally from the <a href="https://wiki.archlinux.org/index.php/installation_guide">Arch Install Guide</a> and the previously mentioned arch bootstrap script by <a href="https://github.com/brennanfee/provision-arch/blob/master/bootstrap/arch-install">Brennan Fee</a> let’s build up a script to auto install Arch. The goal isn’t to do everything with the script, we just need to get to a minimal environment with an SSH server so that Ansible can take over.</p>
<section id="strict-mode" class="level2">
<h2 class="anchored" data-anchor-id="strict-mode">Strict mode</h2>
<p>The first couple lines of Brennan’s script include a bunch of things I don’t really understand. Since part of the goal of this is learning more bash I’m going to dissect them before moving on. The lines in question are:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="va" style="color: #111111;">SOURCED</span><span class="op" style="color: #5E5E5E;">=</span>false <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="bu" style="color: null;">[</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${0}</span><span class="st" style="color: #20794D;">"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${BASH_SOURCE</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span><span class="va" style="color: #111111;">}</span><span class="st" style="color: #20794D;">"</span> <span class="bu" style="color: null;">]</span> <span class="kw" style="color: #003B4F;">||</span> <span class="va" style="color: #111111;">SOURCED</span><span class="op" style="color: #5E5E5E;">=</span>true</span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;">if</span> <span class="ot" style="color: #003B4F;">! </span><span class="va" style="color: #111111;">$SOURCED</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb7-3">  <span class="bu" style="color: null;">set</span> <span class="at" style="color: #657422;">-eEu</span></span>
<span id="cb7-4">  <span class="bu" style="color: null;">shopt</span> <span class="at" style="color: #657422;">-s</span> extdebug</span>
<span id="cb7-5">  <span class="bu" style="color: null;">trap</span> <span class="st" style="color: #20794D;">'s=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s'</span> ERR</span>
<span id="cb7-6">  <span class="va" style="color: #111111;">IFS</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">$'</span><span class="dt" style="color: #AD0000;">\n\t</span><span class="st" style="color: #20794D;">'</span></span>
<span id="cb7-7"><span class="cf" style="color: #003B4F;">fi</span></span></code></pre></div>
<p>Let’s break this up into tiny chunks. <code>SOURCED=false</code> is used to set a <a href="https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps">shell variable</a> to <code>false</code>. Next up <code>&amp;&amp;</code> is a <a href="http://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Lists">list operator</a> which will only run the next command if the previous one succeeded. So if we set <code>SOURCED</code> to <code>false</code> successfully then the next command will be executed.</p>
<p>Putting something inside square brackets means to evaluate the expression inside and return success or failure based on that. You can use it for <code>if</code> statements, or use it to only execute a subsequent command based on the result of the conditional. Luke Smith has a <a href="https://www.youtube.com/watch?v=p0KKBmfiVl0">good video</a> explaining how to avoid <code>if</code> statements by writing code like the line we’re evaluating.</p>
<p>So what are we actually evaluating in the square brackets? <a href="https://stackoverflow.com/questions/35006457/choosing-between-0-and-bash-source">This StackOverflow post</a> explains the difference between <code>${0}</code> and <code>${BASH_SOURCE[0]}</code>. I’ll outline the difference below with an example script called a few different ways:</p>
<p>I’ve got a script called <code>experiment.sh</code> which I’ll be running to check out these smaller components of the script</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">#!/usr/bin/env bash</span></span>
<span id="cb8-2"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"0: [</span><span class="va" style="color: #111111;">$0</span><span class="st" style="color: #20794D;">] vs bash_source: [</span><span class="va" style="color: #111111;">${BASH_SOURCE</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span><span class="va" style="color: #111111;">}</span><span class="st" style="color: #20794D;">]"</span></span></code></pre></div>
<p>Here’s the output of running that script a few different ways:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;">root@archiso</span> ~ <span class="co" style="color: #5E5E5E;"># bash ./experiment.sh</span></span>
<span id="cb9-2"><span class="ex" style="color: null;">0:</span> [./experiment.sh] vs bash_source: [./experiment.sh]</span>
<span id="cb9-3"><span class="ex" style="color: null;">root@archiso</span> ~ <span class="co" style="color: #5E5E5E;"># ./experiment.sh</span></span>
<span id="cb9-4"><span class="ex" style="color: null;">0:</span> [./experiment.sh] vs bash_source: [./experiment.sh]</span>
<span id="cb9-5"><span class="ex" style="color: null;">root@archiso</span> ~ <span class="co" style="color: #5E5E5E;"># . ./experiment.sh</span></span>
<span id="cb9-6"><span class="ex" style="color: null;">0:</span> [./experiment.sh] vs bash_source: []</span>
<span id="cb9-7"><span class="ex" style="color: null;">root@archiso</span> ~ <span class="co" style="color: #5E5E5E;"># source ./experiment.sh</span></span>
<span id="cb9-8"><span class="ex" style="color: null;">0:</span> [./experiment.sh] vs bash_source: []</span></code></pre></div>
<p>If I execute the script in a subshell, as with the first two examples, then they are equivalent and the expression will evaluate to true. If I <a href="https://linuxize.com/post/bash-source-command/">source</a> the script - that is I tell it to execute the commands in my current shell, then they will not be equivalent.</p>
<p>Back to the script the shell variable name makes sense now and I can put this all together. Set the shell variable <code>SOURCED</code> to <code>false</code>, check whether the script is being sourced or not, and if it is, update the <code>SOURCED</code> shell variable to <code>true</code> (Since the <code>||</code> operator says to only execute the subsequent command if the previous did not return true).</p>
<p>Inside this block we have some commands that, as described above, will only run if the script is being run from its own subshell. The first command, <code>set -eEu</code> uses the <a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html">set builtin</a> to change the value of some shell options. <code>-e</code> forces the script to exit if almost any command in the script fails (the link provided above for <code>set</code> includes more details). <code>-E</code> let’s errors that occur within functions be trapped by the shells they inherit from. That’s confusing because it’s how I’d normally expect error handling to work, not a special case. <a href="https://medium.com/@dirk.avery/the-bash-trap-trap-ce6083f36700">This post</a> explains what’s going on. Finally, <code>-u</code> treats unset variables and parameters as an error. Again, this is what I’d expect a sane language to do by default. I think the normal behavior is to just return an empty string in bash though. Gross.</p>
<p>Next up is <code>shopt -s extdebug</code>. <a href="https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html">The shopt builtin</a> lets us set additional shell options. The details of <code>extdebug</code> are in the previous link, but basically it allows better error tracing within function calls.</p>
<p>The next line is a bit of error handling as well. <code>trap</code> catches certain signals and runs a command in response. The basic syntax is <code>trap &lt;command to run when caught&gt; &lt;signals to catch&gt;</code>. Looking at <code>trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND" exit $s' ERR</code> that means if/when an <code>ERR</code> signal occurs in the script we’ll set the shell variable <code>s</code> to the exit status of the last task (that’s what <code>$?</code> is), print the filename of the shell script (<code>$0</code>), the line number of the error and it’s command, along with its exit status. Because of the options set above there’s no need to explicitly tell the <code>trap</code> to exit.</p>
<p>The final line in the block changes the <a href="https://bash.cyberciti.biz/guide/$IFS">internal field separator</a> from the default of &lt;space&gt;&lt;tab&gt;&lt;newline&gt; to &lt;newline&gt;&lt;tab&gt;. The link above explains in general what that’s for. We’ll have to get a bit farther along in the script to see why it’s being used here.</p>
</section>
<section id="text-formatting" class="level2">
<h2 class="anchored" data-anchor-id="text-formatting">Text formatting</h2>
<p>That part was dense. The next few lines are easier:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Text modifiers</span></span>
<span id="cb10-2"><span class="va" style="color: #111111;">Bold</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"\033[1m"</span></span>
<span id="cb10-3"><span class="va" style="color: #111111;">Reset</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"\033[0m"</span></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;"># Colors</span></span>
<span id="cb10-6"><span class="va" style="color: #111111;">Red</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"\033[31m"</span></span>
<span id="cb10-7"><span class="va" style="color: #111111;">Green</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"\033[32m"</span></span>
<span id="cb10-8"><span class="va" style="color: #111111;">Yellow</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"\033[33m"</span></span></code></pre></div>
<p>Text enclosed within <code>$Bold</code> and <code>$Reset</code> will be bolded. Similarly, enclosing within one of the colours and <code>$Reset</code> will set the text to that colour.</p>
</section>
<section id="setup-paths" class="level2">
<h2 class="anchored" data-anchor-id="setup-paths">Setup paths</h2>
<p>The next section sets up a log file:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="va" style="color: #111111;">WORKING_DIR</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$(</span><span class="bu" style="color: null;">pwd</span><span class="va" style="color: #111111;">)</span></span>
<span id="cb11-2"><span class="va" style="color: #111111;">LOG</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${WORKING_DIR}</span><span class="st" style="color: #20794D;">/arch-install.log"</span></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">-f</span> <span class="va" style="color: #111111;">${LOG}</span> <span class="kw" style="color: #003B4F;">]]</span> <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;">rm</span> <span class="at" style="color: #657422;">-f</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb11-4"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Start log..."</span> <span class="op" style="color: #5E5E5E;">&gt;&gt;</span><span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span></code></pre></div>
<p><code>pwd</code> stands for “print working directory”. When you enclose a command in <code>$()</code> it means to take the result of the command. To quickly illustrate, <code>EXAMPLE=pwd</code> would set <code>EXAMPLE</code> to “pwd”, whereas <code>EXAMPLE=$(pwd)</code> would set <code>EXAMPLE</code> to something like <code>/root</code>. The first two lines therefor set the <code>LOG</code> variable to point to a file in the current directory named <code>arch-install.log</code>.</p>
<p>The next line checks if the logfile exists, and deletes it if it does.</p>
<p>The final line writes “Start log…” into the logfile. <code>&gt;&gt;</code> redirects the output of the previous command to the end of the file on the right hand side. Since we know this is a brand new file (because of the line above) this will be the first line of the logfile.</p>
</section>
<section id="flags-and-variables" class="level2">
<h2 class="anchored" data-anchor-id="flags-and-variables">Flags and variables</h2>
<p>The next section sets up some system based flags</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="va" style="color: #111111;">SYS_ARCH</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$(</span><span class="fu" style="color: #4758AB;">uname</span> <span class="at" style="color: #657422;">-m</span><span class="va" style="color: #111111;">)</span> <span class="co" style="color: #5E5E5E;"># Architecture (x86_64)</span></span>
<span id="cb12-2"><span class="va" style="color: #111111;">UEFI</span><span class="op" style="color: #5E5E5E;">=</span>0</span>
<span id="cb12-3"><span class="va" style="color: #111111;">KEYMAP</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"us"</span></span>
<span id="cb12-4"><span class="va" style="color: #111111;">WIFI</span><span class="op" style="color: #5E5E5E;">=</span>0</span></code></pre></div>
<p><code>uname</code> returns system information, and the <code>-m</code> flag specifies to return the machine hardware. As the comment above describes this will likely return <code>x86_64</code>. Later in the script we’ll check if the system is <a href="https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface">UEFI</a> or BIOS.</p>
</section>
<section id="user-provided-variables" class="level2">
<h2 class="anchored" data-anchor-id="user-provided-variables">User provided variables</h2>
<p>Here we just provide some defaults to variables that the user will set later in the script.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># User provided variables</span></span>
<span id="cb13-2"><span class="va" style="color: #111111;">HOST_NAME</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"computer"</span></span>
<span id="cb13-3"><span class="va" style="color: #111111;">KERNEL_VERSION</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"default"</span></span>
<span id="cb13-4"><span class="va" style="color: #111111;">MAIN_DISK</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/dev/sda"</span></span>
<span id="cb13-5"><span class="va" style="color: #111111;">ROOT_PWD</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">""</span></span>
<span id="cb13-6"><span class="va" style="color: #111111;">ANSIBLE_PWD</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">""</span></span></code></pre></div>
</section>
<section id="common-helper-functions" class="level2">
<h2 class="anchored" data-anchor-id="common-helper-functions">Common helper functions</h2>
<p>The next section has a series of small functions that will be used throughout the larger script. Let’s see what they do. The first one is:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="fu" style="color: #4758AB;">print_line()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb14-2">  <span class="bu" style="color: null;">printf</span> <span class="st" style="color: #20794D;">"%</span><span class="va" style="color: #111111;">$(</span><span class="fu" style="color: #4758AB;">tput</span> cols<span class="va" style="color: #111111;">)</span><span class="st" style="color: #20794D;">s\n"</span> <span class="kw" style="color: #003B4F;">|</span> <span class="fu" style="color: #4758AB;">tr</span> <span class="st" style="color: #20794D;">' '</span> <span class="st" style="color: #20794D;">'-'</span> <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>The function name gives a pretty solid hint what it does. <code>printf</code> Allows you to print a combination of strings and variables along with specified formatting for the variables. There’s some good docs <a href="https://www.linuxjournal.com/content/bashs-built-printf-function">here</a>. <code>tput</code> <a href="http://linuxcommand.org/lc3_adv_tput.php">provides information about the current terminal</a>, in this case <code>cols</code> says the number of columns that make up a row in the terminal. In my VM <code>tput cols</code> returns <code>100</code> so the <code>printf</code> would resolve to <code>printf "%100s\n"</code> which means we’ll print spaces across the width of the terminal. <code>|&amp;</code> means to take the output (both from standard error and standard output, as opposed to just <code>|</code> which only return standard output) of the previous command and pass it as an input to the following command. <code>tr</code> in turn replaces the first string with the second, so we turn spaces into dashes, creating a line of dashes across the screen. Finally, that line of dashes is piped to <code>tee -a</code> which sends its input both to standard output and a file. The <code>-a</code> flag means to append the output to the file rather than overwriting it. All of that to say this function prints a line of dashes across your screen and into the logfile we defined above.</p>
<p>Next up we have <code>blank_line</code>, which based on the explanation above is pretty self explanatory.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="fu" style="color: #4758AB;">blank_line()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb15-2">  <span class="bu" style="color: null;">echo</span> <span class="at" style="color: #657422;">-e</span> <span class="st" style="color: #20794D;">"\n"</span> <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>Next up is <code>print_title</code></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="fu" style="color: #4758AB;">print_title()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">clear</span></span>
<span id="cb16-3">  <span class="ex" style="color: null;">print_line</span></span>
<span id="cb16-4">  <span class="bu" style="color: null;">echo</span> <span class="at" style="color: #657422;">-e</span> <span class="st" style="color: #20794D;">"# </span><span class="va" style="color: #111111;">${Bold}$1${Reset}</span><span class="st" style="color: #20794D;">"</span> <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb16-5">  <span class="ex" style="color: null;">print_line</span></span>
<span id="cb16-6">  <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">""</span> <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb16-7"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p><code>clear</code> clears the screen. Everything else has been explained except <code>$1</code> which is just the first argument passed to the function. This means calling <code>print_title "This is the title"</code> would clear the screen, print a line of dashes to the screen and log file, print <code>This is the title</code> to the screen and log file, another line, and then start at the beginning of a new line for whatever text follows.</p>
<p>After that is <code>print_title_info</code></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="fu" style="color: #4758AB;">print_title_info()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb17-2">  <span class="va" style="color: #111111;">T_COLS</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$(</span><span class="fu" style="color: #4758AB;">tput</span> cols<span class="va" style="color: #111111;">)</span></span>
<span id="cb17-3">  <span class="bu" style="color: null;">echo</span> <span class="at" style="color: #657422;">-e</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${Bold}$1${Reset}</span><span class="st" style="color: #20794D;">\n"</span> <span class="kw" style="color: #003B4F;">|</span> <span class="fu" style="color: #4758AB;">fold</span> <span class="at" style="color: #657422;">-sw</span> <span class="va" style="color: #111111;">$((T_COLS</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">18</span><span class="va" style="color: #111111;">))</span> <span class="kw" style="color: #003B4F;">|</span> <span class="fu" style="color: #4758AB;">sed</span> <span class="st" style="color: #20794D;">'s/^/\t/'</span> <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p><code>echo</code> just prints some text, the <code>-e</code> flag tells it to interpret escaped characters, so <code>\t</code> will show a tab rather than the literal <code>\t</code>. That gets piped to <a href="https://ss64.com/bash/fold.html">fold</a>, which wraps the text at 18 characters less than the width of the terminal. <code>-s</code> tells it to wrap at the last whitespace before the column limit (so don’t wrap in the middle of a word) and <code>w</code> is how you specify the column width to wrap on. After that we pipe the output to <a href="https://www.digitalocean.com/community/tutorials/the-basics-of-using-the-sed-stream-editor-to-manipulate-text-in-linux">sed</a> which I frankly find intimidating. This one’s not so bad though. <code>'s/&lt;pattern&gt;/&lt;other pattern&gt;/'</code> just performs a find replace of <code>&lt;pattern&gt;</code> for <code>&lt;other pattern&gt;</code> in each line of text that’s passed in. The patterns can be regular expressions, which I also find intimidating to work with, but this one is just saying to replace the beginning of the line (that’s what <code>^</code>) means with a tab. Not so terrible.</p>
<p>The next several functions repeat the general concepts above, just with different formatting (red font for errors for example) so I won’t reproduce them here.</p>
<p>Next up is <code>pause_function</code></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="fu" style="color: #4758AB;">pause_function()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb18-2">  <span class="ex" style="color: null;">print_line</span></span>
<span id="cb18-3">  <span class="bu" style="color: null;">read</span> <span class="at" style="color: #657422;">-re</span> <span class="at" style="color: #657422;">-sn</span> 1 <span class="at" style="color: #657422;">-p</span> <span class="st" style="color: #20794D;">"Press enter to continue..."</span></span>
<span id="cb18-4"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>In the original code the <code>read</code> line was in an <code>if</code> block that was based on a variable that wasn’t set anywhere in the script. I assume that was planned to build fully unattended builds eventually, but I took it out for now at least. <code>read</code> receives input from the user. <code>-re</code> specifies not to allow backslashes to escape characters and to use <code>Readline</code> to obtain the line in an interactive shell. <code>-s</code> tells read not to echo input to the terminal, <code>n 1</code> tells it how many characters of input to wait for. <code>-p</code> tells it what text to prompt with.</p>
<p>Next up is <code>arch-chroot</code></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="fu" style="color: #4758AB;">arch_chroot()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb19-2">  <span class="ex" style="color: null;">arch-chroot</span> /mnt /bin/bash <span class="at" style="color: #657422;">-c</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${1}</span><span class="st" style="color: #20794D;">"</span> <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb19-3"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>This is cool, when I’ve tried to build my own version of this in the past I broke things up into a pre and post <a href="https://wiki.archlinux.org/index.php/Chroot">chroot</a> because I couldn’t figure out how to get my script to change contexts. This one does it by just sending the commands one at a time into the chrooted environment. Neat!</p>
<p>The final helper is <code>is_package_installed</code></p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="fu" style="color: #4758AB;">is_package_installed()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb20-2">  <span class="co" style="color: #5E5E5E;">#check if a package is already installed</span></span>
<span id="cb20-3">  <span class="cf" style="color: #003B4F;">for</span> PKG <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">$1</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb20-4">    <span class="ex" style="color: null;">pacman</span> <span class="at" style="color: #657422;">-Q</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$PKG</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">&amp;&gt;</span>/dev/null <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb20-5">  <span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb20-6">  <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb20-7"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p><code>pacman -Q</code> searches for a package matching the subsequent argument. If it finds it it will return its full name and version. If it can’t it will return an error. So this function will return 0 if any packages are found, and 1 if none of them are.</p>
</section>
<section id="verification-functions" class="level2">
<h2 class="anchored" data-anchor-id="verification-functions">Verification functions</h2>
<p>These are also helper functions, but they’re specifically designed to make sure the script is being run from the correct environment.</p>
<p>First up is <code>check_root</code></p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="fu" style="color: #4758AB;">check_root()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb21-2">  <span class="ex" style="color: null;">print_info</span> <span class="st" style="color: #20794D;">"Checking root permissions..."</span></span>
<span id="cb21-3"></span>
<span id="cb21-4">  <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$(</span><span class="fu" style="color: #4758AB;">id</span> <span class="at" style="color: #657422;">-u</span><span class="va" style="color: #111111;">)</span><span class="st" style="color: #20794D;">"</span> <span class="ot" style="color: #003B4F;">!=</span> <span class="st" style="color: #20794D;">"0"</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb21-5">    <span class="ex" style="color: null;">error_msg</span> <span class="st" style="color: #20794D;">"ERROR! You must execute the script as the 'root' user."</span></span>
<span id="cb21-6">  <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb21-7"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p><code>id -u</code> returns the user id. Since Root is always user 0 on a system we know this isn’t being run as root and the script will fail.</p>
<p>Next up is <code>check_archlinux</code></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="fu" style="color: #4758AB;">check_archlinux()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb22-2">  <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">!</span> <span class="ot" style="color: #003B4F;">-e</span> /etc/arch-release <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb22-3">    <span class="ex" style="color: null;">error_msg</span> <span class="st" style="color: #20794D;">"ERROR! You must execute the script on Arch Linux."</span></span>
<span id="cb22-4">  <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb22-5"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p><code>-e &lt;file&gt;</code> checks if a file exists, so if <code>/etc/arch-release</code> does not exist (it’s an empty file on the USB boot system) then we’re not on Arch and had better exit.</p>
<p>Next up is <code>check_boot_system</code></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="fu" style="color: #4758AB;">check_boot_system()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb23-2">  <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$(</span><span class="fu" style="color: #4758AB;">cat</span> /sys/class/dmi/id/sys_vendor<span class="va" style="color: #111111;">)</span><span class="st" style="color: #20794D;">"</span> <span class="ot" style="color: #003B4F;">==</span> <span class="st" style="color: #20794D;">'Apple Inc.'</span> <span class="kw" style="color: #003B4F;">]]</span> <span class="kw" style="color: #003B4F;">||</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$(</span><span class="fu" style="color: #4758AB;">cat</span> /sys/class/dmi/id/sys_vendor<span class="va" style="color: #111111;">)</span><span class="st" style="color: #20794D;">"</span> <span class="ot" style="color: #003B4F;">==</span> <span class="st" style="color: #20794D;">'Apple Computer, Inc.'</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb23-3">    <span class="ex" style="color: null;">modprobe</span> <span class="at" style="color: #657422;">-r</span> <span class="at" style="color: #657422;">-q</span> efivars <span class="kw" style="color: #003B4F;">||</span> <span class="fu" style="color: #4758AB;">true</span> <span class="co" style="color: #5E5E5E;"># if MAC</span></span>
<span id="cb23-4">  <span class="cf" style="color: #003B4F;">else</span></span>
<span id="cb23-5">    <span class="ex" style="color: null;">modprobe</span> <span class="at" style="color: #657422;">-q</span> efivarfs <span class="co" style="color: #5E5E5E;"># all others</span></span>
<span id="cb23-6">  <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb23-7"></span>
<span id="cb23-8">  <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">-d</span> <span class="st" style="color: #20794D;">"/sys/firmware/efi/"</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb23-9">    <span class="co" style="color: #5E5E5E;"># Mount efivarfs if it is not already mounted</span></span>
<span id="cb23-10">    <span class="co" style="color: #5E5E5E;"># shellcheck disable=SC2143</span></span>
<span id="cb23-11">    <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">-z</span> <span class="va" style="color: #111111;">$(</span><span class="fu" style="color: #4758AB;">mount</span> <span class="kw" style="color: #003B4F;">|</span> <span class="fu" style="color: #4758AB;">grep</span> /sys/firmware/efi/efivars<span class="va" style="color: #111111;">)</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb23-12">      <span class="fu" style="color: #4758AB;">mount</span> <span class="at" style="color: #657422;">-t</span> efivarfs efivarfs /sys/firmware/efi/efivars</span>
<span id="cb23-13">    <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb23-14">    <span class="va" style="color: #111111;">UEFI</span><span class="op" style="color: #5E5E5E;">=</span>1</span>
<span id="cb23-15">  <span class="cf" style="color: #003B4F;">else</span></span>
<span id="cb23-16">    <span class="va" style="color: #111111;">UEFI</span><span class="op" style="color: #5E5E5E;">=</span>0</span>
<span id="cb23-17">  <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb23-18"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>The purpose of this section is to <a href="https://wiki.archlinux.org/index.php/installation_guide#Verify_the_boot_mode">verify the boot mode</a>. Pretty much any system I can imagine installing on these days will be UEFI, but it doesn’t hurt to check. I’m not totally sure what the first little bit is doing, and I don’t have a mac to test. The <code>-r</code> flag is to remove a module from the kernel, rather than add it like the normal command. <code>modprobe -q efivarfs</code> will add the <code>efivarfs</code> module to the kernel, and fail quietly if it can’t find that module (that’s the <code>-q</code> flag). As described in the install guide, if you have a <code>/sys/firmware/efi/</code> directory, which is what the first block of the second if statement is checking, then your system is EFI. The next part describes what it’s going to do (mount efivarfs if it’s not already mounted), but let’s dig into how it does that. <code>-z</code> returns true if the length of an evaluated string is zero. <code>mount</code> without any arguments returns all mountpoints in the system. We pipe that into <code>grep</code> which will return <code>/sys/firmwar/efi/efivars</code> if it’s mounted and an empty string if not, which accomplishes the goal. The last part of the script sets the variable UEFI to identify if the system is EFI or BIOS.</p>
<p>Next up is <code>check_wifi</code></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="fu" style="color: #4758AB;">check_wifi()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb24-2">  <span class="va" style="color: #111111;">has_wifi</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">($(</span><span class="fu" style="color: #4758AB;">ls</span> /sys/class/net <span class="kw" style="color: #003B4F;">|</span> <span class="fu" style="color: #4758AB;">grep</span> wlan<span class="va" style="color: #111111;">))</span></span>
<span id="cb24-3">  <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">[</span> <span class="ot" style="color: #003B4F;">-n</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$has_wifi</span><span class="st" style="color: #20794D;">"</span> <span class="bu" style="color: null;">]</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb24-4">    <span class="va" style="color: #111111;">WIFI</span><span class="op" style="color: #5E5E5E;">=</span>1</span>
<span id="cb24-5">  <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb24-6"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>As per the <a href="https://wiki.archlinux.org/index.php/Network_configuration#Listing_network_interfaces">Arch Wikie</a> <code>/sys/class/net</code> lists all network devices. So if I list that directory and match on <code>wlan</code> then I know there’s a wireless device. I’ll use this to determine whether or not to install wireless tools when loading software.</p>
</section>
<section id="prompts-user-interaction" class="level2">
<h2 class="anchored" data-anchor-id="prompts-user-interaction">Prompts / User interaction</h2>
<p>The first prompt asks for a hostname for the system. It had some code for auto naming that I trimmed out. The rest of it is pretty self explanatory:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="fu" style="color: #4758AB;">ask_for_hostname()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb25-2">  <span class="ex" style="color: null;">print_title</span> <span class="st" style="color: #20794D;">"Hostname"</span></span>
<span id="cb25-3">  <span class="ex" style="color: null;">print_title_info</span> <span class="st" style="color: #20794D;">"Pick a hostname for this machine.  Press enter to have a random hostname selected."</span></span>
<span id="cb25-4">  <span class="bu" style="color: null;">read</span> <span class="at" style="color: #657422;">-rp</span> <span class="st" style="color: #20794D;">"Hostname [ex: archlinux]: "</span> <span class="va" style="color: #111111;">HOST_NAME</span></span>
<span id="cb25-5">  <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="va" style="color: #111111;">$HOST_NAME</span> <span class="ot" style="color: #003B4F;">==</span> <span class="st" style="color: #20794D;">""</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb25-6">    <span class="va" style="color: #111111;">HOST_NAME</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"arch-</span><span class="va" style="color: #111111;">$((</span><span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">RANDOM</span> <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">1000</span><span class="va" style="color: #111111;">))</span><span class="st" style="color: #20794D;">.tts.lan"</span></span>
<span id="cb25-7">  <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb25-8"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>The <code>read</code> command takes inputs, the <code>-r</code> flag prevents special characters from being included, and <code>-p</code> displays the text that follows as a prompt without a newline before taking the input.</p>
<p>The last block says if the input is empty to give a hostname like <code>arch-[random number 1-1000].tts.lan</code>.</p>
<p>Next up we’re determine which hard disk to install on. Note that this isn’t handling partitioning or anything yet.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb26-1"><span class="fu" style="color: #4758AB;">ask_for_main_disk()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb26-2">  <span class="ex" style="color: null;">print_info</span> <span class="st" style="color: #20794D;">"Determining main disk..."</span></span>
<span id="cb26-3">  <span class="va" style="color: #111111;">devices_list</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">($(</span><span class="ex" style="color: null;">lsblk</span> <span class="at" style="color: #657422;">--nodeps</span> <span class="at" style="color: #657422;">--noheading</span> <span class="at" style="color: #657422;">--list</span> <span class="at" style="color: #657422;">--exclude</span> 1,11,7 <span class="kw" style="color: #003B4F;">|</span> <span class="fu" style="color: #4758AB;">awk</span> <span class="st" style="color: #20794D;">'{print "/dev/" $1}'</span><span class="va" style="color: #111111;">))</span></span>
<span id="cb26-4"></span>
<span id="cb26-5">  <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="va" style="color: #111111;">${</span><span class="op" style="color: #5E5E5E;">#</span><span class="va" style="color: #111111;">devices_list</span><span class="op" style="color: #5E5E5E;">[@]</span><span class="va" style="color: #111111;">}</span> <span class="ot" style="color: #003B4F;">==</span> 1 <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb26-6">    <span class="va" style="color: #111111;">device</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">${devices_list</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span><span class="va" style="color: #111111;">}</span></span>
<span id="cb26-7">  <span class="cf" style="color: #003B4F;">else</span></span>
<span id="cb26-8">    <span class="ex" style="color: null;">print_title</span> <span class="st" style="color: #20794D;">"Main Disk Selection"</span></span>
<span id="cb26-9">    <span class="ex" style="color: null;">print_title_info</span> <span class="st" style="color: #20794D;">"Select which disk to use for the main installation (where root and boot will go)."</span></span>
<span id="cb26-10">    <span class="ex" style="color: null;">lsblk</span> <span class="at" style="color: #657422;">--nodeps</span> <span class="at" style="color: #657422;">--list</span> <span class="at" style="color: #657422;">--exclude</span> 1,11,7 <span class="at" style="color: #657422;">--output</span> <span class="st" style="color: #20794D;">"name,size,type"</span></span>
<span id="cb26-11">    <span class="ex" style="color: null;">blank_line</span></span>
<span id="cb26-12">    <span class="va" style="color: #111111;">PS3</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Enter your option: "</span></span>
<span id="cb26-13">    <span class="bu" style="color: null;">echo</span> <span class="at" style="color: #657422;">-e</span> <span class="st" style="color: #20794D;">"Select main drive:\n"</span></span>
<span id="cb26-14">    <span class="cf" style="color: #003B4F;">select</span> device <span class="kw" style="color: #003B4F;">in</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${devices_list</span><span class="op" style="color: #5E5E5E;">[@]</span><span class="va" style="color: #111111;">}</span><span class="st" style="color: #20794D;">"</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb26-15">      <span class="cf" style="color: #003B4F;">if</span> <span class="ex" style="color: null;">contains_element</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${device}</span><span class="st" style="color: #20794D;">"</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${devices_list</span><span class="op" style="color: #5E5E5E;">[@]</span><span class="va" style="color: #111111;">}</span><span class="st" style="color: #20794D;">"</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb26-16">        <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb26-17">      <span class="cf" style="color: #003B4F;">else</span></span>
<span id="cb26-18">        <span class="ex" style="color: null;">invalid_option</span></span>
<span id="cb26-19">      <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb26-20">    <span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb26-21">  <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb26-22">  <span class="va" style="color: #111111;">MAIN_DISK</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$device</span></span>
<span id="cb26-23"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>The first line calls <a href="https://man7.org/linux/man-pages/man8/lsblk.8.html">lsblk</a> to list all available block devices. <code>--nodeps</code> tells it not to show holder devices, so for example if I have an <code>sda</code> device with two partitions - <code>sda1</code> and <code>sda2</code> it will only show <code>sda</code>, which is what we want since we’re just picking the disk itself at this stage. <code>--noheading</code> drops column headers, which we want since we’re just going to parse this list. <code>--list</code> produces the output as a list, which we want in order to make a list of potential disks to select. <code>--exclude 1,11,17</code> tells it not to list RAM or optical drive devices. The output of that list is piped into <code>awk</code> so that <code>/dev/</code> can be prepended to it.</p>
<p>The next line says that if the array has only one entry (there’s only one disk available) then we just use that device. If we have more than one device the script prints out a list of them using the same command used to build the list of available disks but showing column headers and including some details to help select the correct disk.</p>
<p><code>PS3</code> sets the prompt used by the select command. The select statement has you pick a device and loops if you haven’t selected one of the options in the list until you do. Finally we set <code>MAIN_DISK</code> to the device we want to install on.</p>
<p>The original script has some similar functions to pick a second disk, but I’m not going to be using that option so I’m omitting it.</p>
<p>There are a few other selection scripts (to set a root password and kernel version for example), but there’s nothing new in terms of BASH in them so I’ll omit them from this post.</p>
</section>
<section id="installationconfiguration-options" class="level2">
<h2 class="anchored" data-anchor-id="installationconfiguration-options">Installation/configuration options</h2>
<p>Now we get to functions that actually help with the installation and configuration of the system.</p>
<p>First is <code>configure_mirrorlist</code></p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="fu" style="color: #4758AB;">configure_mirrorlist()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb27-2">  <span class="ex" style="color: null;">print_info</span> <span class="st" style="color: #20794D;">"Configuring repository mirrorlist"</span></span>
<span id="cb27-3"></span>
<span id="cb27-4">  <span class="ex" style="color: null;">pacman</span> <span class="at" style="color: #657422;">-Syy</span> <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb27-5"></span>
<span id="cb27-6">  <span class="co" style="color: #5E5E5E;"># Install reflector</span></span>
<span id="cb27-7">  <span class="ex" style="color: null;">pacman</span> <span class="at" style="color: #657422;">-S</span> <span class="at" style="color: #657422;">--noconfirm</span> reflector <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb27-8"></span>
<span id="cb27-9">  <span class="ex" style="color: null;">print_status</span> <span class="st" style="color: #20794D;">"    Backing up the original mirrorlist..."</span></span>
<span id="cb27-10">  <span class="fu" style="color: #4758AB;">rm</span> <span class="at" style="color: #657422;">-f</span> <span class="st" style="color: #20794D;">"/etc/pacman.d/mirrorlist.orig"</span> <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb27-11">  <span class="fu" style="color: #4758AB;">mv</span> <span class="at" style="color: #657422;">-i</span> <span class="st" style="color: #20794D;">"/etc/pacman.d/mirrorlist"</span> <span class="st" style="color: #20794D;">"/etc/pacman.d/mirrorlist.orig"</span> <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb27-12"></span>
<span id="cb27-13">  <span class="ex" style="color: null;">print_status</span> <span class="st" style="color: #20794D;">"    Rotating the new list into place..."</span></span>
<span id="cb27-14">  <span class="co" style="color: #5E5E5E;"># Run reflector</span></span>
<span id="cb27-15">  <span class="ex" style="color: null;">/usr/bin/reflector</span> <span class="at" style="color: #657422;">--score</span> 100 <span class="at" style="color: #657422;">--fastest</span> 20 <span class="at" style="color: #657422;">--age</span> 12 <span class="at" style="color: #657422;">--sort</span> rate <span class="at" style="color: #657422;">--protocol</span> https <span class="at" style="color: #657422;">--save</span> /etc/pacman.d/mirrorlist <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb27-16"></span>
<span id="cb27-17">  <span class="co" style="color: #5E5E5E;"># Allow global read access (required for non-root yaourt execution)</span></span>
<span id="cb27-18">  <span class="fu" style="color: #4758AB;">chmod</span> +r /etc/pacman.d/mirrorlist <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb27-19"></span>
<span id="cb27-20">  <span class="co" style="color: #5E5E5E;"># Update one more time</span></span>
<span id="cb27-21">  <span class="ex" style="color: null;">pacman</span> <span class="at" style="color: #657422;">-Syy</span> <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb27-22"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p><code>pacman -Syy</code> says to sync all available packages from the master repository. The <code>-S</code> flag is for sync, and <code>yy</code> forces a refresh even if the list appears to be up to date.</p>
<p>Next the script installs <a href="https://wiki.archlinux.org/index.php/Reflector">reflector</a> in order to update and optimize the list of mirrors that will be used for downloading packages.</p>
<p>The rest of the script is pretty well commented and straightforward.</p>
<section id="partitioning" class="level3">
<h3 class="anchored" data-anchor-id="partitioning">Partitioning</h3>
<p>The script I’m templating off of is designed to wipe an entire disk. I generally dual boot Windows so I definitely don’t want that option. In light of that I had to tweak this section a fair bit. Rather than wiping the whole disk and creating new partitions like the template script, I want to identify an existing boot and linux partition and install to them. See the TLDR section for setting up a fresh disk. If you’ve already installed Arch on the disk you’re targeting you should also clear out the partition with the LVMs on it and start with a blank slate. That’s not done by the script, check the TLDR section for how to manage that.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="fu" style="color: #4758AB;">find_install_partition()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb28-2">  <span class="ex" style="color: null;">print_title</span> <span class="st" style="color: #20794D;">"Installation partition selection"</span></span>
<span id="cb28-3">  <span class="ex" style="color: null;">print_title_info</span> <span class="st" style="color: #20794D;">"Select the partition to install Arch. This should be an already existing boot partition. If you don't see what you expect here STOP and run cfdisk or something to figure it out."</span></span>
<span id="cb28-4">  <span class="va" style="color: #111111;">partition_list</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">($(</span><span class="ex" style="color: null;">lsblk</span> <span class="va" style="color: #111111;">$MAIN_DISK</span> <span class="at" style="color: #657422;">--noheading</span> <span class="at" style="color: #657422;">--list</span> <span class="at" style="color: #657422;">--output</span> NAME <span class="kw" style="color: #003B4F;">|</span> <span class="fu" style="color: #4758AB;">awk</span> <span class="st" style="color: #20794D;">'{print "/dev/" $1}'</span> <span class="kw" style="color: #003B4F;">|</span> <span class="fu" style="color: #4758AB;">grep</span> <span class="st" style="color: #20794D;">"[0-9]$"</span><span class="va" style="color: #111111;">))</span></span>
<span id="cb28-5">  <span class="ex" style="color: null;">blank_line</span></span>
<span id="cb28-6">  <span class="va" style="color: #111111;">PS3</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Enter your option"</span>:</span>
<span id="cb28-7">  <span class="ex" style="color: null;">lsblk</span> <span class="va" style="color: #111111;">$MAIN_DISK</span> <span class="at" style="color: #657422;">--output</span> NAME,FSTYPE,LABEL,SIZE</span>
<span id="cb28-8">  <span class="bu" style="color: null;">echo</span> <span class="at" style="color: #657422;">-e</span> <span class="st" style="color: #20794D;">"select a partition"</span></span>
<span id="cb28-9">  <span class="cf" style="color: #003B4F;">select</span> partition <span class="kw" style="color: #003B4F;">in</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${partition_list</span><span class="op" style="color: #5E5E5E;">[@]</span><span class="va" style="color: #111111;">}</span><span class="st" style="color: #20794D;">"</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb28-10">    <span class="cf" style="color: #003B4F;">if</span> <span class="ex" style="color: null;">contains_element</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$partition</span><span class="st" style="color: #20794D;">"</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${partition_list</span><span class="op" style="color: #5E5E5E;">[@]</span><span class="va" style="color: #111111;">}</span><span class="st" style="color: #20794D;">"</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb28-11">      <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb28-12">    <span class="cf" style="color: #003B4F;">else</span></span>
<span id="cb28-13">      <span class="ex" style="color: null;">invalid_option</span></span>
<span id="cb28-14">    <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb28-15">  <span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb28-16">  <span class="va" style="color: #111111;">INSTALL_PARTITION</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$partition</span></span>
<span id="cb28-17"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>This works similarly to the main disk selection, except I formatted the output slightly differently. The one completely new command I added was the last <code>| grep "[0-9]$"</code>. That filters the output to only show entries that end with a number (<code>$</code> means end of line). I couldn’t figure out a way to have lsblk not list the block device (the opposite of what we wanted in the main disk selection) so I filter it out. As an example if I have a disk <code>/dev/sda</code> with partitions <code>sda1, sda2, sda3</code> before the grep I’d get:</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb29-1"><span class="ex" style="color: null;">/dev/sda</span></span>
<span id="cb29-2"><span class="ex" style="color: null;">/dev/sda1</span></span>
<span id="cb29-3"><span class="ex" style="color: null;">/dev/sda2</span></span>
<span id="cb29-4"><span class="ex" style="color: null;">/dev/sda3</span></span></code></pre></div>
<p>I really don’t want to accidentally try and make a partition on the whole device, so I filter that out so the list is just:</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="ex" style="color: null;">/dev/sda1</span></span>
<span id="cb30-2"><span class="ex" style="color: null;">/dev/sda2</span></span>
<span id="cb30-3"><span class="ex" style="color: null;">/dev/sda3</span></span></code></pre></div>
<p>There’s a practically identical function called <code>find_boot_partition</code> that does the same thing but identifies the boot partition for installation.</p>
<p>The next step is to create a physical and logical volume for the operating system using <a href="https://wiki.archlinux.org/index.php/LVM">LVM</a></p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb31-1"><span class="fu" style="color: #4758AB;">setup_lvm()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb31-2">  <span class="ex" style="color: null;">print_info</span> <span class="st" style="color: #20794D;">"Setting up LVM"</span></span>
<span id="cb31-3"></span>
<span id="cb31-4">  <span class="ex" style="color: null;">pvcreate</span> <span class="va" style="color: #111111;">$INSTALL_PARTITION</span></span>
<span id="cb31-5">  <span class="ex" style="color: null;">vgcreate</span> <span class="st" style="color: #20794D;">"vg_main"</span> <span class="va" style="color: #111111;">$INSTALL_PARTITION</span></span>
<span id="cb31-6"></span>
<span id="cb31-7">  <span class="ex" style="color: null;">lvcreate</span> <span class="at" style="color: #657422;">-l</span> 5%VG <span class="st" style="color: #20794D;">"vg_main"</span> <span class="at" style="color: #657422;">-n</span> lv_var</span>
<span id="cb31-8">  <span class="ex" style="color: null;">lvcreate</span> <span class="at" style="color: #657422;">-l</span> 45%VG <span class="st" style="color: #20794D;">"vg_main"</span> <span class="at" style="color: #657422;">-n</span> lv_root</span>
<span id="cb31-9">  <span class="ex" style="color: null;">lvcreate</span> <span class="at" style="color: #657422;">-l</span> 40%VG <span class="st" style="color: #20794D;">"vg_main"</span> <span class="at" style="color: #657422;">-n</span> lv_home</span>
<span id="cb31-10"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>This one’s actually pretty readable. We create a physical volume on the install partition identified in the previous section, create a virtual group on it, and then create logical volumes within that.</p>
<p>Next we format and mount the partitions:</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb32-1"><span class="fu" style="color: #4758AB;">format_partitions()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb32-2">  <span class="ex" style="color: null;">print_info</span> <span class="st" style="color: #20794D;">"Formatting partitions"</span></span>
<span id="cb32-3"></span>
<span id="cb32-4">  <span class="ex" style="color: null;">mkfs.ext4</span> <span class="st" style="color: #20794D;">"/dev/mapper/vg_main-lv_var"</span></span>
<span id="cb32-5">  <span class="ex" style="color: null;">mkfs.ext4</span> <span class="st" style="color: #20794D;">"/dev/mapper/vg_main-lv_root"</span></span>
<span id="cb32-6">  <span class="ex" style="color: null;">mkfs.ext4</span> <span class="st" style="color: #20794D;">"/dev/mapper/vg_main-lv_home"</span></span>
<span id="cb32-7"><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb32-8"></span>
<span id="cb32-9"><span class="fu" style="color: #4758AB;">mount_partitions()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb32-10">  <span class="ex" style="color: null;">print_info</span> <span class="st" style="color: #20794D;">"Mounting partitions"</span></span>
<span id="cb32-11"></span>
<span id="cb32-12">  <span class="co" style="color: #5E5E5E;"># First load the root</span></span>
<span id="cb32-13">  <span class="fu" style="color: #4758AB;">mount</span> <span class="at" style="color: #657422;">-t</span> ext4 <span class="at" style="color: #657422;">-o</span> defaults,rw,relatime,errors=remount-ro /dev/mapper/vg_main-lv_root /mnt</span>
<span id="cb32-14"></span>
<span id="cb32-15">  <span class="co" style="color: #5E5E5E;"># Create the paths for the other mounts</span></span>
<span id="cb32-16">  <span class="fu" style="color: #4758AB;">mkdir</span> <span class="at" style="color: #657422;">-p</span> <span class="st" style="color: #20794D;">"/mnt/boot/efi"</span></span>
<span id="cb32-17">  <span class="fu" style="color: #4758AB;">mkdir</span> <span class="at" style="color: #657422;">-p</span> <span class="st" style="color: #20794D;">"/mnt/var"</span></span>
<span id="cb32-18">  <span class="fu" style="color: #4758AB;">mkdir</span> <span class="at" style="color: #657422;">-p</span> <span class="st" style="color: #20794D;">"/mnt/home"</span></span>
<span id="cb32-19"></span>
<span id="cb32-20">  <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="va" style="color: #111111;">$UEFI</span> <span class="ot" style="color: #003B4F;">==</span> 1 <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb32-21">    <span class="fu" style="color: #4758AB;">mount</span> <span class="at" style="color: #657422;">-t</span> vfat <span class="at" style="color: #657422;">-o</span> defaults,rw,noatime,utf8,errors=remount-ro <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${MAIN_DISK}</span><span class="st" style="color: #20794D;">1"</span> <span class="st" style="color: #20794D;">"/mnt/boot/efi"</span></span>
<span id="cb32-22">  <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb32-23"></span>
<span id="cb32-24">  <span class="co" style="color: #5E5E5E;"># Mount others</span></span>
<span id="cb32-25">  <span class="fu" style="color: #4758AB;">mount</span> <span class="at" style="color: #657422;">-t</span> ext4 <span class="at" style="color: #657422;">-o</span> defaults,rw,noatime /dev/mapper/vg_main-lv_var /mnt/var</span>
<span id="cb32-26">  <span class="fu" style="color: #4758AB;">mount</span> <span class="at" style="color: #657422;">-t</span> ext4 <span class="at" style="color: #657422;">-o</span> defaults,rw,noatime /dev/mapper/vg_main-lv_home /mnt/home</span>
<span id="cb32-27"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>Again, most of this is pretty readable. The one that I didn’t know about was the <code>noatime</code> option. In the original script it was set to <code>relatime</code>, but after reading <a href="https://blog.confirm.ch/mount-options-atime-vs-relatime/">this post</a> it seems like I want <code>noatime</code> to improve the life of my SSD.</p>
</section>
</section>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>The <code>install_base_system</code> function doesn’t really introduce any new bash stuff, which was my main goal in writing out how this all worked line by line. I’ll present it below without further comment.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="fu" style="color: #4758AB;">install_base_system()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb33-2">  <span class="ex" style="color: null;">print_info</span> <span class="st" style="color: #20794D;">"Installing base system"</span></span>
<span id="cb33-3"></span>
<span id="cb33-4">  <span class="ex" style="color: null;">pacman</span> <span class="at" style="color: #657422;">-S</span> <span class="at" style="color: #657422;">--noconfirm</span> archlinux-keyring <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb33-5"></span>
<span id="cb33-6">  <span class="co" style="color: #5E5E5E;"># Install kernel</span></span>
<span id="cb33-7">  <span class="cf" style="color: #003B4F;">case</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$KERNEL_VERSION</span><span class="st" style="color: #20794D;">"</span> <span class="kw" style="color: #003B4F;">in</span></span>
<span id="cb33-8">  <span class="st" style="color: #20794D;">"lts"</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb33-9">    <span class="ex" style="color: null;">pacstrap</span> /mnt base base-devel linux-lts linux-lts-headers linux-firmware <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb33-10">    <span class="kw" style="color: #003B4F;">[[</span> <span class="va" style="color: #111111;">$?</span> <span class="ot" style="color: #003B4F;">-ne</span> 0 <span class="kw" style="color: #003B4F;">]]</span> <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ex" style="color: null;">error_msg</span> <span class="st" style="color: #20794D;">"Installing base system to /mnt failed. Check error messages above."</span></span>
<span id="cb33-11">    <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb33-12">  <span class="st" style="color: #20794D;">"hard"</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb33-13">    <span class="ex" style="color: null;">pacstrap</span> /mnt base base-devel linux-hardened linux-hardened-headers linux-firmware <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb33-14">    <span class="kw" style="color: #003B4F;">[[</span> <span class="va" style="color: #111111;">$?</span> <span class="ot" style="color: #003B4F;">-ne</span> 0 <span class="kw" style="color: #003B4F;">]]</span> <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ex" style="color: null;">error_msg</span> <span class="st" style="color: #20794D;">"Installing base system to /mnt failed. Check error messages above."</span></span>
<span id="cb33-15">    <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb33-16">  <span class="pp" style="color: #AD0000;">*</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb33-17">    <span class="ex" style="color: null;">pacstrap</span> /mnt base base-devel linux linux-headers linux-firmware <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb33-18">    <span class="kw" style="color: #003B4F;">[[</span> <span class="va" style="color: #111111;">$?</span> <span class="ot" style="color: #003B4F;">-ne</span> 0 <span class="kw" style="color: #003B4F;">]]</span> <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ex" style="color: null;">error_msg</span> <span class="st" style="color: #20794D;">"Installing base system to /mnt failed. Check error messages above."</span></span>
<span id="cb33-19">    <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb33-20">  <span class="cf" style="color: #003B4F;">esac</span></span>
<span id="cb33-21"></span>
<span id="cb33-22">  <span class="co" style="color: #5E5E5E;"># Install file system tools</span></span>
<span id="cb33-23">  <span class="ex" style="color: null;">pacstrap</span> /mnt lvm2 dosfstools mtools gptfdisk <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb33-24">  <span class="kw" style="color: #003B4F;">[[</span> <span class="va" style="color: #111111;">$?</span> <span class="ot" style="color: #003B4F;">-ne</span> 0 <span class="kw" style="color: #003B4F;">]]</span> <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ex" style="color: null;">error_msg</span> <span class="st" style="color: #20794D;">"Installing base system to /mnt failed. Check error messages above. Part 4."</span></span>
<span id="cb33-25"></span>
<span id="cb33-26">  <span class="co" style="color: #5E5E5E;"># Install networking tools</span></span>
<span id="cb33-27">  <span class="ex" style="color: null;">pacstrap</span> /mnt dialog networkmanager networkmanager-openvpn <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb33-28">  <span class="kw" style="color: #003B4F;">[[</span> <span class="va" style="color: #111111;">$?</span> <span class="ot" style="color: #003B4F;">-ne</span> 0 <span class="kw" style="color: #003B4F;">]]</span> <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ex" style="color: null;">error_msg</span> <span class="st" style="color: #20794D;">"Installing base system to /mnt failed. Check error messages above. Part 5."</span></span>
<span id="cb33-29"></span>
<span id="cb33-30">  <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="va" style="color: #111111;">$WIFI</span> <span class="ot" style="color: #003B4F;">==</span> 1 <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb33-31">    <span class="ex" style="color: null;">pacstrap</span> /mnt iwd <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb33-32">    <span class="kw" style="color: #003B4F;">[[</span> <span class="va" style="color: #111111;">$?</span> <span class="ot" style="color: #003B4F;">-ne</span> 0 <span class="kw" style="color: #003B4F;">]]</span> <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ex" style="color: null;">error_msg</span> <span class="st" style="color: #20794D;">"Installing base system to /mnt failed. Check error messages above. Wifi"</span></span>
<span id="cb33-33">  <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb33-34"></span>
<span id="cb33-35">  <span class="co" style="color: #5E5E5E;"># Remaining misc tools</span></span>
<span id="cb33-36">  <span class="ex" style="color: null;">pacstrap</span> /mnt reflector git gvim openssh ansible terminus-font systemd-swap <span class="kw" style="color: #003B4F;">|&amp;</span> <span class="fu" style="color: #4758AB;">tee</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">${LOG}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb33-37">  <span class="kw" style="color: #003B4F;">[[</span> <span class="va" style="color: #111111;">$?</span> <span class="ot" style="color: #003B4F;">-ne</span> 0 <span class="kw" style="color: #003B4F;">]]</span> <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ex" style="color: null;">error_msg</span> <span class="st" style="color: #20794D;">"Installing base system to /mnt failed. Check error messages above. Part 6."</span></span>
<span id="cb33-38"></span>
<span id="cb33-39">  <span class="co" style="color: #5E5E5E;"># Add the ssh group</span></span>
<span id="cb33-40">  <span class="ex" style="color: null;">arch_chroot</span> <span class="st" style="color: #20794D;">"groupadd ssh"</span></span>
<span id="cb33-41"></span>
<span id="cb33-42">  <span class="co" style="color: #5E5E5E;"># Set the NetworkManager &amp; ssh services to be enabled</span></span>
<span id="cb33-43">  <span class="ex" style="color: null;">arch_chroot</span> <span class="st" style="color: #20794D;">"systemctl enable NetworkManager.service"</span></span>
<span id="cb33-44">  <span class="ex" style="color: null;">arch_chroot</span> <span class="st" style="color: #20794D;">"systemctl enable wpa_supplicant.service"</span></span>
<span id="cb33-45">  <span class="ex" style="color: null;">arch_chroot</span> <span class="st" style="color: #20794D;">"systemctl enable sshd.service"</span></span>
<span id="cb33-46"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>Next up we have some user account setup and configuration for ansible, which will be used for the rest of the configuration of the machine. The original script added some public keys to the ansible user’s authorized keys file. I’d like to add some automation to handle <a href="http://blog.ianpreston.ca/2020/05/03/ssh.html">my key management approach</a> but the VM I’m working in makes USB passthrough a hassle. (I switched to Hyper-V part way through making this guide as Virtualbox and WSL2 were fighting on my machine).</p>
<p>There’s a script for updating the root user account, but it has a subset of what’s in the ansible account, so let’s just look at that one:</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb34-1"><span class="fu" style="color: #4758AB;">setup_ansible_account()</span> <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb34-2">  <span class="ex" style="color: null;">print_info</span> <span class="st" style="color: #20794D;">"Setting up Ansible account"</span></span>
<span id="cb34-3"></span>
<span id="cb34-4">  <span class="ex" style="color: null;">arch_chroot</span> <span class="st" style="color: #20794D;">"useradd -m -G wheel -s /bin/bash ansible"</span></span>
<span id="cb34-5"></span>
<span id="cb34-6">  <span class="ex" style="color: null;">arch_chroot</span> <span class="st" style="color: #20794D;">"echo -n 'ansible:</span><span class="va" style="color: #111111;">$ANSIBLE_PWD</span><span class="st" style="color: #20794D;">' | chpasswd -c SHA512"</span></span>
<span id="cb34-7"></span>
<span id="cb34-8">  <span class="ex" style="color: null;">arch_chroot</span> <span class="st" style="color: #20794D;">"chfn ansible -f Ansible"</span></span>
<span id="cb34-9"></span>
<span id="cb34-10">  <span class="fu" style="color: #4758AB;">mkdir</span> <span class="at" style="color: #657422;">-p</span> /mnt/home/ansible/.ssh</span>
<span id="cb34-11">  <span class="fu" style="color: #4758AB;">chmod</span> 0700 /mnt/home/ansible/.ssh</span>
<span id="cb34-12">  <span class="ex" style="color: null;">arch_chroot</span> <span class="st" style="color: #20794D;">"chown -R ansible:ansible /home/ansible/.ssh"</span></span>
<span id="cb34-13"></span>
<span id="cb34-14">  <span class="co" style="color: #5E5E5E;"># Add user to the ssh</span></span>
<span id="cb34-15">  <span class="ex" style="color: null;">arch_chroot</span> <span class="st" style="color: #20794D;">"usermod -a -G ssh ansible"</span></span>
<span id="cb34-16"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p><code>useradd</code> does about what you’d expect. <code>-m</code> creates a home directory for that user if it doesn’t exist. <code>-G</code> is followed by a list of groups you want the user to be a part of. In this case we want ansible to be part of <a href="https://en.wikipedia.org/wiki/Wheel_(computing)">wheel</a> so it can perform actions with elevated privileges. <code>chpasswd</code> is a pretty cool way to set a user password from a script without user interaction, <a href="https://linux.die.net/man/8/chpasswd">man pages here</a>. <code>chfn</code> is used to change user info, in this case to give the ansible user the first name Ansible.</p>
</section>
</section>
<section id="conclusion-and-next-steps" class="level1">
<h1>Conclusion and next steps</h1>
<p>After running this script you have a bare bones Arch install. The next step is to create users and install all the software and configurations you need to get a functioning system. This post is already getting really long so I’m going to break that part up into a future post.</p>


</section>

 ]]></description>
  <category>configuration</category>
  <category>linux</category>
  <category>arch</category>
  <category>bash</category>
  <guid>https://ianepreston.github.io/blog/posts/2020-10-14-arch-bootstrap.html</guid>
  <pubDate>Wed, 14 Oct 2020 00:00:00 GMT</pubDate>
  <media:content url="https://ianepreston.github.io/blog/posts/arch/vm_01.PNG" medium="image"/>
</item>
<item>
  <title>Notes on docker-compose</title>
  <link>https://ianepreston.github.io/blog/posts/2020-10-06-docker-compose.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is going to be a grab bag of docker-compose tips and snippets for things that I do commonly enough that I want to write them down but not commonly enough that I remember the syntax offhand.</p>
</section>
<section id="different-file-names" class="level1">
<h1>Different file names</h1>
<p>By default docker-compose wants the compose file to be <code>docker-compose.yml</code> in the same directory as the command is being run. Generally you want to stick with that, but I did come up with a situation where I wanted to give them different names. You can do <code>docker-compose -f &lt;file name&gt; &lt;rest of your commands&gt;</code> to get around this. Note that the <code>-f &lt;file name&gt;</code> has to be at the start, you can’t just put it in like any other flag.</p>
</section>
<section id="env-files" class="level1">
<h1>.env files</h1>
<p>One of the reasons I was trying to have different file names was because I wanted a bunch of different compose files to share a <a href="https://docs.docker.com/compose/env-file/">.env file</a>. My new solution is to have a <code>.env</code> file in the root directory of where I keep my compose files and then use symbolic links to make a link to that master file in each directory. Depending on how I created the link though I would run into a <code>too many levels of symbolic links</code> error. A clean way to solve this is to navigate to the subdirectory and run <code>ln -s ../.env .env</code>. Whatever you put after <code>-s</code> is literally what’s included in the link, so as long as there’s a <code>.env</code> file in the parent folder this will work, regardless of where in your file system you move these directories.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>That’s it for now. I’ll come back and update this document if anything else comes up.</p>


</section>

 ]]></description>
  <category>docker</category>
  <category>tips</category>
  <guid>https://ianepreston.github.io/blog/posts/2020-10-06-docker-compose.html</guid>
  <pubDate>Tue, 06 Oct 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Connecting a Harmony remote to a raspberry pi</title>
  <link>https://ianepreston.github.io/blog/posts/2020-07-20-pi-bluetooth.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is a little stub post for me. I have a Logitech Harmony remote that I use to control a raspberry pi running Kodi for my media center. Occasionally I have to reinstall it and I always have to google a few things to remember how to do it, so this is just to consolidate that info.</p>
</section>
<section id="get-the-harmony-bluetooth-id" class="level1">
<h1>Get the Harmony Bluetooth ID</h1>
<p>Since I don’t have a GUI on my pi beyond Kodi, I have to do all the connecting over the command line. Which means it will be much easier if I have the device ID for the remote available. To find it I pair the remote with a Windows machine, and then from <code>Control Panel\Hardware and Sound\Devices and Printers</code> I can right click on the device, bring up its properties, and from the bluetooth tab get the unique identifier. For my remote that’s <code>00:04:20:f8:65:d1</code>.</p>
</section>
<section id="create-a-device-in-harmony" class="level1">
<h1>Create a device in Harmony</h1>
<p>From the Harmony app go to create a new device. Under the manufacturer choose Microsoft and for the device choose Kodi. I always forget this part and just try and set it up as a generic PC, which doesn’t work. When it gets to the pairing part of the setup we can connect from the pi</p>
</section>
<section id="connect-from-the-pi" class="level1">
<h1>Connect from the pi</h1>
<p>SSH into the pi:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;">sudo</span> bluetoothctl</span>
<span id="cb1-2"><span class="ex" style="color: null;">agent</span> on</span>
<span id="cb1-3"><span class="ex" style="color: null;">default-agent</span></span>
<span id="cb1-4"><span class="ex" style="color: null;">pair</span> 00:04:20:f8:65:d1</span>
<span id="cb1-5"><span class="ex" style="color: null;">connect</span> 00:04:20:f8:65:d1</span>
<span id="cb1-6"><span class="ex" style="color: null;">trust</span> 00:04:20:f8:65:d1</span></code></pre></div>
<p>That should do it. Harmony will say it’s connected, you can also check with <code>sudo bluetoothctl paired-devices</code>.</p>


</section>

 ]]></description>
  <category>tips</category>
  <category>linux</category>
  <category>bluetooth</category>
  <category>pi</category>
  <guid>https://ianepreston.github.io/blog/posts/2020-07-20-pi-bluetooth.html</guid>
  <pubDate>Mon, 20 Jul 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Python packaging</title>
  <link>https://ianepreston.github.io/blog/posts/2020-07-09-pypack.html</link>
  <description><![CDATA[ 




<section id="intro" class="level1">
<h1>Intro</h1>
<p>Probably the best way to introduce this post is to explain a bit of my background, and then describe the problem I’m trying to solve.</p>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>I have been using python for data analysis work since about 2017, so around 3 years at the time of writing this post. I work on a small team, and so it’s necessary for us to be able to share code for things like implementing business logic, or connecting to internal data sources. I also maintain an open source package called <a href="https://github.com/ianepreston/stats_can">stats_can</a> that can be used to access Statistics Canada datasets in python.</p>
</section>
<section id="my-current-packaging-approach" class="level2">
<h2 class="anchored" data-anchor-id="my-current-packaging-approach">My current packaging approach</h2>
<p>The current way my team shares code is by having a repository with a <code>lib</code> folder in it, and adding that folder to the <code>PYTHONPATH</code> environment variable in Windows.</p>
<p>The current way I build new versions of <code>stats_can</code> is through a <a href="https://en.wikipedia.org/wiki/Cargo_cult">cargo cult</a> sequence of steps that I kind of sort of understand.</p>
</section>
<section id="the-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-problem">The problem</h2>
<p>For the shared team library all of our stuff is basically in one giant package, broken up into subpackages. This leads to all sorts of problems:</p>
<ul>
<li>It’s very difficult to write tests for it.</li>
<li>There’s no version numbering so it’s impossible to pin code at a particular version.</li>
<li>We can’t share it easily with other teams, and we really can’t share just one particular subpackage of it with other teams.</li>
<li>The whole thing just feels very wrong to me. I knew it wasn’t the way to go when I set it up, but I was very new to python and just didn’t have the experience/capacity to find a better way and it worked for the time being.</li>
</ul>
<p>For stats_can my current system more or less works, it just has two problems:</p>
<ul>
<li>I only build conda packages. I’d like to allow <code>pip</code> users to access it but…</li>
<li>Like I said, the build process is a bit of a house of cards that I barely understand, so adding in another build steps scares me.</li>
</ul>
<p>Both of the examples described above are for libraries. I’ve built a couple of small apps, but have even less of an idea the correct way to build/deploy them.</p>
</section>
<section id="what-im-hoping-to-do-here" class="level2">
<h2 class="anchored" data-anchor-id="what-im-hoping-to-do-here">What I’m hoping to do here</h2>
<p>Basically I want to figure out the current best practice way to do the following:</p>
<ul>
<li>build a library package with versions that can be installed with <code>pip</code> and <code>conda</code></li>
<li>deploy those packages to both a privately hosted repository (for work specific stuff) as well as <a href="https://pypi.org/">pypi</a> and <a href="https://anaconda.org/">Anaconda Cloud</a> or <a href="https://conda-forge.org/">conda-forge</a> for public open source stuff</li>
<li>Originally I was also going to include building user facing (web or CLI) apps but this got pretty long already so I think I’m going to leave that for another post</li>
<li>Ditto for CI/CD, linting, extensive testing, and all the other things that go into managing a project. Too big to include in this post.</li>
</ul>
<p>So a library with <code>conda</code> and <code>pip</code> packages, hosted both publicly and privately means four total ways to manage the library.</p>
</section>
<section id="how-this-will-progress" class="level2">
<h2 class="anchored" data-anchor-id="how-this-will-progress">How this will progress</h2>
<p>I find that most of the packaging guides I’ve read show either how to build a completely trivial project that demonstrates one narrow feature, or some giant project that’s a lot to take in all at once. My aim is to start from a single file script and gradually build it up to the final product that I laid out in the what I’m trying to accomplish section. I’ll host the repositories for the library/app on GitHub, and use <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">tags</a> in order to mark the progress of the project through various stages.</p>
</section>
</section>
<section id="the-process" class="level1">
<h1>The process</h1>
<section id="preliminary-setup" class="level2">
<h2 class="anchored" data-anchor-id="preliminary-setup">Preliminary setup</h2>
<section id="create-repository" class="level3">
<h3 class="anchored" data-anchor-id="create-repository">Create repository</h3>
<p>The first step in any project is to make a repository. This one has the uncreative name of <a href="https://github.com/ianepreston/ianlibdemo">ianlibdemo</a>. If you want to follow along at home you can clone it and check out the tag for the associated stage in the tutorial. The state of the repository right after being created in this case can be accessed with <code>git checkout eg01</code></p>
</section>
<section id="set-up-environment" class="level3">
<h3 class="anchored" data-anchor-id="set-up-environment">Set up environment</h3>
<p>So I have somewhere to work from, and also to make this process reproducible for others the next thing I have to do is create an isolated python environment to work in. I’m a <code>conda</code> user so I’ll create an <code>environment.yml</code> file:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ianlibdemo_conda_env</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">dependencies</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;">  </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> python</span></span></code></pre></div>
<p>Then I’ll create the environment with <code>conda env create -f environment.yml</code>.</p>
<p>There’s absolutely nothing to this environment, which is kind of the point.</p>
</section>
<section id="make-my-super-sweet-library" class="level3">
<h3 class="anchored" data-anchor-id="make-my-super-sweet-library">Make my super sweet library</h3>
<p>Enough talk! Let’s write some code! Well, actually, I’m not going to write any code. The point of this tutorial is to build a package, not write a super awesome library, so I’m just going to copy the demo project used in <a href="https://www.youtube.com/watch?v=xiI1i525ljE">SciPy 2018 - the sheer joy of packaging</a>. The original code is <a href="https://github.com/python-packaging-tutorial/python-packaging-tutorial/tree/master/setup_example/capitalize/capitalize">here</a>. Basically what the module does is take a text file and output a copy with all the words capitalized (except a specified subset).</p>
<p>In the root directory of the repository I’ll copy the <code>capital_mod.py</code> file and <code>cap_data.txt</code>. I’ll also create an <code>example_in.txt</code> file that I can use to manually test the capitalize function.</p>
<p>Now I have the following files in my repository:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">$</span> ls</span>
<span id="cb2-2"><span class="ex" style="color: null;">__pycache__/</span>  capital_mod.py   example_in.txt   LICENSE</span>
<span id="cb2-3"><span class="ex" style="color: null;">cap_data.txt</span>  environment.yml  README.md</span></code></pre></div>
<p>I can test the “package” out from the interactive prompt:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">$</span> python <span class="at" style="color: #657422;">-i</span></span>
<span id="cb3-2"><span class="ex" style="color: null;">Python</span> 3.8.3 <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">default,</span> May 19 2020, 06:50:17<span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">[MSC</span> v.1916 64 bit <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">AMD64</span><span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">]</span> :: Anaconda, Inc. on win32</span>
<span id="cb3-3"><span class="ex" style="color: null;">Type</span> <span class="st" style="color: #20794D;">"help"</span>, <span class="st" style="color: #20794D;">"copyright"</span>, <span class="st" style="color: #20794D;">"credits"</span> or <span class="st" style="color: #20794D;">"license"</span> for more information.</span>
<span id="cb3-4"><span class="op" style="color: #5E5E5E;">&gt;&gt;&gt;</span> import <span class="ex" style="color: null;">capital_mod</span></span>
<span id="cb3-5"><span class="op" style="color: #5E5E5E;">&gt;&gt;&gt;</span> capital_mod.get_datafile_name<span class="kw" style="color: #003B4F;">()</span></span>
<span id="cb3-6"><span class="ex" style="color: null;">WindowsPath</span><span class="er" style="color: #AD0000;">(</span><span class="st" style="color: #20794D;">'C:/Users/ianep/Documents/ianlibdemo/cap_data.txt'</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb3-7"><span class="op" style="color: #5E5E5E;">&gt;&gt;&gt;</span> capital_mod.capitalize<span class="kw" style="color: #003B4F;">(</span><span class="st" style="color: #20794D;">"example_in.txt"</span><span class="ex" style="color: null;">,</span> <span class="st" style="color: #20794D;">"example_out.txt"</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;">&gt;&gt;&gt;</span> quit<span class="kw" style="color: #003B4F;">()</span></span></code></pre></div>
<p>Everything looks like it ran fine, and if I check in the directory I have file <code>example_out.txt</code> that is indeed a capitalized version of <code>example_in.txt</code>. If you want to get your repository to this point run <code>git checkout eg02</code>.</p>
<p>So everything works great and we can go home, right?</p>
</section>
</section>
<section id="run-into-problems" class="level2">
<h2 class="anchored" data-anchor-id="run-into-problems">Run into problems</h2>
<p>This is all well and good, but I don’t just want to use this functionality in this folder. The idea is that this is a utility library. Presumably there are all sorts of scripts that I want to add this file capitalization capability to. Maybe I have coworkers I want to share this with, or use it in an app I’m building. As it stands how can I accomplish this?</p>
</section>
<section id="some-bad-ways-to-solve-the-problem" class="level2">
<h2 class="anchored" data-anchor-id="some-bad-ways-to-solve-the-problem">Some bad ways to solve the problem</h2>
<section id="just-copy-the-file-everywhere" class="level3">
<h3 class="anchored" data-anchor-id="just-copy-the-file-everywhere">Just copy the file everywhere</h3>
<p>Fine. It only works from the local directory? I’ll just put a copy of it everywhere I want it. This is pretty clearly a bad idea. It will be annoying to copy the file into every location I might want to use it, if I ever have to update the functionality I will then have to track down every instance of that file and make the change repeatedly, and it violates <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a> so any experienced developer that sees me do it will make fun of me. Better not do it this way.</p>
</section>
<section id="add-it-to-the-path" class="level3">
<h3 class="anchored" data-anchor-id="add-it-to-the-path">Add it to the path</h3>
<p>This is already going to be a really long guide so I don’t want to add too much about the python path directly. <a href="https://chrisyeh96.github.io/2017/08/08/definitive-guide-python-imports.html">This guide by Chris Yeh</a> is the best I’ve found on the python path and import statements, so if you’re curious by all means check that out. Briefly though, let’s demonstrate the two ways we could directly add this “package” to the path, and therefore run it without being in the same directory.</p>
<p>To set the stage I’ve created a new directory separate from the package, and created a text file that I will try and capitalize:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">ianlibdemo_conda_env</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">Ian@terra</span> ~/Documents/demo_tmp</span>
<span id="cb4-2"><span class="ex" style="color: null;">$</span> ls</span>
<span id="cb4-3"><span class="ex" style="color: null;">demo_in.txt</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">ianlibdemo_conda_env</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">Ian@terra</span> ~/Documents/demo_tmp</span>
<span id="cb4-5"><span class="ex" style="color: null;">$</span> cat demo_in.txt</span>
<span id="cb4-6"><span class="ex" style="color: null;">i</span> want to capitalize this text file, but it<span class="st" style="color: #20794D;">'s in the wrong folder. oh no!</span></span></code></pre></div>
<p>If I just try and do the same steps I did from within the folder it will fail:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">&gt;&gt;&gt;</span> <span class="im" style="color: #00769E;">import</span> capital_mod</span>
<span id="cb5-2">Traceback (most recent call last):</span>
<span id="cb5-3">  File <span class="st" style="color: #20794D;">"&lt;stdin&gt;"</span>, line <span class="dv" style="color: #AD0000;">1</span>, <span class="kw" style="color: #003B4F;">in</span> <span class="op" style="color: #5E5E5E;">&lt;</span>module<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb5-4">ModuleNotFoundError: No module named <span class="st" style="color: #20794D;">'capital_mod'</span></span></code></pre></div>
<p>That’s because the folder with <code>capital_mod.py</code> is not on my path.</p>
<p>One way I can solve this is by adding the path to <code>capital_mod.py</code> to my path. Like so:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;">$</span> export PYTHONPATH=<span class="st" style="color: #20794D;">"/c/Users/Ian/Documents/ianlibdemo"</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">ianlibdemo_conda_env</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">Ian@terra</span> ~/Documents/demo_tmp</span>
<span id="cb6-3"><span class="ex" style="color: null;">$</span> python <span class="at" style="color: #657422;">-i</span></span>
<span id="cb6-4"><span class="ex" style="color: null;">Python</span> 3.8.2 <span class="kw" style="color: #003B4F;">|</span> <span class="ex" style="color: null;">packaged</span> by conda-forge <span class="kw" style="color: #003B4F;">|</span> <span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">default,</span> Apr 24 2020, 07:34:03<span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">[MSC</span> v.1916 64 bit <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">AMD64</span><span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">]</span> on win32</span>
<span id="cb6-5"><span class="ex" style="color: null;">Type</span> <span class="st" style="color: #20794D;">"help"</span>, <span class="st" style="color: #20794D;">"copyright"</span>, <span class="st" style="color: #20794D;">"credits"</span> or <span class="st" style="color: #20794D;">"license"</span> for more information.</span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;">&gt;&gt;&gt;</span> import <span class="ex" style="color: null;">capital_mod</span></span>
<span id="cb6-7"><span class="op" style="color: #5E5E5E;">&gt;&gt;&gt;</span> capital_mod.get_datafile_name<span class="kw" style="color: #003B4F;">()</span></span>
<span id="cb6-8"><span class="ex" style="color: null;">WindowsPath</span><span class="er" style="color: #AD0000;">(</span><span class="st" style="color: #20794D;">'C:/Users/Ian/Documents/ianlibdemo/cap_data.txt'</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb6-9"><span class="op" style="color: #5E5E5E;">&gt;&gt;&gt;</span> capital_mod.capitalize<span class="kw" style="color: #003B4F;">(</span><span class="st" style="color: #20794D;">"demo_in.txt"</span><span class="ex" style="color: null;">,</span> <span class="st" style="color: #20794D;">"demo_out.txt"</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb6-10"><span class="op" style="color: #5E5E5E;">&gt;&gt;&gt;</span> quit<span class="kw" style="color: #003B4F;">()</span></span>
<span id="cb6-11"><span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">ianlibdemo_conda_env</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">Ian@terra</span> ~/Documents/demo_tmp</span>
<span id="cb6-12"><span class="ex" style="color: null;">$</span> cat demo_out.txt</span>
<span id="cb6-13"><span class="ex" style="color: null;">I</span> Want to Capitalize This Text File, But It<span class="st" style="color: #20794D;">'s In the Wrong Folder. Oh No!</span></span></code></pre></div>
<p>This worked, but I don’t want to have to run that <code>export</code> command every time before I run a script, and sharing this code with other people and telling them to do that every time seems like a hassle. There are ways to permanently add folders to your python path. <a href="https://bic-berkeley.github.io/psych-214-fall-2016/using_pythonpath.html">This guide</a> covers them nicely. But we’re not actually going to go this route so let’s move on.</p>
<p>The <em>slightly</em> less hacky way is to use <code>sys.path</code> from within a python script. Back in my demo directory I can write a python script that looks like this:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb7-2">sys.path.append(<span class="vs" style="color: #20794D;">r"C:\Users\Ian\Documents\ianlibdemo"</span>)</span>
<span id="cb7-3"><span class="im" style="color: #00769E;">import</span> capital_mod</span>
<span id="cb7-4">capital_mod.capitalize(<span class="st" style="color: #20794D;">"demo_in.txt"</span>, <span class="st" style="color: #20794D;">"demo_out.txt"</span>)</span></code></pre></div>
<p>We can see that this works as well:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">ianlibdemo_conda_env</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">Ian@terra</span> ~/Documents/demo_tmp</span>
<span id="cb8-2"><span class="ex" style="color: null;">$</span> ls</span>
<span id="cb8-3"><span class="ex" style="color: null;">demo_in.txt</span>  syspathdemo.py</span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">ianlibdemo_conda_env</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">Ian@terra</span> ~/Documents/demo_tmp</span>
<span id="cb8-5"><span class="ex" style="color: null;">$</span> python syspathdemo.py</span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">ianlibdemo_conda_env</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">Ian@terra</span> ~/Documents/demo_tmp</span>
<span id="cb8-7"><span class="ex" style="color: null;">$</span> ls</span>
<span id="cb8-8"><span class="ex" style="color: null;">demo_in.txt</span>  demo_out.txt  syspathdemo.py</span>
<span id="cb8-9"><span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">ianlibdemo_conda_env</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">Ian@terra</span> ~/Documents/demo_tmp</span>
<span id="cb8-10"><span class="ex" style="color: null;">$</span> cat demo_out.txt</span>
<span id="cb8-11"><span class="ex" style="color: null;">I</span> Want to Capitalize This Text File, But It<span class="st" style="color: #20794D;">'s In the Wrong Folder. Oh No!</span></span></code></pre></div>
<p>This also worked, but I had to import <code>sys</code>, and I had to know the exact path to the library. It’s going to be annoying to have to put that in every script, and if I try and share this code with anyone else they’re going to have to modify it to point to wherever they’ve saved my library code.</p>
</section>
</section>
<section id="get-hypermodern" class="level2">
<h2 class="anchored" data-anchor-id="get-hypermodern">Get hypermodern</h2>
<p>As I was working on this guide I discovered a series of articles by Claudio Jolowicz called <a href="https://cjolowicz.github.io/posts/hypermodern-python-01-setup/">Hypermodern Python</a>. The series is an opinionated (in a good way) look at how to configure a python project in 2020. It’s excellent and well worth a read, but I can’t completely adopt its recommendations for two related reasons. The first is that it assumes you’re either using a *NIX system or can load WSL2 on your Windows machine. For my work setup neither of those assumptions hold. It also assumes you’re working in the standard python ecosystem and therefore doesn’t reference <code>conda</code> either for environment management or packaging. For the remainder of this guide I’m going to try and follow Claudio’s suggestions where possible, but adapt them to incorporate <code>conda</code>.</p>
</section>
<section id="turn-our-code-into-a-poetry-package" class="level2">
<h2 class="anchored" data-anchor-id="turn-our-code-into-a-poetry-package">Turn our code into a poetry package</h2>
<p><a href="https://python-poetry.org/">Poetry</a> seems to be the current best practice for building python packages. Let’s see if we can get it working with <code>conda</code>.</p>
<section id="poetry-init" class="level3">
<h3 class="anchored" data-anchor-id="poetry-init">Poetry init</h3>
<p>After adding <code>poetry</code> as a dependency to my <code>conda</code> environment and updating the environment I run <code>poetry init</code>:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;">$</span> poetry init</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="ex" style="color: null;">This</span> command will guide you through creating your pyproject.toml config.</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="ex" style="color: null;">Package</span> name [ianlibdemo]:</span>
<span id="cb9-6"><span class="ex" style="color: null;">Version</span> [0.1.0]:</span>
<span id="cb9-7"><span class="ex" style="color: null;">Description</span> []:  Python packaging <span class="at" style="color: #657422;">-</span> how does it work<span class="pp" style="color: #AD0000;">?</span></span>
<span id="cb9-8"><span class="ex" style="color: null;">Author</span> [[Ian Preston] <span class="op" style="color: #5E5E5E;">&lt;</span>17241371+ianepreston@users.noreply.github.com<span class="op" style="color: #5E5E5E;">&gt;</span>, n to skip]:  Ian Preston</span>
<span id="cb9-9"><span class="ex" style="color: null;">License</span> []:  GPL-3.0-or-later</span>
<span id="cb9-10"><span class="ex" style="color: null;">Compatible</span> Python versions [^3.7]:</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="ex" style="color: null;">Would</span> you like to define your main dependencies interactively<span class="pp" style="color: #AD0000;">?</span> <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">yes/no</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">[yes]</span> no</span>
<span id="cb9-13"><span class="ex" style="color: null;">Would</span> you like to define your dev dependencies <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">require-dev</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">interactively</span> <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">yes/no</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">[yes]</span> no</span>
<span id="cb9-14"><span class="ex" style="color: null;">Generated</span> file</span>
<span id="cb9-15"></span>
<span id="cb9-16"><span class="ex" style="color: null;">[tool.poetry]</span></span>
<span id="cb9-17"><span class="ex" style="color: null;">name</span> = <span class="st" style="color: #20794D;">"ianlibdemo"</span></span>
<span id="cb9-18"><span class="ex" style="color: null;">version</span> = <span class="st" style="color: #20794D;">"0.1.0"</span></span>
<span id="cb9-19"><span class="ex" style="color: null;">description</span> = <span class="st" style="color: #20794D;">"Python packaging - how does it work?"</span></span>
<span id="cb9-20"><span class="ex" style="color: null;">authors</span> = [<span class="st" style="color: #20794D;">"Ian Preston"</span>]</span>
<span id="cb9-21"><span class="ex" style="color: null;">license</span> = <span class="st" style="color: #20794D;">"GPL-3.0-or-later"</span></span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="ex" style="color: null;">[tool.poetry.dependencies]</span></span>
<span id="cb9-24"><span class="ex" style="color: null;">python</span> = <span class="st" style="color: #20794D;">"^3.7"</span></span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="ex" style="color: null;">[tool.poetry.dev-dependencies]</span></span>
<span id="cb9-27"></span>
<span id="cb9-28"><span class="ex" style="color: null;">[build-system]</span></span>
<span id="cb9-29"><span class="ex" style="color: null;">requires</span> = [<span class="st" style="color: #20794D;">"poetry&gt;=0.12"</span>]</span>
<span id="cb9-30"><span class="ex" style="color: null;">build-backend</span> = <span class="st" style="color: #20794D;">"poetry.masonry.api"</span></span>
<span id="cb9-31"></span>
<span id="cb9-32"></span>
<span id="cb9-33"><span class="ex" style="color: null;">Do</span> you confirm generation<span class="pp" style="color: #AD0000;">?</span> <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">yes/no</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">[yes]</span> yes</span></code></pre></div>
<p>At the end of this process I have a <code>pyproject.toml</code> file in the root of my repository with the text listed above inside.</p>
</section>
<section id="src-layout" class="level3">
<h3 class="anchored" data-anchor-id="src-layout">src layout</h3>
<p>The root folder of this repository is getting crowded. I’ve got various files that either describe the project or the environment I’m supposed to work on it in intermingled with the actual source code for the package. To address this I’ll make a separate folder for the actual package files, and as recommended by hypermodern python I’ll use <a href="https://hynek.me/articles/testing-packaging/">src layout</a></p>
</section>
<section id="poetry-install" class="level3">
<h3 class="anchored" data-anchor-id="poetry-install">poetry install</h3>
<p>The last step for a basic install is to use poetry to install the package into the environment. Since poetry 1.0 it should be able to detect <code>conda</code> environments and do its installation directly into them based on <a href="https://github.com/python-poetry/poetry/pull/1432">this PR</a>.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;">$</span> poetry install</span>
<span id="cb10-2"><span class="ex" style="color: null;">Updating</span> dependencies</span>
<span id="cb10-3"><span class="ex" style="color: null;">Resolving</span> dependencies... <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">0.1s</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="ex" style="color: null;">Writing</span> lock file</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="ex" style="color: null;">No</span> dependencies to install or update</span>
<span id="cb10-8"></span>
<span id="cb10-9">  <span class="ex" style="color: null;">-</span> Installing ianlibdemo <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">0.1.0</span><span class="kw" style="color: #003B4F;">)</span></span></code></pre></div>
<p>Seems to work, let’s try that old example that wouldn’t run before:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">ianlibdemo_conda_env</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">e975360@N2012</span> /c/tfs/text_demo</span>
<span id="cb11-2"><span class="ex" style="color: null;">$</span> ls</span>
<span id="cb11-3"><span class="ex" style="color: null;">example_in.txt</span></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">ianlibdemo_conda_env</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">e975360@N2012</span> /c/tfs/text_demo</span>
<span id="cb11-5"><span class="ex" style="color: null;">$</span> python <span class="at" style="color: #657422;">-i</span></span>
<span id="cb11-6"><span class="ex" style="color: null;">Python</span> 3.7.7 <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">default,</span> May  6 2020, 11:45:54<span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">[MSC</span> v.1916 64 bit <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">AMD64</span><span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">]</span> :: Anaconda, Inc. on win32</span>
<span id="cb11-7"><span class="ex" style="color: null;">Type</span> <span class="st" style="color: #20794D;">"help"</span>, <span class="st" style="color: #20794D;">"copyright"</span>, <span class="st" style="color: #20794D;">"credits"</span> or <span class="st" style="color: #20794D;">"license"</span> for more information.</span>
<span id="cb11-8"><span class="op" style="color: #5E5E5E;">&gt;&gt;&gt;</span> from <span class="ex" style="color: null;">ianlibdemo.capital_mod</span> import capitalize</span>
<span id="cb11-9"><span class="op" style="color: #5E5E5E;">&gt;&gt;&gt;</span> capitalize<span class="kw" style="color: #003B4F;">(</span><span class="st" style="color: #20794D;">"example_in.txt"</span><span class="ex" style="color: null;">,</span> <span class="st" style="color: #20794D;">"example_out.txt"</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb11-10"><span class="op" style="color: #5E5E5E;">&gt;&gt;&gt;</span> quit<span class="kw" style="color: #003B4F;">()</span></span>
<span id="cb11-11"><span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">ianlibdemo_conda_env</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">e975360@N2012</span> /c/tfs/text_demo</span>
<span id="cb11-12"><span class="ex" style="color: null;">$</span> cat example_in.txt</span>
<span id="cb11-13"><span class="ex" style="color: null;">these</span> words will all get capitalized, except the ones in that super special text file, like is, or, and a.</span>
<span id="cb11-14"><span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">ianlibdemo_conda_env</span><span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">e975360@N2012</span> /c/tfs/text_demo</span>
<span id="cb11-15"><span class="ex" style="color: null;">$</span> cat example_out.txt</span>
<span id="cb11-16"><span class="ex" style="color: null;">These</span> Words Will All Get Capitalized, Except the Ones In That Super Special Text File, Like Is, Or, And A.</span></code></pre></div>
<p>Magic! Note that I have to do one more layer of importing from the <code>ianlibdemo</code> package whereas before I was directly importing the <code>capital_mod</code> module, but otherwise we’re gold.</p>
<p>Of course this hasn’t really solved my problem yet, I still don’t have an actual package that other people can install. But still, progress!</p>
</section>
<section id="poetry-build" class="level3">
<h3 class="anchored" data-anchor-id="poetry-build">poetry build</h3>
<p>It turns out that making it to the previous step was essentially all I needed to create a <code>pip</code> installable package. Just running <code>poetry build</code> from the root of the repository creates a <code>dist</code> folder containing a <a href="https://packaging.python.org/glossary/#term-source-distribution-or-sdist">sdist</a> and a <a href="https://packaging.python.org/glossary/#term-wheel">wheel</a></p>
<section id="test-the-build" class="level4">
<h4 class="anchored" data-anchor-id="test-the-build">test the build</h4>
<p>Having built this package, how would I install it?</p>
<p>To start the test I’ll create a new empty conda environment and make sure I can’t import the <code>ianlibdemo</code> package.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;">$</span> conda create <span class="at" style="color: #657422;">-n</span> pyonly python</span>
<span id="cb12-2"><span class="ex" style="color: null;">...</span></span>
<span id="cb12-3"><span class="ex" style="color: null;">$</span> conda activate pyonly</span>
<span id="cb12-4"><span class="ex" style="color: null;">$</span> python <span class="at" style="color: #657422;">-i</span></span>
<span id="cb12-5"><span class="op" style="color: #5E5E5E;">&gt;&gt;&gt;</span> import <span class="ex" style="color: null;">ianlibdemo</span></span>
<span id="cb12-6"><span class="ex" style="color: null;">Traceback</span> <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">most</span> recent call last<span class="kw" style="color: #003B4F;">)</span><span class="bu" style="color: null;">:</span></span>
<span id="cb12-7">  <span class="ex" style="color: null;">File</span> <span class="st" style="color: #20794D;">"&lt;stdin&gt;"</span>, line 1, in <span class="op" style="color: #5E5E5E;">&lt;</span>module<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb12-8"><span class="ex" style="color: null;">ModuleNotFoundError:</span> No module named <span class="st" style="color: #20794D;">'ianlibdemo'</span></span></code></pre></div>
<p>This verifies that I have a clean environment without that package installed. I can use <code>pip</code> to install it like so:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;">$</span> pip install /c/tfs/ianlibdemo/dist/ianlibdemo-0.1.0-py3-none-any.whl</span>
<span id="cb13-2"><span class="ex" style="color: null;">$</span> python <span class="at" style="color: #657422;">-i</span></span>
<span id="cb13-3"><span class="ex" style="color: null;">Python</span> 3.8.3 <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">default,</span> May 19 2020, 06:50:17<span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">[MSC</span> v.1916 64 bit <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">AMD64</span><span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">]</span> :: Anaconda, Inc. on win32</span>
<span id="cb13-4"><span class="ex" style="color: null;">Type</span> <span class="st" style="color: #20794D;">"help"</span>, <span class="st" style="color: #20794D;">"copyright"</span></span>
<span id="cb13-5"><span class="op" style="color: #5E5E5E;">&gt;&gt;&gt;</span> import <span class="ex" style="color: null;">ianlibdemo</span></span></code></pre></div>
<p>The import ran successfully. I haven’t done a lot of validation that the package works the way I’d expect, but I’ll get to that when we set up testing later. Note that I installed the package using the <code>.whl</code> file that the build process created, but I could have also used the <code>.tar.gz</code> file in the same folder just as easily.</p>
<p>Since we’ve now built a working package this seems like another good place for a checkpoint. To see the state of the project at this point you can run <code>git checkout eg03</code>.</p>
</section>
</section>
</section>
<section id="automate-testing" class="level2">
<h2 class="anchored" data-anchor-id="automate-testing">Automate testing</h2>
<p>This is already going to be a big post so I’m definitely not going to offer extensive notes on testing, but I’d like to include enough to at least ensure it integrates with the rest of the process, and to save manually testing after each step.</p>
<section id="add-a-pytest-dependency" class="level3">
<h3 class="anchored" data-anchor-id="add-a-pytest-dependency">Add a pytest dependency</h3>
<p>We want to use <a href="https://docs.pytest.org/en/latest/">pytest</a> for testing, so the first step is to add it as a development dependency. Normally this would be a simple one liner, <code>poetry add --dev pytest</code>, but because of <a href="https://github.com/python-poetry/poetry/issues/1290">this bug</a> between conda and poetry, at least at the time of this writing I had to install an update of msgpack before I could get it to run. I’ve amended the <code>environment.yml</code> file to include this fix, so between that and hopefully this bug being resolved in time this shouldn’t be an issue for anyone else following this guide, I just wanted to flag what I encountered and how I resolved it.</p>
</section>
<section id="write-tests" class="level3">
<h3 class="anchored" data-anchor-id="write-tests">Write tests</h3>
<p>Now in the base of the repository we add a <code>tests</code> folder and add an empty <code>__init__.py</code> file and a <code>test_capitalize.py</code> file. The test file looks like this:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;">from</span> ianlibdemo <span class="im" style="color: #00769E;">import</span> capital_mod</span>
<span id="cb14-2"></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;">def</span> test_capitalize_file(tmp_path):</span>
<span id="cb14-5">    in_file <span class="op" style="color: #5E5E5E;">=</span> tmp_path <span class="op" style="color: #5E5E5E;">/</span> <span class="st" style="color: #20794D;">"in_file.txt"</span></span>
<span id="cb14-6">    in_content <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"this is the lowercase input sentence"</span></span>
<span id="cb14-7">    in_file.write_text(in_content)</span>
<span id="cb14-8">    out_file <span class="op" style="color: #5E5E5E;">=</span> tmp_path <span class="op" style="color: #5E5E5E;">/</span> <span class="st" style="color: #20794D;">"out_file.txt"</span></span>
<span id="cb14-9">    out_content <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"This is the Lowercase Input Sentence</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb14-10">    <span class="co" style="color: #5E5E5E;"># Output shouldn't exist before we call the function</span></span>
<span id="cb14-11">    <span class="cf" style="color: #003B4F;">assert</span> <span class="kw" style="color: #003B4F;">not</span> out_file.exists()</span>
<span id="cb14-12">    capital_mod.capitalize(in_file, out_file)</span>
<span id="cb14-13">    <span class="cf" style="color: #003B4F;">assert</span> out_file.exists()</span>
<span id="cb14-14">    <span class="cf" style="color: #003B4F;">assert</span> out_file.read_text() <span class="op" style="color: #5E5E5E;">==</span> out_content</span></code></pre></div>
<p>Now from the base directory of the repository I can run pytest with <code>poetry run pytest</code>.</p>
<p>To see the project at this stage run <code>git checkout eg04</code>.</p>
</section>
</section>
<section id="publish-to-pypi" class="level2">
<h2 class="anchored" data-anchor-id="publish-to-pypi">Publish to pypi</h2>
<p>I’ve built a package, I can test that it works, the next step is to publish it somewhere for others to access. The defacto source for python packages is <a href="https://pypi.org/">PyPi</a>. However, since this is just a demo package I don’t want to publish it there, since it will just add clutter. Fortunately, there is a similar location designed exactly for testing out publishing packages, appropriately named <a href="https://test.pypi.org/">Test PyPi</a>.</p>
<section id="set-up-for-publishing" class="level3">
<h3 class="anchored" data-anchor-id="set-up-for-publishing">Set up for publishing</h3>
<p>In order to publish packages you need an account. The registration process is straightforward. Note that pypi and test pypi use completely separate databases, and you will need an account for each of them. For now we’re just publishing to test pypi so it’s not an issue, but just something to keep in mind.</p>
<p>Next I want to create an API token. You can just use your username and password to authenticate and publish packages, but tokens are the preferred method. Once you’re logged in you can click on your account, go to account settings, and under API tokens click “add API token”. Give it a descriptive name and save it somewhere secure (I put mine in a LastPass note). As they warn on the page it will only be displayed once, and if you lose it you’ll have to delete it and create a new one.</p>
<p>Now we need to set up the test pypi repository in poetry. From the <a href="https://python-poetry.org/docs/repositories/">poetry docs</a> you can see that repositories are added to your poetry config:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;">poetry</span> config repositories.testpypi https://test.pypi.org/legacy/</span>
<span id="cb15-2"><span class="ex" style="color: null;">poetry</span> config pypi-token.testpypi <span class="op" style="color: #5E5E5E;">&lt;</span>your api key<span class="op" style="color: #5E5E5E;">&gt;</span></span></code></pre></div>
<p>Note that these configurations are global to poetry, so they’re not saved in your repository. If you switch machines, or (I think) change conda environments since we installed poetry with conda you’ll have to redo these configurations.</p>
</section>
<section id="publish" class="level3">
<h3 class="anchored" data-anchor-id="publish">Publish</h3>
<p>Once this is set up publishing is quite straightforward. If you haven’t already built the package do so with <code>poetry build</code> and then run <code>poetry publish --repository testpypi</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://ianepreston.github.io/blog/posts/pypack/testpypi.PNG" title="package uploaded" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">test pypi</figcaption><p></p>
</figure>
</div>
<p>Look at that! There it is!</p>
</section>
<section id="pull-it-back-down-and-test" class="level3">
<h3 class="anchored" data-anchor-id="pull-it-back-down-and-test">Pull it back down and test</h3>
<p>Let’s just make sure that all worked.</p>
<p>First make a clean conda environment with just pytest for testing and activate it:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;">conda</span> create <span class="at" style="color: #657422;">-n</span> test_env pytest</span>
<span id="cb16-2"><span class="ex" style="color: null;">conda</span> activate test_env</span></code></pre></div>
<p>Navigate to the root of your package folder and try running tests. They should fail, because we don’t have the package installed in this environment:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="bu" style="color: null;">cd</span> ~/Documents/ianlibdemo</span>
<span id="cb17-2"><span class="ex" style="color: null;">pytest</span></span>
<span id="cb17-3"><span class="bu" style="color: null;">.</span></span>
<span id="cb17-4"><span class="bu" style="color: null;">.</span></span>
<span id="cb17-5"><span class="bu" style="color: null;">.</span></span>
<span id="cb17-6"><span class="ex" style="color: null;">tests\test_capitalize.py:1:</span> in <span class="op" style="color: #5E5E5E;">&lt;</span>module<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb17-7">    <span class="ex" style="color: null;">from</span> ianlibdemo import capital_mod</span>
<span id="cb17-8"><span class="ex" style="color: null;">E</span>   ModuleNotFoundError: No module named <span class="st" style="color: #20794D;">'ianlibdemo'</span></span></code></pre></div>
<p>Now pip install that package and try running tests again:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;">pip</span> install <span class="at" style="color: #657422;">--index-url</span> https://test.pypi.org/simple/ ianlibdemo</span>
<span id="cb18-2"><span class="ex" style="color: null;">pytest</span></span>
<span id="cb18-3"><span class="bu" style="color: null;">.</span></span>
<span id="cb18-4"><span class="bu" style="color: null;">.</span></span>
<span id="cb18-5"><span class="bu" style="color: null;">.</span></span>
<span id="cb18-6"><span class="ex" style="color: null;">========================</span> 1 passed, 1 warning in 0.09s =========================</span></code></pre></div>
<p>Looks good!</p>
</section>
</section>
<section id="publish-to-a-private-repository" class="level2">
<h2 class="anchored" data-anchor-id="publish-to-a-private-repository">Publish to a private repository</h2>
<p>Not all of the code we develop should be published on the public internet. Some of it you just want accessible to an internal team. I have a private package index running using <a href="https://hub.docker.com/r/pypiserver/pypiserver">this docker container</a> - setting that up will be its own post. Once you have that all set up though the process is exactly the same as for the public pypi so I’ll leave it at that for this guide.</p>
<p>None of the steps used to publish this package required changes to the library repository, so you can still use <code>git checkout eg04</code> to view the state of the repository at this point.</p>
</section>
<section id="adding-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="adding-dependencies">Adding dependencies</h2>
<p>One thing I realized I should ensure is that all of this works with libraries that depend on other libraries. Let’s add a dependency on pandas and give that a shot.</p>
<p>Fortunately adding a dependency is easy. Since I want to require <code>pandas</code> I just run <code>poetry add pandas</code> and it’s now a dependency. I added a module called <code>fun_pandas</code> and a test for it in my tests suite. After that I rebuilt the package and uploaded it to a repository as described above, pulled it back down and tested it like before and everything worked! It’s nice when that happens.</p>
<p>To see the project at this stage you can run <code>git checkout eg05</code>.</p>
</section>
<section id="now-do-conda" class="level2">
<h2 class="anchored" data-anchor-id="now-do-conda">Now do conda</h2>
<p>The next thing I want to work out is how to build a <code>conda</code> package. The first step is to add <code>conda-build</code> to my environment. The next step is to define a <code>meta.yaml</code> file to specify how to do the build.</p>
<section id="sort-of-working-build" class="level3">
<h3 class="anchored" data-anchor-id="sort-of-working-build">Sort of working build</h3>
<p>Rather than just dump the final working file, I think it will be useful to step through from the first version I got working to the final one I’m happy with. A lot of the steps for setting this up are hacky, so seeing what doesn’t work is as important as seeing what does for people who are trying to figure out how to apply this to their own projects.</p>
<p>Here’s the first version of my <code>meta.yaml</code> that actually built:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb19-1"><span class="kw" style="color: #003B4F;">{</span><span class="at" style="color: #657422;">% raw %</span><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb19-2"><span class="kw" style="color: #003B4F;">{</span><span class="at" style="color: #657422;">% set name =  </span><span class="st" style="color: #20794D;">"ianlibdemo"</span><span class="at" style="color: #657422;"> %</span><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb19-3"><span class="kw" style="color: #003B4F;">{</span><span class="at" style="color: #657422;">% set version = </span><span class="st" style="color: #20794D;">"0.2.0"</span><span class="at" style="color: #657422;"> %</span><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;">package</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb19-6"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"{{ name|lower }}"</span></span>
<span id="cb19-7"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">version</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"{{ version }}"</span></span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="fu" style="color: #4758AB;">source</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb19-10"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">path</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ./dist/{{ name }}-{{ version }}-py3-none-any.whl</span></span>
<span id="cb19-11"></span>
<span id="cb19-12"><span class="fu" style="color: #4758AB;">build</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb19-13"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">script</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"{{ PYTHON }} -m pip install ./{{ name }}-{{ version }}-py3-none-any.whl --no-deps --ignore-installed -vv "</span></span>
<span id="cb19-14"></span>
<span id="cb19-15"><span class="fu" style="color: #4758AB;">requirements</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb19-16"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">host</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb19-17"><span class="at" style="color: #657422;">        </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> pip</span></span>
<span id="cb19-18"><span class="at" style="color: #657422;">        </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> python</span></span>
<span id="cb19-19"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">run</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb19-20"><span class="at" style="color: #657422;">        </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> python</span></span>
<span id="cb19-21"><span class="at" style="color: #657422;">        </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> pandas</span></span>
<span id="cb19-22"></span>
<span id="cb19-23"><span class="fu" style="color: #4758AB;">test</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb19-24"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">imports</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb19-25"><span class="at" style="color: #657422;">        </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> ianlibdemo</span></span>
<span id="cb19-26"><span class="kw" style="color: #003B4F;">{</span><span class="at" style="color: #657422;">% endraw %</span><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>From an environment with <code>conda-build</code> installed I can build a package by running <code>conda-build .</code> from the base of the repository. It creates a conda package as a <code>tar.bz2</code> file in a deeply nested directory. From there I can install it into an environment with something like:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="ex" style="color: null;">conda</span> install /c/Users/e975360/.conda/envs/conda_build_test/conda-bld/win-64/ianlibdemo-0.2.0-py38_0.tar.bz2</span></code></pre></div>
<p>Running pytest in an environment with that package installed resulted in one passed test and one failure for the one requiring pandas. As we’ll see below, that issue will get solved if I can load it to a package repository so I’ll leave that alone at this point.</p>
<section id="issues-with-this-build" class="level4">
<h4 class="anchored" data-anchor-id="issues-with-this-build">Issues with this build</h4>
<ul>
<li>First off, note that it’s called <code>meta.yaml</code> not <code>meta.yml</code>. Despite <code>.yml</code> being the common and preferred extension for this file type (see <a href="https://stackoverflow.com/questions/21059124/is-it-yaml-or-yml#:~:text=yml%22%20is%20%22the%20file%20extension,and%20is%20much%20more%20common.">this SO thread</a>) it has to end with <code>.yaml</code> or <code>conda-build</code> can’t find it.</li>
<li>Also note that I’m pointing it to the <code>.whl</code> file that I built with poetry, rather than the <code>.tar.gz</code> that’s in the same folder. In theory I should be able to do either, and most examples online point to <code>.tar.gz</code> files, but I got errors about not having poetry in my build environment, and when I tried to add poetry I got a version conflict because apparently the main conda repository only has the python2.7 version of poetry and… it just seemed easier to use the <code>.whl</code>.</li>
<li>It makes a build that claims to be specific to windows and python 3.8 when in fact this should run on any OS and any python 3.</li>
<li>I have to repeat the file name in two places</li>
<li>I’m specifying the version number in two places now since it’s already in the <code>pyproject.toml</code> file. There’s a risk of them getting out of sync</li>
<li>Similar to the version number I have to specify dependencies in this file as well as <code>pyproject.toml</code> (pandas in this case). Unfortunately, since conda packages can have slightly different names than their pypi counterparts, and I have to actually specify python as a dependency here I don’t think there’s an automated way to keep these in sync. Fortunately I don’t expect dependencies to change as often as the package version so this will be less of a burden to manage.</li>
<li>To do anything with the created package I have to scroll up through a big install log and find the path to the file</li>
<li>I get a bunch of build environments and intermediate files created on my machine (maybe this is why <a href="https://docs.conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-pkgs-skeleton.html">the build guide</a> suggests using docker).</li>
</ul>
</section>
<section id="fixing-the-issues" class="level4">
<h4 class="anchored" data-anchor-id="fixing-the-issues">Fixing the issues</h4>
<p>Setting the build to work for any OS and python is an easy fix. Under the build section you just add one line. The build section now looks like this:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb21-1"><span class="kw" style="color: #003B4F;">{</span><span class="at" style="color: #657422;">% raw %</span><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;">build</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb21-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">noarch</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> python</span></span>
<span id="cb21-4"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">script</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"{{ PYTHON }} -m pip install ./{{ name }}-{{ version }}-py3-none-any.whl --no-deps --ignore-installed -vv "</span></span>
<span id="cb21-5"><span class="kw" style="color: #003B4F;">{</span><span class="at" style="color: #657422;">% endraw %</span><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>Defining the package file in once place is similarly easy. <a href="https://jinja.palletsprojects.com/en/2.11.x/">Jinja</a> lets you concatenate variables with the <code>~</code> symbol. The updated relevant section looks like this:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb22-1"><span class="kw" style="color: #003B4F;">{</span><span class="at" style="color: #657422;">% raw %</span><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;">{</span><span class="at" style="color: #657422;">% set name =  </span><span class="st" style="color: #20794D;">"ianlibdemo"</span><span class="at" style="color: #657422;"> %</span><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;">{</span><span class="at" style="color: #657422;">% set version = </span><span class="st" style="color: #20794D;">"0.2.0"</span><span class="at" style="color: #657422;"> %</span><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb22-4"><span class="kw" style="color: #003B4F;">{</span><span class="at" style="color: #657422;">% set wheel = name ~ </span><span class="st" style="color: #20794D;">"-"</span><span class="at" style="color: #657422;"> ~ version ~ </span><span class="st" style="color: #20794D;">"-py3-none-any.whl"</span><span class="at" style="color: #657422;"> %</span><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb22-5"><span class="fu" style="color: #4758AB;">package</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb22-6"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"{{ name|lower }}"</span></span>
<span id="cb22-7"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">version</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"{{ version }}"</span></span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="fu" style="color: #4758AB;">source</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb22-10"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">path</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ./dist/{{ wheel }}</span></span>
<span id="cb22-11"></span>
<span id="cb22-12"><span class="fu" style="color: #4758AB;">build</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb22-13"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">noarch</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> python</span></span>
<span id="cb22-14"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">script</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"{{ PYTHON }} -m pip install ./{{ wheel }} --no-deps --ignore-installed -vv "</span></span>
<span id="cb22-15"><span class="kw" style="color: #003B4F;">{</span><span class="at" style="color: #657422;">% endraw %</span><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<section id="adding-a-makefile" class="level5">
<h5 class="anchored" data-anchor-id="adding-a-makefile">Adding a Makefile</h5>
<p>The rest of the issues outlined above aren’t directly the result of the <code>meta.yaml</code> file. To resolve them I’ll need to write some scripts, and to tie that all together I’ll use my good friend <a href="https://en.wikipedia.org/wiki/Make_(software)">Make</a>.</p>
<p>To begin I add some boilerplate to the beginning of the file to handle conda environments</p>
<pre class="make"><code># Oneshell means I can run multiple lines in a recipe in the same shell, so I don't have to
# chain commands together with semicolon
.ONESHELL:
# Need to specify bash in order for conda activate to work.
SHELL=/bin/bash
# Note that the extra activate is needed to ensure that the activate floats env to the front of PATH
CONDA_ACTIVATE=source $$(conda info --base)/etc/profile.d/conda.sh ; conda activate ; conda activate
ENV_NAME = ianlibdemo_conda_env</code></pre>
<p>Next I create a python script that will read the version number from <code>pyproject.toml</code> and update the version in <code>meta.yaml</code> with it. I won’t reproduce that script here but it’s in the <code>scripts</code> folder of the <code>ianlibdemo</code> repository.</p>
<p>Finally I add a target to sync the versions. I can then make that a pre-requisite of building the <code>conda</code> package.</p>
<pre class="make"><code>.PHONY: versionsync

versionsync:
    $(CONDA_ACTIVATE) $(PROJECT_NAME)
    python scripts/version_sync.py</code></pre>
<p><code>.PHONY:</code> means that target should be run each time it’s called. By default <code>Make</code> won’t redo a target if an output file already exists.</p>
<p>Now running <code>make versionsync</code> from the root of the repository will take the version from <code>pyproject.toml</code> and put it in <code>meta.yaml</code>. Eventually I’ll also want to ensure that the python package has been built by poetry before building the conda package.</p>
<p>PS: I documented how you can activate conda environments from within makefiles and bash scripts <a href="http://blog.ianpreston.ca/2020/05/13/conda_envs.html">here</a>. Since I had to refer back to it when doing this I thought it would be helpful to include a pointer.</p>
<p>The next issue I described above is that running <code>conda-build</code> generates the package in some obscure subdirectory and you have to scroll back up through the log file to find it. If I want to upload the package to a repository or install it directly that’s going to be a hassle. Fortunately <code>conda-build</code> comes with a <code>--output</code> flag that you can run to return where your package file would be saved if you actually ran <code>conda-build</code>. Knowing this I can write a small bash script which first builds the package and then uses the <code>--output</code> flag to find the generated package and copy it into my <code>dist</code> directory.</p>
<p>The new part of the Makefile looks like this:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="ex" style="color: null;">conda:</span></span>
<span id="cb25-2">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">ENV_NAME</span><span class="va" style="color: #111111;">)</span></span>
<span id="cb25-3">    <span class="fu" style="color: #4758AB;">bash</span> scripts/conda_build.sh</span></code></pre></div>
<p>And the bash script looks like this:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb26-1"><span class="co" style="color: #5E5E5E;">#!/bin/bash</span></span>
<span id="cb26-2"><span class="ex" style="color: null;">conda-build</span> .</span>
<span id="cb26-3"><span class="va" style="color: #111111;">CONDA_PACK</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">conda-build</span> . <span class="at" style="color: #657422;">--output</span><span class="va" style="color: #111111;">)</span></span>
<span id="cb26-4"><span class="fu" style="color: #4758AB;">cp</span> <span class="va" style="color: #111111;">$CONDA_PACK</span> dist/</span></code></pre></div>
<p>I’m going to make a cleanup function later to remove all build artifacts so we’ll leave that alone for now.</p>
</section>
</section>
</section>
<section id="publish-to-a-public-channel" class="level3">
<h3 class="anchored" data-anchor-id="publish-to-a-public-channel">Publish to a public channel</h3>
<p>To publish to an external public conda channel I have to install the <code>anaconda-client</code> package in my environment. The first time I do an upload I will need to log in with <code>anaconda login</code> and provide my username and password.</p>
<p>After that I can add a new recipe to my makefile to publish the package:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="ex" style="color: null;">conda_ext_pub:</span> conda</span>
<span id="cb27-2">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">ENV_NAME</span><span class="va" style="color: #111111;">)</span></span>
<span id="cb27-3">    <span class="ex" style="color: null;">anaconda</span> upload <span class="va" style="color: #111111;">$$</span><span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">conda-build</span> . <span class="at" style="color: #657422;">--output</span><span class="kw" style="color: #003B4F;">)</span></span></code></pre></div>
<p><code>conda_ext_pub</code> depends on the <code>conda</code> recipe so this will build the package first and then upload it to Anaconda.org. After running <code>make conda_ext_pub</code> I can see that the package was indeed published to Anaconda.org:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ianepreston.github.io/blog/posts/pypack/anaconda.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Anaconda</figcaption><p></p>
</figure>
</div>
<p>As with the previous installations I can create a new blank environment with just pytest installed, install this package into it with <code>conda install -c ian.e.preston ianlibdemo</code> and now both my tests pass, as <code>pandas</code> is installed as well.</p>
</section>
<section id="publish-to-a-private-channel" class="level3">
<h3 class="anchored" data-anchor-id="publish-to-a-private-channel">Publish to a private channel</h3>
<p>As with the other private repository, actually setting up the repository is outside the scope of this post. This will assume that you have one created and that packages are stored on some sort of file share that you can access from your build machine. There’s no fancy way to publish conda packages to a private repository. You just drop the package file in the appropriate architecture subfolder (<code>noarch</code> in this case since this is a pure python package) and then run <code>conda index</code> on the repository folder. My server has a file watcher that detects changes and auto runs that, so all we have to do to publish a package is to make sure it’s in the right place. In this example the file share from my local machine is at <code>\\r4001\finpublic\FP&amp;A\channel_test\noarch</code> and the web server is available at http://dml01:8081/.</p>
<p>To set up publishing I add the following to my makefile:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="ex" style="color: null;">CONDA_LIB_DIR</span> = //r4001/finpublic/FP\&amp;A/channel_test/noarch</span>
<span id="cb28-2"><span class="bu" style="color: null;">.</span></span>
<span id="cb28-3"><span class="bu" style="color: null;">.</span></span>
<span id="cb28-4"><span class="bu" style="color: null;">.</span></span>
<span id="cb28-5"><span class="ex" style="color: null;">conda_int_pub:</span> conda</span>
<span id="cb28-6">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">ENV_NAME</span><span class="va" style="color: #111111;">)</span></span>
<span id="cb28-7">    <span class="fu" style="color: #4758AB;">cp</span> <span class="va" style="color: #111111;">$$</span><span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">conda-build</span> . <span class="at" style="color: #657422;">--output</span><span class="kw" style="color: #003B4F;">)</span> <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_LIB_DIR</span><span class="va" style="color: #111111;">)</span></span></code></pre></div>
<p>After that I can install the package into a library by running <code>conda install -c http://dml01:8081 ianlibdemo</code>.</p>
<p>To see the project at this stage you can run <code>git checkout eg06</code>.</p>
</section>
</section>
<section id="put-it-all-together" class="level2">
<h2 class="anchored" data-anchor-id="put-it-all-together">Put it all together</h2>
<p>All of the pieces are here, so the final thing to do is to put them all together. I started that process in the last section by creating a makefile, now I just have to finish it up by tying the pip packaging and publishing in with the conda packaging and publishing.</p>
<section id="clean-slate" class="level3">
<h3 class="anchored" data-anchor-id="clean-slate">Clean slate</h3>
<p>After a package file is built and published we don’t really have any further need for it locally, but it’s not automatically deleted. Let’s make a <code>clean</code> task in Make that will clear out any previous builds. That way any new process can start fresh.</p>
<p>The clean task looks like this:</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb29-1"><span class="ex" style="color: null;">clean:</span></span>
<span id="cb29-2">    <span class="co" style="color: #5E5E5E;"># remove pip packages</span></span>
<span id="cb29-3">    <span class="fu" style="color: #4758AB;">rm</span> <span class="at" style="color: #657422;">-rf</span> ./dist/<span class="pp" style="color: #AD0000;">*</span></span>
<span id="cb29-4">    <span class="co" style="color: #5E5E5E;"># remove conda packages and build artifacts</span></span>
<span id="cb29-5">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">ENV_NAME</span><span class="va" style="color: #111111;">)</span></span>
<span id="cb29-6">    <span class="fu" style="color: #4758AB;">bash</span> scripts/conda_clean.sh</span></code></pre></div>
<p>and <code>conda_clean.sh</code> looks like this:</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="co" style="color: #5E5E5E;">#!/bin/bash</span></span>
<span id="cb30-2"><span class="bu" style="color: null;">export</span> <span class="va" style="color: #111111;">CONDA_BLD_PATH</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">${CONDA_PREFIX}</span>/conda-bld</span>
<span id="cb30-3"><span class="fu" style="color: #4758AB;">rm</span> <span class="at" style="color: #657422;">-rf</span> <span class="va" style="color: #111111;">$CONDA_BLD_PATH</span></span></code></pre></div>
</section>
<section id="full-build-chain" class="level3">
<h3 class="anchored" data-anchor-id="full-build-chain">Full build chain</h3>
<p>The last step is to add make tasks to build and publish the pip packages and set them as appropriate dependencies for the conda steps.</p>
<p>First, add a task to build the pip installable package:</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb31-1"><span class="ex" style="color: null;">pip:</span> clean</span>
<span id="cb31-2">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">ENV_NAME</span><span class="va" style="color: #111111;">)</span></span>
<span id="cb31-3">    <span class="ex" style="color: null;">poetry</span> build</span></code></pre></div>
<p>Next add tasks to publish to external and internal pip sources:</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb32-1"><span class="ex" style="color: null;">pip_ext_pub:</span> pip</span>
<span id="cb32-2">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">ENV_NAME</span><span class="va" style="color: #111111;">)</span></span>
<span id="cb32-3">    <span class="ex" style="color: null;">poetry</span> publish <span class="at" style="color: #657422;">--repository</span> testpypi</span>
<span id="cb32-4"></span>
<span id="cb32-5"><span class="ex" style="color: null;">pip_int_pub:</span> pip</span>
<span id="cb32-6">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">ENV_NAME</span><span class="va" style="color: #111111;">)</span></span>
<span id="cb32-7">    <span class="ex" style="color: null;">poetry</span> publish <span class="at" style="color: #657422;">--repository</span> localpypi</span></code></pre></div>
<p>Finally as an example we can make wrapper tasks that will publish pip and conda packages to external/internal sources:</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="ex" style="color: null;">all_int_pub:</span> pip_int_pub conda_int_pub</span>
<span id="cb33-2">    <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"publishing to internal conda and pip repository"</span></span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="ex" style="color: null;">all_ext_pub:</span> pip_ext_pub conda_ext_pub</span>
<span id="cb33-5">    <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"publishing to external conda and pip repository"</span></span></code></pre></div>
<p>At this point if you want to build and publish your package you can just run <code>make all_int_pub</code> and it will clear out old build artifacts, build a new pip installable package, upload it to the internal pip package repository, sync the version number with conda, build a conda package and publish that to the internal conda package repository. Not bad!</p>
<p>This is concludes the changes I’m planning to make in this repository. If you just clone the repository as is you should see it in this state, or you can run <code>git checkout eg07</code>.</p>
</section>
</section>
</section>
<section id="conclusion-and-next-steps." class="level1">
<h1>Conclusion and next steps.</h1>
<p>This guide demonstrated how to turn some python code into an installable package, and distribute that package to internal and external users via pip or conda. At the end of this you should be able to reproduce this process for your own project. But there’s always more to do, so what are some next steps to think about?</p>
<p>First of all, a lot of what we’ve done to set this project up would be broadly applicable to any library built under similar circumstances. It’d be a shame to have to rewrite or copy paste that Makefile into every library you build with minor alterations for example. It would be a good idea to use a templating tool like <a href="https://cookiecutter.readthedocs.io/en/latest/">cookiecutter</a> to automate the files and folder structure that will be consistent across projects. Stay tuned, I’m working on putting that together next.</p>
<p>Next, there’s still lots of aspects of developing and maintaining a library that we haven’t touched. Things like linting, testing, coverage reporting… Take a look at the rest of the <a href="https://cjolowicz.github.io/posts/hypermodern-python-01-setup/">Hypermodern Python</a> series for some ideas there.</p>
<p>Finally, I haven’t described how you actually set up an internal package repository for conda or pip packages. I’ll have a follow up post on that coming soon too.</p>
</section>
<section id="resources-ive-consulted" class="level1">
<h1>Resources I’ve consulted</h1>
<p>This section will serve as a link dump for things I’ve referenced while going through this process. In no particular order they are:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=xiI1i525ljE">SciPy 2018 talk - the sheer joy of packaging</a></li>
<li><a href="https://snarky.ca/what-the-heck-is-pyproject-toml/">What the heck is pyproject.toml?</a></li>
<li><a href="https://snarky.ca/a-tutorial-on-python-package-building/">A tutorial on packaging up your python code for pypi</a></li>
<li><a href="https://docs.conda.io/projects/conda-build/en/latest/index.html">conda build docs</a></li>
<li><a href="https://dx13.co.uk/articles/2020/01/02/python-packaging-in-2020/">Python packaging in 2020</a></li>
<li><a href="https://hackersandslackers.com/python-poetry-package-manager/">Package python projects the proper way with poetry</a></li>
<li><a href="https://github.com/dojeda/poetry2conda">poetry2conda</a></li>
<li><a href="https://cjolowicz.github.io/posts/hypermodern-python-01-setup/">Hypermodern Python</a></li>
<li><a href="https://packaging.python.org/guides/hosting-your-own-index/">Host your own index</a></li>
</ul>


</section>

 ]]></description>
  <category>python</category>
  <category>poetry</category>
  <category>conda</category>
  <guid>https://ianepreston.github.io/blog/posts/2020-07-09-pypack.html</guid>
  <pubDate>Thu, 09 Jul 2020 00:00:00 GMT</pubDate>
  <media:content url="https://ianepreston.github.io/blog/posts/pypack/testpypi.PNG " medium="image"/>
</item>
<item>
  <title>Trouble with reproducible conda environments</title>
  <link>https://ianepreston.github.io/blog/posts/2020-05-17-conda.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I’m having trouble making reproducible conda environments. I’ve posted the question below on <a href="https://stackoverflow.com/questions/61778631/whats-wrong-with-how-im-attempting-to-create-a-reproducible-conda-environment">Stack Overflow</a> and <a href="https://www.reddit.com/r/learnpython/comments/giek8i/trouble_creating_reproducible_conda_environments/">Reddit</a> but I’ve got nothing. I’m leaving the question here for easy future reference. If I come up with a solution I’ll update this post.</p>
</section>
<section id="the-question" class="level1">
<h1>The question</h1>
<p>Hi everyone.</p>
<p>I’m really struggling to create a reproducible conda environment. I’ll outline the approach I’ve taken so far and the issue I’ve encountered. I’d appreciate any tips for what I can do to troubleshoot next or resources I could check.</p>
<p>As background, I work on a small team, and want to be able to share a copy of an environment I’ve been using with other members of my team so I can be sure we have identical versions of all the libraries required for our work.</p>
<p>My current workflow is as follows:</p>
<ul>
<li>Write out an environment file with unpinned dependencies and let conda build the environment</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> example_env_build</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">channels</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;">    </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> conda-forge</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;">    </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> defaults</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">dependencies</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;">    </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> pandas</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;">    </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> requests</span></span></code></pre></div>
<p>The actual environment has a lot more stuff in it, but that’s the idea</p>
<ul>
<li>I then create the environment with <code>conda env create -f example_env_build.yml</code></li>
<li>I export the environment so that all versions and their dependencies will be pinned with <code>conda env export -n example_env_build --no-builds --file test_export.yml</code>. I added <code>--no-builds</code> because I was finding the certain builds were getting marked as broken and causing issues and getting the version right seemed close enough for my purposes.</li>
<li>I edit the <code>test_export.yml</code> file and change the name to <code>example_env</code> and remove the <code>prefix</code> line from the bottom.</li>
<li>I build a new environment with this pinned file just to make sure it goes ok, and then share the file with the rest of my team.</li>
</ul>
<p>This has generally worked well if everyone tries to build the environment relatively quickly after the file is created. However, the whole point of being able to specify a reproducible environment is that I should be able to recreate that environment at <em>any</em> time. Someone on my team recently got a new computer so I was trying to help her set up her environment and ran into a series of conflicts. To troubleshoot I tried to rebuild the environment on my machine and ran into the same situation.</p>
<p>For troubleshooting I did the following: * Clone my environment so I have a backup while I mess around <code>conda create --name example_env_clone --clone example_env</code> * Export the environment <code>conda env export -n example_env --no-builds --file example_env_rebuild.yml</code> * Delete the example environment so I can rebuild it <code>conda env remove --name example_env</code> * Try and recreate the environment I just exported <code>conda env create -f example_env_rebuild.yml</code></p>
<p>From there I ran into all sorts of version conflicts. I don’t understand this because a) These are all versions being used in a working environment and b) a lot of the “conflicts” don’t seem to be conflicts to me. As an example, here’s one from my current attempt:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">Package</span> phik conflicts for:</span>
<span id="cb2-2"><span class="va" style="color: #111111;">phik</span><span class="op" style="color: #5E5E5E;">=</span>0.9.10</span>
<span id="cb2-3"><span class="ex" style="color: null;">pandas-profiling=2.4.0</span> <span class="at" style="color: #657422;">-</span><span class="op" style="color: #5E5E5E;">&gt;</span> phik[version=<span class="st" style="color: #20794D;">'&gt;=0.9.8'</span>]</span></code></pre></div>
<p>I picked that one basically at random but there are tons like that. As I read it I’m trying to install phik 0.9.10, and pandas-profiling requires &gt;=0.9.8, which 0.9.10 satisfies.</p>
<p>I’m at my wits end here. I’ve read a million “how to manage conda environments” guides (For example <a href="https://www.leouieda.com/blog/conda-envs.html">this</a>, <a href="https://haveagreatdata.com/posts/data-science-python-dependency-management/">this</a>, and <a href="https://towardsdatascience.com/a-guide-to-conda-environments-bc6180fc533">this</a>) along with the <a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html">conda environment management docs</a>. All of them seem to indicate what I’m doing should work perfectly fine, but my team and I constantly run into issues.</p>
<p>Has anyone had a similar experience? Is there something I’m missing, or a resource I could consult? I’d greatly appreciate any pointers.</p>
<p>Thanks</p>


</section>

 ]]></description>
  <category>python</category>
  <category>conda</category>
  <category>bug</category>
  <guid>https://ianepreston.github.io/blog/posts/2020-05-17-conda.html</guid>
  <pubDate>Sun, 17 May 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to work with conda environments in shell scripts and Makefiles</title>
  <link>https://ianepreston.github.io/blog/posts/2020-05-13-conda_envs.html</link>
  <description><![CDATA[ 




<p>I’ve struggled with automating working with the <code>conda</code> python environment manager for a while. It’s a relatively small part of my work flow so I haven’t made figuring it out a top priority, but it’s really bugging me. In this post I’m going to document the problem and all the troubleshooting steps I went through to resolve it. I’m writing this post in parallel with actually resolving the issue, so it’s going to be a bit stream of consciousness.</p>
<section id="setting-up-the-problem" class="level1">
<h1>Setting up the problem</h1>
<p>I have conda installed. I’m using bash as my shell. I’ve run <code>conda init bash</code> and my version of conda is new enough that this works nicely in interactive mode.</p>
<p>Before I go further describing the problem, I should note which version of conda I’m running, since I know a lot has changed with how it sets itself up, and more may change in the future. This guide is built using Miniconda on Windows 10, running <code>conda 4.8.3</code>.</p>
<p>When I open a new bash terminal I can see from my prompt that I’m in the <code>base</code> environment and I can run <code>conda activate example_env</code> to activate to activate an environment called <code>eg_env</code>. I can get back to <code>base</code> with <code>conda deactivate</code>. Now let’s say I’ve written a python script that’s intended to be run in that environment. I might want to write a shell script to run that file, or use a Makefile to use that script as part of a larger pipeline. To demo and work through this I’m going to make a small conda environment, and a small python script that will only work if I’m in that python environment.</p>
<p>Here’s my <code>env.yml</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> eg_env</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">dependencies</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;">        </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> numpy</span></span></code></pre></div>
<p>Now I create a simple python script, which I should be able to run without issue from that environment, but not from base (I’m using Miniconda so my base env is quite sparse).</p>
<p>Here’s the <code>eg.py</code> file:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb2-2"><span class="bu" style="color: null;">print</span>(np.__version__)</span></code></pre></div>
<p>Just to be sure I’ll try running it from base. I get the following error:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">$</span> python eg.py</span>
<span id="cb3-2"><span class="ex" style="color: null;">Traceback</span> <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">most</span> recent call last<span class="kw" style="color: #003B4F;">)</span><span class="bu" style="color: null;">:</span></span>
<span id="cb3-3">  <span class="ex" style="color: null;">File</span> <span class="st" style="color: #20794D;">"eg.py"</span>, line 1, in <span class="op" style="color: #5E5E5E;">&lt;</span>module<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb3-4">    <span class="ex" style="color: null;">import</span> numpy as np</span>
<span id="cb3-5"><span class="ex" style="color: null;">ModuleNotFoundError:</span> No module named <span class="st" style="color: #20794D;">'numpy'</span></span></code></pre></div>
<p>Running it from my active environment is no problem:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">$</span> python eg.py</span>
<span id="cb4-2"><span class="ex" style="color: null;">1.18.1</span></span></code></pre></div>
<p>Excellent, environment management works! But what if I want to call this from another scripts? This is clearly contrived in this example but there are certainly situations where I might want to do this, and if nothing else it will demonstrate a bit more about how conda works.</p>
<p>So first off, here’s a bash script that just runs the python program:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">#!/bin/bash</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"This is my test bash script"</span></span>
<span id="cb5-4"><span class="ex" style="color: null;">python</span> eg.py</span></code></pre></div>
<p>If I run this script from my base environment, it behaves basically the same as before:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;">$</span> ./eg.sh</span>
<span id="cb6-2"><span class="ex" style="color: null;">This</span> is my test bash script</span>
<span id="cb6-3"><span class="ex" style="color: null;">Traceback</span> <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">most</span> recent call last<span class="kw" style="color: #003B4F;">)</span><span class="bu" style="color: null;">:</span></span>
<span id="cb6-4">  <span class="ex" style="color: null;">File</span> <span class="st" style="color: #20794D;">"eg.py"</span>, line 1, in <span class="op" style="color: #5E5E5E;">&lt;</span>module<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb6-5">    <span class="ex" style="color: null;">import</span> numpy as np</span>
<span id="cb6-6"><span class="ex" style="color: null;">ModuleNotFoundError:</span> No module named <span class="st" style="color: #20794D;">'numpy'</span></span></code></pre></div>
<p>Similarly, if I run it from my example environment it runs just fine:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;">$</span> ./eg.sh</span>
<span id="cb7-2"><span class="ex" style="color: null;">This</span> is my test bash script</span>
<span id="cb7-3"><span class="ex" style="color: null;">1.18.1</span></span></code></pre></div>
<p>Cool. OK, but say I want my script to handle activating the environment for me? Let’s modify it and see what happens:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">#!/bin/bash</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"This is my test bash script"</span></span>
<span id="cb8-4"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Activating conda environment"</span></span>
<span id="cb8-5"><span class="ex" style="color: null;">conda</span> activate eg_env</span>
<span id="cb8-6"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Running python script"</span></span>
<span id="cb8-7"><span class="ex" style="color: null;">python</span> eg.py</span></code></pre></div>
<p>Running this from my base environment I get:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;">$</span> ./eg.sh</span>
<span id="cb9-2"><span class="ex" style="color: null;">This</span> is my test bash script</span>
<span id="cb9-3"><span class="ex" style="color: null;">Activating</span> conda environment</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="ex" style="color: null;">CommandNotFoundError:</span> Your shell has not been properly configured to use <span class="st" style="color: #20794D;">'conda activate'</span>.</span>
<span id="cb9-6"><span class="bu" style="color: null;">.</span></span>
<span id="cb9-7"><span class="bu" style="color: null;">.</span></span>
<span id="cb9-8"><span class="bu" style="color: null;">.</span></span>
<span id="cb9-9"><span class="ex" style="color: null;">Running</span> python script</span>
<span id="cb9-10"><span class="ex" style="color: null;">Traceback</span> <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">most</span> recent call last<span class="kw" style="color: #003B4F;">)</span><span class="bu" style="color: null;">:</span></span>
<span id="cb9-11">  <span class="ex" style="color: null;">File</span> <span class="st" style="color: #20794D;">"eg.py"</span>, line 1, in <span class="op" style="color: #5E5E5E;">&lt;</span>module<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb9-12">    <span class="ex" style="color: null;">import</span> numpy as np</span>
<span id="cb9-13"><span class="ex" style="color: null;">ModuleNotFoundError:</span> No module named <span class="st" style="color: #20794D;">'numpy'</span></span></code></pre></div>
</section>
<section id="whats-going-on" class="level1">
<h1>What’s going on?</h1>
<p>There’s actually some guidance in the full error message from the attempt above. The relevant section is this:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;">CommandNotFoundError:</span> Your shell has not been properly configured to use <span class="st" style="color: #20794D;">'conda activate'</span>.</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="ex" style="color: null;">To</span> initialize your shell, run</span>
<span id="cb10-4"></span>
<span id="cb10-5">    <span class="ex" style="color: null;">$</span> conda init <span class="op" style="color: #5E5E5E;">&lt;</span>SHELL_NAME<span class="op" style="color: #5E5E5E;">&gt;</span></span></code></pre></div>
<p>I’ve already done that for my shell, but apparently it doesn’t apply to subshells launched from that shell. I can’t just put <code>conda init bash</code> in the script, because you need to restart your shell for it to be applied.</p>
<p>As far as I know, all running <code>conda init bash</code> did for me was add a line to my <code>.bash_profile</code> file:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;"># !! Contents within this block are managed by 'conda init' !!</span></span>
<span id="cb11-3"><span class="bu" style="color: null;">eval</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$(</span><span class="st" style="color: #20794D;">'/C/ProgramData/Miniconda3/Scripts/conda.exe'</span> <span class="st" style="color: #20794D;">'shell.bash'</span> <span class="st" style="color: #20794D;">'hook'</span><span class="va" style="color: #111111;">)</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span></span></code></pre></div>
</section>
<section id="possible-solution" class="level1">
<h1>Possible solution</h1>
<p>What happens if I just put that at the top of the script?</p>
<p>Bash script updated:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">#!/bin/bash</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"This is my test bash script"</span></span>
<span id="cb12-4"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Activating conda environment"</span></span>
<span id="cb12-5"><span class="bu" style="color: null;">eval</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$(</span><span class="st" style="color: #20794D;">'/C/ProgramData/Miniconda3/Scripts/conda.exe'</span> <span class="st" style="color: #20794D;">'shell.bash'</span> <span class="st" style="color: #20794D;">'hook'</span><span class="va" style="color: #111111;">)</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb12-6"><span class="ex" style="color: null;">conda</span> activate eg_env</span>
<span id="cb12-7"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Running python script"</span></span>
<span id="cb12-8"><span class="ex" style="color: null;">python</span> eg.py</span></code></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;">$</span> ./eg.sh</span>
<span id="cb13-2"><span class="ex" style="color: null;">This</span> is my test bash script</span>
<span id="cb13-3"><span class="ex" style="color: null;">Activating</span> conda environment</span>
<span id="cb13-4"><span class="ex" style="color: null;">Running</span> python script</span>
<span id="cb13-5"><span class="ex" style="color: null;">1.18.1</span></span></code></pre></div>
<p>It worked! Notably, I’m still in my base environment when the script exits. The activation only happens in the subshell. I also tested running this script from a prompt that was already in that environment and it ran fine as well.</p>
</section>
<section id="possible-problem-and-solution" class="level1">
<h1>Possible problem and solution</h1>
<p>Ok, this works as long as I’m either the only person trying to use this script, or everyone else is also running Miniconda on Windows from a system level install. That seems pretty fragile. Can we improve this?</p>
<p>The <code>which conda</code> command returns the path to your conda install, so I should be able to replace the absolute path with what that returns to get the same result:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">#!/bin/bash</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"This is my test bash script"</span></span>
<span id="cb14-4"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Activating conda environment"</span></span>
<span id="cb14-5"><span class="bu" style="color: null;">eval</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$($(</span><span class="fu" style="color: #4758AB;">which</span> conda<span class="va" style="color: #111111;">)</span> <span class="st" style="color: #20794D;">'shell.bash'</span> <span class="st" style="color: #20794D;">'hook'</span><span class="va" style="color: #111111;">)</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb14-6"><span class="ex" style="color: null;">conda</span> activate eg_env</span>
<span id="cb14-7"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Running python script"</span></span>
<span id="cb14-8"><span class="ex" style="color: null;">python</span> eg.py</span></code></pre></div>
<p>This works too! Getting pretty close to a nice solution.</p>
</section>
<section id="ok-how-about-makefiles" class="level1">
<h1>Ok, how about MakeFiles?</h1>
<p>Because I am fancy, I like to have a MakeFile for my projects, which I can then use to run scripts or series of commands with nice convenient shortcuts. Most of what I do could definitely be accomplished with pure shell scripting, but it will be a little nicer if I can do it with Make, so let’s try.</p>
<p>To make this a little more realistic I’m going to say there are two things I might want to do using <code>make</code> in this project. One might be to format the python file with <code>black</code> and the other might be to run the file. I’ll add <code>black</code> to my example environment, but not my base, which means I’ll have to have the environment activated to format or run the script. I’d like to be able to run the python script directly from the makefile, or run it through a shell script.</p>
<p>In the same folder as my example python and shell scripts I’ll add a <code>Makefile</code>, based off the top answer on <a href="https://stackoverflow.com/questions/53382383/makefile-cant-use-conda-activate">This stackoverflow question</a>:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Oneshell means I can run multiple lines in a recipe in the same shell, so I don't have to</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;"># chain commands together with semicolon</span></span>
<span id="cb15-3"><span class="ex" style="color: null;">.ONESHELL:</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;"># Need to specify bash in order for conda activate to work.</span></span>
<span id="cb15-5"><span class="va" style="color: #111111;">SHELL</span><span class="op" style="color: #5E5E5E;">=</span>/bin/bash</span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;"># Note that the extra activate is needed to ensure that the activate floats env to the front of PATH</span></span>
<span id="cb15-7"><span class="va" style="color: #111111;">CONDA_ACTIVATE</span><span class="op" style="color: #5E5E5E;">=</span>source <span class="va" style="color: #111111;">$$</span><span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">conda</span> info <span class="at" style="color: #657422;">--base</span><span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">/etc/profile.d/conda.sh</span> <span class="kw" style="color: #003B4F;">;</span> <span class="ex" style="color: null;">conda</span> activate <span class="kw" style="color: #003B4F;">;</span> <span class="ex" style="color: null;">conda</span> activate</span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="ex" style="color: null;">test:</span></span>
<span id="cb15-10">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> eg_env</span>
<span id="cb15-11">    <span class="bu" style="color: null;">echo</span> <span class="va" style="color: #111111;">$$</span><span class="er" style="color: #AD0000;">(</span><span class="fu" style="color: #4758AB;">which</span> python<span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb15-12"></span>
<span id="cb15-13"><span class="co" style="color: #5E5E5E;"># format the file with black</span></span>
<span id="cb15-14"><span class="ex" style="color: null;">lint:</span></span>
<span id="cb15-15">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> eg_env</span>
<span id="cb15-16">    <span class="ex" style="color: null;">black</span> eg.py</span>
<span id="cb15-17"></span>
<span id="cb15-18"><span class="co" style="color: #5E5E5E;"># Run the file directly</span></span>
<span id="cb15-19"><span class="ex" style="color: null;">run_py:</span></span>
<span id="cb15-20">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> eg_env</span>
<span id="cb15-21">    <span class="ex" style="color: null;">python</span> eg.py</span>
<span id="cb15-22"></span>
<span id="cb15-23"><span class="co" style="color: #5E5E5E;"># Run the file from a shell script</span></span>
<span id="cb15-24"><span class="ex" style="color: null;">run_sh:</span></span>
<span id="cb15-25">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> eg_env</span>
<span id="cb15-26">    <span class="fu" style="color: #4758AB;">bash</span> eg.sh</span></code></pre></div>
<p>I’m also going to update <code>eg.sh</code> to remove the environment activation I set up earlier, because the idea is that <code>make</code> should be handling this for me now.</p>
<p>All of these work! I’m a little bummed I have to put that <code>$(CONDA_ACTIVATE) eg_env</code> at the top of each recipe, but that’s still pretty solid. I tried adding an <code>active</code> recipe and setting it as a requirement for the other recipes like so:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;">active:</span></span>
<span id="cb16-2">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> eg_env</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="ex" style="color: null;">test:</span> active</span>
<span id="cb16-5">    <span class="bu" style="color: null;">echo</span> <span class="va" style="color: #111111;">$$</span><span class="er" style="color: #AD0000;">(</span><span class="fu" style="color: #4758AB;">which</span> python<span class="kw" style="color: #003B4F;">)</span></span></code></pre></div>
<p>But the activation from <code>active</code> didn’t persist into running <code>test</code>. Maybe there’s a way to get that working but I’m going to call this close enough for my needs.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Getting conda activation to work from within bash and Makefiles is a finicky process. Or at least I don’t have a strong enough understanding of subshells, environment variables conda and probably some other things to make it seem otherwise. That said, the steps outlined in this guide should allow you to automate processes involving conda environments without too much hassle.</p>
</section>
<section id="the-final-scripts" class="level1">
<h1>The final scripts</h1>
<p>For reference, here’s the final form of what I used to setup and test this demo:</p>
<section id="makefile" class="level2">
<h2 class="anchored" data-anchor-id="makefile">Makefile</h2>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Oneshell means I can run multiple lines in a recipe in the same shell, so I don't have to</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;"># chain commands together with semicolon</span></span>
<span id="cb17-3"><span class="ex" style="color: null;">.ONESHELL:</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;"># Need to specify bash in order for conda activate to work.</span></span>
<span id="cb17-5"><span class="va" style="color: #111111;">SHELL</span><span class="op" style="color: #5E5E5E;">=</span>/bin/bash</span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;"># Note that the extra activate is needed to ensure that the activate floats env to the front of PATH</span></span>
<span id="cb17-7"><span class="va" style="color: #111111;">CONDA_ACTIVATE</span><span class="op" style="color: #5E5E5E;">=</span>source <span class="va" style="color: #111111;">$$</span><span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">conda</span> info <span class="at" style="color: #657422;">--base</span><span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">/etc/profile.d/conda.sh</span> <span class="kw" style="color: #003B4F;">;</span> <span class="ex" style="color: null;">conda</span> activate <span class="kw" style="color: #003B4F;">;</span> <span class="ex" style="color: null;">conda</span> activate</span>
<span id="cb17-8"></span>
<span id="cb17-9"><span class="ex" style="color: null;">test:</span></span>
<span id="cb17-10">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> eg_env</span>
<span id="cb17-11">    <span class="bu" style="color: null;">echo</span> <span class="va" style="color: #111111;">$$</span><span class="er" style="color: #AD0000;">(</span><span class="fu" style="color: #4758AB;">which</span> python<span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb17-12"></span>
<span id="cb17-13"><span class="co" style="color: #5E5E5E;"># format the file with black</span></span>
<span id="cb17-14"><span class="ex" style="color: null;">lint:</span></span>
<span id="cb17-15">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> eg_env</span>
<span id="cb17-16">    <span class="ex" style="color: null;">black</span> eg.py</span>
<span id="cb17-17"></span>
<span id="cb17-18"><span class="co" style="color: #5E5E5E;"># Run the file directly</span></span>
<span id="cb17-19"><span class="ex" style="color: null;">run_py:</span></span>
<span id="cb17-20">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> eg_env</span>
<span id="cb17-21">    <span class="ex" style="color: null;">python</span> eg.py</span>
<span id="cb17-22"></span>
<span id="cb17-23"><span class="co" style="color: #5E5E5E;"># Run the file from a shell script</span></span>
<span id="cb17-24"><span class="ex" style="color: null;">run_sh:</span></span>
<span id="cb17-25">    <span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">CONDA_ACTIVATE</span><span class="va" style="color: #111111;">)</span> eg_env</span>
<span id="cb17-26">    <span class="fu" style="color: #4758AB;">bash</span> eg.sh</span></code></pre></div>
</section>
<section id="env.yml" class="level2">
<h2 class="anchored" data-anchor-id="env.yml">env.yml</h2>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb18-1"><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> eg_env</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;">dependencies</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb18-3"><span class="at" style="color: #657422;">    </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> numpy</span></span>
<span id="cb18-4"><span class="at" style="color: #657422;">    </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> black</span></span></code></pre></div>
</section>
<section id="eg.py" class="level2">
<h2 class="anchored" data-anchor-id="eg.py">eg.py</h2>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="bu" style="color: null;">print</span>(np.__version__)</span></code></pre></div>
</section>
<section id="eg.sh-for-makefile" class="level2">
<h2 class="anchored" data-anchor-id="eg.sh-for-makefile">eg.sh (for makefile)</h2>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="co" style="color: #5E5E5E;">#!/bin/bash</span></span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"This is my test bash script"</span></span>
<span id="cb20-4"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Running python script"</span></span>
<span id="cb20-5"><span class="ex" style="color: null;">python</span> eg.py</span></code></pre></div>
</section>
<section id="eg.sh-standalone" class="level2">
<h2 class="anchored" data-anchor-id="eg.sh-standalone">eg.sh (standalone)</h2>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="co" style="color: #5E5E5E;">#!/bin/bash</span></span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"This is my test bash script"</span></span>
<span id="cb21-4"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Activating conda environment"</span></span>
<span id="cb21-5"><span class="bu" style="color: null;">eval</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$($(</span><span class="fu" style="color: #4758AB;">which</span> conda<span class="va" style="color: #111111;">)</span> <span class="st" style="color: #20794D;">'shell.bash'</span> <span class="st" style="color: #20794D;">'hook'</span><span class="va" style="color: #111111;">)</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb21-6"><span class="ex" style="color: null;">conda</span> activate eg_env</span>
<span id="cb21-7"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Running python script"</span></span>
<span id="cb21-8"><span class="ex" style="color: null;">python</span> eg.py</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>conda</category>
  <category>python</category>
  <category>bash</category>
  <guid>https://ianepreston.github.io/blog/posts/2020-05-13-conda_envs.html</guid>
  <pubDate>Wed, 13 May 2020 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
